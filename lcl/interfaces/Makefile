#
# Don't edit, this file is generated by FPCMake Version 2.0.0
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-haiku i386-netbsd i386-solaris i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian i386-nativent i386-iphonesim i386-android i386-aros m68k-linux m68k-netbsd m68k-amiga m68k-atari m68k-palmos m68k-macosclassic m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macosclassic powerpc-darwin powerpc-morphos powerpc-embedded powerpc-wii powerpc-aix sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-haiku x86_64-netbsd x86_64-solaris x86_64-openbsd x86_64-darwin x86_64-win64 x86_64-embedded x86_64-iphonesim x86_64-android x86_64-aros x86_64-dragonfly arm-linux arm-netbsd arm-palmos arm-wince arm-gba arm-nds arm-embedded arm-symbian arm-android arm-aros arm-ios powerpc64-linux powerpc64-darwin powerpc64-embedded powerpc64-aix avr-embedded armeb-linux armeb-embedded mips-linux mipsel-linux mipsel-embedded mipsel-android jvm-java jvm-android i8086-embedded i8086-msdos i8086-win16 aarch64-linux aarch64-darwin aarch64-android aarch64-ios wasm-wasm sparc64-linux
BSDs = freebsd netbsd openbsd darwin dragonfly
UNIXs = linux $(BSDs) solaris qnx haiku aix
LIMIT83fs = go32v2 os2 emx watcom msdos win16 atari
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifeq ($(FULL_TARGET),arm-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),avr-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for avr-embedded, a sub-architecture (e.g. SUBARCH=avr25 or SUBARCH=avr35) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for mipsel-embedded, a sub-architecture (e.g. SUBARCH=pic32mx) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
ifndef CROSSCOMPILE
BUILDFULLNATIVE=1
export BUILDFULLNATIVE
endif
ifdef BUILDFULLNATIVE
BUILDNATIVE=1
export BUILDNATIVE
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
ifneq ($(findstring $(OS_SOURCE),darwin ios),)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifneq ($(OS_TARGET),msdos)
ifndef DARWIN2DARWIN
ifneq ($(CPU_TARGET),jvm)
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
ifeq ($(OS_TARGET),android)
ifeq ($(CPU_TARGET),arm)
BINUTILSPREFIX=arm-linux-androideabi-
else
ifeq ($(CPU_TARGET),i386)
BINUTILSPREFIX=i686-linux-android-
else
BINUTILSPREFIX=$(CPU_TARGET)-linux-android-
endif
endif
endif
endif
endif
else
BINUTILSPREFIX=$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
override PACKAGE_NAME=lcl
PACKAGEDIR_MAIN:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /lcl/Makefile.fpc,$(PACKAGESDIR))))))
ifndef LCL_PLATFORM
ifneq ($(findstring $(OS_TARGET),win32 win64),)
LCL_PLATFORM=win32
else
ifeq ($(OS_TARGET),wince)
LCL_PLATFORM=wince
else
ifeq ($(OS_TARGET),darwin)
LCL_PLATFORM=cocoa
else
ifneq ($(findstring $(OS_TARGET),amiga aros morphos),)
LCL_PLATFORM=mui
else
LCL_PLATFORM=gtk2
endif
endif
endif
endif
endif
export LCL_PLATFORM
override DEFAULT_DIR=$(LCL_PLATFORM)
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-android)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-android)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-aros)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-netbsd)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-android)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-aros)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),arm-ios)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),mipsel-android)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),jvm-java)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),jvm-android)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i8086-embedded)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i8086-msdos)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),i8086-win16)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),aarch64-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),aarch64-android)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),aarch64-ios)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),wasm-wasm)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifeq ($(FULL_TARGET),sparc64-linux)
override TARGET_DIRS+=gtk gtk2 gtk3 win32 wince qt qt5 qt6 carbon fpgui nogui cocoa customdrawn mui
endif
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifneq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),dragonfly)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=df
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),aros)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=aros
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macosclassic)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aix)
BATCHEXT=.sh
EXEEXT=
SHAREDLIBEXT=.a
SHORTSUFFIX=aix
endif
ifeq ($(OS_TARGET),java)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=java
endif
ifeq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=android
endif
endif
ifeq ($(OS_TARGET),msdos)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHORTSUFFIX=d16
endif
ifeq ($(OS_TARGET),embedded)
ifeq ($(CPU_TARGET),i8086)
STATICLIBPREFIX=
STATICLIBEXT=.a
else
EXEEXT=.bin
endif
SHORTSUFFIX=emb
endif
ifeq ($(OS_TARGET),win16)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHAREDLIBEXT=.dll
SHORTSUFFIX=w16
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
NASMNAME=$(BINUTILSPREFIX)nasm
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
ifndef NASMPROG
ifdef CROSSBINDIR
NASMPROG=$(CROSSBINDIR)/$(NASMNAME)$(SRCEXEEXT)
else
NASMPROG=$(NASMNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
NASM=$(NASMPROG)
ifdef inUnix
PPAS=./ppas$(SRCBATCHEXT)
else
PPAS=ppas$(SRCBATCHEXT)
endif
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifeq ($(FULL_TARGET),i386-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-win32)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-os2)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-beos)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-netware)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-emx)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-wince)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-android)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i386-aros)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-android)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-aros)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-netbsd)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-wince)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-gba)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-nds)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-android)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-aros)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),arm-ios)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),mips-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),jvm-java)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),jvm-android)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i8086-embedded)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),i8086-win16)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),aarch64-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),aarch64-android)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),aarch64-ios)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),wasm-wasm)
REQUIRE_PACKAGES_RTL=1
endif
ifeq ($(FULL_TARGET),sparc64-linux)
REQUIRE_PACKAGES_RTL=1
endif
ifdef REQUIRE_PACKAGES_RTL
PACKAGEDIR_RTL:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /rtl/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_RTL),)
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)),)
UNITDIR_RTL=$(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)
else
UNITDIR_RTL=$(PACKAGEDIR_RTL)
endif
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_RTL)/$(OS_TARGET) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE)
endif
else
PACKAGEDIR_RTL=
UNITDIR_RTL:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /rtl/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_RTL),)
UNITDIR_RTL:=$(firstword $(UNITDIR_RTL))
else
UNITDIR_RTL=
endif
endif
ifdef UNITDIR_RTL
override COMPILER_UNITDIR+=$(UNITDIR_RTL)
endif
ifdef UNITDIR_FPMAKE_RTL
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_RTL)
endif
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
override FPMAKE_BUILD_OPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
override FPMAKE_BUILD_OPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
FPCCPUOPT:=-O2
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
endif
ifneq ($(findstring $(OS_TARGET),dragonfly freebsd openbsd netbsd linux solaris),)
ifneq ($(findstring $(CPU_TARGET),x86_64 mips mipsel),)
override FPCOPT+=-Cg
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPMAKEBUILDOPT
override FPMAKE_BUILD_OPT+=$(FPMAKEBUILDOPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(strip $(FPC) $(FPCOPT))
ifneq (,$(findstring -sh ,$(COMPILER)))
UseEXECPPAS=1
endif
ifneq (,$(findstring -s ,$(COMPILER)))
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
UseEXECPPAS=1
endif
endif
ifneq ($(UseEXECPPAS),1)
EXECPPAS=
else
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALL_BUILDUNIT
override INSTALLPPUFILES:=$(filter-out $(INSTALL_BUILDUNIT)$(PPUEXT),$(INSTALLPPUFILES))
endif
ifdef INSTALLPPUFILES
ifneq ($(IMPORTLIBPREFIX)-$(STATICLIBEXT),$(STATICLIBPREFIX)-$(STATICLIBEXT))
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
else
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
endif
ifneq ($(UNITTARGETDIRPREFIX),)
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPUFILES)))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPULINKFILES))))
endif
override INSTALL_CREATEPACKAGEFPC=1
endif
ifdef INSTALLEXEFILES
ifneq ($(TARGETDIRPREFIX),)
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(notdir $(INSTALLEXEFILES)))
endif
endif
fpc_install: all $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALL_CREATEPACKAGEFPC
ifdef FPCMAKE
ifdef PACKAGE_VERSION
ifneq ($(wildcard Makefile.fpc),)
	$(FPCMAKE) -p -T$(CPU_TARGET)-$(OS_TARGET) Makefile.fpc
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) Package.fpc $(INSTALL_UNITDIR)
endif
endif
endif
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR)/* $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(EXAMPLEINSTALLTARGET) $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef HASEXAMPLES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
ifdef EXAMPLESOURCEFILES
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DELTREE) bin
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
ifdef LOCALFPMAKEBIN
	-$(DEL) $(LOCALFPMAKEBIN)
	-$(DEL) $(FPMAKEBINOBJ)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-android)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i386-aros)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-android)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-aros)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-netbsd)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-android)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-aros)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),arm-ios)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),mips-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),jvm-java)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),jvm-android)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i8086-embedded)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),i8086-win16)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),aarch64-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),aarch64-android)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),aarch64-ios)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),wasm-wasm)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifeq ($(FULL_TARGET),sparc64-linux)
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_GTK3=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_WINCE=1
TARGET_DIRS_QT=1
TARGET_DIRS_QT5=1
TARGET_DIRS_QT6=1
TARGET_DIRS_CARBON=1
TARGET_DIRS_FPGUI=1
TARGET_DIRS_NOGUI=1
TARGET_DIRS_COCOA=1
TARGET_DIRS_CUSTOMDRAWN=1
TARGET_DIRS_MUI=1
endif
ifdef TARGET_DIRS_GTK
gtk_all:
	$(MAKE) -C gtk all
gtk_debug:
	$(MAKE) -C gtk debug
gtk_smart:
	$(MAKE) -C gtk smart
gtk_release:
	$(MAKE) -C gtk release
gtk_units:
	$(MAKE) -C gtk units
gtk_examples:
	$(MAKE) -C gtk examples
gtk_shared:
	$(MAKE) -C gtk shared
gtk_install:
	$(MAKE) -C gtk install
gtk_sourceinstall:
	$(MAKE) -C gtk sourceinstall
gtk_exampleinstall:
	$(MAKE) -C gtk exampleinstall
gtk_distinstall:
	$(MAKE) -C gtk distinstall
gtk_zipinstall:
	$(MAKE) -C gtk zipinstall
gtk_zipsourceinstall:
	$(MAKE) -C gtk zipsourceinstall
gtk_zipexampleinstall:
	$(MAKE) -C gtk zipexampleinstall
gtk_zipdistinstall:
	$(MAKE) -C gtk zipdistinstall
gtk_clean:
	$(MAKE) -C gtk clean
gtk_distclean:
	$(MAKE) -C gtk distclean
gtk_cleanall:
	$(MAKE) -C gtk cleanall
gtk_info:
	$(MAKE) -C gtk info
gtk_makefiles:
	$(MAKE) -C gtk makefiles
gtk:
	$(MAKE) -C gtk all
.PHONY: gtk_all gtk_debug gtk_smart gtk_release gtk_units gtk_examples gtk_shared gtk_install gtk_sourceinstall gtk_exampleinstall gtk_distinstall gtk_zipinstall gtk_zipsourceinstall gtk_zipexampleinstall gtk_zipdistinstall gtk_clean gtk_distclean gtk_cleanall gtk_info gtk_makefiles gtk
endif
ifdef TARGET_DIRS_GTK2
gtk2_all:
	$(MAKE) -C gtk2 all
gtk2_debug:
	$(MAKE) -C gtk2 debug
gtk2_smart:
	$(MAKE) -C gtk2 smart
gtk2_release:
	$(MAKE) -C gtk2 release
gtk2_units:
	$(MAKE) -C gtk2 units
gtk2_examples:
	$(MAKE) -C gtk2 examples
gtk2_shared:
	$(MAKE) -C gtk2 shared
gtk2_install:
	$(MAKE) -C gtk2 install
gtk2_sourceinstall:
	$(MAKE) -C gtk2 sourceinstall
gtk2_exampleinstall:
	$(MAKE) -C gtk2 exampleinstall
gtk2_distinstall:
	$(MAKE) -C gtk2 distinstall
gtk2_zipinstall:
	$(MAKE) -C gtk2 zipinstall
gtk2_zipsourceinstall:
	$(MAKE) -C gtk2 zipsourceinstall
gtk2_zipexampleinstall:
	$(MAKE) -C gtk2 zipexampleinstall
gtk2_zipdistinstall:
	$(MAKE) -C gtk2 zipdistinstall
gtk2_clean:
	$(MAKE) -C gtk2 clean
gtk2_distclean:
	$(MAKE) -C gtk2 distclean
gtk2_cleanall:
	$(MAKE) -C gtk2 cleanall
gtk2_info:
	$(MAKE) -C gtk2 info
gtk2_makefiles:
	$(MAKE) -C gtk2 makefiles
gtk2:
	$(MAKE) -C gtk2 all
.PHONY: gtk2_all gtk2_debug gtk2_smart gtk2_release gtk2_units gtk2_examples gtk2_shared gtk2_install gtk2_sourceinstall gtk2_exampleinstall gtk2_distinstall gtk2_zipinstall gtk2_zipsourceinstall gtk2_zipexampleinstall gtk2_zipdistinstall gtk2_clean gtk2_distclean gtk2_cleanall gtk2_info gtk2_makefiles gtk2
endif
ifdef TARGET_DIRS_GTK3
gtk3_all:
	$(MAKE) -C gtk3 all
gtk3_debug:
	$(MAKE) -C gtk3 debug
gtk3_smart:
	$(MAKE) -C gtk3 smart
gtk3_release:
	$(MAKE) -C gtk3 release
gtk3_units:
	$(MAKE) -C gtk3 units
gtk3_examples:
	$(MAKE) -C gtk3 examples
gtk3_shared:
	$(MAKE) -C gtk3 shared
gtk3_install:
	$(MAKE) -C gtk3 install
gtk3_sourceinstall:
	$(MAKE) -C gtk3 sourceinstall
gtk3_exampleinstall:
	$(MAKE) -C gtk3 exampleinstall
gtk3_distinstall:
	$(MAKE) -C gtk3 distinstall
gtk3_zipinstall:
	$(MAKE) -C gtk3 zipinstall
gtk3_zipsourceinstall:
	$(MAKE) -C gtk3 zipsourceinstall
gtk3_zipexampleinstall:
	$(MAKE) -C gtk3 zipexampleinstall
gtk3_zipdistinstall:
	$(MAKE) -C gtk3 zipdistinstall
gtk3_clean:
	$(MAKE) -C gtk3 clean
gtk3_distclean:
	$(MAKE) -C gtk3 distclean
gtk3_cleanall:
	$(MAKE) -C gtk3 cleanall
gtk3_info:
	$(MAKE) -C gtk3 info
gtk3_makefiles:
	$(MAKE) -C gtk3 makefiles
gtk3:
	$(MAKE) -C gtk3 all
.PHONY: gtk3_all gtk3_debug gtk3_smart gtk3_release gtk3_units gtk3_examples gtk3_shared gtk3_install gtk3_sourceinstall gtk3_exampleinstall gtk3_distinstall gtk3_zipinstall gtk3_zipsourceinstall gtk3_zipexampleinstall gtk3_zipdistinstall gtk3_clean gtk3_distclean gtk3_cleanall gtk3_info gtk3_makefiles gtk3
endif
ifdef TARGET_DIRS_WIN32
win32_all:
	$(MAKE) -C win32 all
win32_debug:
	$(MAKE) -C win32 debug
win32_smart:
	$(MAKE) -C win32 smart
win32_release:
	$(MAKE) -C win32 release
win32_units:
	$(MAKE) -C win32 units
win32_examples:
	$(MAKE) -C win32 examples
win32_shared:
	$(MAKE) -C win32 shared
win32_install:
	$(MAKE) -C win32 install
win32_sourceinstall:
	$(MAKE) -C win32 sourceinstall
win32_exampleinstall:
	$(MAKE) -C win32 exampleinstall
win32_distinstall:
	$(MAKE) -C win32 distinstall
win32_zipinstall:
	$(MAKE) -C win32 zipinstall
win32_zipsourceinstall:
	$(MAKE) -C win32 zipsourceinstall
win32_zipexampleinstall:
	$(MAKE) -C win32 zipexampleinstall
win32_zipdistinstall:
	$(MAKE) -C win32 zipdistinstall
win32_clean:
	$(MAKE) -C win32 clean
win32_distclean:
	$(MAKE) -C win32 distclean
win32_cleanall:
	$(MAKE) -C win32 cleanall
win32_info:
	$(MAKE) -C win32 info
win32_makefiles:
	$(MAKE) -C win32 makefiles
win32:
	$(MAKE) -C win32 all
.PHONY: win32_all win32_debug win32_smart win32_release win32_units win32_examples win32_shared win32_install win32_sourceinstall win32_exampleinstall win32_distinstall win32_zipinstall win32_zipsourceinstall win32_zipexampleinstall win32_zipdistinstall win32_clean win32_distclean win32_cleanall win32_info win32_makefiles win32
endif
ifdef TARGET_DIRS_WINCE
wince_all:
	$(MAKE) -C wince all
wince_debug:
	$(MAKE) -C wince debug
wince_smart:
	$(MAKE) -C wince smart
wince_release:
	$(MAKE) -C wince release
wince_units:
	$(MAKE) -C wince units
wince_examples:
	$(MAKE) -C wince examples
wince_shared:
	$(MAKE) -C wince shared
wince_install:
	$(MAKE) -C wince install
wince_sourceinstall:
	$(MAKE) -C wince sourceinstall
wince_exampleinstall:
	$(MAKE) -C wince exampleinstall
wince_distinstall:
	$(MAKE) -C wince distinstall
wince_zipinstall:
	$(MAKE) -C wince zipinstall
wince_zipsourceinstall:
	$(MAKE) -C wince zipsourceinstall
wince_zipexampleinstall:
	$(MAKE) -C wince zipexampleinstall
wince_zipdistinstall:
	$(MAKE) -C wince zipdistinstall
wince_clean:
	$(MAKE) -C wince clean
wince_distclean:
	$(MAKE) -C wince distclean
wince_cleanall:
	$(MAKE) -C wince cleanall
wince_info:
	$(MAKE) -C wince info
wince_makefiles:
	$(MAKE) -C wince makefiles
wince:
	$(MAKE) -C wince all
.PHONY: wince_all wince_debug wince_smart wince_release wince_units wince_examples wince_shared wince_install wince_sourceinstall wince_exampleinstall wince_distinstall wince_zipinstall wince_zipsourceinstall wince_zipexampleinstall wince_zipdistinstall wince_clean wince_distclean wince_cleanall wince_info wince_makefiles wince
endif
ifdef TARGET_DIRS_QT
qt_all:
	$(MAKE) -C qt all
qt_debug:
	$(MAKE) -C qt debug
qt_smart:
	$(MAKE) -C qt smart
qt_release:
	$(MAKE) -C qt release
qt_units:
	$(MAKE) -C qt units
qt_examples:
	$(MAKE) -C qt examples
qt_shared:
	$(MAKE) -C qt shared
qt_install:
	$(MAKE) -C qt install
qt_sourceinstall:
	$(MAKE) -C qt sourceinstall
qt_exampleinstall:
	$(MAKE) -C qt exampleinstall
qt_distinstall:
	$(MAKE) -C qt distinstall
qt_zipinstall:
	$(MAKE) -C qt zipinstall
qt_zipsourceinstall:
	$(MAKE) -C qt zipsourceinstall
qt_zipexampleinstall:
	$(MAKE) -C qt zipexampleinstall
qt_zipdistinstall:
	$(MAKE) -C qt zipdistinstall
qt_clean:
	$(MAKE) -C qt clean
qt_distclean:
	$(MAKE) -C qt distclean
qt_cleanall:
	$(MAKE) -C qt cleanall
qt_info:
	$(MAKE) -C qt info
qt_makefiles:
	$(MAKE) -C qt makefiles
qt:
	$(MAKE) -C qt all
.PHONY: qt_all qt_debug qt_smart qt_release qt_units qt_examples qt_shared qt_install qt_sourceinstall qt_exampleinstall qt_distinstall qt_zipinstall qt_zipsourceinstall qt_zipexampleinstall qt_zipdistinstall qt_clean qt_distclean qt_cleanall qt_info qt_makefiles qt
endif
ifdef TARGET_DIRS_QT5
qt5_all:
	$(MAKE) -C qt5 all
qt5_debug:
	$(MAKE) -C qt5 debug
qt5_smart:
	$(MAKE) -C qt5 smart
qt5_release:
	$(MAKE) -C qt5 release
qt5_units:
	$(MAKE) -C qt5 units
qt5_examples:
	$(MAKE) -C qt5 examples
qt5_shared:
	$(MAKE) -C qt5 shared
qt5_install:
	$(MAKE) -C qt5 install
qt5_sourceinstall:
	$(MAKE) -C qt5 sourceinstall
qt5_exampleinstall:
	$(MAKE) -C qt5 exampleinstall
qt5_distinstall:
	$(MAKE) -C qt5 distinstall
qt5_zipinstall:
	$(MAKE) -C qt5 zipinstall
qt5_zipsourceinstall:
	$(MAKE) -C qt5 zipsourceinstall
qt5_zipexampleinstall:
	$(MAKE) -C qt5 zipexampleinstall
qt5_zipdistinstall:
	$(MAKE) -C qt5 zipdistinstall
qt5_clean:
	$(MAKE) -C qt5 clean
qt5_distclean:
	$(MAKE) -C qt5 distclean
qt5_cleanall:
	$(MAKE) -C qt5 cleanall
qt5_info:
	$(MAKE) -C qt5 info
qt5_makefiles:
	$(MAKE) -C qt5 makefiles
qt5:
	$(MAKE) -C qt5 all
.PHONY: qt5_all qt5_debug qt5_smart qt5_release qt5_units qt5_examples qt5_shared qt5_install qt5_sourceinstall qt5_exampleinstall qt5_distinstall qt5_zipinstall qt5_zipsourceinstall qt5_zipexampleinstall qt5_zipdistinstall qt5_clean qt5_distclean qt5_cleanall qt5_info qt5_makefiles qt5
endif
ifdef TARGET_DIRS_QT6
qt6_all:
	$(MAKE) -C qt6 all
qt6_debug:
	$(MAKE) -C qt6 debug
qt6_smart:
	$(MAKE) -C qt6 smart
qt6_release:
	$(MAKE) -C qt6 release
qt6_units:
	$(MAKE) -C qt6 units
qt6_examples:
	$(MAKE) -C qt6 examples
qt6_shared:
	$(MAKE) -C qt6 shared
qt6_install:
	$(MAKE) -C qt6 install
qt6_sourceinstall:
	$(MAKE) -C qt6 sourceinstall
qt6_exampleinstall:
	$(MAKE) -C qt6 exampleinstall
qt6_distinstall:
	$(MAKE) -C qt6 distinstall
qt6_zipinstall:
	$(MAKE) -C qt6 zipinstall
qt6_zipsourceinstall:
	$(MAKE) -C qt6 zipsourceinstall
qt6_zipexampleinstall:
	$(MAKE) -C qt6 zipexampleinstall
qt6_zipdistinstall:
	$(MAKE) -C qt6 zipdistinstall
qt6_clean:
	$(MAKE) -C qt6 clean
qt6_distclean:
	$(MAKE) -C qt6 distclean
qt6_cleanall:
	$(MAKE) -C qt6 cleanall
qt6_info:
	$(MAKE) -C qt6 info
qt6_makefiles:
	$(MAKE) -C qt6 makefiles
qt6:
	$(MAKE) -C qt6 all
.PHONY: qt6_all qt6_debug qt6_smart qt6_release qt6_units qt6_examples qt6_shared qt6_install qt6_sourceinstall qt6_exampleinstall qt6_distinstall qt6_zipinstall qt6_zipsourceinstall qt6_zipexampleinstall qt6_zipdistinstall qt6_clean qt6_distclean qt6_cleanall qt6_info qt6_makefiles qt6
endif
ifdef TARGET_DIRS_CARBON
carbon_all:
	$(MAKE) -C carbon all
carbon_debug:
	$(MAKE) -C carbon debug
carbon_smart:
	$(MAKE) -C carbon smart
carbon_release:
	$(MAKE) -C carbon release
carbon_units:
	$(MAKE) -C carbon units
carbon_examples:
	$(MAKE) -C carbon examples
carbon_shared:
	$(MAKE) -C carbon shared
carbon_install:
	$(MAKE) -C carbon install
carbon_sourceinstall:
	$(MAKE) -C carbon sourceinstall
carbon_exampleinstall:
	$(MAKE) -C carbon exampleinstall
carbon_distinstall:
	$(MAKE) -C carbon distinstall
carbon_zipinstall:
	$(MAKE) -C carbon zipinstall
carbon_zipsourceinstall:
	$(MAKE) -C carbon zipsourceinstall
carbon_zipexampleinstall:
	$(MAKE) -C carbon zipexampleinstall
carbon_zipdistinstall:
	$(MAKE) -C carbon zipdistinstall
carbon_clean:
	$(MAKE) -C carbon clean
carbon_distclean:
	$(MAKE) -C carbon distclean
carbon_cleanall:
	$(MAKE) -C carbon cleanall
carbon_info:
	$(MAKE) -C carbon info
carbon_makefiles:
	$(MAKE) -C carbon makefiles
carbon:
	$(MAKE) -C carbon all
.PHONY: carbon_all carbon_debug carbon_smart carbon_release carbon_units carbon_examples carbon_shared carbon_install carbon_sourceinstall carbon_exampleinstall carbon_distinstall carbon_zipinstall carbon_zipsourceinstall carbon_zipexampleinstall carbon_zipdistinstall carbon_clean carbon_distclean carbon_cleanall carbon_info carbon_makefiles carbon
endif
ifdef TARGET_DIRS_FPGUI
fpgui_all:
	$(MAKE) -C fpgui all
fpgui_debug:
	$(MAKE) -C fpgui debug
fpgui_smart:
	$(MAKE) -C fpgui smart
fpgui_release:
	$(MAKE) -C fpgui release
fpgui_units:
	$(MAKE) -C fpgui units
fpgui_examples:
	$(MAKE) -C fpgui examples
fpgui_shared:
	$(MAKE) -C fpgui shared
fpgui_install:
	$(MAKE) -C fpgui install
fpgui_sourceinstall:
	$(MAKE) -C fpgui sourceinstall
fpgui_exampleinstall:
	$(MAKE) -C fpgui exampleinstall
fpgui_distinstall:
	$(MAKE) -C fpgui distinstall
fpgui_zipinstall:
	$(MAKE) -C fpgui zipinstall
fpgui_zipsourceinstall:
	$(MAKE) -C fpgui zipsourceinstall
fpgui_zipexampleinstall:
	$(MAKE) -C fpgui zipexampleinstall
fpgui_zipdistinstall:
	$(MAKE) -C fpgui zipdistinstall
fpgui_clean:
	$(MAKE) -C fpgui clean
fpgui_distclean:
	$(MAKE) -C fpgui distclean
fpgui_cleanall:
	$(MAKE) -C fpgui cleanall
fpgui_info:
	$(MAKE) -C fpgui info
fpgui_makefiles:
	$(MAKE) -C fpgui makefiles
fpgui:
	$(MAKE) -C fpgui all
.PHONY: fpgui_all fpgui_debug fpgui_smart fpgui_release fpgui_units fpgui_examples fpgui_shared fpgui_install fpgui_sourceinstall fpgui_exampleinstall fpgui_distinstall fpgui_zipinstall fpgui_zipsourceinstall fpgui_zipexampleinstall fpgui_zipdistinstall fpgui_clean fpgui_distclean fpgui_cleanall fpgui_info fpgui_makefiles fpgui
endif
ifdef TARGET_DIRS_NOGUI
nogui_all:
	$(MAKE) -C nogui all
nogui_debug:
	$(MAKE) -C nogui debug
nogui_smart:
	$(MAKE) -C nogui smart
nogui_release:
	$(MAKE) -C nogui release
nogui_units:
	$(MAKE) -C nogui units
nogui_examples:
	$(MAKE) -C nogui examples
nogui_shared:
	$(MAKE) -C nogui shared
nogui_install:
	$(MAKE) -C nogui install
nogui_sourceinstall:
	$(MAKE) -C nogui sourceinstall
nogui_exampleinstall:
	$(MAKE) -C nogui exampleinstall
nogui_distinstall:
	$(MAKE) -C nogui distinstall
nogui_zipinstall:
	$(MAKE) -C nogui zipinstall
nogui_zipsourceinstall:
	$(MAKE) -C nogui zipsourceinstall
nogui_zipexampleinstall:
	$(MAKE) -C nogui zipexampleinstall
nogui_zipdistinstall:
	$(MAKE) -C nogui zipdistinstall
nogui_clean:
	$(MAKE) -C nogui clean
nogui_distclean:
	$(MAKE) -C nogui distclean
nogui_cleanall:
	$(MAKE) -C nogui cleanall
nogui_info:
	$(MAKE) -C nogui info
nogui_makefiles:
	$(MAKE) -C nogui makefiles
nogui:
	$(MAKE) -C nogui all
.PHONY: nogui_all nogui_debug nogui_smart nogui_release nogui_units nogui_examples nogui_shared nogui_install nogui_sourceinstall nogui_exampleinstall nogui_distinstall nogui_zipinstall nogui_zipsourceinstall nogui_zipexampleinstall nogui_zipdistinstall nogui_clean nogui_distclean nogui_cleanall nogui_info nogui_makefiles nogui
endif
ifdef TARGET_DIRS_COCOA
cocoa_all:
	$(MAKE) -C cocoa all
cocoa_debug:
	$(MAKE) -C cocoa debug
cocoa_smart:
	$(MAKE) -C cocoa smart
cocoa_release:
	$(MAKE) -C cocoa release
cocoa_units:
	$(MAKE) -C cocoa units
cocoa_examples:
	$(MAKE) -C cocoa examples
cocoa_shared:
	$(MAKE) -C cocoa shared
cocoa_install:
	$(MAKE) -C cocoa install
cocoa_sourceinstall:
	$(MAKE) -C cocoa sourceinstall
cocoa_exampleinstall:
	$(MAKE) -C cocoa exampleinstall
cocoa_distinstall:
	$(MAKE) -C cocoa distinstall
cocoa_zipinstall:
	$(MAKE) -C cocoa zipinstall
cocoa_zipsourceinstall:
	$(MAKE) -C cocoa zipsourceinstall
cocoa_zipexampleinstall:
	$(MAKE) -C cocoa zipexampleinstall
cocoa_zipdistinstall:
	$(MAKE) -C cocoa zipdistinstall
cocoa_clean:
	$(MAKE) -C cocoa clean
cocoa_distclean:
	$(MAKE) -C cocoa distclean
cocoa_cleanall:
	$(MAKE) -C cocoa cleanall
cocoa_info:
	$(MAKE) -C cocoa info
cocoa_makefiles:
	$(MAKE) -C cocoa makefiles
cocoa:
	$(MAKE) -C cocoa all
.PHONY: cocoa_all cocoa_debug cocoa_smart cocoa_release cocoa_units cocoa_examples cocoa_shared cocoa_install cocoa_sourceinstall cocoa_exampleinstall cocoa_distinstall cocoa_zipinstall cocoa_zipsourceinstall cocoa_zipexampleinstall cocoa_zipdistinstall cocoa_clean cocoa_distclean cocoa_cleanall cocoa_info cocoa_makefiles cocoa
endif
ifdef TARGET_DIRS_CUSTOMDRAWN
customdrawn_all:
	$(MAKE) -C customdrawn all
customdrawn_debug:
	$(MAKE) -C customdrawn debug
customdrawn_smart:
	$(MAKE) -C customdrawn smart
customdrawn_release:
	$(MAKE) -C customdrawn release
customdrawn_units:
	$(MAKE) -C customdrawn units
customdrawn_examples:
	$(MAKE) -C customdrawn examples
customdrawn_shared:
	$(MAKE) -C customdrawn shared
customdrawn_install:
	$(MAKE) -C customdrawn install
customdrawn_sourceinstall:
	$(MAKE) -C customdrawn sourceinstall
customdrawn_exampleinstall:
	$(MAKE) -C customdrawn exampleinstall
customdrawn_distinstall:
	$(MAKE) -C customdrawn distinstall
customdrawn_zipinstall:
	$(MAKE) -C customdrawn zipinstall
customdrawn_zipsourceinstall:
	$(MAKE) -C customdrawn zipsourceinstall
customdrawn_zipexampleinstall:
	$(MAKE) -C customdrawn zipexampleinstall
customdrawn_zipdistinstall:
	$(MAKE) -C customdrawn zipdistinstall
customdrawn_clean:
	$(MAKE) -C customdrawn clean
customdrawn_distclean:
	$(MAKE) -C customdrawn distclean
customdrawn_cleanall:
	$(MAKE) -C customdrawn cleanall
customdrawn_info:
	$(MAKE) -C customdrawn info
customdrawn_makefiles:
	$(MAKE) -C customdrawn makefiles
customdrawn:
	$(MAKE) -C customdrawn all
.PHONY: customdrawn_all customdrawn_debug customdrawn_smart customdrawn_release customdrawn_units customdrawn_examples customdrawn_shared customdrawn_install customdrawn_sourceinstall customdrawn_exampleinstall customdrawn_distinstall customdrawn_zipinstall customdrawn_zipsourceinstall customdrawn_zipexampleinstall customdrawn_zipdistinstall customdrawn_clean customdrawn_distclean customdrawn_cleanall customdrawn_info customdrawn_makefiles customdrawn
endif
ifdef TARGET_DIRS_MUI
mui_all:
	$(MAKE) -C mui all
mui_debug:
	$(MAKE) -C mui debug
mui_smart:
	$(MAKE) -C mui smart
mui_release:
	$(MAKE) -C mui release
mui_units:
	$(MAKE) -C mui units
mui_examples:
	$(MAKE) -C mui examples
mui_shared:
	$(MAKE) -C mui shared
mui_install:
	$(MAKE) -C mui install
mui_sourceinstall:
	$(MAKE) -C mui sourceinstall
mui_exampleinstall:
	$(MAKE) -C mui exampleinstall
mui_distinstall:
	$(MAKE) -C mui distinstall
mui_zipinstall:
	$(MAKE) -C mui zipinstall
mui_zipsourceinstall:
	$(MAKE) -C mui zipsourceinstall
mui_zipexampleinstall:
	$(MAKE) -C mui zipexampleinstall
mui_zipdistinstall:
	$(MAKE) -C mui zipdistinstall
mui_clean:
	$(MAKE) -C mui clean
mui_distclean:
	$(MAKE) -C mui distclean
mui_cleanall:
	$(MAKE) -C mui cleanall
mui_info:
	$(MAKE) -C mui info
mui_makefiles:
	$(MAKE) -C mui makefiles
mui:
	$(MAKE) -C mui all
.PHONY: mui_all mui_debug mui_smart mui_release mui_units mui_examples mui_shared mui_install mui_sourceinstall mui_exampleinstall mui_distinstall mui_zipinstall mui_zipsourceinstall mui_zipexampleinstall mui_zipdistinstall mui_clean mui_distclean mui_cleanall mui_info mui_makefiles mui
endif
all: $(addsuffix _all,$(DEFAULT_DIR))
debug: $(addsuffix _debug,$(DEFAULT_DIR))
smart: $(addsuffix _smart,$(DEFAULT_DIR))
release: $(addsuffix _release,$(DEFAULT_DIR))
units: $(addsuffix _units,$(DEFAULT_DIR))
examples: $(addsuffix _examples,$(DEFAULT_DIR))
shared: $(addsuffix _shared,$(DEFAULT_DIR))
install: fpc_install $(addsuffix _install,$(DEFAULT_DIR))
sourceinstall: fpc_sourceinstall $(addsuffix _sourceinstall,$(DEFAULT_DIR))
exampleinstall: fpc_exampleinstall $(addsuffix _exampleinstall,$(DEFAULT_DIR))
distinstall: $(addsuffix _distinstall,$(DEFAULT_DIR))
zipinstall: $(addsuffix _zipinstall,$(DEFAULT_DIR))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(DEFAULT_DIR))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(DEFAULT_DIR))
zipdistinstall: $(addsuffix _zipdistinstall,$(DEFAULT_DIR))
clean: $(addsuffix _clean,$(DEFAULT_DIR))
distclean: $(addsuffix _distclean,$(DEFAULT_DIR))
cleanall: $(addsuffix _cleanall,$(DEFAULT_DIR))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(DEFAULT_DIR))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
