{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit LazAtk1;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$ifdef Unix}
{$LINKLIB libatk-1.0.so.0}
{$endif}
{$WARN 3031 off : Values in enumeration types have to be ascending}
interface
uses
  CTypes, LazGObject2, LazGLib2;

const
  {$ifdef MsWindows}
  LazAtk1_library = 'libatk-1.0.so.dll';
  {$else}
  LazAtk1_library = 'libatk-1.0.so.0';
  {$endif}

  ATK_BINARY_AGE = 24610;
  ATK_INTERFACE_AGE = 1;
  ATK_MAJOR_VERSION = 2;
  ATK_MICRO_VERSION = 0;
  ATK_MINOR_VERSION = 46;
  ATK_VERSION_MIN_REQUIRED = 2;
type
  TAtkCoordType = (
    TAtkCoordTypeMinValue = -$7FFFFFFF,
    ATK_XY_SCREEN = 0,
    ATK_XY_WINDOW = 1,
    ATK_XY_PARENT = 2,
    TAtkCoordTypeMaxValue = $7FFFFFFF
  );
  TAtkScrollType = (
    TAtkScrollTypeMinValue = -$7FFFFFFF,
    ATK_SCROLL_TOP_LEFT = 0,
    ATK_SCROLL_BOTTOM_RIGHT = 1,
    ATK_SCROLL_TOP_EDGE = 2,
    ATK_SCROLL_BOTTOM_EDGE = 3,
    ATK_SCROLL_LEFT_EDGE = 4,
    ATK_SCROLL_RIGHT_EDGE = 5,
    ATK_SCROLL_ANYWHERE = 6,
    TAtkScrollTypeMaxValue = $7FFFFFFF
  );
  TAtkLayer = (
    TAtkLayerMinValue = -$7FFFFFFF,
    ATK_LAYER_INVALID = 0,
    ATK_LAYER_BACKGROUND = 1,
    ATK_LAYER_CANVAS = 2,
    ATK_LAYER_WIDGET = 3,
    ATK_LAYER_MDI = 4,
    ATK_LAYER_POPUP = 5,
    ATK_LAYER_OVERLAY = 6,
    ATK_LAYER_WINDOW = 7,
    TAtkLayerMaxValue = $7FFFFFFF
  );
  TAtkRelationType = (
    TAtkRelationTypeMinValue = -$7FFFFFFF,
    ATK_RELATION_NULL = 0,
    ATK_RELATION_CONTROLLED_BY = 1,
    ATK_RELATION_CONTROLLER_FOR = 2,
    ATK_RELATION_LABEL_FOR = 3,
    ATK_RELATION_LABELLED_BY = 4,
    ATK_RELATION_MEMBER_OF = 5,
    ATK_RELATION_NODE_CHILD_OF = 6,
    ATK_RELATION_FLOWS_TO = 7,
    ATK_RELATION_FLOWS_FROM = 8,
    ATK_RELATION_SUBWINDOW_OF = 9,
    ATK_RELATION_EMBEDS = 10,
    ATK_RELATION_EMBEDDED_BY = 11,
    ATK_RELATION_POPUP_FOR = 12,
    ATK_RELATION_PARENT_WINDOW_OF = 13,
    ATK_RELATION_DESCRIBED_BY = 14,
    ATK_RELATION_DESCRIPTION_FOR = 15,
    ATK_RELATION_NODE_PARENT_OF = 16,
    ATK_RELATION_DETAILS = 17,
    ATK_RELATION_DETAILS_FOR = 18,
    ATK_RELATION_ERROR_MESSAGE = 19,
    ATK_RELATION_ERROR_FOR = 20,
    ATK_RELATION_LAST_DEFINED = 21,
    TAtkRelationTypeMaxValue = $7FFFFFFF
  );
  TAtkRole = (
    TAtkRoleMinValue = -$7FFFFFFF,
    ATK_ROLE_INVALID = 0,
    ATK_ROLE_ACCEL_LABEL = 1,
    ATK_ROLE_ALERT = 2,
    ATK_ROLE_ANIMATION = 3,
    ATK_ROLE_ARROW = 4,
    ATK_ROLE_CALENDAR = 5,
    ATK_ROLE_CANVAS = 6,
    ATK_ROLE_CHECK_BOX = 7,
    ATK_ROLE_CHECK_MENU_ITEM = 8,
    ATK_ROLE_COLOR_CHOOSER = 9,
    ATK_ROLE_COLUMN_HEADER = 10,
    ATK_ROLE_COMBO_BOX = 11,
    ATK_ROLE_DATE_EDITOR = 12,
    ATK_ROLE_DESKTOP_ICON = 13,
    ATK_ROLE_DESKTOP_FRAME = 14,
    ATK_ROLE_DIAL = 15,
    ATK_ROLE_DIALOG = 16,
    ATK_ROLE_DIRECTORY_PANE = 17,
    ATK_ROLE_DRAWING_AREA = 18,
    ATK_ROLE_FILE_CHOOSER = 19,
    ATK_ROLE_FILLER = 20,
    ATK_ROLE_FONT_CHOOSER = 21,
    ATK_ROLE_FRAME = 22,
    ATK_ROLE_GLASS_PANE = 23,
    ATK_ROLE_HTML_CONTAINER = 24,
    ATK_ROLE_ICON = 25,
    ATK_ROLE_IMAGE = 26,
    ATK_ROLE_INTERNAL_FRAME = 27,
    ATK_ROLE_LABEL = 28,
    ATK_ROLE_LAYERED_PANE = 29,
    ATK_ROLE_LIST = 30,
    ATK_ROLE_LIST_ITEM = 31,
    ATK_ROLE_MENU = 32,
    ATK_ROLE_MENU_BAR = 33,
    ATK_ROLE_MENU_ITEM = 34,
    ATK_ROLE_OPTION_PANE = 35,
    ATK_ROLE_PAGE_TAB = 36,
    ATK_ROLE_PAGE_TAB_LIST = 37,
    ATK_ROLE_PANEL = 38,
    ATK_ROLE_PASSWORD_TEXT = 39,
    ATK_ROLE_POPUP_MENU = 40,
    ATK_ROLE_PROGRESS_BAR = 41,
    ATK_ROLE_PUSH_BUTTON = 42,
    ATK_ROLE_RADIO_BUTTON = 43,
    ATK_ROLE_RADIO_MENU_ITEM = 44,
    ATK_ROLE_ROOT_PANE = 45,
    ATK_ROLE_ROW_HEADER = 46,
    ATK_ROLE_SCROLL_BAR = 47,
    ATK_ROLE_SCROLL_PANE = 48,
    ATK_ROLE_SEPARATOR = 49,
    ATK_ROLE_SLIDER = 50,
    ATK_ROLE_SPLIT_PANE = 51,
    ATK_ROLE_SPIN_BUTTON = 52,
    ATK_ROLE_STATUSBAR = 53,
    ATK_ROLE_TABLE = 54,
    ATK_ROLE_TABLE_CELL = 55,
    ATK_ROLE_TABLE_COLUMN_HEADER = 56,
    ATK_ROLE_TABLE_ROW_HEADER = 57,
    ATK_ROLE_TEAR_OFF_MENU_ITEM = 58,
    ATK_ROLE_TERMINAL = 59,
    ATK_ROLE_TEXT = 60,
    ATK_ROLE_TOGGLE_BUTTON = 61,
    ATK_ROLE_TOOL_BAR = 62,
    ATK_ROLE_TOOL_TIP = 63,
    ATK_ROLE_TREE = 64,
    ATK_ROLE_TREE_TABLE = 65,
    ATK_ROLE_UNKNOWN = 66,
    ATK_ROLE_VIEWPORT = 67,
    ATK_ROLE_WINDOW = 68,
    ATK_ROLE_HEADER = 69,
    ATK_ROLE_FOOTER = 70,
    ATK_ROLE_PARAGRAPH = 71,
    ATK_ROLE_RULER = 72,
    ATK_ROLE_APPLICATION = 73,
    ATK_ROLE_AUTOCOMPLETE = 74,
    ATK_ROLE_EDITBAR = 75,
    ATK_ROLE_EMBEDDED = 76,
    ATK_ROLE_ENTRY = 77,
    ATK_ROLE_CHART = 78,
    ATK_ROLE_CAPTION = 79,
    ATK_ROLE_DOCUMENT_FRAME = 80,
    ATK_ROLE_HEADING = 81,
    ATK_ROLE_PAGE = 82,
    ATK_ROLE_SECTION = 83,
    ATK_ROLE_REDUNDANT_OBJECT = 84,
    ATK_ROLE_FORM = 85,
    ATK_ROLE_LINK = 86,
    ATK_ROLE_INPUT_METHOD_WINDOW = 87,
    ATK_ROLE_TABLE_ROW = 88,
    ATK_ROLE_TREE_ITEM = 89,
    ATK_ROLE_DOCUMENT_SPREADSHEET = 90,
    ATK_ROLE_DOCUMENT_PRESENTATION = 91,
    ATK_ROLE_DOCUMENT_TEXT = 92,
    ATK_ROLE_DOCUMENT_WEB = 93,
    ATK_ROLE_DOCUMENT_EMAIL = 94,
    ATK_ROLE_COMMENT = 95,
    ATK_ROLE_LIST_BOX = 96,
    ATK_ROLE_GROUPING = 97,
    ATK_ROLE_IMAGE_MAP = 98,
    ATK_ROLE_NOTIFICATION = 99,
    ATK_ROLE_INFO_BAR = 100,
    ATK_ROLE_LEVEL_BAR = 101,
    ATK_ROLE_TITLE_BAR = 102,
    ATK_ROLE_BLOCK_QUOTE = 103,
    ATK_ROLE_AUDIO = 104,
    ATK_ROLE_VIDEO = 105,
    ATK_ROLE_DEFINITION = 106,
    ATK_ROLE_ARTICLE = 107,
    ATK_ROLE_LANDMARK = 108,
    ATK_ROLE_LOG = 109,
    ATK_ROLE_MARQUEE = 110,
    ATK_ROLE_MATH = 111,
    ATK_ROLE_RATING = 112,
    ATK_ROLE_TIMER = 113,
    ATK_ROLE_DESCRIPTION_LIST = 114,
    ATK_ROLE_DESCRIPTION_TERM = 115,
    ATK_ROLE_DESCRIPTION_VALUE = 116,
    ATK_ROLE_STATIC = 117,
    ATK_ROLE_MATH_FRACTION = 118,
    ATK_ROLE_MATH_ROOT = 119,
    ATK_ROLE_SUBSCRIPT = 120,
    ATK_ROLE_SUPERSCRIPT = 121,
    ATK_ROLE_FOOTNOTE = 122,
    ATK_ROLE_CONTENT_DELETION = 123,
    ATK_ROLE_CONTENT_INSERTION = 124,
    ATK_ROLE_MARK = 125,
    ATK_ROLE_SUGGESTION = 126,
    ATK_ROLE_PUSH_BUTTON_MENU = 127,
    ATK_ROLE_LAST_DEFINED = 128,
    TAtkRoleMaxValue = $7FFFFFFF
  );
  TAtkHyperlinkStateFlagsIdx = (
    TAtkHyperlinkStateFlagsIdxMinValue = 0,
    ATK_HYPERLINK_IS_INLINE_ = 0,
    TAtkHyperlinkStateFlagsIdxMaxValue = 31
  );
  TAtkHyperlinkStateFlags = Set of TAtkHyperlinkStateFlagsIdx;
  TAtkKeyEventType = (
    TAtkKeyEventTypeMinValue = -$7FFFFFFF,
    ATK_KEY_EVENT_PRESS = 0,
    ATK_KEY_EVENT_RELEASE = 1,
    ATK_KEY_EVENT_LAST_DEFINED = 2,
    TAtkKeyEventTypeMaxValue = $7FFFFFFF
  );
  TAtkTextClipType = (
    TAtkTextClipTypeMinValue = -$7FFFFFFF,
    ATK_TEXT_CLIP_NONE = 0,
    ATK_TEXT_CLIP_MIN = 1,
    ATK_TEXT_CLIP_MAX = 2,
    ATK_TEXT_CLIP_BOTH = 3,
    TAtkTextClipTypeMaxValue = $7FFFFFFF
  );
  TAtkTextGranularity = (
    TAtkTextGranularityMinValue = -$7FFFFFFF,
    ATK_TEXT_GRANULARITY_CHAR = 0,
    ATK_TEXT_GRANULARITY_WORD = 1,
    ATK_TEXT_GRANULARITY_SENTENCE = 2,
    ATK_TEXT_GRANULARITY_LINE = 3,
    ATK_TEXT_GRANULARITY_PARAGRAPH = 4,
    TAtkTextGranularityMaxValue = $7FFFFFFF
  );
  TAtkStateType = (
    TAtkStateTypeMinValue = -$7FFFFFFF,
    ATK_STATE_INVALID = 0,
    ATK_STATE_ACTIVE = 1,
    ATK_STATE_ARMED = 2,
    ATK_STATE_BUSY = 3,
    ATK_STATE_CHECKED = 4,
    ATK_STATE_DEFUNCT = 5,
    ATK_STATE_EDITABLE = 6,
    ATK_STATE_ENABLED = 7,
    ATK_STATE_EXPANDABLE = 8,
    ATK_STATE_EXPANDED = 9,
    ATK_STATE_FOCUSABLE = 10,
    ATK_STATE_FOCUSED = 11,
    ATK_STATE_HORIZONTAL = 12,
    ATK_STATE_ICONIFIED = 13,
    ATK_STATE_MODAL = 14,
    ATK_STATE_MULTI_LINE = 15,
    ATK_STATE_MULTISELECTABLE = 16,
    ATK_STATE_OPAQUE = 17,
    ATK_STATE_PRESSED = 18,
    ATK_STATE_RESIZABLE = 19,
    ATK_STATE_SELECTABLE = 20,
    ATK_STATE_SELECTED = 21,
    ATK_STATE_SENSITIVE = 22,
    ATK_STATE_SHOWING = 23,
    ATK_STATE_SINGLE_LINE = 24,
    ATK_STATE_STALE = 25,
    ATK_STATE_TRANSIENT = 26,
    ATK_STATE_VERTICAL = 27,
    ATK_STATE_VISIBLE = 28,
    ATK_STATE_MANAGES_DESCENDANTS = 29,
    ATK_STATE_INDETERMINATE = 30,
    ATK_STATE_TRUNCATED = 31,
    ATK_STATE_REQUIRED = 32,
    ATK_STATE_INVALID_ENTRY = 33,
    ATK_STATE_SUPPORTS_AUTOCOMPLETION = 34,
    ATK_STATE_SELECTABLE_TEXT = 35,
    ATK_STATE_DEFAULT = 36,
    ATK_STATE_ANIMATED = 37,
    ATK_STATE_VISITED = 38,
    ATK_STATE_CHECKABLE = 39,
    ATK_STATE_HAS_POPUP = 40,
    ATK_STATE_HAS_TOOLTIP = 41,
    ATK_STATE_READ_ONLY = 42,
    ATK_STATE_COLLAPSED = 43,
    ATK_STATE_LAST_DEFINED = 44,
    TAtkStateTypeMaxValue = $7FFFFFFF
  );
  TAtkTextBoundary = (
    TAtkTextBoundaryMinValue = -$7FFFFFFF,
    ATK_TEXT_BOUNDARY_CHAR = 0,
    ATK_TEXT_BOUNDARY_WORD_START = 1,
    ATK_TEXT_BOUNDARY_WORD_END = 2,
    ATK_TEXT_BOUNDARY_SENTENCE_START = 3,
    ATK_TEXT_BOUNDARY_SENTENCE_END = 4,
    ATK_TEXT_BOUNDARY_LINE_START = 5,
    ATK_TEXT_BOUNDARY_LINE_END = 6,
    TAtkTextBoundaryMaxValue = $7FFFFFFF
  );
  TAtkTextAttribute = (
    TAtkTextAttributeMinValue = -$7FFFFFFF,
    ATK_TEXT_ATTR_INVALID = 0,
    ATK_TEXT_ATTR_LEFT_MARGIN = 1,
    ATK_TEXT_ATTR_RIGHT_MARGIN = 2,
    ATK_TEXT_ATTR_INDENT = 3,
    ATK_TEXT_ATTR_INVISIBLE = 4,
    ATK_TEXT_ATTR_EDITABLE = 5,
    ATK_TEXT_ATTR_PIXELS_ABOVE_LINES = 6,
    ATK_TEXT_ATTR_PIXELS_BELOW_LINES = 7,
    ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP = 8,
    ATK_TEXT_ATTR_BG_FULL_HEIGHT = 9,
    ATK_TEXT_ATTR_RISE = 10,
    ATK_TEXT_ATTR_UNDERLINE = 11,
    ATK_TEXT_ATTR_STRIKETHROUGH = 12,
    ATK_TEXT_ATTR_SIZE = 13,
    ATK_TEXT_ATTR_SCALE = 14,
    ATK_TEXT_ATTR_WEIGHT = 15,
    ATK_TEXT_ATTR_LANGUAGE = 16,
    ATK_TEXT_ATTR_FAMILY_NAME = 17,
    ATK_TEXT_ATTR_BG_COLOR = 18,
    ATK_TEXT_ATTR_FG_COLOR = 19,
    ATK_TEXT_ATTR_BG_STIPPLE = 20,
    ATK_TEXT_ATTR_FG_STIPPLE = 21,
    ATK_TEXT_ATTR_WRAP_MODE = 22,
    ATK_TEXT_ATTR_DIRECTION = 23,
    ATK_TEXT_ATTR_JUSTIFICATION = 24,
    ATK_TEXT_ATTR_STRETCH = 25,
    ATK_TEXT_ATTR_VARIANT = 26,
    ATK_TEXT_ATTR_STYLE = 27,
    ATK_TEXT_ATTR_TEXT_POSITION = 28,
    ATK_TEXT_ATTR_LAST_DEFINED = 29,
    TAtkTextAttributeMaxValue = $7FFFFFFF
  );
  TAtkValueType = (
    TAtkValueTypeMinValue = -$7FFFFFFF,
    ATK_VALUE_VERY_WEAK = 0,
    ATK_VALUE_WEAK = 1,
    ATK_VALUE_ACCEPTABLE = 2,
    ATK_VALUE_STRONG = 3,
    ATK_VALUE_VERY_STRONG = 4,
    ATK_VALUE_VERY_LOW = 5,
    ATK_VALUE_LOW = 6,
    ATK_VALUE_MEDIUM = 7,
    ATK_VALUE_HIGH = 8,
    ATK_VALUE_VERY_HIGH = 9,
    ATK_VALUE_VERY_BAD = 10,
    ATK_VALUE_BAD = 11,
    ATK_VALUE_GOOD = 12,
    ATK_VALUE_VERY_GOOD = 13,
    ATK_VALUE_BEST = 14,
    ATK_VALUE_LAST_DEFINED = 15,
    TAtkValueTypeMaxValue = $7FFFFFFF
  );
type


  { TAtkAttributeSet }
  PPAtkAttributeSet = ^PAtkAttributeSet;
  PAtkAttributeSet = ^TAtkAttributeSet;
  TAtkAttributeSet = TGSList;


  { TAtkState }
  PPAtkState = ^PAtkState;
  PAtkState = ^TAtkState;
  TAtkState = guint64;


  { TAtkAction }
  PPAtkAction = ^PAtkAction;
  PAtkAction = ^TAtkAction;
  TAtkAction = object
    function do_action(i: gint): gboolean; cdecl; inline;
    function get_description(i: gint): Pgchar; cdecl; inline;
    function get_keybinding(i: gint): Pgchar; cdecl; inline;
    function get_localized_name(i: gint): Pgchar; cdecl; inline;
    function get_n_actions: gint; cdecl; inline;
    function get_name(i: gint): Pgchar; cdecl; inline;
    function set_description(i: gint; desc: Pgchar): gboolean; cdecl; inline;
  end;


  { TAtkActionIface }
  PPAtkActionIface = ^PAtkActionIface;
  PAtkActionIface = ^TAtkActionIface;
  TAtkActionIface = object
    parent: TGTypeInterface;
    do_action: function(action: PAtkAction; i: gint): gboolean; cdecl;
    get_n_actions: function(action: PAtkAction): gint; cdecl;
    get_description: function(action: PAtkAction; i: gint): Pgchar; cdecl;
    get_name: function(action: PAtkAction; i: gint): Pgchar; cdecl;
    get_keybinding: function(action: PAtkAction; i: gint): Pgchar; cdecl;
    set_description: function(action: PAtkAction; i: gint; desc: Pgchar): gboolean; cdecl;
    get_localized_name: function(action: PAtkAction; i: gint): Pgchar; cdecl;
  end;


  { TAtkAttribute }
  PPAtkAttribute = ^PAtkAttribute;
  PAtkAttribute = ^TAtkAttribute;
  TAtkAttribute = object
    name: Pgchar;
    value: Pgchar;
    procedure set_free(attrib_set: PAtkAttributeSet); cdecl; inline; static;
  end;


  { TAtkComponent }
  PPAtkComponent = ^PAtkComponent;
  PAtkComponent = ^TAtkComponent;


  { TAtkCoordType }
  PPAtkCoordType = ^PAtkCoordType;
  PAtkCoordType = ^TAtkCoordType;


  { TAtkLayer }
  PPAtkLayer = ^PAtkLayer;
  PAtkLayer = ^TAtkLayer;


  { TAtkObject }
  PPAtkObject = ^PAtkObject;
  PAtkObject = ^TAtkObject;


  { TAtkScrollType }
  PPAtkScrollType = ^PAtkScrollType;
  PAtkScrollType = ^TAtkScrollType;


  { TAtkRectangle }
  PPAtkRectangle = ^PAtkRectangle;
  PAtkRectangle = ^TAtkRectangle;
  TAtkRectangle = object
    x: gint;
    y: gint;
    width: gint;
    height: gint;
  end;
  TAtkComponent = object
    bounds_changed: procedure(arg1: TAtkRectangle); cdecl;
    function contains(x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl; inline;
    function get_alpha: gdouble; cdecl; inline;
    procedure get_extents(x: Pgint; y: Pgint; width: Pgint; height: Pgint; coord_type: TAtkCoordType); cdecl; inline;
    function get_layer: TAtkLayer; cdecl; inline;
    function get_mdi_zorder: gint; cdecl; inline;
    function grab_focus: gboolean; cdecl; inline;
    function ref_accessible_at_point(x: gint; y: gint; coord_type: TAtkCoordType): PAtkObject; cdecl; inline;
    function scroll_to(type_: TAtkScrollType): gboolean; cdecl; inline;
    function scroll_to_point(coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl; inline;
    function set_extents(x: gint; y: gint; width: gint; height: gint; coord_type: TAtkCoordType): gboolean; cdecl; inline;
    function set_position(x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl; inline;
    function set_size(width: gint; height: gint): gboolean; cdecl; inline;
  end;


  { TAtkRelationType }
  PPAtkRelationType = ^PAtkRelationType;
  PAtkRelationType = ^TAtkRelationType;


  { TAtkRole }
  PPAtkRole = ^PAtkRole;
  PAtkRole = ^TAtkRole;


  { TAtkRelationSet }
  PPAtkRelationSet = ^PAtkRelationSet;
  PAtkRelationSet = ^TAtkRelationSet;


  { TAtkStateSet }
  PPAtkStateSet = ^PAtkStateSet;
  PAtkStateSet = ^TAtkStateSet;
  TAtkObject = object(TGObject)
    description: Pgchar;
    name: Pgchar;
    accessible_parent1: PAtkObject;
    role: TAtkRole;
    relation_set: PAtkRelationSet;
    layer: TAtkLayer;
    function add_relationship(relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl; inline;
    function get_accessible_id: Pgchar; cdecl; inline;
    function get_attributes: PAtkAttributeSet; cdecl; inline;
    function get_description: Pgchar; cdecl; inline;
    function get_index_in_parent: gint; cdecl; inline;
    function get_n_accessible_children: gint; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_object_locale: Pgchar; cdecl; inline;
    function get_parent: PAtkObject; cdecl; inline;
    function get_role: TAtkRole; cdecl; inline;
    procedure initialize(data: gpointer); cdecl; inline;
    procedure notify_state_change(state: TAtkState; value: gboolean); cdecl; inline;
    function peek_parent: PAtkObject; cdecl; inline;
    function ref_accessible_child(i: gint): PAtkObject; cdecl; inline;
    function ref_relation_set: PAtkRelationSet; cdecl; inline;
    function ref_state_set: PAtkStateSet; cdecl; inline;
    function remove_relationship(relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl; inline;
    procedure set_accessible_id(name: Pgchar); cdecl; inline;
    procedure set_description(description: Pgchar); cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
    procedure set_parent(parent: PAtkObject); cdecl; inline;
    procedure set_role(role: TAtkRole); cdecl; inline;
    //property accessible_component_layer: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_component_layer ;
    //property accessible_component_mdi_zorder: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_component_mdi_zorder ;
    //property accessible_description: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_description  { property is writeable but setter not declared } ;
    //property accessible_hypertext_nlinks: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_hypertext_nlinks ;
    //property accessible_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_name  { property is writeable but setter not declared } ;
    //property accessible_parent: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_parent  { property is writeable but setter not declared } ;
    //property accessible_role: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_role  { property is writeable but setter not declared } ;
    //property accessible_table_caption_object: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_table_caption_object  { property is writeable but setter not declared } ;
    //property accessible_table_summary: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accessible_table_summary  { property is writeable but setter not declared } ;
  end;


  { TAtkComponentIface }
  PPAtkComponentIface = ^PAtkComponentIface;
  PAtkComponentIface = ^TAtkComponentIface;


  { TAtkFocusHandler }
  PPAtkFocusHandler = ^PAtkFocusHandler;
  PAtkFocusHandler = ^TAtkFocusHandler;
  TAtkFocusHandler = procedure(object_: PAtkObject; focus_in: gboolean); cdecl;
  TAtkComponentIface = object
    parent: TGTypeInterface;
    add_focus_handler: function(component: PAtkComponent; handler: TAtkFocusHandler): guint; cdecl;
    contains: function(component: PAtkComponent; x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl;
    ref_accessible_at_point: function(component: PAtkComponent; x: gint; y: gint; coord_type: TAtkCoordType): PAtkObject; cdecl;
    get_extents: procedure(component: PAtkComponent; x: Pgint; y: Pgint; width: Pgint; height: Pgint; coord_type: TAtkCoordType); cdecl;
    get_position: procedure(component: PAtkComponent; x: Pgint; y: Pgint; coord_type: TAtkCoordType); cdecl;
    get_size: procedure(component: PAtkComponent; width: Pgint; height: Pgint); cdecl;
    grab_focus: function(component: PAtkComponent): gboolean; cdecl;
    remove_focus_handler: procedure(component: PAtkComponent; handler_id: guint); cdecl;
    set_extents: function(component: PAtkComponent; x: gint; y: gint; width: gint; height: gint; coord_type: TAtkCoordType): gboolean; cdecl;
    set_position: function(component: PAtkComponent; x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl;
    set_size: function(component: PAtkComponent; width: gint; height: gint): gboolean; cdecl;
    get_layer: function(component: PAtkComponent): TAtkLayer; cdecl;
    get_mdi_zorder: function(component: PAtkComponent): gint; cdecl;
    bounds_changed: procedure(component: PAtkComponent; bounds: PAtkRectangle); cdecl;
    get_alpha: function(component: PAtkComponent): gdouble; cdecl;
    scroll_to: function(component: PAtkComponent; type_: TAtkScrollType): gboolean; cdecl;
    scroll_to_point: function(component: PAtkComponent; coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl;
  end;


  { TAtkDocument }
  PPAtkDocument = ^PAtkDocument;
  PAtkDocument = ^TAtkDocument;
  TAtkDocument = object
    load_complete: procedure; cdecl;
    load_stopped: procedure; cdecl;
    page_changed: procedure(page_number: gint); cdecl;
    reload: procedure; cdecl;
    function get_attribute_value(attribute_name: Pgchar): Pgchar; cdecl; inline;
    function get_attributes: PAtkAttributeSet; cdecl; inline;
    function get_current_page_number: gint; cdecl; inline;
    function get_page_count: gint; cdecl; inline;
    function set_attribute_value(attribute_name: Pgchar; attribute_value: Pgchar): gboolean; cdecl; inline;
  end;


  { TAtkDocumentIface }
  PPAtkDocumentIface = ^PAtkDocumentIface;
  PAtkDocumentIface = ^TAtkDocumentIface;
  TAtkDocumentIface = object
    parent: TGTypeInterface;
    get_document_type: function(document: PAtkDocument): Pgchar; cdecl;
    get_document: function(document: PAtkDocument): gpointer; cdecl;
    get_document_locale: function(document: PAtkDocument): Pgchar; cdecl;
    get_document_attributes: function(document: PAtkDocument): PAtkAttributeSet; cdecl;
    get_document_attribute_value: function(document: PAtkDocument; attribute_name: Pgchar): Pgchar; cdecl;
    set_document_attribute: function(document: PAtkDocument; attribute_name: Pgchar; attribute_value: Pgchar): gboolean; cdecl;
    get_current_page_number: function(document: PAtkDocument): gint; cdecl;
    get_page_count: function(document: PAtkDocument): gint; cdecl;
  end;


  { TAtkEditableText }
  PPAtkEditableText = ^PAtkEditableText;
  PAtkEditableText = ^TAtkEditableText;
  TAtkEditableText = object
    procedure copy_text(start_pos: gint; end_pos: gint); cdecl; inline;
    procedure cut_text(start_pos: gint; end_pos: gint); cdecl; inline;
    procedure delete_text(start_pos: gint; end_pos: gint); cdecl; inline;
    procedure insert_text(string_: Pgchar; length: gint; position: Pgint); cdecl; inline;
    procedure paste_text(position: gint); cdecl; inline;
    function set_run_attributes(attrib_set: PAtkAttributeSet; start_offset: gint; end_offset: gint): gboolean; cdecl; inline;
    procedure set_text_contents(string_: Pgchar); cdecl; inline;
  end;


  { TAtkEditableTextIface }
  PPAtkEditableTextIface = ^PAtkEditableTextIface;
  PAtkEditableTextIface = ^TAtkEditableTextIface;
  TAtkEditableTextIface = object
    parent_interface: TGTypeInterface;
    set_run_attributes: function(text: PAtkEditableText; attrib_set: PAtkAttributeSet; start_offset: gint; end_offset: gint): gboolean; cdecl;
    set_text_contents: procedure(text: PAtkEditableText; string_: Pgchar); cdecl;
    insert_text: procedure(text: PAtkEditableText; string_: Pgchar; length: gint; position: Pgint); cdecl;
    copy_text: procedure(text: PAtkEditableText; start_pos: gint; end_pos: gint); cdecl;
    cut_text: procedure(text: PAtkEditableText; start_pos: gint; end_pos: gint); cdecl;
    delete_text: procedure(text: PAtkEditableText; start_pos: gint; end_pos: gint); cdecl;
    paste_text: procedure(text: PAtkEditableText; position: gint); cdecl;
  end;
  TAtkEventListener = procedure(obj: PAtkObject); cdecl;
  TAtkEventListenerInit = procedure; cdecl;
  TAtkFunction = function(user_data: gpointer): gboolean; cdecl;


  { TAtkGObjectAccessible }
  PPAtkGObjectAccessible = ^PAtkGObjectAccessible;
  PAtkGObjectAccessible = ^TAtkGObjectAccessible;
  TAtkGObjectAccessible = object(TAtkObject)
    function for_object(obj: PGObject): PAtkObject; cdecl; inline; static;
    function get_object: PGObject; cdecl; inline;
  end;


  { TAtkObjectClass }
  PPAtkObjectClass = ^PAtkObjectClass;
  PAtkObjectClass = ^TAtkObjectClass;


  { TAtkPropertyChangeHandler }
  PPAtkPropertyChangeHandler = ^PAtkPropertyChangeHandler;
  PAtkPropertyChangeHandler = ^TAtkPropertyChangeHandler;


  { TAtkPropertyValues }
  PPAtkPropertyValues = ^PAtkPropertyValues;
  PAtkPropertyValues = ^TAtkPropertyValues;
  TAtkPropertyChangeHandler = procedure(obj: PAtkObject; vals: PAtkPropertyValues); cdecl;


  { TAtkFunction }
  PPAtkFunction = ^PAtkFunction;
  PAtkFunction = ^TAtkFunction;
  TAtkObjectClass = object
    parent: TGObjectClass;
    get_name: function(accessible: PAtkObject): Pgchar; cdecl;
    get_description: function(accessible: PAtkObject): Pgchar; cdecl;
    get_parent: function(accessible: PAtkObject): PAtkObject; cdecl;
    get_n_children: function(accessible: PAtkObject): gint; cdecl;
    ref_child: function(accessible: PAtkObject; i: gint): PAtkObject; cdecl;
    get_index_in_parent: function(accessible: PAtkObject): gint; cdecl;
    ref_relation_set: function(accessible: PAtkObject): PAtkRelationSet; cdecl;
    get_role: function(accessible: PAtkObject): TAtkRole; cdecl;
    get_layer: function(accessible: PAtkObject): TAtkLayer; cdecl;
    get_mdi_zorder: function(accessible: PAtkObject): gint; cdecl;
    ref_state_set: function(accessible: PAtkObject): PAtkStateSet; cdecl;
    set_name: procedure(accessible: PAtkObject; name: Pgchar); cdecl;
    set_description: procedure(accessible: PAtkObject; description: Pgchar); cdecl;
    set_parent: procedure(accessible: PAtkObject; parent: PAtkObject); cdecl;
    set_role: procedure(accessible: PAtkObject; role: TAtkRole); cdecl;
    connect_property_change_handler: function(accessible: PAtkObject; handler: PAtkPropertyChangeHandler): guint; cdecl;
    remove_property_change_handler: procedure(accessible: PAtkObject; handler_id: guint); cdecl;
    initialize: procedure(accessible: PAtkObject; data: gpointer); cdecl;
    children_changed: procedure(accessible: PAtkObject; change_index: guint; changed_child: gpointer); cdecl;
    focus_event: procedure(accessible: PAtkObject; focus_in: gboolean); cdecl;
    property_change: procedure(accessible: PAtkObject; values: PAtkPropertyValues); cdecl;
    state_change: procedure(accessible: PAtkObject; name: Pgchar; state_set: gboolean); cdecl;
    visible_data_changed: procedure(accessible: PAtkObject); cdecl;
    active_descendant_changed: procedure(accessible: PAtkObject; child: Pgpointer); cdecl;
    get_attributes: function(accessible: PAtkObject): PAtkAttributeSet; cdecl;
    get_object_locale: function(accessible: PAtkObject): Pgchar; cdecl;
    pad1: TAtkFunction;
  end;


  { TAtkGObjectAccessibleClass }
  PPAtkGObjectAccessibleClass = ^PAtkGObjectAccessibleClass;
  PAtkGObjectAccessibleClass = ^TAtkGObjectAccessibleClass;
  TAtkGObjectAccessibleClass = object
    parent_class: TAtkObjectClass;
    pad1: TAtkFunction;
    pad2: TAtkFunction;
  end;


  { TAtkHyperlink }
  PPAtkHyperlink = ^PAtkHyperlink;
  PAtkHyperlink = ^TAtkHyperlink;
  TAtkHyperlink = object(TGObject)
    function get_end_index: gint; cdecl; inline;
    function get_n_anchors: gint; cdecl; inline;
    function get_object(i: gint): PAtkObject; cdecl; inline;
    function get_start_index: gint; cdecl; inline;
    function get_uri(i: gint): Pgchar; cdecl; inline;
    function is_inline: gboolean; cdecl; inline;
    function is_valid: gboolean; cdecl; inline;
    property end_index: gint read get_end_index ;
    //property number_of_anchors: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_number_of_anchors ;
    property start_index: gint read get_start_index ;
  end;


  { TAtkHyperlinkClass }
  PPAtkHyperlinkClass = ^PAtkHyperlinkClass;
  PAtkHyperlinkClass = ^TAtkHyperlinkClass;
  TAtkHyperlinkClass = object
    parent: TGObjectClass;
    get_uri: function(link_: PAtkHyperlink; i: gint): Pgchar; cdecl;
    get_object: function(link_: PAtkHyperlink; i: gint): PAtkObject; cdecl;
    get_end_index: function(link_: PAtkHyperlink): gint; cdecl;
    get_start_index: function(link_: PAtkHyperlink): gint; cdecl;
    is_valid: function(link_: PAtkHyperlink): gboolean; cdecl;
    get_n_anchors: function(link_: PAtkHyperlink): gint; cdecl;
    link_state: function(link_: PAtkHyperlink): guint; cdecl;
    is_selected_link: function(link_: PAtkHyperlink): gboolean; cdecl;
    link_activated: procedure(link_: PAtkHyperlink); cdecl;
    pad1: TAtkFunction;
  end;


  { TAtkHyperlinkImpl }
  PPAtkHyperlinkImpl = ^PAtkHyperlinkImpl;
  PAtkHyperlinkImpl = ^TAtkHyperlinkImpl;
  TAtkHyperlinkImpl = object
    function get_hyperlink: PAtkHyperlink; cdecl; inline;
  end;


  { TAtkHyperlinkImplIface }
  PPAtkHyperlinkImplIface = ^PAtkHyperlinkImplIface;
  PAtkHyperlinkImplIface = ^TAtkHyperlinkImplIface;
  TAtkHyperlinkImplIface = object
    parent: TGTypeInterface;
    get_hyperlink: function(impl: PAtkHyperlinkImpl): PAtkHyperlink; cdecl;
  end;


  { TAtkHyperlinkStateFlags }
  PPAtkHyperlinkStateFlags = ^PAtkHyperlinkStateFlags;
  PAtkHyperlinkStateFlags = ^TAtkHyperlinkStateFlags;


  { TAtkHypertext }
  PPAtkHypertext = ^PAtkHypertext;
  PAtkHypertext = ^TAtkHypertext;
  TAtkHypertext = object
    link_selected: procedure(arg1: gint); cdecl;
    function get_link(link_index: gint): PAtkHyperlink; cdecl; inline;
    function get_link_index(char_index: gint): gint; cdecl; inline;
    function get_n_links: gint; cdecl; inline;
  end;


  { TAtkHypertextIface }
  PPAtkHypertextIface = ^PAtkHypertextIface;
  PAtkHypertextIface = ^TAtkHypertextIface;
  TAtkHypertextIface = object
    parent: TGTypeInterface;
    get_link: function(hypertext: PAtkHypertext; link_index: gint): PAtkHyperlink; cdecl;
    get_n_links: function(hypertext: PAtkHypertext): gint; cdecl;
    get_link_index: function(hypertext: PAtkHypertext; char_index: gint): gint; cdecl;
    link_selected: procedure(hypertext: PAtkHypertext; link_index: gint); cdecl;
  end;


  { TAtkImage }
  PPAtkImage = ^PAtkImage;
  PAtkImage = ^TAtkImage;
  TAtkImage = object
    function get_image_description: Pgchar; cdecl; inline;
    function get_image_locale: Pgchar; cdecl; inline;
    procedure get_image_position(x: Pgint; y: Pgint; coord_type: TAtkCoordType); cdecl; inline;
    procedure get_image_size(width: Pgint; height: Pgint); cdecl; inline;
    function set_image_description(description: Pgchar): gboolean; cdecl; inline;
  end;


  { TAtkImageIface }
  PPAtkImageIface = ^PAtkImageIface;
  PAtkImageIface = ^TAtkImageIface;
  TAtkImageIface = object
    parent: TGTypeInterface;
    get_image_position: procedure(image: PAtkImage; x: Pgint; y: Pgint; coord_type: TAtkCoordType); cdecl;
    get_image_description: function(image: PAtkImage): Pgchar; cdecl;
    get_image_size: procedure(image: PAtkImage; width: Pgint; height: Pgint); cdecl;
    set_image_description: function(image: PAtkImage; description: Pgchar): gboolean; cdecl;
    get_image_locale: function(image: PAtkImage): Pgchar; cdecl;
  end;


  { TAtkImplementor }
  PPAtkImplementor = ^PAtkImplementor;
  PAtkImplementor = ^TAtkImplementor;
  TAtkImplementor = object
    function ref_accessible: PAtkObject; cdecl; inline;
  end;


  { TAtkImplementorIface }
  PPAtkImplementorIface = ^PAtkImplementorIface;
  PAtkImplementorIface = ^TAtkImplementorIface;
  TAtkImplementorIface = object
  end;


  { TAtkKeyEventStruct }
  PPAtkKeyEventStruct = ^PAtkKeyEventStruct;
  PAtkKeyEventStruct = ^TAtkKeyEventStruct;

  TAtkKeyEventStruct = record
    type_: gint;
    state: guint;
    keyval: guint;
    length: gint;
    string_: Pgchar;
    keycode: guint16;
    timestamp: guint32;
  end;




  { TAtkKeyEventType }
  PPAtkKeyEventType = ^PAtkKeyEventType;
  PAtkKeyEventType = ^TAtkKeyEventType;
  TAtkKeySnoopFunc = function(event: PAtkKeyEventStruct; user_data: gpointer): gint; cdecl;


  { TAtkMisc }
  PPAtkMisc = ^PAtkMisc;
  PAtkMisc = ^TAtkMisc;
  TAtkMisc = object(TGObject)
  end;


  { TAtkMiscClass }
  PPAtkMiscClass = ^PAtkMiscClass;
  PAtkMiscClass = ^TAtkMiscClass;
  TAtkMiscClass = object
    parent: TGObjectClass;
    threads_enter: procedure(misc: PAtkMisc); cdecl;
    threads_leave: procedure(misc: PAtkMisc); cdecl;
    vfuncs: array [0..31] of gpointer;
  end;


  { TAtkSelection }
  PPAtkSelection = ^PAtkSelection;
  PAtkSelection = ^TAtkSelection;
  TAtkSelection = object
    selection_changed: procedure; cdecl;
    function add_selection(i: gint): gboolean; cdecl; inline;
    function clear_selection: gboolean; cdecl; inline;
    function get_selection_count: gint; cdecl; inline;
    function is_child_selected(i: gint): gboolean; cdecl; inline;
    function ref_selection(i: gint): PAtkObject; cdecl; inline;
    function remove_selection(i: gint): gboolean; cdecl; inline;
    function select_all_selection: gboolean; cdecl; inline;
  end;


  { TAtkTable }
  PPAtkTable = ^PAtkTable;
  PAtkTable = ^TAtkTable;
  TAtkTable = object
    column_deleted: procedure(arg1: gint; arg2: gint); cdecl;
    column_inserted: procedure(arg1: gint; arg2: gint); cdecl;
    column_reordered: procedure; cdecl;
    model_changed: procedure; cdecl;
    row_deleted: procedure(arg1: gint; arg2: gint); cdecl;
    row_inserted: procedure(arg1: gint; arg2: gint); cdecl;
    row_reordered: procedure; cdecl;
    function add_column_selection(column: gint): gboolean; cdecl; inline;
    function add_row_selection(row: gint): gboolean; cdecl; inline;
    function get_caption: PAtkObject; cdecl; inline;
    function get_column_description(column: gint): Pgchar; cdecl; inline;
    function get_column_extent_at(row: gint; column: gint): gint; cdecl; inline;
    function get_column_header(column: gint): PAtkObject; cdecl; inline;
    function get_n_columns: gint; cdecl; inline;
    function get_n_rows: gint; cdecl; inline;
    function get_row_description(row: gint): Pgchar; cdecl; inline;
    function get_row_extent_at(row: gint; column: gint): gint; cdecl; inline;
    function get_row_header(row: gint): PAtkObject; cdecl; inline;
    function get_selected_columns(selected: PPgint): gint; cdecl; inline;
    function get_selected_rows(selected: PPgint): gint; cdecl; inline;
    function get_summary: PAtkObject; cdecl; inline;
    function is_column_selected(column: gint): gboolean; cdecl; inline;
    function is_row_selected(row: gint): gboolean; cdecl; inline;
    function is_selected(row: gint; column: gint): gboolean; cdecl; inline;
    function ref_at(row: gint; column: gint): PAtkObject; cdecl; inline;
    function remove_column_selection(column: gint): gboolean; cdecl; inline;
    function remove_row_selection(row: gint): gboolean; cdecl; inline;
    procedure set_caption(caption: PAtkObject); cdecl; inline;
    procedure set_column_description(column: gint; description: Pgchar); cdecl; inline;
    procedure set_column_header(column: gint; header: PAtkObject); cdecl; inline;
    procedure set_row_description(row: gint; description: Pgchar); cdecl; inline;
    procedure set_row_header(row: gint; header: PAtkObject); cdecl; inline;
    procedure set_summary(accessible: PAtkObject); cdecl; inline;
  end;


  { TAtkTableCell }
  PPAtkTableCell = ^PAtkTableCell;
  PAtkTableCell = ^TAtkTableCell;
  TAtkTableCell = object
    function get_column_header_cells: PAtkObject; cdecl; inline;
    function get_column_span: gint; cdecl; inline;
    function get_position(row: Pgint; column: Pgint): gboolean; cdecl; inline;
    function get_row_column_span(row: Pgint; column: Pgint; row_span: Pgint; column_span: Pgint): gboolean; cdecl; inline;
    function get_row_header_cells: PAtkObject; cdecl; inline;
    function get_row_span: gint; cdecl; inline;
    function get_table: PAtkObject; cdecl; inline;
  end;


  { TAtkText }
  PPAtkText = ^PAtkText;
  PAtkText = ^TAtkText;


  { TAtkTextRange }
  PPAtkTextRange = ^PAtkTextRange;
  PAtkTextRange = ^TAtkTextRange;


  { TAtkTextRectangle }
  PPAtkTextRectangle = ^PAtkTextRectangle;
  PAtkTextRectangle = ^TAtkTextRectangle;


  { TAtkTextClipType }
  PPAtkTextClipType = ^PAtkTextClipType;
  PAtkTextClipType = ^TAtkTextClipType;


  { TAtkTextGranularity }
  PPAtkTextGranularity = ^PAtkTextGranularity;
  PAtkTextGranularity = ^TAtkTextGranularity;
  TAtkText = object
    text_attributes_changed: procedure; cdecl;
    text_caret_moved: procedure(arg1: gint); cdecl;
    text_insert: procedure(arg1: gint; arg2: gint; arg3: Pgchar); cdecl;
    text_remove: procedure(arg1: gint; arg2: gint; arg3: Pgchar); cdecl;
    text_selection_changed: procedure; cdecl;
    procedure free_ranges(ranges: PPAtkTextRange); cdecl; inline; static;
    function add_selection(start_offset: gint; end_offset: gint): gboolean; cdecl; inline;
    function get_bounded_ranges(rect: PAtkTextRectangle; coord_type: TAtkCoordType; x_clip_type: TAtkTextClipType; y_clip_type: TAtkTextClipType): PPAtkTextRange; cdecl; inline;
    function get_caret_offset: gint; cdecl; inline;
    function get_character_at_offset(offset: gint): gunichar; cdecl; inline;
    function get_character_count: gint; cdecl; inline;
    procedure get_character_extents(offset: gint; x: Pgint; y: Pgint; width: Pgint; height: Pgint; coords: TAtkCoordType); cdecl; inline;
    function get_default_attributes: PAtkAttributeSet; cdecl; inline;
    function get_n_selections: gint; cdecl; inline;
    function get_offset_at_point(x: gint; y: gint; coords: TAtkCoordType): gint; cdecl; inline;
    procedure get_range_extents(start_offset: gint; end_offset: gint; coord_type: TAtkCoordType; rect: PAtkTextRectangle); cdecl; inline;
    function get_run_attributes(offset: gint; start_offset: Pgint; end_offset: Pgint): PAtkAttributeSet; cdecl; inline;
    function get_selection(selection_num: gint; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl; inline;
    function get_string_at_offset(offset: gint; granularity: TAtkTextGranularity; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl; inline;
    function get_text(start_offset: gint; end_offset: gint): Pgchar; cdecl; inline;
    function remove_selection(selection_num: gint): gboolean; cdecl; inline;
    function scroll_substring_to(start_offset: gint; end_offset: gint; type_: TAtkScrollType): gboolean; cdecl; inline;
    function scroll_substring_to_point(start_offset: gint; end_offset: gint; coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl; inline;
    function set_caret_offset(offset: gint): gboolean; cdecl; inline;
    function set_selection(selection_num: gint; start_offset: gint; end_offset: gint): gboolean; cdecl; inline;
  end;


  { TAtkValue }
  PPAtkValue = ^PAtkValue;
  PAtkValue = ^TAtkValue;


  { TAtkRange }
  PPAtkRange = ^PAtkRange;
  PAtkRange = ^TAtkRange;
  TAtkValue = object
    value_changed: procedure(value: gdouble; text: Pgchar); cdecl;
    function get_increment: gdouble; cdecl; inline;
    function get_range: PAtkRange; cdecl; inline;
    function get_sub_ranges: PGSList; cdecl; inline;
    procedure get_value_and_text(value: Pgdouble; text: PPgchar); cdecl; inline;
    procedure set_value(new_value: gdouble); cdecl; inline;
  end;


  { TAtkWindow }
  PPAtkWindow = ^PAtkWindow;
  PAtkWindow = ^TAtkWindow;
  TAtkWindow = object
    activate: procedure; cdecl;
    create: procedure; cdecl;
    deactivate: procedure; cdecl;
    destroy_: procedure; cdecl;
    maximize: procedure; cdecl;
    minimize: procedure; cdecl;
    move: procedure; cdecl;
    resize: procedure; cdecl;
    restore: procedure; cdecl;
  end;


  { TAtkNoOpObject }
  PPAtkNoOpObject = ^PAtkNoOpObject;
  PAtkNoOpObject = ^TAtkNoOpObject;
  TAtkNoOpObject = object(TAtkObject)
    function new(obj: PGObject): PAtkNoOpObject; cdecl; inline; static;
  end;


  { TAtkNoOpObjectClass }
  PPAtkNoOpObjectClass = ^PAtkNoOpObjectClass;
  PAtkNoOpObjectClass = ^TAtkNoOpObjectClass;
  TAtkNoOpObjectClass = object
    parent_class: TAtkObjectClass;
  end;


  { TAtkObjectFactory }
  PPAtkObjectFactory = ^PAtkObjectFactory;
  PAtkObjectFactory = ^TAtkObjectFactory;
  TAtkObjectFactory = object(TGObject)
    function create_accessible(obj: PGObject): PAtkObject; cdecl; inline;
    function get_accessible_type: TGType; cdecl; inline;
    procedure invalidate; cdecl; inline;
  end;


  { TAtkNoOpObjectFactory }
  PPAtkNoOpObjectFactory = ^PAtkNoOpObjectFactory;
  PAtkNoOpObjectFactory = ^TAtkNoOpObjectFactory;
  TAtkNoOpObjectFactory = object(TAtkObjectFactory)
    function new: PAtkNoOpObjectFactory; cdecl; inline; static;
  end;


  { TAtkObjectFactoryClass }
  PPAtkObjectFactoryClass = ^PAtkObjectFactoryClass;
  PAtkObjectFactoryClass = ^TAtkObjectFactoryClass;
  TAtkObjectFactoryClass = object
    parent_class: TGObjectClass;
    create_accessible: function(obj: PGObject): PAtkObject; cdecl;
    invalidate: procedure(factory: PAtkObjectFactory); cdecl;
    get_accessible_type: function: TGType; cdecl;
    pad1: TAtkFunction;
    pad2: TAtkFunction;
  end;


  { TAtkNoOpObjectFactoryClass }
  PPAtkNoOpObjectFactoryClass = ^PAtkNoOpObjectFactoryClass;
  PAtkNoOpObjectFactoryClass = ^TAtkNoOpObjectFactoryClass;
  TAtkNoOpObjectFactoryClass = object
    parent_class: TAtkObjectFactoryClass;
  end;

  TAtkPropertyValues = record
    property_name: Pgchar;
    old_value: TGValue;
    new_value: TGValue;
  end;




  { TAtkRelation }
  PPAtkRelation = ^PAtkRelation;
  PAtkRelation = ^TAtkRelation;
  TAtkRelationSet = object(TGObject)
    relations: Pgpointer;
    function new: PAtkRelationSet; cdecl; inline; static;
    procedure add(relation: PAtkRelation); cdecl; inline;
    procedure add_relation_by_type(relationship: TAtkRelationType; target: PAtkObject); cdecl; inline;
    function contains(relationship: TAtkRelationType): gboolean; cdecl; inline;
    function contains_target(relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl; inline;
    function get_n_relations: gint; cdecl; inline;
    function get_relation(i: gint): PAtkRelation; cdecl; inline;
    function get_relation_by_type(relationship: TAtkRelationType): PAtkRelation; cdecl; inline;
    procedure remove(relation: PAtkRelation); cdecl; inline;
  end;


  { TAtkStateType }
  PPAtkStateType = ^PAtkStateType;
  PAtkStateType = ^TAtkStateType;
  TAtkStateSet = object(TGObject)
    function new: PAtkStateSet; cdecl; inline; static;
    function add_state(type_: TAtkStateType): gboolean; cdecl; inline;
    procedure add_states(types: PAtkStateType; n_types: gint); cdecl; inline;
    function and_sets(compare_set: PAtkStateSet): PAtkStateSet; cdecl; inline;
    procedure clear_states; cdecl; inline;
    function contains_state(type_: TAtkStateType): gboolean; cdecl; inline;
    function contains_states(types: PAtkStateType; n_types: gint): gboolean; cdecl; inline;
    function is_empty: gboolean; cdecl; inline;
    function or_sets(compare_set: PAtkStateSet): PAtkStateSet; cdecl; inline;
    function remove_state(type_: TAtkStateType): gboolean; cdecl; inline;
    function xor_sets(compare_set: PAtkStateSet): PAtkStateSet; cdecl; inline;
  end;


  { TAtkPlug }
  PPAtkPlug = ^PAtkPlug;
  PAtkPlug = ^TAtkPlug;
  TAtkPlug = object(TAtkObject)
    function new: PAtkPlug; cdecl; inline; static;
    function get_id: Pgchar; cdecl; inline;
    procedure set_child(child: PAtkObject); cdecl; inline;
  end;


  { TAtkPlugClass }
  PPAtkPlugClass = ^PAtkPlugClass;
  PAtkPlugClass = ^TAtkPlugClass;
  TAtkPlugClass = object
    parent_class: TAtkObjectClass;
    get_object_id: function(obj: PAtkPlug): Pgchar; cdecl;
  end;
  TAtkRange = object
    function new(lower_limit: gdouble; upper_limit: gdouble; description: Pgchar): PAtkRange; cdecl; inline; static;
    function copy: PAtkRange; cdecl; inline;
    procedure free; cdecl; inline;
    function get_description: Pgchar; cdecl; inline;
    function get_lower_limit: gdouble; cdecl; inline;
    function get_upper_limit: gdouble; cdecl; inline;
  end;


  { TAtkRegistry }
  PPAtkRegistry = ^PAtkRegistry;
  PAtkRegistry = ^TAtkRegistry;
  TAtkRegistry = object(TGObject)
    factory_type_registry: PGHashTable;
    factory_singleton_cache: PGHashTable;
    function get_factory(type_: TGType): PAtkObjectFactory; cdecl; inline;
    function get_factory_type(type_: TGType): TGType; cdecl; inline;
    procedure set_factory_type(type_: TGType; factory_type: TGType); cdecl; inline;
  end;


  { TAtkRegistryClass }
  PPAtkRegistryClass = ^PAtkRegistryClass;
  PAtkRegistryClass = ^TAtkRegistryClass;
  TAtkRegistryClass = object
    parent_class: TGObjectClass;
  end;
  TAtkRelation = object(TGObject)
    target1: Pgpointer;
    relationship: TAtkRelationType;
    function new(targets: PPAtkObject; n_targets: gint; relationship: TAtkRelationType): PAtkRelation; cdecl; inline; static;
    procedure add_target(target: PAtkObject); cdecl; inline;
    function get_relation_type: TAtkRelationType; cdecl; inline;
    function get_target: PAtkObject; cdecl; inline;
    function remove_target(target: PAtkObject): gboolean; cdecl; inline;
    property relation_type: TAtkRelationType read get_relation_type  { property is writeable but setter not declared } ;
    property target: PAtkObject read get_target  { property is writeable but setter not declared } ;
  end;


  { TAtkRelationClass }
  PPAtkRelationClass = ^PAtkRelationClass;
  PAtkRelationClass = ^TAtkRelationClass;
  TAtkRelationClass = object
    parent: TGObjectClass;
  end;


  { TAtkRelationSetClass }
  PPAtkRelationSetClass = ^PAtkRelationSetClass;
  PAtkRelationSetClass = ^TAtkRelationSetClass;
  TAtkRelationSetClass = object
    parent: TGObjectClass;
    pad1: TAtkFunction;
    pad2: TAtkFunction;
  end;


  { TAtkSelectionIface }
  PPAtkSelectionIface = ^PAtkSelectionIface;
  PAtkSelectionIface = ^TAtkSelectionIface;
  TAtkSelectionIface = object
    parent: TGTypeInterface;
    add_selection: function(selection: PAtkSelection; i: gint): gboolean; cdecl;
    clear_selection: function(selection: PAtkSelection): gboolean; cdecl;
    ref_selection: function(selection: PAtkSelection; i: gint): PAtkObject; cdecl;
    get_selection_count: function(selection: PAtkSelection): gint; cdecl;
    is_child_selected: function(selection: PAtkSelection; i: gint): gboolean; cdecl;
    remove_selection: function(selection: PAtkSelection; i: gint): gboolean; cdecl;
    select_all_selection: function(selection: PAtkSelection): gboolean; cdecl;
    selection_changed: procedure(selection: PAtkSelection); cdecl;
  end;


  { TAtkSocket }
  PPAtkSocket = ^PAtkSocket;
  PAtkSocket = ^TAtkSocket;
  TAtkSocket = object(TAtkObject)
    embedded_plug_id: Pgchar;
    function new: PAtkSocket; cdecl; inline; static;
    procedure embed(plug_id: Pgchar); cdecl; inline;
    function is_occupied: gboolean; cdecl; inline;
  end;


  { TAtkSocketClass }
  PPAtkSocketClass = ^PAtkSocketClass;
  PAtkSocketClass = ^TAtkSocketClass;
  TAtkSocketClass = object
    parent_class: TAtkObjectClass;
    embed: procedure(obj: PAtkSocket; plug_id: Pgchar); cdecl;
  end;


  { TAtkStateSetClass }
  PPAtkStateSetClass = ^PAtkStateSetClass;
  PAtkStateSetClass = ^TAtkStateSetClass;
  TAtkStateSetClass = object
    parent: TGObjectClass;
  end;


  { TAtkStreamableContent }
  PPAtkStreamableContent = ^PAtkStreamableContent;
  PAtkStreamableContent = ^TAtkStreamableContent;
  TAtkStreamableContent = object
    function get_mime_type(i: gint): Pgchar; cdecl; inline;
    function get_n_mime_types: gint; cdecl; inline;
    function get_stream(mime_type: Pgchar): PGIOChannel; cdecl; inline;
    function get_uri(mime_type: Pgchar): Pgchar; cdecl; inline;
  end;


  { TAtkStreamableContentIface }
  PPAtkStreamableContentIface = ^PAtkStreamableContentIface;
  PAtkStreamableContentIface = ^TAtkStreamableContentIface;
  TAtkStreamableContentIface = object
    parent: TGTypeInterface;
    get_n_mime_types: function(streamable: PAtkStreamableContent): gint; cdecl;
    get_mime_type: function(streamable: PAtkStreamableContent; i: gint): Pgchar; cdecl;
    get_stream: function(streamable: PAtkStreamableContent; mime_type: Pgchar): PGIOChannel; cdecl;
    get_uri: function(streamable: PAtkStreamableContent; mime_type: Pgchar): Pgchar; cdecl;
    pad1: TAtkFunction;
    pad2: TAtkFunction;
    pad3: TAtkFunction;
  end;


  { TAtkTableCellIface }
  PPAtkTableCellIface = ^PAtkTableCellIface;
  PAtkTableCellIface = ^TAtkTableCellIface;
  TAtkTableCellIface = object
    parent: TGTypeInterface;
    get_column_span: function(cell: PAtkTableCell): gint; cdecl;
    get_column_header_cells: function(cell: PAtkTableCell): PAtkObject; cdecl;
    get_position: function(cell: PAtkTableCell; row: Pgint; column: Pgint): gboolean; cdecl;
    get_row_span: function(cell: PAtkTableCell): gint; cdecl;
    get_row_header_cells: function(cell: PAtkTableCell): PAtkObject; cdecl;
    get_row_column_span: function(cell: PAtkTableCell; row: Pgint; column: Pgint; row_span: Pgint; column_span: Pgint): gboolean; cdecl;
    get_table: function(cell: PAtkTableCell): PAtkObject; cdecl;
  end;


  { TAtkTableIface }
  PPAtkTableIface = ^PAtkTableIface;
  PAtkTableIface = ^TAtkTableIface;
  TAtkTableIface = object
    parent: TGTypeInterface;
    ref_at: function(table: PAtkTable; row: gint; column: gint): PAtkObject; cdecl;
    get_index_at: function(table: PAtkTable; row: gint; column: gint): gint; cdecl;
    get_column_at_index: function(table: PAtkTable; index_: gint): gint; cdecl;
    get_row_at_index: function(table: PAtkTable; index_: gint): gint; cdecl;
    get_n_columns: function(table: PAtkTable): gint; cdecl;
    get_n_rows: function(table: PAtkTable): gint; cdecl;
    get_column_extent_at: function(table: PAtkTable; row: gint; column: gint): gint; cdecl;
    get_row_extent_at: function(table: PAtkTable; row: gint; column: gint): gint; cdecl;
    get_caption: function(table: PAtkTable): PAtkObject; cdecl;
    get_column_description: function(table: PAtkTable; column: gint): Pgchar; cdecl;
    get_column_header: function(table: PAtkTable; column: gint): PAtkObject; cdecl;
    get_row_description: function(table: PAtkTable; row: gint): Pgchar; cdecl;
    get_row_header: function(table: PAtkTable; row: gint): PAtkObject; cdecl;
    get_summary: function(table: PAtkTable): PAtkObject; cdecl;
    set_caption: procedure(table: PAtkTable; caption: PAtkObject); cdecl;
    set_column_description: procedure(table: PAtkTable; column: gint; description: Pgchar); cdecl;
    set_column_header: procedure(table: PAtkTable; column: gint; header: PAtkObject); cdecl;
    set_row_description: procedure(table: PAtkTable; row: gint; description: Pgchar); cdecl;
    set_row_header: procedure(table: PAtkTable; row: gint; header: PAtkObject); cdecl;
    set_summary: procedure(table: PAtkTable; accessible: PAtkObject); cdecl;
    get_selected_columns: function(table: PAtkTable; selected: PPgint): gint; cdecl;
    get_selected_rows: function(table: PAtkTable; selected: PPgint): gint; cdecl;
    is_column_selected: function(table: PAtkTable; column: gint): gboolean; cdecl;
    is_row_selected: function(table: PAtkTable; row: gint): gboolean; cdecl;
    is_selected: function(table: PAtkTable; row: gint; column: gint): gboolean; cdecl;
    add_row_selection: function(table: PAtkTable; row: gint): gboolean; cdecl;
    remove_row_selection: function(table: PAtkTable; row: gint): gboolean; cdecl;
    add_column_selection: function(table: PAtkTable; column: gint): gboolean; cdecl;
    remove_column_selection: function(table: PAtkTable; column: gint): gboolean; cdecl;
    row_inserted: procedure(table: PAtkTable; row: gint; num_inserted: gint); cdecl;
    column_inserted: procedure(table: PAtkTable; column: gint; num_inserted: gint); cdecl;
    row_deleted: procedure(table: PAtkTable; row: gint; num_deleted: gint); cdecl;
    column_deleted: procedure(table: PAtkTable; column: gint; num_deleted: gint); cdecl;
    row_reordered: procedure(table: PAtkTable); cdecl;
    column_reordered: procedure(table: PAtkTable); cdecl;
    model_changed: procedure(table: PAtkTable); cdecl;
  end;

  TAtkTextRectangle = record
    x: gint;
    y: gint;
    width: gint;
    height: gint;
  end;


  TAtkTextRange = object
    bounds: TAtkTextRectangle;
    start_offset: gint;
    end_offset: gint;
    content: Pgchar;
  end;


  { TAtkTextBoundary }
  PPAtkTextBoundary = ^PAtkTextBoundary;
  PAtkTextBoundary = ^TAtkTextBoundary;


  { TAtkTextAttribute }
  PPAtkTextAttribute = ^PAtkTextAttribute;
  PAtkTextAttribute = ^TAtkTextAttribute;


  { TAtkTextIface }
  PPAtkTextIface = ^PAtkTextIface;
  PAtkTextIface = ^TAtkTextIface;
  TAtkTextIface = object
    parent: TGTypeInterface;
    get_text: function(text: PAtkText; start_offset: gint; end_offset: gint): Pgchar; cdecl;
    get_text_after_offset: function(text: PAtkText; offset: gint; boundary_type: TAtkTextBoundary; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl;
    get_text_at_offset: function(text: PAtkText; offset: gint; boundary_type: TAtkTextBoundary; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl;
    get_character_at_offset: function(text: PAtkText; offset: gint): gunichar; cdecl;
    get_text_before_offset: function(text: PAtkText; offset: gint; boundary_type: TAtkTextBoundary; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl;
    get_caret_offset: function(text: PAtkText): gint; cdecl;
    get_run_attributes: function(text: PAtkText; offset: gint; start_offset: Pgint; end_offset: Pgint): PAtkAttributeSet; cdecl;
    get_default_attributes: function(text: PAtkText): PAtkAttributeSet; cdecl;
    get_character_extents: procedure(text: PAtkText; offset: gint; x: Pgint; y: Pgint; width: Pgint; height: Pgint; coords: TAtkCoordType); cdecl;
    get_character_count: function(text: PAtkText): gint; cdecl;
    get_offset_at_point: function(text: PAtkText; x: gint; y: gint; coords: TAtkCoordType): gint; cdecl;
    get_n_selections: function(text: PAtkText): gint; cdecl;
    get_selection: function(text: PAtkText; selection_num: gint; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl;
    add_selection: function(text: PAtkText; start_offset: gint; end_offset: gint): gboolean; cdecl;
    remove_selection: function(text: PAtkText; selection_num: gint): gboolean; cdecl;
    set_selection: function(text: PAtkText; selection_num: gint; start_offset: gint; end_offset: gint): gboolean; cdecl;
    set_caret_offset: function(text: PAtkText; offset: gint): gboolean; cdecl;
    text_changed: procedure(text: PAtkText; position: gint; length: gint); cdecl;
    text_caret_moved: procedure(text: PAtkText; location: gint); cdecl;
    text_selection_changed: procedure(text: PAtkText); cdecl;
    text_attributes_changed: procedure(text: PAtkText); cdecl;
    get_range_extents: procedure(text: PAtkText; start_offset: gint; end_offset: gint; coord_type: TAtkCoordType; rect: PAtkTextRectangle); cdecl;
    get_bounded_ranges: function(text: PAtkText; rect: PAtkTextRectangle; coord_type: TAtkCoordType; x_clip_type: TAtkTextClipType; y_clip_type: TAtkTextClipType): PPAtkTextRange; cdecl;
    get_string_at_offset: function(text: PAtkText; offset: gint; granularity: TAtkTextGranularity; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl;
    scroll_substring_to: function(text: PAtkText; start_offset: gint; end_offset: gint; type_: TAtkScrollType): gboolean; cdecl;
    scroll_substring_to_point: function(text: PAtkText; start_offset: gint; end_offset: gint; coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl;
  end;


  { TAtkUtil }
  PPAtkUtil = ^PAtkUtil;
  PAtkUtil = ^TAtkUtil;
  TAtkUtil = object(TGObject)
  end;


  { TAtkUtilClass }
  PPAtkUtilClass = ^PAtkUtilClass;
  PAtkUtilClass = ^TAtkUtilClass;


  { TAtkKeySnoopFunc }
  PPAtkKeySnoopFunc = ^PAtkKeySnoopFunc;
  PAtkKeySnoopFunc = ^TAtkKeySnoopFunc;
  TAtkUtilClass = object
    parent: TGObjectClass;
    add_global_event_listener: function(listener: TGSignalEmissionHook; event_type: Pgchar): guint; cdecl;
    remove_global_event_listener: procedure(listener_id: guint); cdecl;
    add_key_event_listener: function(listener: TAtkKeySnoopFunc; data: gpointer): guint; cdecl;
    remove_key_event_listener: procedure(listener_id: guint); cdecl;
    get_root: function: PAtkObject; cdecl;
    get_toolkit_name: function: Pgchar; cdecl;
    get_toolkit_version: function: Pgchar; cdecl;
  end;


  { TAtkValueIface }
  PPAtkValueIface = ^PAtkValueIface;
  PAtkValueIface = ^TAtkValueIface;
  TAtkValueIface = object
    parent: TGTypeInterface;
    get_current_value: procedure(obj: PAtkValue; value: PGValue); cdecl;
    get_maximum_value: procedure(obj: PAtkValue; value: PGValue); cdecl;
    get_minimum_value: procedure(obj: PAtkValue; value: PGValue); cdecl;
    set_current_value: function(obj: PAtkValue; value: PGValue): gboolean; cdecl;
    get_minimum_increment: procedure(obj: PAtkValue; value: PGValue); cdecl;
    get_value_and_text: procedure(obj: PAtkValue; value: Pgdouble; text: PPgchar); cdecl;
    get_range: function(obj: PAtkValue): PAtkRange; cdecl;
    get_increment: function(obj: PAtkValue): gdouble; cdecl;
    get_sub_ranges: function(obj: PAtkValue): PGSList; cdecl;
    set_value: procedure(obj: PAtkValue; new_value: gdouble); cdecl;
  end;


  { TAtkValueType }
  PPAtkValueType = ^PAtkValueType;
  PAtkValueType = ^TAtkValueType;


  { TAtkWindowIface }
  PPAtkWindowIface = ^PAtkWindowIface;
  PAtkWindowIface = ^TAtkWindowIface;
  TAtkWindowIface = object
    parent: TGTypeInterface;
  end;

function atk_action_do_action(action: PAtkAction; i: gint): gboolean; cdecl; external LazAtk1_library name 'atk_action_do_action';
function atk_action_get_description(action: PAtkAction; i: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_action_get_description';
function atk_action_get_keybinding(action: PAtkAction; i: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_action_get_keybinding';
function atk_action_get_localized_name(action: PAtkAction; i: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_action_get_localized_name';
function atk_action_get_n_actions(action: PAtkAction): gint; cdecl; external LazAtk1_library name 'atk_action_get_n_actions';
function atk_action_get_name(action: PAtkAction; i: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_action_get_name';
function atk_action_get_type: TGType; cdecl; external LazAtk1_library name 'atk_action_get_type';
function atk_action_set_description(action: PAtkAction; i: gint; desc: Pgchar): gboolean; cdecl; external LazAtk1_library name 'atk_action_set_description';
function atk_add_global_event_listener(listener: TGSignalEmissionHook; event_type: Pgchar): guint; cdecl; external LazAtk1_library name 'atk_add_global_event_listener';
function atk_add_key_event_listener(listener: TAtkKeySnoopFunc; data: gpointer): guint; cdecl; external LazAtk1_library name 'atk_add_key_event_listener';
function atk_component_contains(component: PAtkComponent; x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl; external LazAtk1_library name 'atk_component_contains';
function atk_component_get_alpha(component: PAtkComponent): gdouble; cdecl; external LazAtk1_library name 'atk_component_get_alpha';
function atk_component_get_layer(component: PAtkComponent): TAtkLayer; cdecl; external LazAtk1_library name 'atk_component_get_layer';
function atk_component_get_mdi_zorder(component: PAtkComponent): gint; cdecl; external LazAtk1_library name 'atk_component_get_mdi_zorder';
function atk_component_get_type: TGType; cdecl; external LazAtk1_library name 'atk_component_get_type';
function atk_component_grab_focus(component: PAtkComponent): gboolean; cdecl; external LazAtk1_library name 'atk_component_grab_focus';
function atk_component_ref_accessible_at_point(component: PAtkComponent; x: gint; y: gint; coord_type: TAtkCoordType): PAtkObject; cdecl; external LazAtk1_library name 'atk_component_ref_accessible_at_point';
function atk_component_scroll_to(component: PAtkComponent; type_: TAtkScrollType): gboolean; cdecl; external LazAtk1_library name 'atk_component_scroll_to';
function atk_component_scroll_to_point(component: PAtkComponent; coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl; external LazAtk1_library name 'atk_component_scroll_to_point';
function atk_component_set_extents(component: PAtkComponent; x: gint; y: gint; width: gint; height: gint; coord_type: TAtkCoordType): gboolean; cdecl; external LazAtk1_library name 'atk_component_set_extents';
function atk_component_set_position(component: PAtkComponent; x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl; external LazAtk1_library name 'atk_component_set_position';
function atk_component_set_size(component: PAtkComponent; width: gint; height: gint): gboolean; cdecl; external LazAtk1_library name 'atk_component_set_size';
function atk_document_get_attribute_value(document: PAtkDocument; attribute_name: Pgchar): Pgchar; cdecl; external LazAtk1_library name 'atk_document_get_attribute_value';
function atk_document_get_attributes(document: PAtkDocument): PAtkAttributeSet; cdecl; external LazAtk1_library name 'atk_document_get_attributes';
function atk_document_get_current_page_number(document: PAtkDocument): gint; cdecl; external LazAtk1_library name 'atk_document_get_current_page_number';
function atk_document_get_page_count(document: PAtkDocument): gint; cdecl; external LazAtk1_library name 'atk_document_get_page_count';
function atk_document_get_type: TGType; cdecl; external LazAtk1_library name 'atk_document_get_type';
function atk_document_set_attribute_value(document: PAtkDocument; attribute_name: Pgchar; attribute_value: Pgchar): gboolean; cdecl; external LazAtk1_library name 'atk_document_set_attribute_value';
function atk_editable_text_get_type: TGType; cdecl; external LazAtk1_library name 'atk_editable_text_get_type';
function atk_editable_text_set_run_attributes(text: PAtkEditableText; attrib_set: PAtkAttributeSet; start_offset: gint; end_offset: gint): gboolean; cdecl; external LazAtk1_library name 'atk_editable_text_set_run_attributes';
function atk_get_binary_age: guint; cdecl; external LazAtk1_library name 'atk_get_binary_age';
function atk_get_default_registry: PAtkRegistry; cdecl; external LazAtk1_library name 'atk_get_default_registry';
function atk_get_focus_object: PAtkObject; cdecl; external LazAtk1_library name 'atk_get_focus_object';
function atk_get_interface_age: guint; cdecl; external LazAtk1_library name 'atk_get_interface_age';
function atk_get_major_version: guint; cdecl; external LazAtk1_library name 'atk_get_major_version';
function atk_get_micro_version: guint; cdecl; external LazAtk1_library name 'atk_get_micro_version';
function atk_get_minor_version: guint; cdecl; external LazAtk1_library name 'atk_get_minor_version';
function atk_get_root: PAtkObject; cdecl; external LazAtk1_library name 'atk_get_root';
function atk_get_toolkit_name: Pgchar; cdecl; external LazAtk1_library name 'atk_get_toolkit_name';
function atk_get_toolkit_version: Pgchar; cdecl; external LazAtk1_library name 'atk_get_toolkit_version';
function atk_get_version: Pgchar; cdecl; external LazAtk1_library name 'atk_get_version';
function atk_gobject_accessible_for_object(obj: PGObject): PAtkObject; cdecl; external LazAtk1_library name 'atk_gobject_accessible_for_object';
function atk_gobject_accessible_get_object(obj: PAtkGObjectAccessible): PGObject; cdecl; external LazAtk1_library name 'atk_gobject_accessible_get_object';
function atk_gobject_accessible_get_type: TGType; cdecl; external LazAtk1_library name 'atk_gobject_accessible_get_type';
function atk_hyperlink_get_end_index(link_: PAtkHyperlink): gint; cdecl; external LazAtk1_library name 'atk_hyperlink_get_end_index';
function atk_hyperlink_get_n_anchors(link_: PAtkHyperlink): gint; cdecl; external LazAtk1_library name 'atk_hyperlink_get_n_anchors';
function atk_hyperlink_get_object(link_: PAtkHyperlink; i: gint): PAtkObject; cdecl; external LazAtk1_library name 'atk_hyperlink_get_object';
function atk_hyperlink_get_start_index(link_: PAtkHyperlink): gint; cdecl; external LazAtk1_library name 'atk_hyperlink_get_start_index';
function atk_hyperlink_get_type: TGType; cdecl; external LazAtk1_library name 'atk_hyperlink_get_type';
function atk_hyperlink_get_uri(link_: PAtkHyperlink; i: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_hyperlink_get_uri';
function atk_hyperlink_impl_get_hyperlink(impl: PAtkHyperlinkImpl): PAtkHyperlink; cdecl; external LazAtk1_library name 'atk_hyperlink_impl_get_hyperlink';
function atk_hyperlink_impl_get_type: TGType; cdecl; external LazAtk1_library name 'atk_hyperlink_impl_get_type';
function atk_hyperlink_is_inline(link_: PAtkHyperlink): gboolean; cdecl; external LazAtk1_library name 'atk_hyperlink_is_inline';
function atk_hyperlink_is_valid(link_: PAtkHyperlink): gboolean; cdecl; external LazAtk1_library name 'atk_hyperlink_is_valid';
function atk_hypertext_get_link(hypertext: PAtkHypertext; link_index: gint): PAtkHyperlink; cdecl; external LazAtk1_library name 'atk_hypertext_get_link';
function atk_hypertext_get_link_index(hypertext: PAtkHypertext; char_index: gint): gint; cdecl; external LazAtk1_library name 'atk_hypertext_get_link_index';
function atk_hypertext_get_n_links(hypertext: PAtkHypertext): gint; cdecl; external LazAtk1_library name 'atk_hypertext_get_n_links';
function atk_hypertext_get_type: TGType; cdecl; external LazAtk1_library name 'atk_hypertext_get_type';
function atk_image_get_image_description(image: PAtkImage): Pgchar; cdecl; external LazAtk1_library name 'atk_image_get_image_description';
function atk_image_get_image_locale(image: PAtkImage): Pgchar; cdecl; external LazAtk1_library name 'atk_image_get_image_locale';
function atk_image_get_type: TGType; cdecl; external LazAtk1_library name 'atk_image_get_type';
function atk_image_set_image_description(image: PAtkImage; description: Pgchar): gboolean; cdecl; external LazAtk1_library name 'atk_image_set_image_description';
function atk_implementor_get_type: TGType; cdecl; external LazAtk1_library name 'atk_implementor_get_type';
function atk_implementor_ref_accessible(implementor: PAtkImplementor): PAtkObject; cdecl; external LazAtk1_library name 'atk_implementor_ref_accessible';
function atk_misc_get_type: TGType; cdecl; external LazAtk1_library name 'atk_misc_get_type';
function atk_no_op_object_factory_get_type: TGType; cdecl; external LazAtk1_library name 'atk_no_op_object_factory_get_type';
function atk_no_op_object_factory_new: PAtkNoOpObjectFactory; cdecl; external LazAtk1_library name 'atk_no_op_object_factory_new';
function atk_no_op_object_get_type: TGType; cdecl; external LazAtk1_library name 'atk_no_op_object_get_type';
function atk_no_op_object_new(obj: PGObject): PAtkNoOpObject; cdecl; external LazAtk1_library name 'atk_no_op_object_new';
function atk_object_add_relationship(object_: PAtkObject; relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl; external LazAtk1_library name 'atk_object_add_relationship';
function atk_object_factory_create_accessible(factory: PAtkObjectFactory; obj: PGObject): PAtkObject; cdecl; external LazAtk1_library name 'atk_object_factory_create_accessible';
function atk_object_factory_get_accessible_type(factory: PAtkObjectFactory): TGType; cdecl; external LazAtk1_library name 'atk_object_factory_get_accessible_type';
function atk_object_factory_get_type: TGType; cdecl; external LazAtk1_library name 'atk_object_factory_get_type';
function atk_object_get_accessible_id(accessible: PAtkObject): Pgchar; cdecl; external LazAtk1_library name 'atk_object_get_accessible_id';
function atk_object_get_attributes(accessible: PAtkObject): PAtkAttributeSet; cdecl; external LazAtk1_library name 'atk_object_get_attributes';
function atk_object_get_description(accessible: PAtkObject): Pgchar; cdecl; external LazAtk1_library name 'atk_object_get_description';
function atk_object_get_index_in_parent(accessible: PAtkObject): gint; cdecl; external LazAtk1_library name 'atk_object_get_index_in_parent';
function atk_object_get_n_accessible_children(accessible: PAtkObject): gint; cdecl; external LazAtk1_library name 'atk_object_get_n_accessible_children';
function atk_object_get_name(accessible: PAtkObject): Pgchar; cdecl; external LazAtk1_library name 'atk_object_get_name';
function atk_object_get_object_locale(accessible: PAtkObject): Pgchar; cdecl; external LazAtk1_library name 'atk_object_get_object_locale';
function atk_object_get_parent(accessible: PAtkObject): PAtkObject; cdecl; external LazAtk1_library name 'atk_object_get_parent';
function atk_object_get_role(accessible: PAtkObject): TAtkRole; cdecl; external LazAtk1_library name 'atk_object_get_role';
function atk_object_get_type: TGType; cdecl; external LazAtk1_library name 'atk_object_get_type';
function atk_object_peek_parent(accessible: PAtkObject): PAtkObject; cdecl; external LazAtk1_library name 'atk_object_peek_parent';
function atk_object_ref_accessible_child(accessible: PAtkObject; i: gint): PAtkObject; cdecl; external LazAtk1_library name 'atk_object_ref_accessible_child';
function atk_object_ref_relation_set(accessible: PAtkObject): PAtkRelationSet; cdecl; external LazAtk1_library name 'atk_object_ref_relation_set';
function atk_object_ref_state_set(accessible: PAtkObject): PAtkStateSet; cdecl; external LazAtk1_library name 'atk_object_ref_state_set';
function atk_object_remove_relationship(object_: PAtkObject; relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl; external LazAtk1_library name 'atk_object_remove_relationship';
function atk_plug_get_id(plug: PAtkPlug): Pgchar; cdecl; external LazAtk1_library name 'atk_plug_get_id';
function atk_plug_get_type: TGType; cdecl; external LazAtk1_library name 'atk_plug_get_type';
function atk_plug_new: PAtkPlug; cdecl; external LazAtk1_library name 'atk_plug_new';
function atk_range_copy(src: PAtkRange): PAtkRange; cdecl; external LazAtk1_library name 'atk_range_copy';
function atk_range_get_description(range: PAtkRange): Pgchar; cdecl; external LazAtk1_library name 'atk_range_get_description';
function atk_range_get_lower_limit(range: PAtkRange): gdouble; cdecl; external LazAtk1_library name 'atk_range_get_lower_limit';
function atk_range_get_type: TGType; cdecl; external LazAtk1_library name 'atk_range_get_type';
function atk_range_get_upper_limit(range: PAtkRange): gdouble; cdecl; external LazAtk1_library name 'atk_range_get_upper_limit';
function atk_range_new(lower_limit: gdouble; upper_limit: gdouble; description: Pgchar): PAtkRange; cdecl; external LazAtk1_library name 'atk_range_new';
function atk_rectangle_get_type: TGType; cdecl; external LazAtk1_library name 'atk_rectangle_get_type';
function atk_registry_get_factory(registry: PAtkRegistry; type_: TGType): PAtkObjectFactory; cdecl; external LazAtk1_library name 'atk_registry_get_factory';
function atk_registry_get_factory_type(registry: PAtkRegistry; type_: TGType): TGType; cdecl; external LazAtk1_library name 'atk_registry_get_factory_type';
function atk_registry_get_type: TGType; cdecl; external LazAtk1_library name 'atk_registry_get_type';
function atk_relation_get_relation_type(relation: PAtkRelation): TAtkRelationType; cdecl; external LazAtk1_library name 'atk_relation_get_relation_type';
function atk_relation_get_target(relation: PAtkRelation): PAtkObject; cdecl; external LazAtk1_library name 'atk_relation_get_target';
function atk_relation_get_type: TGType; cdecl; external LazAtk1_library name 'atk_relation_get_type';
function atk_relation_new(targets: PPAtkObject; n_targets: gint; relationship: TAtkRelationType): PAtkRelation; cdecl; external LazAtk1_library name 'atk_relation_new';
function atk_relation_remove_target(relation: PAtkRelation; target: PAtkObject): gboolean; cdecl; external LazAtk1_library name 'atk_relation_remove_target';
function atk_relation_set_contains(set_: PAtkRelationSet; relationship: TAtkRelationType): gboolean; cdecl; external LazAtk1_library name 'atk_relation_set_contains';
function atk_relation_set_contains_target(set_: PAtkRelationSet; relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl; external LazAtk1_library name 'atk_relation_set_contains_target';
function atk_relation_set_get_n_relations(set_: PAtkRelationSet): gint; cdecl; external LazAtk1_library name 'atk_relation_set_get_n_relations';
function atk_relation_set_get_relation(set_: PAtkRelationSet; i: gint): PAtkRelation; cdecl; external LazAtk1_library name 'atk_relation_set_get_relation';
function atk_relation_set_get_relation_by_type(set_: PAtkRelationSet; relationship: TAtkRelationType): PAtkRelation; cdecl; external LazAtk1_library name 'atk_relation_set_get_relation_by_type';
function atk_relation_set_get_type: TGType; cdecl; external LazAtk1_library name 'atk_relation_set_get_type';
function atk_relation_set_new: PAtkRelationSet; cdecl; external LazAtk1_library name 'atk_relation_set_new';
function atk_relation_type_for_name(name: Pgchar): TAtkRelationType; cdecl; external LazAtk1_library name 'atk_relation_type_for_name';
function atk_relation_type_get_name(type_: TAtkRelationType): Pgchar; cdecl; external LazAtk1_library name 'atk_relation_type_get_name';
function atk_relation_type_register(name: Pgchar): TAtkRelationType; cdecl; external LazAtk1_library name 'atk_relation_type_register';
function atk_role_for_name(name: Pgchar): TAtkRole; cdecl; external LazAtk1_library name 'atk_role_for_name';
function atk_role_get_localized_name(role: TAtkRole): Pgchar; cdecl; external LazAtk1_library name 'atk_role_get_localized_name';
function atk_role_get_name(role: TAtkRole): Pgchar; cdecl; external LazAtk1_library name 'atk_role_get_name';
function atk_selection_add_selection(selection: PAtkSelection; i: gint): gboolean; cdecl; external LazAtk1_library name 'atk_selection_add_selection';
function atk_selection_clear_selection(selection: PAtkSelection): gboolean; cdecl; external LazAtk1_library name 'atk_selection_clear_selection';
function atk_selection_get_selection_count(selection: PAtkSelection): gint; cdecl; external LazAtk1_library name 'atk_selection_get_selection_count';
function atk_selection_get_type: TGType; cdecl; external LazAtk1_library name 'atk_selection_get_type';
function atk_selection_is_child_selected(selection: PAtkSelection; i: gint): gboolean; cdecl; external LazAtk1_library name 'atk_selection_is_child_selected';
function atk_selection_ref_selection(selection: PAtkSelection; i: gint): PAtkObject; cdecl; external LazAtk1_library name 'atk_selection_ref_selection';
function atk_selection_remove_selection(selection: PAtkSelection; i: gint): gboolean; cdecl; external LazAtk1_library name 'atk_selection_remove_selection';
function atk_selection_select_all_selection(selection: PAtkSelection): gboolean; cdecl; external LazAtk1_library name 'atk_selection_select_all_selection';
function atk_socket_get_type: TGType; cdecl; external LazAtk1_library name 'atk_socket_get_type';
function atk_socket_is_occupied(obj: PAtkSocket): gboolean; cdecl; external LazAtk1_library name 'atk_socket_is_occupied';
function atk_socket_new: PAtkSocket; cdecl; external LazAtk1_library name 'atk_socket_new';
function atk_state_set_add_state(set_: PAtkStateSet; type_: TAtkStateType): gboolean; cdecl; external LazAtk1_library name 'atk_state_set_add_state';
function atk_state_set_and_sets(set_: PAtkStateSet; compare_set: PAtkStateSet): PAtkStateSet; cdecl; external LazAtk1_library name 'atk_state_set_and_sets';
function atk_state_set_contains_state(set_: PAtkStateSet; type_: TAtkStateType): gboolean; cdecl; external LazAtk1_library name 'atk_state_set_contains_state';
function atk_state_set_contains_states(set_: PAtkStateSet; types: PAtkStateType; n_types: gint): gboolean; cdecl; external LazAtk1_library name 'atk_state_set_contains_states';
function atk_state_set_get_type: TGType; cdecl; external LazAtk1_library name 'atk_state_set_get_type';
function atk_state_set_is_empty(set_: PAtkStateSet): gboolean; cdecl; external LazAtk1_library name 'atk_state_set_is_empty';
function atk_state_set_new: PAtkStateSet; cdecl; external LazAtk1_library name 'atk_state_set_new';
function atk_state_set_or_sets(set_: PAtkStateSet; compare_set: PAtkStateSet): PAtkStateSet; cdecl; external LazAtk1_library name 'atk_state_set_or_sets';
function atk_state_set_remove_state(set_: PAtkStateSet; type_: TAtkStateType): gboolean; cdecl; external LazAtk1_library name 'atk_state_set_remove_state';
function atk_state_set_xor_sets(set_: PAtkStateSet; compare_set: PAtkStateSet): PAtkStateSet; cdecl; external LazAtk1_library name 'atk_state_set_xor_sets';
function atk_state_type_for_name(name: Pgchar): TAtkStateType; cdecl; external LazAtk1_library name 'atk_state_type_for_name';
function atk_state_type_get_name(type_: TAtkStateType): Pgchar; cdecl; external LazAtk1_library name 'atk_state_type_get_name';
function atk_state_type_register(name: Pgchar): TAtkStateType; cdecl; external LazAtk1_library name 'atk_state_type_register';
function atk_streamable_content_get_mime_type(streamable: PAtkStreamableContent; i: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_streamable_content_get_mime_type';
function atk_streamable_content_get_n_mime_types(streamable: PAtkStreamableContent): gint; cdecl; external LazAtk1_library name 'atk_streamable_content_get_n_mime_types';
function atk_streamable_content_get_stream(streamable: PAtkStreamableContent; mime_type: Pgchar): PGIOChannel; cdecl; external LazAtk1_library name 'atk_streamable_content_get_stream';
function atk_streamable_content_get_type: TGType; cdecl; external LazAtk1_library name 'atk_streamable_content_get_type';
function atk_streamable_content_get_uri(streamable: PAtkStreamableContent; mime_type: Pgchar): Pgchar; cdecl; external LazAtk1_library name 'atk_streamable_content_get_uri';
function atk_table_add_column_selection(table: PAtkTable; column: gint): gboolean; cdecl; external LazAtk1_library name 'atk_table_add_column_selection';
function atk_table_add_row_selection(table: PAtkTable; row: gint): gboolean; cdecl; external LazAtk1_library name 'atk_table_add_row_selection';
function atk_table_cell_get_column_header_cells(cell: PAtkTableCell): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_cell_get_column_header_cells';
function atk_table_cell_get_column_span(cell: PAtkTableCell): gint; cdecl; external LazAtk1_library name 'atk_table_cell_get_column_span';
function atk_table_cell_get_position(cell: PAtkTableCell; row: Pgint; column: Pgint): gboolean; cdecl; external LazAtk1_library name 'atk_table_cell_get_position';
function atk_table_cell_get_row_column_span(cell: PAtkTableCell; row: Pgint; column: Pgint; row_span: Pgint; column_span: Pgint): gboolean; cdecl; external LazAtk1_library name 'atk_table_cell_get_row_column_span';
function atk_table_cell_get_row_header_cells(cell: PAtkTableCell): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_cell_get_row_header_cells';
function atk_table_cell_get_row_span(cell: PAtkTableCell): gint; cdecl; external LazAtk1_library name 'atk_table_cell_get_row_span';
function atk_table_cell_get_table(cell: PAtkTableCell): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_cell_get_table';
function atk_table_cell_get_type: TGType; cdecl; external LazAtk1_library name 'atk_table_cell_get_type';
function atk_table_get_caption(table: PAtkTable): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_get_caption';
function atk_table_get_column_description(table: PAtkTable; column: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_table_get_column_description';
function atk_table_get_column_extent_at(table: PAtkTable; row: gint; column: gint): gint; cdecl; external LazAtk1_library name 'atk_table_get_column_extent_at';
function atk_table_get_column_header(table: PAtkTable; column: gint): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_get_column_header';
function atk_table_get_n_columns(table: PAtkTable): gint; cdecl; external LazAtk1_library name 'atk_table_get_n_columns';
function atk_table_get_n_rows(table: PAtkTable): gint; cdecl; external LazAtk1_library name 'atk_table_get_n_rows';
function atk_table_get_row_description(table: PAtkTable; row: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_table_get_row_description';
function atk_table_get_row_extent_at(table: PAtkTable; row: gint; column: gint): gint; cdecl; external LazAtk1_library name 'atk_table_get_row_extent_at';
function atk_table_get_row_header(table: PAtkTable; row: gint): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_get_row_header';
function atk_table_get_selected_columns(table: PAtkTable; selected: PPgint): gint; cdecl; external LazAtk1_library name 'atk_table_get_selected_columns';
function atk_table_get_selected_rows(table: PAtkTable; selected: PPgint): gint; cdecl; external LazAtk1_library name 'atk_table_get_selected_rows';
function atk_table_get_summary(table: PAtkTable): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_get_summary';
function atk_table_get_type: TGType; cdecl; external LazAtk1_library name 'atk_table_get_type';
function atk_table_is_column_selected(table: PAtkTable; column: gint): gboolean; cdecl; external LazAtk1_library name 'atk_table_is_column_selected';
function atk_table_is_row_selected(table: PAtkTable; row: gint): gboolean; cdecl; external LazAtk1_library name 'atk_table_is_row_selected';
function atk_table_is_selected(table: PAtkTable; row: gint; column: gint): gboolean; cdecl; external LazAtk1_library name 'atk_table_is_selected';
function atk_table_ref_at(table: PAtkTable; row: gint; column: gint): PAtkObject; cdecl; external LazAtk1_library name 'atk_table_ref_at';
function atk_table_remove_column_selection(table: PAtkTable; column: gint): gboolean; cdecl; external LazAtk1_library name 'atk_table_remove_column_selection';
function atk_table_remove_row_selection(table: PAtkTable; row: gint): gboolean; cdecl; external LazAtk1_library name 'atk_table_remove_row_selection';
function atk_text_add_selection(text: PAtkText; start_offset: gint; end_offset: gint): gboolean; cdecl; external LazAtk1_library name 'atk_text_add_selection';
function atk_text_attribute_for_name(name: Pgchar): TAtkTextAttribute; cdecl; external LazAtk1_library name 'atk_text_attribute_for_name';
function atk_text_attribute_get_name(attr: TAtkTextAttribute): Pgchar; cdecl; external LazAtk1_library name 'atk_text_attribute_get_name';
function atk_text_attribute_get_value(attr: TAtkTextAttribute; index_: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_text_attribute_get_value';
function atk_text_attribute_register(name: Pgchar): TAtkTextAttribute; cdecl; external LazAtk1_library name 'atk_text_attribute_register';
function atk_text_get_bounded_ranges(text: PAtkText; rect: PAtkTextRectangle; coord_type: TAtkCoordType; x_clip_type: TAtkTextClipType; y_clip_type: TAtkTextClipType): PPAtkTextRange; cdecl; external LazAtk1_library name 'atk_text_get_bounded_ranges';
function atk_text_get_caret_offset(text: PAtkText): gint; cdecl; external LazAtk1_library name 'atk_text_get_caret_offset';
function atk_text_get_character_at_offset(text: PAtkText; offset: gint): gunichar; cdecl; external LazAtk1_library name 'atk_text_get_character_at_offset';
function atk_text_get_character_count(text: PAtkText): gint; cdecl; external LazAtk1_library name 'atk_text_get_character_count';
function atk_text_get_default_attributes(text: PAtkText): PAtkAttributeSet; cdecl; external LazAtk1_library name 'atk_text_get_default_attributes';
function atk_text_get_n_selections(text: PAtkText): gint; cdecl; external LazAtk1_library name 'atk_text_get_n_selections';
function atk_text_get_offset_at_point(text: PAtkText; x: gint; y: gint; coords: TAtkCoordType): gint; cdecl; external LazAtk1_library name 'atk_text_get_offset_at_point';
function atk_text_get_run_attributes(text: PAtkText; offset: gint; start_offset: Pgint; end_offset: Pgint): PAtkAttributeSet; cdecl; external LazAtk1_library name 'atk_text_get_run_attributes';
function atk_text_get_selection(text: PAtkText; selection_num: gint; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl; external LazAtk1_library name 'atk_text_get_selection';
function atk_text_get_string_at_offset(text: PAtkText; offset: gint; granularity: TAtkTextGranularity; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl; external LazAtk1_library name 'atk_text_get_string_at_offset';
function atk_text_get_text(text: PAtkText; start_offset: gint; end_offset: gint): Pgchar; cdecl; external LazAtk1_library name 'atk_text_get_text';
function atk_text_get_type: TGType; cdecl; external LazAtk1_library name 'atk_text_get_type';
function atk_text_range_get_type: TGType; cdecl; external LazAtk1_library name 'atk_text_range_get_type';
function atk_text_remove_selection(text: PAtkText; selection_num: gint): gboolean; cdecl; external LazAtk1_library name 'atk_text_remove_selection';
function atk_text_scroll_substring_to(text: PAtkText; start_offset: gint; end_offset: gint; type_: TAtkScrollType): gboolean; cdecl; external LazAtk1_library name 'atk_text_scroll_substring_to';
function atk_text_scroll_substring_to_point(text: PAtkText; start_offset: gint; end_offset: gint; coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl; external LazAtk1_library name 'atk_text_scroll_substring_to_point';
function atk_text_set_caret_offset(text: PAtkText; offset: gint): gboolean; cdecl; external LazAtk1_library name 'atk_text_set_caret_offset';
function atk_text_set_selection(text: PAtkText; selection_num: gint; start_offset: gint; end_offset: gint): gboolean; cdecl; external LazAtk1_library name 'atk_text_set_selection';
function atk_util_get_type: TGType; cdecl; external LazAtk1_library name 'atk_util_get_type';
function atk_value_get_increment(obj: PAtkValue): gdouble; cdecl; external LazAtk1_library name 'atk_value_get_increment';
function atk_value_get_range(obj: PAtkValue): PAtkRange; cdecl; external LazAtk1_library name 'atk_value_get_range';
function atk_value_get_sub_ranges(obj: PAtkValue): PGSList; cdecl; external LazAtk1_library name 'atk_value_get_sub_ranges';
function atk_value_get_type: TGType; cdecl; external LazAtk1_library name 'atk_value_get_type';
function atk_value_type_get_localized_name(value_type: TAtkValueType): Pgchar; cdecl; external LazAtk1_library name 'atk_value_type_get_localized_name';
function atk_value_type_get_name(value_type: TAtkValueType): Pgchar; cdecl; external LazAtk1_library name 'atk_value_type_get_name';
function atk_window_get_type: TGType; cdecl; external LazAtk1_library name 'atk_window_get_type';
procedure atk_attribute_set_free(attrib_set: PAtkAttributeSet); cdecl; external LazAtk1_library name 'atk_attribute_set_free';
procedure atk_component_get_extents(component: PAtkComponent; x: Pgint; y: Pgint; width: Pgint; height: Pgint; coord_type: TAtkCoordType); cdecl; external LazAtk1_library name 'atk_component_get_extents';
procedure atk_editable_text_copy_text(text: PAtkEditableText; start_pos: gint; end_pos: gint); cdecl; external LazAtk1_library name 'atk_editable_text_copy_text';
procedure atk_editable_text_cut_text(text: PAtkEditableText; start_pos: gint; end_pos: gint); cdecl; external LazAtk1_library name 'atk_editable_text_cut_text';
procedure atk_editable_text_delete_text(text: PAtkEditableText; start_pos: gint; end_pos: gint); cdecl; external LazAtk1_library name 'atk_editable_text_delete_text';
procedure atk_editable_text_insert_text(text: PAtkEditableText; string_: Pgchar; length: gint; position: Pgint); cdecl; external LazAtk1_library name 'atk_editable_text_insert_text';
procedure atk_editable_text_paste_text(text: PAtkEditableText; position: gint); cdecl; external LazAtk1_library name 'atk_editable_text_paste_text';
procedure atk_editable_text_set_text_contents(text: PAtkEditableText; string_: Pgchar); cdecl; external LazAtk1_library name 'atk_editable_text_set_text_contents';
procedure atk_image_get_image_position(image: PAtkImage; x: Pgint; y: Pgint; coord_type: TAtkCoordType); cdecl; external LazAtk1_library name 'atk_image_get_image_position';
procedure atk_image_get_image_size(image: PAtkImage; width: Pgint; height: Pgint); cdecl; external LazAtk1_library name 'atk_image_get_image_size';
procedure atk_object_factory_invalidate(factory: PAtkObjectFactory); cdecl; external LazAtk1_library name 'atk_object_factory_invalidate';
procedure atk_object_initialize(accessible: PAtkObject; data: gpointer); cdecl; external LazAtk1_library name 'atk_object_initialize';
procedure atk_object_notify_state_change(accessible: PAtkObject; state: TAtkState; value: gboolean); cdecl; external LazAtk1_library name 'atk_object_notify_state_change';
procedure atk_object_set_accessible_id(accessible: PAtkObject; name: Pgchar); cdecl; external LazAtk1_library name 'atk_object_set_accessible_id';
procedure atk_object_set_description(accessible: PAtkObject; description: Pgchar); cdecl; external LazAtk1_library name 'atk_object_set_description';
procedure atk_object_set_name(accessible: PAtkObject; name: Pgchar); cdecl; external LazAtk1_library name 'atk_object_set_name';
procedure atk_object_set_parent(accessible: PAtkObject; parent: PAtkObject); cdecl; external LazAtk1_library name 'atk_object_set_parent';
procedure atk_object_set_role(accessible: PAtkObject; role: TAtkRole); cdecl; external LazAtk1_library name 'atk_object_set_role';
procedure atk_plug_set_child(plug: PAtkPlug; child: PAtkObject); cdecl; external LazAtk1_library name 'atk_plug_set_child';
procedure atk_range_free(range: PAtkRange); cdecl; external LazAtk1_library name 'atk_range_free';
procedure atk_registry_set_factory_type(registry: PAtkRegistry; type_: TGType; factory_type: TGType); cdecl; external LazAtk1_library name 'atk_registry_set_factory_type';
procedure atk_relation_add_target(relation: PAtkRelation; target: PAtkObject); cdecl; external LazAtk1_library name 'atk_relation_add_target';
procedure atk_relation_set_add(set_: PAtkRelationSet; relation: PAtkRelation); cdecl; external LazAtk1_library name 'atk_relation_set_add';
procedure atk_relation_set_add_relation_by_type(set_: PAtkRelationSet; relationship: TAtkRelationType; target: PAtkObject); cdecl; external LazAtk1_library name 'atk_relation_set_add_relation_by_type';
procedure atk_relation_set_remove(set_: PAtkRelationSet; relation: PAtkRelation); cdecl; external LazAtk1_library name 'atk_relation_set_remove';
procedure atk_remove_global_event_listener(listener_id: guint); cdecl; external LazAtk1_library name 'atk_remove_global_event_listener';
procedure atk_remove_key_event_listener(listener_id: guint); cdecl; external LazAtk1_library name 'atk_remove_key_event_listener';
procedure atk_socket_embed(obj: PAtkSocket; plug_id: Pgchar); cdecl; external LazAtk1_library name 'atk_socket_embed';
procedure atk_state_set_add_states(set_: PAtkStateSet; types: PAtkStateType; n_types: gint); cdecl; external LazAtk1_library name 'atk_state_set_add_states';
procedure atk_state_set_clear_states(set_: PAtkStateSet); cdecl; external LazAtk1_library name 'atk_state_set_clear_states';
procedure atk_table_set_caption(table: PAtkTable; caption: PAtkObject); cdecl; external LazAtk1_library name 'atk_table_set_caption';
procedure atk_table_set_column_description(table: PAtkTable; column: gint; description: Pgchar); cdecl; external LazAtk1_library name 'atk_table_set_column_description';
procedure atk_table_set_column_header(table: PAtkTable; column: gint; header: PAtkObject); cdecl; external LazAtk1_library name 'atk_table_set_column_header';
procedure atk_table_set_row_description(table: PAtkTable; row: gint; description: Pgchar); cdecl; external LazAtk1_library name 'atk_table_set_row_description';
procedure atk_table_set_row_header(table: PAtkTable; row: gint; header: PAtkObject); cdecl; external LazAtk1_library name 'atk_table_set_row_header';
procedure atk_table_set_summary(table: PAtkTable; accessible: PAtkObject); cdecl; external LazAtk1_library name 'atk_table_set_summary';
procedure atk_text_free_ranges(ranges: PPAtkTextRange); cdecl; external LazAtk1_library name 'atk_text_free_ranges';
procedure atk_text_get_character_extents(text: PAtkText; offset: gint; x: Pgint; y: Pgint; width: Pgint; height: Pgint; coords: TAtkCoordType); cdecl; external LazAtk1_library name 'atk_text_get_character_extents';
procedure atk_text_get_range_extents(text: PAtkText; start_offset: gint; end_offset: gint; coord_type: TAtkCoordType; rect: PAtkTextRectangle); cdecl; external LazAtk1_library name 'atk_text_get_range_extents';
procedure atk_value_get_value_and_text(obj: PAtkValue; value: Pgdouble; text: PPgchar); cdecl; external LazAtk1_library name 'atk_value_get_value_and_text';
procedure atk_value_set_value(obj: PAtkValue; new_value: gdouble); cdecl; external LazAtk1_library name 'atk_value_set_value';
implementation
function TAtkAction.do_action(i: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_action_do_action(@self, i);
end;

function TAtkAction.get_description(i: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_action_get_description(@self, i);
end;

function TAtkAction.get_keybinding(i: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_action_get_keybinding(@self, i);
end;

function TAtkAction.get_localized_name(i: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_action_get_localized_name(@self, i);
end;

function TAtkAction.get_n_actions: gint; cdecl;
begin
  Result := LazAtk1.atk_action_get_n_actions(@self);
end;

function TAtkAction.get_name(i: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_action_get_name(@self, i);
end;

function TAtkAction.set_description(i: gint; desc: Pgchar): gboolean; cdecl;
begin
  Result := LazAtk1.atk_action_set_description(@self, i, desc);
end;

procedure TAtkAttribute.set_free(attrib_set: PAtkAttributeSet); cdecl;
begin
  LazAtk1.atk_attribute_set_free(attrib_set);
end;

function TAtkComponent.contains(x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_component_contains(@self, x, y, coord_type);
end;

function TAtkComponent.get_alpha: gdouble; cdecl;
begin
  Result := LazAtk1.atk_component_get_alpha(@self);
end;

procedure TAtkComponent.get_extents(x: Pgint; y: Pgint; width: Pgint; height: Pgint; coord_type: TAtkCoordType); cdecl;
begin
  LazAtk1.atk_component_get_extents(@self, x, y, width, height, coord_type);
end;

function TAtkComponent.get_layer: TAtkLayer; cdecl;
begin
  Result := LazAtk1.atk_component_get_layer(@self);
end;

function TAtkComponent.get_mdi_zorder: gint; cdecl;
begin
  Result := LazAtk1.atk_component_get_mdi_zorder(@self);
end;

function TAtkComponent.grab_focus: gboolean; cdecl;
begin
  Result := LazAtk1.atk_component_grab_focus(@self);
end;

function TAtkComponent.ref_accessible_at_point(x: gint; y: gint; coord_type: TAtkCoordType): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_component_ref_accessible_at_point(@self, x, y, coord_type);
end;

function TAtkComponent.scroll_to(type_: TAtkScrollType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_component_scroll_to(@self, type_);
end;

function TAtkComponent.scroll_to_point(coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_component_scroll_to_point(@self, coords, x, y);
end;

function TAtkComponent.set_extents(x: gint; y: gint; width: gint; height: gint; coord_type: TAtkCoordType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_component_set_extents(@self, x, y, width, height, coord_type);
end;

function TAtkComponent.set_position(x: gint; y: gint; coord_type: TAtkCoordType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_component_set_position(@self, x, y, coord_type);
end;

function TAtkComponent.set_size(width: gint; height: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_component_set_size(@self, width, height);
end;

function TAtkObject.add_relationship(relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl;
begin
  Result := LazAtk1.atk_object_add_relationship(@self, relationship, target);
end;

function TAtkObject.get_accessible_id: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_object_get_accessible_id(@self);
end;

function TAtkObject.get_attributes: PAtkAttributeSet; cdecl;
begin
  Result := LazAtk1.atk_object_get_attributes(@self);
end;

function TAtkObject.get_description: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_object_get_description(@self);
end;

function TAtkObject.get_index_in_parent: gint; cdecl;
begin
  Result := LazAtk1.atk_object_get_index_in_parent(@self);
end;

function TAtkObject.get_n_accessible_children: gint; cdecl;
begin
  Result := LazAtk1.atk_object_get_n_accessible_children(@self);
end;

function TAtkObject.get_name: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_object_get_name(@self);
end;

function TAtkObject.get_object_locale: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_object_get_object_locale(@self);
end;

function TAtkObject.get_parent: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_object_get_parent(@self);
end;

function TAtkObject.get_role: TAtkRole; cdecl;
begin
  Result := LazAtk1.atk_object_get_role(@self);
end;

procedure TAtkObject.initialize(data: gpointer); cdecl;
begin
  LazAtk1.atk_object_initialize(@self, data);
end;

procedure TAtkObject.notify_state_change(state: TAtkState; value: gboolean); cdecl;
begin
  LazAtk1.atk_object_notify_state_change(@self, state, value);
end;

function TAtkObject.peek_parent: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_object_peek_parent(@self);
end;

function TAtkObject.ref_accessible_child(i: gint): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_object_ref_accessible_child(@self, i);
end;

function TAtkObject.ref_relation_set: PAtkRelationSet; cdecl;
begin
  Result := LazAtk1.atk_object_ref_relation_set(@self);
end;

function TAtkObject.ref_state_set: PAtkStateSet; cdecl;
begin
  Result := LazAtk1.atk_object_ref_state_set(@self);
end;

function TAtkObject.remove_relationship(relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl;
begin
  Result := LazAtk1.atk_object_remove_relationship(@self, relationship, target);
end;

procedure TAtkObject.set_accessible_id(name: Pgchar); cdecl;
begin
  LazAtk1.atk_object_set_accessible_id(@self, name);
end;

procedure TAtkObject.set_description(description: Pgchar); cdecl;
begin
  LazAtk1.atk_object_set_description(@self, description);
end;

procedure TAtkObject.set_name(name: Pgchar); cdecl;
begin
  LazAtk1.atk_object_set_name(@self, name);
end;

procedure TAtkObject.set_parent(parent: PAtkObject); cdecl;
begin
  LazAtk1.atk_object_set_parent(@self, parent);
end;

procedure TAtkObject.set_role(role: TAtkRole); cdecl;
begin
  LazAtk1.atk_object_set_role(@self, role);
end;

function TAtkDocument.get_attribute_value(attribute_name: Pgchar): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_document_get_attribute_value(@self, attribute_name);
end;

function TAtkDocument.get_attributes: PAtkAttributeSet; cdecl;
begin
  Result := LazAtk1.atk_document_get_attributes(@self);
end;

function TAtkDocument.get_current_page_number: gint; cdecl;
begin
  Result := LazAtk1.atk_document_get_current_page_number(@self);
end;

function TAtkDocument.get_page_count: gint; cdecl;
begin
  Result := LazAtk1.atk_document_get_page_count(@self);
end;

function TAtkDocument.set_attribute_value(attribute_name: Pgchar; attribute_value: Pgchar): gboolean; cdecl;
begin
  Result := LazAtk1.atk_document_set_attribute_value(@self, attribute_name, attribute_value);
end;

procedure TAtkEditableText.copy_text(start_pos: gint; end_pos: gint); cdecl;
begin
  LazAtk1.atk_editable_text_copy_text(@self, start_pos, end_pos);
end;

procedure TAtkEditableText.cut_text(start_pos: gint; end_pos: gint); cdecl;
begin
  LazAtk1.atk_editable_text_cut_text(@self, start_pos, end_pos);
end;

procedure TAtkEditableText.delete_text(start_pos: gint; end_pos: gint); cdecl;
begin
  LazAtk1.atk_editable_text_delete_text(@self, start_pos, end_pos);
end;

procedure TAtkEditableText.insert_text(string_: Pgchar; length: gint; position: Pgint); cdecl;
begin
  LazAtk1.atk_editable_text_insert_text(@self, string_, length, position);
end;

procedure TAtkEditableText.paste_text(position: gint); cdecl;
begin
  LazAtk1.atk_editable_text_paste_text(@self, position);
end;

function TAtkEditableText.set_run_attributes(attrib_set: PAtkAttributeSet; start_offset: gint; end_offset: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_editable_text_set_run_attributes(@self, attrib_set, start_offset, end_offset);
end;

procedure TAtkEditableText.set_text_contents(string_: Pgchar); cdecl;
begin
  LazAtk1.atk_editable_text_set_text_contents(@self, string_);
end;

function TAtkGObjectAccessible.for_object(obj: PGObject): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_gobject_accessible_for_object(obj);
end;

function TAtkGObjectAccessible.get_object: PGObject; cdecl;
begin
  Result := LazAtk1.atk_gobject_accessible_get_object(@self);
end;

function TAtkHyperlink.get_end_index: gint; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_get_end_index(@self);
end;

function TAtkHyperlink.get_n_anchors: gint; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_get_n_anchors(@self);
end;

function TAtkHyperlink.get_object(i: gint): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_get_object(@self, i);
end;

function TAtkHyperlink.get_start_index: gint; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_get_start_index(@self);
end;

function TAtkHyperlink.get_uri(i: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_get_uri(@self, i);
end;

function TAtkHyperlink.is_inline: gboolean; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_is_inline(@self);
end;

function TAtkHyperlink.is_valid: gboolean; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_is_valid(@self);
end;

function TAtkHyperlinkImpl.get_hyperlink: PAtkHyperlink; cdecl;
begin
  Result := LazAtk1.atk_hyperlink_impl_get_hyperlink(@self);
end;

function TAtkHypertext.get_link(link_index: gint): PAtkHyperlink; cdecl;
begin
  Result := LazAtk1.atk_hypertext_get_link(@self, link_index);
end;

function TAtkHypertext.get_link_index(char_index: gint): gint; cdecl;
begin
  Result := LazAtk1.atk_hypertext_get_link_index(@self, char_index);
end;

function TAtkHypertext.get_n_links: gint; cdecl;
begin
  Result := LazAtk1.atk_hypertext_get_n_links(@self);
end;

function TAtkImage.get_image_description: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_image_get_image_description(@self);
end;

function TAtkImage.get_image_locale: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_image_get_image_locale(@self);
end;

procedure TAtkImage.get_image_position(x: Pgint; y: Pgint; coord_type: TAtkCoordType); cdecl;
begin
  LazAtk1.atk_image_get_image_position(@self, x, y, coord_type);
end;

procedure TAtkImage.get_image_size(width: Pgint; height: Pgint); cdecl;
begin
  LazAtk1.atk_image_get_image_size(@self, width, height);
end;

function TAtkImage.set_image_description(description: Pgchar): gboolean; cdecl;
begin
  Result := LazAtk1.atk_image_set_image_description(@self, description);
end;

function TAtkImplementor.ref_accessible: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_implementor_ref_accessible(@self);
end;

function TAtkSelection.add_selection(i: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_selection_add_selection(@self, i);
end;

function TAtkSelection.clear_selection: gboolean; cdecl;
begin
  Result := LazAtk1.atk_selection_clear_selection(@self);
end;

function TAtkSelection.get_selection_count: gint; cdecl;
begin
  Result := LazAtk1.atk_selection_get_selection_count(@self);
end;

function TAtkSelection.is_child_selected(i: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_selection_is_child_selected(@self, i);
end;

function TAtkSelection.ref_selection(i: gint): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_selection_ref_selection(@self, i);
end;

function TAtkSelection.remove_selection(i: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_selection_remove_selection(@self, i);
end;

function TAtkSelection.select_all_selection: gboolean; cdecl;
begin
  Result := LazAtk1.atk_selection_select_all_selection(@self);
end;

function TAtkTable.add_column_selection(column: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_add_column_selection(@self, column);
end;

function TAtkTable.add_row_selection(row: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_add_row_selection(@self, row);
end;

function TAtkTable.get_caption: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_get_caption(@self);
end;

function TAtkTable.get_column_description(column: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_table_get_column_description(@self, column);
end;

function TAtkTable.get_column_extent_at(row: gint; column: gint): gint; cdecl;
begin
  Result := LazAtk1.atk_table_get_column_extent_at(@self, row, column);
end;

function TAtkTable.get_column_header(column: gint): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_get_column_header(@self, column);
end;

function TAtkTable.get_n_columns: gint; cdecl;
begin
  Result := LazAtk1.atk_table_get_n_columns(@self);
end;

function TAtkTable.get_n_rows: gint; cdecl;
begin
  Result := LazAtk1.atk_table_get_n_rows(@self);
end;

function TAtkTable.get_row_description(row: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_table_get_row_description(@self, row);
end;

function TAtkTable.get_row_extent_at(row: gint; column: gint): gint; cdecl;
begin
  Result := LazAtk1.atk_table_get_row_extent_at(@self, row, column);
end;

function TAtkTable.get_row_header(row: gint): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_get_row_header(@self, row);
end;

function TAtkTable.get_selected_columns(selected: PPgint): gint; cdecl;
begin
  Result := LazAtk1.atk_table_get_selected_columns(@self, selected);
end;

function TAtkTable.get_selected_rows(selected: PPgint): gint; cdecl;
begin
  Result := LazAtk1.atk_table_get_selected_rows(@self, selected);
end;

function TAtkTable.get_summary: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_get_summary(@self);
end;

function TAtkTable.is_column_selected(column: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_is_column_selected(@self, column);
end;

function TAtkTable.is_row_selected(row: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_is_row_selected(@self, row);
end;

function TAtkTable.is_selected(row: gint; column: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_is_selected(@self, row, column);
end;

function TAtkTable.ref_at(row: gint; column: gint): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_ref_at(@self, row, column);
end;

function TAtkTable.remove_column_selection(column: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_remove_column_selection(@self, column);
end;

function TAtkTable.remove_row_selection(row: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_remove_row_selection(@self, row);
end;

procedure TAtkTable.set_caption(caption: PAtkObject); cdecl;
begin
  LazAtk1.atk_table_set_caption(@self, caption);
end;

procedure TAtkTable.set_column_description(column: gint; description: Pgchar); cdecl;
begin
  LazAtk1.atk_table_set_column_description(@self, column, description);
end;

procedure TAtkTable.set_column_header(column: gint; header: PAtkObject); cdecl;
begin
  LazAtk1.atk_table_set_column_header(@self, column, header);
end;

procedure TAtkTable.set_row_description(row: gint; description: Pgchar); cdecl;
begin
  LazAtk1.atk_table_set_row_description(@self, row, description);
end;

procedure TAtkTable.set_row_header(row: gint; header: PAtkObject); cdecl;
begin
  LazAtk1.atk_table_set_row_header(@self, row, header);
end;

procedure TAtkTable.set_summary(accessible: PAtkObject); cdecl;
begin
  LazAtk1.atk_table_set_summary(@self, accessible);
end;

function TAtkTableCell.get_column_header_cells: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_cell_get_column_header_cells(@self);
end;

function TAtkTableCell.get_column_span: gint; cdecl;
begin
  Result := LazAtk1.atk_table_cell_get_column_span(@self);
end;

function TAtkTableCell.get_position(row: Pgint; column: Pgint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_cell_get_position(@self, row, column);
end;

function TAtkTableCell.get_row_column_span(row: Pgint; column: Pgint; row_span: Pgint; column_span: Pgint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_table_cell_get_row_column_span(@self, row, column, row_span, column_span);
end;

function TAtkTableCell.get_row_header_cells: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_cell_get_row_header_cells(@self);
end;

function TAtkTableCell.get_row_span: gint; cdecl;
begin
  Result := LazAtk1.atk_table_cell_get_row_span(@self);
end;

function TAtkTableCell.get_table: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_table_cell_get_table(@self);
end;

procedure TAtkText.free_ranges(ranges: PPAtkTextRange); cdecl;
begin
  LazAtk1.atk_text_free_ranges(ranges);
end;

function TAtkText.add_selection(start_offset: gint; end_offset: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_text_add_selection(@self, start_offset, end_offset);
end;

function TAtkText.get_bounded_ranges(rect: PAtkTextRectangle; coord_type: TAtkCoordType; x_clip_type: TAtkTextClipType; y_clip_type: TAtkTextClipType): PPAtkTextRange; cdecl;
begin
  Result := LazAtk1.atk_text_get_bounded_ranges(@self, rect, coord_type, x_clip_type, y_clip_type);
end;

function TAtkText.get_caret_offset: gint; cdecl;
begin
  Result := LazAtk1.atk_text_get_caret_offset(@self);
end;

function TAtkText.get_character_at_offset(offset: gint): gunichar; cdecl;
begin
  Result := LazAtk1.atk_text_get_character_at_offset(@self, offset);
end;

function TAtkText.get_character_count: gint; cdecl;
begin
  Result := LazAtk1.atk_text_get_character_count(@self);
end;

procedure TAtkText.get_character_extents(offset: gint; x: Pgint; y: Pgint; width: Pgint; height: Pgint; coords: TAtkCoordType); cdecl;
begin
  LazAtk1.atk_text_get_character_extents(@self, offset, x, y, width, height, coords);
end;

function TAtkText.get_default_attributes: PAtkAttributeSet; cdecl;
begin
  Result := LazAtk1.atk_text_get_default_attributes(@self);
end;

function TAtkText.get_n_selections: gint; cdecl;
begin
  Result := LazAtk1.atk_text_get_n_selections(@self);
end;

function TAtkText.get_offset_at_point(x: gint; y: gint; coords: TAtkCoordType): gint; cdecl;
begin
  Result := LazAtk1.atk_text_get_offset_at_point(@self, x, y, coords);
end;

procedure TAtkText.get_range_extents(start_offset: gint; end_offset: gint; coord_type: TAtkCoordType; rect: PAtkTextRectangle); cdecl;
begin
  LazAtk1.atk_text_get_range_extents(@self, start_offset, end_offset, coord_type, rect);
end;

function TAtkText.get_run_attributes(offset: gint; start_offset: Pgint; end_offset: Pgint): PAtkAttributeSet; cdecl;
begin
  Result := LazAtk1.atk_text_get_run_attributes(@self, offset, start_offset, end_offset);
end;

function TAtkText.get_selection(selection_num: gint; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_text_get_selection(@self, selection_num, start_offset, end_offset);
end;

function TAtkText.get_string_at_offset(offset: gint; granularity: TAtkTextGranularity; start_offset: Pgint; end_offset: Pgint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_text_get_string_at_offset(@self, offset, granularity, start_offset, end_offset);
end;

function TAtkText.get_text(start_offset: gint; end_offset: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_text_get_text(@self, start_offset, end_offset);
end;

function TAtkText.remove_selection(selection_num: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_text_remove_selection(@self, selection_num);
end;

function TAtkText.scroll_substring_to(start_offset: gint; end_offset: gint; type_: TAtkScrollType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_text_scroll_substring_to(@self, start_offset, end_offset, type_);
end;

function TAtkText.scroll_substring_to_point(start_offset: gint; end_offset: gint; coords: TAtkCoordType; x: gint; y: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_text_scroll_substring_to_point(@self, start_offset, end_offset, coords, x, y);
end;

function TAtkText.set_caret_offset(offset: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_text_set_caret_offset(@self, offset);
end;

function TAtkText.set_selection(selection_num: gint; start_offset: gint; end_offset: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_text_set_selection(@self, selection_num, start_offset, end_offset);
end;

function TAtkValue.get_increment: gdouble; cdecl;
begin
  Result := LazAtk1.atk_value_get_increment(@self);
end;

function TAtkValue.get_range: PAtkRange; cdecl;
begin
  Result := LazAtk1.atk_value_get_range(@self);
end;

function TAtkValue.get_sub_ranges: PGSList; cdecl;
begin
  Result := LazAtk1.atk_value_get_sub_ranges(@self);
end;

procedure TAtkValue.get_value_and_text(value: Pgdouble; text: PPgchar); cdecl;
begin
  LazAtk1.atk_value_get_value_and_text(@self, value, text);
end;

procedure TAtkValue.set_value(new_value: gdouble); cdecl;
begin
  LazAtk1.atk_value_set_value(@self, new_value);
end;

function TAtkNoOpObject.new(obj: PGObject): PAtkNoOpObject; cdecl;
begin
  Result := LazAtk1.atk_no_op_object_new(obj);
end;

function TAtkObjectFactory.create_accessible(obj: PGObject): PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_object_factory_create_accessible(@self, obj);
end;

function TAtkObjectFactory.get_accessible_type: TGType; cdecl;
begin
  Result := LazAtk1.atk_object_factory_get_accessible_type(@self);
end;

procedure TAtkObjectFactory.invalidate; cdecl;
begin
  LazAtk1.atk_object_factory_invalidate(@self);
end;

function TAtkNoOpObjectFactory.new: PAtkNoOpObjectFactory; cdecl;
begin
  Result := LazAtk1.atk_no_op_object_factory_new();
end;

function TAtkRelationSet.new: PAtkRelationSet; cdecl;
begin
  Result := LazAtk1.atk_relation_set_new();
end;

procedure TAtkRelationSet.add(relation: PAtkRelation); cdecl;
begin
  LazAtk1.atk_relation_set_add(@self, relation);
end;

procedure TAtkRelationSet.add_relation_by_type(relationship: TAtkRelationType; target: PAtkObject); cdecl;
begin
  LazAtk1.atk_relation_set_add_relation_by_type(@self, relationship, target);
end;

function TAtkRelationSet.contains(relationship: TAtkRelationType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_relation_set_contains(@self, relationship);
end;

function TAtkRelationSet.contains_target(relationship: TAtkRelationType; target: PAtkObject): gboolean; cdecl;
begin
  Result := LazAtk1.atk_relation_set_contains_target(@self, relationship, target);
end;

function TAtkRelationSet.get_n_relations: gint; cdecl;
begin
  Result := LazAtk1.atk_relation_set_get_n_relations(@self);
end;

function TAtkRelationSet.get_relation(i: gint): PAtkRelation; cdecl;
begin
  Result := LazAtk1.atk_relation_set_get_relation(@self, i);
end;

function TAtkRelationSet.get_relation_by_type(relationship: TAtkRelationType): PAtkRelation; cdecl;
begin
  Result := LazAtk1.atk_relation_set_get_relation_by_type(@self, relationship);
end;

procedure TAtkRelationSet.remove(relation: PAtkRelation); cdecl;
begin
  LazAtk1.atk_relation_set_remove(@self, relation);
end;

function TAtkStateSet.new: PAtkStateSet; cdecl;
begin
  Result := LazAtk1.atk_state_set_new();
end;

function TAtkStateSet.add_state(type_: TAtkStateType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_state_set_add_state(@self, type_);
end;

procedure TAtkStateSet.add_states(types: PAtkStateType; n_types: gint); cdecl;
begin
  LazAtk1.atk_state_set_add_states(@self, types, n_types);
end;

function TAtkStateSet.and_sets(compare_set: PAtkStateSet): PAtkStateSet; cdecl;
begin
  Result := LazAtk1.atk_state_set_and_sets(@self, compare_set);
end;

procedure TAtkStateSet.clear_states; cdecl;
begin
  LazAtk1.atk_state_set_clear_states(@self);
end;

function TAtkStateSet.contains_state(type_: TAtkStateType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_state_set_contains_state(@self, type_);
end;

function TAtkStateSet.contains_states(types: PAtkStateType; n_types: gint): gboolean; cdecl;
begin
  Result := LazAtk1.atk_state_set_contains_states(@self, types, n_types);
end;

function TAtkStateSet.is_empty: gboolean; cdecl;
begin
  Result := LazAtk1.atk_state_set_is_empty(@self);
end;

function TAtkStateSet.or_sets(compare_set: PAtkStateSet): PAtkStateSet; cdecl;
begin
  Result := LazAtk1.atk_state_set_or_sets(@self, compare_set);
end;

function TAtkStateSet.remove_state(type_: TAtkStateType): gboolean; cdecl;
begin
  Result := LazAtk1.atk_state_set_remove_state(@self, type_);
end;

function TAtkStateSet.xor_sets(compare_set: PAtkStateSet): PAtkStateSet; cdecl;
begin
  Result := LazAtk1.atk_state_set_xor_sets(@self, compare_set);
end;

function TAtkPlug.new: PAtkPlug; cdecl;
begin
  Result := LazAtk1.atk_plug_new();
end;

function TAtkPlug.get_id: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_plug_get_id(@self);
end;

procedure TAtkPlug.set_child(child: PAtkObject); cdecl;
begin
  LazAtk1.atk_plug_set_child(@self, child);
end;

function TAtkRange.new(lower_limit: gdouble; upper_limit: gdouble; description: Pgchar): PAtkRange; cdecl;
begin
  Result := LazAtk1.atk_range_new(lower_limit, upper_limit, description);
end;

function TAtkRange.copy: PAtkRange; cdecl;
begin
  Result := LazAtk1.atk_range_copy(@self);
end;

procedure TAtkRange.free; cdecl;
begin
  LazAtk1.atk_range_free(@self);
end;

function TAtkRange.get_description: Pgchar; cdecl;
begin
  Result := LazAtk1.atk_range_get_description(@self);
end;

function TAtkRange.get_lower_limit: gdouble; cdecl;
begin
  Result := LazAtk1.atk_range_get_lower_limit(@self);
end;

function TAtkRange.get_upper_limit: gdouble; cdecl;
begin
  Result := LazAtk1.atk_range_get_upper_limit(@self);
end;

function TAtkRegistry.get_factory(type_: TGType): PAtkObjectFactory; cdecl;
begin
  Result := LazAtk1.atk_registry_get_factory(@self, type_);
end;

function TAtkRegistry.get_factory_type(type_: TGType): TGType; cdecl;
begin
  Result := LazAtk1.atk_registry_get_factory_type(@self, type_);
end;

procedure TAtkRegistry.set_factory_type(type_: TGType; factory_type: TGType); cdecl;
begin
  LazAtk1.atk_registry_set_factory_type(@self, type_, factory_type);
end;

function TAtkRelation.new(targets: PPAtkObject; n_targets: gint; relationship: TAtkRelationType): PAtkRelation; cdecl;
begin
  Result := LazAtk1.atk_relation_new(targets, n_targets, relationship);
end;

procedure TAtkRelation.add_target(target: PAtkObject); cdecl;
begin
  LazAtk1.atk_relation_add_target(@self, target);
end;

function TAtkRelation.get_relation_type: TAtkRelationType; cdecl;
begin
  Result := LazAtk1.atk_relation_get_relation_type(@self);
end;

function TAtkRelation.get_target: PAtkObject; cdecl;
begin
  Result := LazAtk1.atk_relation_get_target(@self);
end;

function TAtkRelation.remove_target(target: PAtkObject): gboolean; cdecl;
begin
  Result := LazAtk1.atk_relation_remove_target(@self, target);
end;

function TAtkSocket.new: PAtkSocket; cdecl;
begin
  Result := LazAtk1.atk_socket_new();
end;

procedure TAtkSocket.embed(plug_id: Pgchar); cdecl;
begin
  LazAtk1.atk_socket_embed(@self, plug_id);
end;

function TAtkSocket.is_occupied: gboolean; cdecl;
begin
  Result := LazAtk1.atk_socket_is_occupied(@self);
end;

function TAtkStreamableContent.get_mime_type(i: gint): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_streamable_content_get_mime_type(@self, i);
end;

function TAtkStreamableContent.get_n_mime_types: gint; cdecl;
begin
  Result := LazAtk1.atk_streamable_content_get_n_mime_types(@self);
end;

function TAtkStreamableContent.get_stream(mime_type: Pgchar): PGIOChannel; cdecl;
begin
  Result := LazAtk1.atk_streamable_content_get_stream(@self, mime_type);
end;

function TAtkStreamableContent.get_uri(mime_type: Pgchar): Pgchar; cdecl;
begin
  Result := LazAtk1.atk_streamable_content_get_uri(@self, mime_type);
end;

end.
