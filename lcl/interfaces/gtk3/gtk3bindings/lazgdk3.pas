{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit LazGdk3;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$ifdef Unix}
{$LINKLIB libgdk-3.so.0}
{$endif}
{$WARN 3031 off : Values in enumeration types have to be ascending}
interface
uses
  CTypes, LazGdkPixbuf2, LazGio2, LazPango1, Lazcairo1, LazGLib2, LazGObject2;

const
  {$ifdef MsWindows}
  LazGdk3_library = 'libgdk-3.so.dll';
  {$else}
  LazGdk3_library = 'libgdk-3.so.0';
  {$endif}

  GDK_BUTTON_MIDDLE = 2;
  GDK_BUTTON_PRIMARY = 1;
  GDK_BUTTON_SECONDARY = 3;
  GDK_CURRENT_TIME = 0;
  GDK_EVENT_PROPAGATE = false;
  GDK_EVENT_STOP = true;
  GDK_KEY_0 = 48;
  GDK_KEY_1 = 49;
  GDK_KEY_2 = 50;
  GDK_KEY_3 = 51;
  GDK_KEY_3270_AltCursor = 64784;
  GDK_KEY_3270_Attn = 64782;
  GDK_KEY_3270_BackTab = 64773;
  GDK_KEY_3270_ChangeScreen = 64793;
  GDK_KEY_3270_Copy = 64789;
  GDK_KEY_3270_CursorBlink = 64783;
  GDK_KEY_3270_CursorSelect = 64796;
  GDK_KEY_3270_DeleteWord = 64794;
  GDK_KEY_3270_Duplicate = 64769;
  GDK_KEY_3270_Enter = 64798;
  GDK_KEY_3270_EraseEOF = 64774;
  GDK_KEY_3270_EraseInput = 64775;
  GDK_KEY_3270_ExSelect = 64795;
  GDK_KEY_3270_FieldMark = 64770;
  GDK_KEY_3270_Ident = 64787;
  GDK_KEY_3270_Jump = 64786;
  GDK_KEY_3270_KeyClick = 64785;
  GDK_KEY_3270_Left2 = 64772;
  GDK_KEY_3270_PA1 = 64778;
  GDK_KEY_3270_PA2 = 64779;
  GDK_KEY_3270_PA3 = 64780;
  GDK_KEY_3270_Play = 64790;
  GDK_KEY_3270_PrintScreen = 64797;
  GDK_KEY_3270_Quit = 64777;
  GDK_KEY_3270_Record = 64792;
  GDK_KEY_3270_Reset = 64776;
  GDK_KEY_3270_Right2 = 64771;
  GDK_KEY_3270_Rule = 64788;
  GDK_KEY_3270_Setup = 64791;
  GDK_KEY_3270_Test = 64781;
  GDK_KEY_4 = 52;
  GDK_KEY_5 = 53;
  GDK_KEY_6 = 54;
  GDK_KEY_7 = 55;
  GDK_KEY_8 = 56;
  GDK_KEY_9 = 57;
  GDK_KEY_A = 65;
  GDK_KEY_AE = 198;
  GDK_KEY_Aacute = 193;
  GDK_KEY_Abelowdot = 16785056;
  GDK_KEY_Abreve = 451;
  GDK_KEY_Abreveacute = 16785070;
  GDK_KEY_Abrevebelowdot = 16785078;
  GDK_KEY_Abrevegrave = 16785072;
  GDK_KEY_Abrevehook = 16785074;
  GDK_KEY_Abrevetilde = 16785076;
  GDK_KEY_AccessX_Enable = 65136;
  GDK_KEY_AccessX_Feedback_Enable = 65137;
  GDK_KEY_Acircumflex = 194;
  GDK_KEY_Acircumflexacute = 16785060;
  GDK_KEY_Acircumflexbelowdot = 16785068;
  GDK_KEY_Acircumflexgrave = 16785062;
  GDK_KEY_Acircumflexhook = 16785064;
  GDK_KEY_Acircumflextilde = 16785066;
  GDK_KEY_AddFavorite = 269025081;
  GDK_KEY_Adiaeresis = 196;
  GDK_KEY_Agrave = 192;
  GDK_KEY_Ahook = 16785058;
  GDK_KEY_Alt_L = 65513;
  GDK_KEY_Alt_R = 65514;
  GDK_KEY_Amacron = 960;
  GDK_KEY_Aogonek = 417;
  GDK_KEY_ApplicationLeft = 269025104;
  GDK_KEY_ApplicationRight = 269025105;
  GDK_KEY_Arabic_0 = 16778848;
  GDK_KEY_Arabic_1 = 16778849;
  GDK_KEY_Arabic_2 = 16778850;
  GDK_KEY_Arabic_3 = 16778851;
  GDK_KEY_Arabic_4 = 16778852;
  GDK_KEY_Arabic_5 = 16778853;
  GDK_KEY_Arabic_6 = 16778854;
  GDK_KEY_Arabic_7 = 16778855;
  GDK_KEY_Arabic_8 = 16778856;
  GDK_KEY_Arabic_9 = 16778857;
  GDK_KEY_Arabic_ain = 1497;
  GDK_KEY_Arabic_alef = 1479;
  GDK_KEY_Arabic_alefmaksura = 1513;
  GDK_KEY_Arabic_beh = 1480;
  GDK_KEY_Arabic_comma = 1452;
  GDK_KEY_Arabic_dad = 1494;
  GDK_KEY_Arabic_dal = 1487;
  GDK_KEY_Arabic_damma = 1519;
  GDK_KEY_Arabic_dammatan = 1516;
  GDK_KEY_Arabic_ddal = 16778888;
  GDK_KEY_Arabic_farsi_yeh = 16778956;
  GDK_KEY_Arabic_fatha = 1518;
  GDK_KEY_Arabic_fathatan = 1515;
  GDK_KEY_Arabic_feh = 1505;
  GDK_KEY_Arabic_fullstop = 16778964;
  GDK_KEY_Arabic_gaf = 16778927;
  GDK_KEY_Arabic_ghain = 1498;
  GDK_KEY_Arabic_ha = 1511;
  GDK_KEY_Arabic_hah = 1485;
  GDK_KEY_Arabic_hamza = 1473;
  GDK_KEY_Arabic_hamza_above = 16778836;
  GDK_KEY_Arabic_hamza_below = 16778837;
  GDK_KEY_Arabic_hamzaonalef = 1475;
  GDK_KEY_Arabic_hamzaonwaw = 1476;
  GDK_KEY_Arabic_hamzaonyeh = 1478;
  GDK_KEY_Arabic_hamzaunderalef = 1477;
  GDK_KEY_Arabic_heh = 1511;
  GDK_KEY_Arabic_heh_doachashmee = 16778942;
  GDK_KEY_Arabic_heh_goal = 16778945;
  GDK_KEY_Arabic_jeem = 1484;
  GDK_KEY_Arabic_jeh = 16778904;
  GDK_KEY_Arabic_kaf = 1507;
  GDK_KEY_Arabic_kasra = 1520;
  GDK_KEY_Arabic_kasratan = 1517;
  GDK_KEY_Arabic_keheh = 16778921;
  GDK_KEY_Arabic_khah = 1486;
  GDK_KEY_Arabic_lam = 1508;
  GDK_KEY_Arabic_madda_above = 16778835;
  GDK_KEY_Arabic_maddaonalef = 1474;
  GDK_KEY_Arabic_meem = 1509;
  GDK_KEY_Arabic_noon = 1510;
  GDK_KEY_Arabic_noon_ghunna = 16778938;
  GDK_KEY_Arabic_peh = 16778878;
  GDK_KEY_Arabic_percent = 16778858;
  GDK_KEY_Arabic_qaf = 1506;
  GDK_KEY_Arabic_question_mark = 1471;
  GDK_KEY_Arabic_ra = 1489;
  GDK_KEY_Arabic_rreh = 16778897;
  GDK_KEY_Arabic_sad = 1493;
  GDK_KEY_Arabic_seen = 1491;
  GDK_KEY_Arabic_semicolon = 1467;
  GDK_KEY_Arabic_shadda = 1521;
  GDK_KEY_Arabic_sheen = 1492;
  GDK_KEY_Arabic_sukun = 1522;
  GDK_KEY_Arabic_superscript_alef = 16778864;
  GDK_KEY_Arabic_switch = 65406;
  GDK_KEY_Arabic_tah = 1495;
  GDK_KEY_Arabic_tatweel = 1504;
  GDK_KEY_Arabic_tcheh = 16778886;
  GDK_KEY_Arabic_teh = 1482;
  GDK_KEY_Arabic_tehmarbuta = 1481;
  GDK_KEY_Arabic_thal = 1488;
  GDK_KEY_Arabic_theh = 1483;
  GDK_KEY_Arabic_tteh = 16778873;
  GDK_KEY_Arabic_veh = 16778916;
  GDK_KEY_Arabic_waw = 1512;
  GDK_KEY_Arabic_yeh = 1514;
  GDK_KEY_Arabic_yeh_baree = 16778962;
  GDK_KEY_Arabic_zah = 1496;
  GDK_KEY_Arabic_zain = 1490;
  GDK_KEY_Aring = 197;
  GDK_KEY_Armenian_AT = 16778552;
  GDK_KEY_Armenian_AYB = 16778545;
  GDK_KEY_Armenian_BEN = 16778546;
  GDK_KEY_Armenian_CHA = 16778569;
  GDK_KEY_Armenian_DA = 16778548;
  GDK_KEY_Armenian_DZA = 16778561;
  GDK_KEY_Armenian_E = 16778551;
  GDK_KEY_Armenian_FE = 16778582;
  GDK_KEY_Armenian_GHAT = 16778562;
  GDK_KEY_Armenian_GIM = 16778547;
  GDK_KEY_Armenian_HI = 16778565;
  GDK_KEY_Armenian_HO = 16778560;
  GDK_KEY_Armenian_INI = 16778555;
  GDK_KEY_Armenian_JE = 16778571;
  GDK_KEY_Armenian_KE = 16778580;
  GDK_KEY_Armenian_KEN = 16778559;
  GDK_KEY_Armenian_KHE = 16778557;
  GDK_KEY_Armenian_LYUN = 16778556;
  GDK_KEY_Armenian_MEN = 16778564;
  GDK_KEY_Armenian_NU = 16778566;
  GDK_KEY_Armenian_O = 16778581;
  GDK_KEY_Armenian_PE = 16778570;
  GDK_KEY_Armenian_PYUR = 16778579;
  GDK_KEY_Armenian_RA = 16778572;
  GDK_KEY_Armenian_RE = 16778576;
  GDK_KEY_Armenian_SE = 16778573;
  GDK_KEY_Armenian_SHA = 16778567;
  GDK_KEY_Armenian_TCHE = 16778563;
  GDK_KEY_Armenian_TO = 16778553;
  GDK_KEY_Armenian_TSA = 16778558;
  GDK_KEY_Armenian_TSO = 16778577;
  GDK_KEY_Armenian_TYUN = 16778575;
  GDK_KEY_Armenian_VEV = 16778574;
  GDK_KEY_Armenian_VO = 16778568;
  GDK_KEY_Armenian_VYUN = 16778578;
  GDK_KEY_Armenian_YECH = 16778549;
  GDK_KEY_Armenian_ZA = 16778550;
  GDK_KEY_Armenian_ZHE = 16778554;
  GDK_KEY_Armenian_accent = 16778587;
  GDK_KEY_Armenian_amanak = 16778588;
  GDK_KEY_Armenian_apostrophe = 16778586;
  GDK_KEY_Armenian_at_ = 16778600;
  GDK_KEY_Armenian_ayb_ = 16778593;
  GDK_KEY_Armenian_ben_ = 16778594;
  GDK_KEY_Armenian_but = 16778589;
  GDK_KEY_Armenian_cha_ = 16778617;
  GDK_KEY_Armenian_da_ = 16778596;
  GDK_KEY_Armenian_dza_ = 16778609;
  GDK_KEY_Armenian_e_ = 16778599;
  GDK_KEY_Armenian_exclam = 16778588;
  GDK_KEY_Armenian_fe_ = 16778630;
  GDK_KEY_Armenian_full_stop = 16778633;
  GDK_KEY_Armenian_ghat_ = 16778610;
  GDK_KEY_Armenian_gim_ = 16778595;
  GDK_KEY_Armenian_hi_ = 16778613;
  GDK_KEY_Armenian_ho_ = 16778608;
  GDK_KEY_Armenian_hyphen = 16778634;
  GDK_KEY_Armenian_ini_ = 16778603;
  GDK_KEY_Armenian_je_ = 16778619;
  GDK_KEY_Armenian_ke_ = 16778628;
  GDK_KEY_Armenian_ken_ = 16778607;
  GDK_KEY_Armenian_khe_ = 16778605;
  GDK_KEY_Armenian_ligature_ew = 16778631;
  GDK_KEY_Armenian_lyun_ = 16778604;
  GDK_KEY_Armenian_men_ = 16778612;
  GDK_KEY_Armenian_nu_ = 16778614;
  GDK_KEY_Armenian_o_ = 16778629;
  GDK_KEY_Armenian_paruyk = 16778590;
  GDK_KEY_Armenian_pe_ = 16778618;
  GDK_KEY_Armenian_pyur_ = 16778627;
  GDK_KEY_Armenian_question = 16778590;
  GDK_KEY_Armenian_ra_ = 16778620;
  GDK_KEY_Armenian_re_ = 16778624;
  GDK_KEY_Armenian_se_ = 16778621;
  GDK_KEY_Armenian_separation_mark = 16778589;
  GDK_KEY_Armenian_sha_ = 16778615;
  GDK_KEY_Armenian_shesht = 16778587;
  GDK_KEY_Armenian_tche_ = 16778611;
  GDK_KEY_Armenian_to_ = 16778601;
  GDK_KEY_Armenian_tsa_ = 16778606;
  GDK_KEY_Armenian_tso_ = 16778625;
  GDK_KEY_Armenian_tyun_ = 16778623;
  GDK_KEY_Armenian_verjaket = 16778633;
  GDK_KEY_Armenian_vev_ = 16778622;
  GDK_KEY_Armenian_vo_ = 16778616;
  GDK_KEY_Armenian_vyun_ = 16778626;
  GDK_KEY_Armenian_yech_ = 16778597;
  GDK_KEY_Armenian_yentamna = 16778634;
  GDK_KEY_Armenian_za_ = 16778598;
  GDK_KEY_Armenian_zhe_ = 16778602;
  GDK_KEY_Atilde = 195;
  GDK_KEY_AudibleBell_Enable = 65146;
  GDK_KEY_AudioCycleTrack = 269025179;
  GDK_KEY_AudioForward = 269025175;
  GDK_KEY_AudioLowerVolume = 269025041;
  GDK_KEY_AudioMedia = 269025074;
  GDK_KEY_AudioMicMute = 269025202;
  GDK_KEY_AudioMute = 269025042;
  GDK_KEY_AudioNext = 269025047;
  GDK_KEY_AudioPause = 269025073;
  GDK_KEY_AudioPlay = 269025044;
  GDK_KEY_AudioPreset = 269025206;
  GDK_KEY_AudioPrev = 269025046;
  GDK_KEY_AudioRaiseVolume = 269025043;
  GDK_KEY_AudioRandomPlay = 269025177;
  GDK_KEY_AudioRecord = 269025052;
  GDK_KEY_AudioRepeat = 269025176;
  GDK_KEY_AudioRewind = 269025086;
  GDK_KEY_AudioStop = 269025045;
  GDK_KEY_Away = 269025165;
  GDK_KEY_B = 66;
  GDK_KEY_Babovedot = 16784898;
  GDK_KEY_Back = 269025062;
  GDK_KEY_BackForward = 269025087;
  GDK_KEY_BackSpace = 65288;
  GDK_KEY_Battery = 269025171;
  GDK_KEY_Begin = 65368;
  GDK_KEY_Blue = 269025190;
  GDK_KEY_Bluetooth = 269025172;
  GDK_KEY_Book = 269025106;
  GDK_KEY_BounceKeys_Enable = 65140;
  GDK_KEY_Break = 65387;
  GDK_KEY_BrightnessAdjust = 269025083;
  GDK_KEY_Byelorussian_SHORTU = 1726;
  GDK_KEY_Byelorussian_shortu_ = 1710;
  GDK_KEY_C = 67;
  GDK_KEY_CD = 269025107;
  GDK_KEY_CH = 65186;
  GDK_KEY_C_H = 65189;
  GDK_KEY_C_h_ = 65188;
  GDK_KEY_Cabovedot = 709;
  GDK_KEY_Cacute = 454;
  GDK_KEY_Calculator = 269025053;
  GDK_KEY_Calendar = 269025056;
  GDK_KEY_Cancel = 65385;
  GDK_KEY_Caps_Lock = 65509;
  GDK_KEY_Ccaron = 456;
  GDK_KEY_Ccedilla = 199;
  GDK_KEY_Ccircumflex = 710;
  GDK_KEY_Ch_ = 65185;
  GDK_KEY_Clear = 65291;
  GDK_KEY_ClearGrab = 269024801;
  GDK_KEY_Close = 269025110;
  GDK_KEY_Codeinput = 65335;
  GDK_KEY_ColonSign = 16785569;
  GDK_KEY_Community = 269025085;
  GDK_KEY_ContrastAdjust = 269025058;
  GDK_KEY_Control_L = 65507;
  GDK_KEY_Control_R = 65508;
  GDK_KEY_Copy = 269025111;
  GDK_KEY_CruzeiroSign = 16785570;
  GDK_KEY_Cut = 269025112;
  GDK_KEY_CycleAngle = 269025180;
  GDK_KEY_Cyrillic_A = 1761;
  GDK_KEY_Cyrillic_BE = 1762;
  GDK_KEY_Cyrillic_CHE = 1790;
  GDK_KEY_Cyrillic_CHE_descender = 16778422;
  GDK_KEY_Cyrillic_CHE_vertstroke = 16778424;
  GDK_KEY_Cyrillic_DE = 1764;
  GDK_KEY_Cyrillic_DZHE = 1727;
  GDK_KEY_Cyrillic_E = 1788;
  GDK_KEY_Cyrillic_EF = 1766;
  GDK_KEY_Cyrillic_EL = 1772;
  GDK_KEY_Cyrillic_EM = 1773;
  GDK_KEY_Cyrillic_EN = 1774;
  GDK_KEY_Cyrillic_EN_descender = 16778402;
  GDK_KEY_Cyrillic_ER = 1778;
  GDK_KEY_Cyrillic_ES = 1779;
  GDK_KEY_Cyrillic_GHE = 1767;
  GDK_KEY_Cyrillic_GHE_bar = 16778386;
  GDK_KEY_Cyrillic_HA = 1768;
  GDK_KEY_Cyrillic_HARDSIGN = 1791;
  GDK_KEY_Cyrillic_HA_descender = 16778418;
  GDK_KEY_Cyrillic_I = 1769;
  GDK_KEY_Cyrillic_IE = 1765;
  GDK_KEY_Cyrillic_IO = 1715;
  GDK_KEY_Cyrillic_I_macron = 16778466;
  GDK_KEY_Cyrillic_JE = 1720;
  GDK_KEY_Cyrillic_KA = 1771;
  GDK_KEY_Cyrillic_KA_descender = 16778394;
  GDK_KEY_Cyrillic_KA_vertstroke = 16778396;
  GDK_KEY_Cyrillic_LJE = 1721;
  GDK_KEY_Cyrillic_NJE = 1722;
  GDK_KEY_Cyrillic_O = 1775;
  GDK_KEY_Cyrillic_O_bar = 16778472;
  GDK_KEY_Cyrillic_PE = 1776;
  GDK_KEY_Cyrillic_SCHWA = 16778456;
  GDK_KEY_Cyrillic_SHA = 1787;
  GDK_KEY_Cyrillic_SHCHA = 1789;
  GDK_KEY_Cyrillic_SHHA = 16778426;
  GDK_KEY_Cyrillic_SHORTI = 1770;
  GDK_KEY_Cyrillic_SOFTSIGN = 1784;
  GDK_KEY_Cyrillic_TE = 1780;
  GDK_KEY_Cyrillic_TSE = 1763;
  GDK_KEY_Cyrillic_U = 1781;
  GDK_KEY_Cyrillic_U_macron = 16778478;
  GDK_KEY_Cyrillic_U_straight = 16778414;
  GDK_KEY_Cyrillic_U_straight_bar = 16778416;
  GDK_KEY_Cyrillic_VE = 1783;
  GDK_KEY_Cyrillic_YA = 1777;
  GDK_KEY_Cyrillic_YERU = 1785;
  GDK_KEY_Cyrillic_YU = 1760;
  GDK_KEY_Cyrillic_ZE = 1786;
  GDK_KEY_Cyrillic_ZHE = 1782;
  GDK_KEY_Cyrillic_ZHE_descender = 16778390;
  GDK_KEY_Cyrillic_a_ = 1729;
  GDK_KEY_Cyrillic_be_ = 1730;
  GDK_KEY_Cyrillic_che_ = 1758;
  GDK_KEY_Cyrillic_che_descender_ = 16778423;
  GDK_KEY_Cyrillic_che_vertstroke_ = 16778425;
  GDK_KEY_Cyrillic_de_ = 1732;
  GDK_KEY_Cyrillic_dzhe_ = 1711;
  GDK_KEY_Cyrillic_e_ = 1756;
  GDK_KEY_Cyrillic_ef_ = 1734;
  GDK_KEY_Cyrillic_el_ = 1740;
  GDK_KEY_Cyrillic_em_ = 1741;
  GDK_KEY_Cyrillic_en_ = 1742;
  GDK_KEY_Cyrillic_en_descender_ = 16778403;
  GDK_KEY_Cyrillic_er_ = 1746;
  GDK_KEY_Cyrillic_es_ = 1747;
  GDK_KEY_Cyrillic_ghe_ = 1735;
  GDK_KEY_Cyrillic_ghe_bar_ = 16778387;
  GDK_KEY_Cyrillic_ha_ = 1736;
  GDK_KEY_Cyrillic_ha_descender_ = 16778419;
  GDK_KEY_Cyrillic_hardsign_ = 1759;
  GDK_KEY_Cyrillic_i_ = 1737;
  GDK_KEY_Cyrillic_i_macron_ = 16778467;
  GDK_KEY_Cyrillic_ie_ = 1733;
  GDK_KEY_Cyrillic_io_ = 1699;
  GDK_KEY_Cyrillic_je_ = 1704;
  GDK_KEY_Cyrillic_ka_ = 1739;
  GDK_KEY_Cyrillic_ka_descender_ = 16778395;
  GDK_KEY_Cyrillic_ka_vertstroke_ = 16778397;
  GDK_KEY_Cyrillic_lje_ = 1705;
  GDK_KEY_Cyrillic_nje_ = 1706;
  GDK_KEY_Cyrillic_o_ = 1743;
  GDK_KEY_Cyrillic_o_bar_ = 16778473;
  GDK_KEY_Cyrillic_pe_ = 1744;
  GDK_KEY_Cyrillic_schwa_ = 16778457;
  GDK_KEY_Cyrillic_sha_ = 1755;
  GDK_KEY_Cyrillic_shcha_ = 1757;
  GDK_KEY_Cyrillic_shha_ = 16778427;
  GDK_KEY_Cyrillic_shorti_ = 1738;
  GDK_KEY_Cyrillic_softsign_ = 1752;
  GDK_KEY_Cyrillic_te_ = 1748;
  GDK_KEY_Cyrillic_tse_ = 1731;
  GDK_KEY_Cyrillic_u_ = 1749;
  GDK_KEY_Cyrillic_u_macron_ = 16778479;
  GDK_KEY_Cyrillic_u_straight_ = 16778415;
  GDK_KEY_Cyrillic_u_straight_bar_ = 16778417;
  GDK_KEY_Cyrillic_ve_ = 1751;
  GDK_KEY_Cyrillic_ya_ = 1745;
  GDK_KEY_Cyrillic_yeru_ = 1753;
  GDK_KEY_Cyrillic_yu_ = 1728;
  GDK_KEY_Cyrillic_ze_ = 1754;
  GDK_KEY_Cyrillic_zhe_ = 1750;
  GDK_KEY_Cyrillic_zhe_descender_ = 16778391;
  GDK_KEY_D = 68;
  GDK_KEY_DOS = 269025114;
  GDK_KEY_Dabovedot = 16784906;
  GDK_KEY_Dcaron = 463;
  GDK_KEY_Delete = 65535;
  GDK_KEY_Display = 269025113;
  GDK_KEY_Documents = 269025115;
  GDK_KEY_DongSign = 16785579;
  GDK_KEY_Down = 65364;
  GDK_KEY_Dstroke = 464;
  GDK_KEY_E = 69;
  GDK_KEY_ENG = 957;
  GDK_KEY_ETH = 208;
  GDK_KEY_EZH = 16777655;
  GDK_KEY_Eabovedot = 972;
  GDK_KEY_Eacute = 201;
  GDK_KEY_Ebelowdot = 16785080;
  GDK_KEY_Ecaron = 460;
  GDK_KEY_Ecircumflex = 202;
  GDK_KEY_Ecircumflexacute = 16785086;
  GDK_KEY_Ecircumflexbelowdot = 16785094;
  GDK_KEY_Ecircumflexgrave = 16785088;
  GDK_KEY_Ecircumflexhook = 16785090;
  GDK_KEY_Ecircumflextilde = 16785092;
  GDK_KEY_EcuSign = 16785568;
  GDK_KEY_Ediaeresis = 203;
  GDK_KEY_Egrave = 200;
  GDK_KEY_Ehook = 16785082;
  GDK_KEY_Eisu_Shift = 65327;
  GDK_KEY_Eisu_toggle = 65328;
  GDK_KEY_Eject = 269025068;
  GDK_KEY_Emacron = 938;
  GDK_KEY_End = 65367;
  GDK_KEY_Eogonek = 458;
  GDK_KEY_Escape = 65307;
  GDK_KEY_Eth_ = 208;
  GDK_KEY_Etilde = 16785084;
  GDK_KEY_EuroSign = 8364;
  GDK_KEY_Excel = 269025116;
  GDK_KEY_Execute = 65378;
  GDK_KEY_Explorer = 269025117;
  GDK_KEY_F = 70;
  GDK_KEY_F1 = 65470;
  GDK_KEY_F10 = 65479;
  GDK_KEY_F11 = 65480;
  GDK_KEY_F12 = 65481;
  GDK_KEY_F13 = 65482;
  GDK_KEY_F14 = 65483;
  GDK_KEY_F15 = 65484;
  GDK_KEY_F16 = 65485;
  GDK_KEY_F17 = 65486;
  GDK_KEY_F18 = 65487;
  GDK_KEY_F19 = 65488;
  GDK_KEY_F2 = 65471;
  GDK_KEY_F20 = 65489;
  GDK_KEY_F21 = 65490;
  GDK_KEY_F22 = 65491;
  GDK_KEY_F23 = 65492;
  GDK_KEY_F24 = 65493;
  GDK_KEY_F25 = 65494;
  GDK_KEY_F26 = 65495;
  GDK_KEY_F27 = 65496;
  GDK_KEY_F28 = 65497;
  GDK_KEY_F29 = 65498;
  GDK_KEY_F3 = 65472;
  GDK_KEY_F30 = 65499;
  GDK_KEY_F31 = 65500;
  GDK_KEY_F32 = 65501;
  GDK_KEY_F33 = 65502;
  GDK_KEY_F34 = 65503;
  GDK_KEY_F35 = 65504;
  GDK_KEY_F4 = 65473;
  GDK_KEY_F5 = 65474;
  GDK_KEY_F6 = 65475;
  GDK_KEY_F7 = 65476;
  GDK_KEY_F8 = 65477;
  GDK_KEY_F9 = 65478;
  GDK_KEY_FFrancSign = 16785571;
  GDK_KEY_Fabovedot = 16784926;
  GDK_KEY_Farsi_0 = 16778992;
  GDK_KEY_Farsi_1 = 16778993;
  GDK_KEY_Farsi_2 = 16778994;
  GDK_KEY_Farsi_3 = 16778995;
  GDK_KEY_Farsi_4 = 16778996;
  GDK_KEY_Farsi_5 = 16778997;
  GDK_KEY_Farsi_6 = 16778998;
  GDK_KEY_Farsi_7 = 16778999;
  GDK_KEY_Farsi_8 = 16779000;
  GDK_KEY_Farsi_9 = 16779001;
  GDK_KEY_Farsi_yeh = 16778956;
  GDK_KEY_Favorites = 269025072;
  GDK_KEY_Finance = 269025084;
  GDK_KEY_Find = 65384;
  GDK_KEY_First_Virtual_Screen = 65232;
  GDK_KEY_Forward = 269025063;
  GDK_KEY_FrameBack = 269025181;
  GDK_KEY_FrameForward = 269025182;
  GDK_KEY_G = 71;
  GDK_KEY_Gabovedot = 725;
  GDK_KEY_Game = 269025118;
  GDK_KEY_Gbreve = 683;
  GDK_KEY_Gcaron = 16777702;
  GDK_KEY_Gcedilla = 939;
  GDK_KEY_Gcircumflex = 728;
  GDK_KEY_Georgian_an = 16781520;
  GDK_KEY_Georgian_ban = 16781521;
  GDK_KEY_Georgian_can = 16781546;
  GDK_KEY_Georgian_char = 16781549;
  GDK_KEY_Georgian_chin = 16781545;
  GDK_KEY_Georgian_cil = 16781548;
  GDK_KEY_Georgian_don = 16781523;
  GDK_KEY_Georgian_en = 16781524;
  GDK_KEY_Georgian_fi = 16781558;
  GDK_KEY_Georgian_gan = 16781522;
  GDK_KEY_Georgian_ghan = 16781542;
  GDK_KEY_Georgian_hae = 16781552;
  GDK_KEY_Georgian_har = 16781556;
  GDK_KEY_Georgian_he = 16781553;
  GDK_KEY_Georgian_hie = 16781554;
  GDK_KEY_Georgian_hoe = 16781557;
  GDK_KEY_Georgian_in = 16781528;
  GDK_KEY_Georgian_jhan = 16781551;
  GDK_KEY_Georgian_jil = 16781547;
  GDK_KEY_Georgian_kan = 16781529;
  GDK_KEY_Georgian_khar = 16781541;
  GDK_KEY_Georgian_las = 16781530;
  GDK_KEY_Georgian_man = 16781531;
  GDK_KEY_Georgian_nar = 16781532;
  GDK_KEY_Georgian_on = 16781533;
  GDK_KEY_Georgian_par = 16781534;
  GDK_KEY_Georgian_phar = 16781540;
  GDK_KEY_Georgian_qar = 16781543;
  GDK_KEY_Georgian_rae = 16781536;
  GDK_KEY_Georgian_san = 16781537;
  GDK_KEY_Georgian_shin = 16781544;
  GDK_KEY_Georgian_tan = 16781527;
  GDK_KEY_Georgian_tar = 16781538;
  GDK_KEY_Georgian_un = 16781539;
  GDK_KEY_Georgian_vin = 16781525;
  GDK_KEY_Georgian_we = 16781555;
  GDK_KEY_Georgian_xan = 16781550;
  GDK_KEY_Georgian_zen = 16781526;
  GDK_KEY_Georgian_zhar = 16781535;
  GDK_KEY_Go = 269025119;
  GDK_KEY_Greek_ALPHA = 1985;
  GDK_KEY_Greek_ALPHAaccent = 1953;
  GDK_KEY_Greek_BETA = 1986;
  GDK_KEY_Greek_CHI = 2007;
  GDK_KEY_Greek_DELTA = 1988;
  GDK_KEY_Greek_EPSILON = 1989;
  GDK_KEY_Greek_EPSILONaccent = 1954;
  GDK_KEY_Greek_ETA = 1991;
  GDK_KEY_Greek_ETAaccent = 1955;
  GDK_KEY_Greek_GAMMA = 1987;
  GDK_KEY_Greek_IOTA = 1993;
  GDK_KEY_Greek_IOTAaccent = 1956;
  GDK_KEY_Greek_IOTAdiaeresis = 1957;
  GDK_KEY_Greek_IOTAdieresis = 1957;
  GDK_KEY_Greek_KAPPA = 1994;
  GDK_KEY_Greek_LAMBDA = 1995;
  GDK_KEY_Greek_LAMDA = 1995;
  GDK_KEY_Greek_MU = 1996;
  GDK_KEY_Greek_NU = 1997;
  GDK_KEY_Greek_OMEGA = 2009;
  GDK_KEY_Greek_OMEGAaccent = 1963;
  GDK_KEY_Greek_OMICRON = 1999;
  GDK_KEY_Greek_OMICRONaccent = 1959;
  GDK_KEY_Greek_PHI = 2006;
  GDK_KEY_Greek_PI = 2000;
  GDK_KEY_Greek_PSI = 2008;
  GDK_KEY_Greek_RHO = 2001;
  GDK_KEY_Greek_SIGMA = 2002;
  GDK_KEY_Greek_TAU = 2004;
  GDK_KEY_Greek_THETA = 1992;
  GDK_KEY_Greek_UPSILON = 2005;
  GDK_KEY_Greek_UPSILONaccent = 1960;
  GDK_KEY_Greek_UPSILONdieresis = 1961;
  GDK_KEY_Greek_XI = 1998;
  GDK_KEY_Greek_ZETA = 1990;
  GDK_KEY_Greek_accentdieresis = 1966;
  GDK_KEY_Greek_alpha_ = 2017;
  GDK_KEY_Greek_alphaaccent_ = 1969;
  GDK_KEY_Greek_beta_ = 2018;
  GDK_KEY_Greek_chi_ = 2039;
  GDK_KEY_Greek_delta_ = 2020;
  GDK_KEY_Greek_epsilon_ = 2021;
  GDK_KEY_Greek_epsilonaccent_ = 1970;
  GDK_KEY_Greek_eta_ = 2023;
  GDK_KEY_Greek_etaaccent_ = 1971;
  GDK_KEY_Greek_finalsmallsigma = 2035;
  GDK_KEY_Greek_gamma_ = 2019;
  GDK_KEY_Greek_horizbar = 1967;
  GDK_KEY_Greek_iota_ = 2025;
  GDK_KEY_Greek_iotaaccent_ = 1972;
  GDK_KEY_Greek_iotaaccentdieresis = 1974;
  GDK_KEY_Greek_iotadieresis_ = 1973;
  GDK_KEY_Greek_kappa_ = 2026;
  GDK_KEY_Greek_lambda_ = 2027;
  GDK_KEY_Greek_lamda_ = 2027;
  GDK_KEY_Greek_mu_ = 2028;
  GDK_KEY_Greek_nu_ = 2029;
  GDK_KEY_Greek_omega_ = 2041;
  GDK_KEY_Greek_omegaaccent_ = 1979;
  GDK_KEY_Greek_omicron_ = 2031;
  GDK_KEY_Greek_omicronaccent_ = 1975;
  GDK_KEY_Greek_phi_ = 2038;
  GDK_KEY_Greek_pi_ = 2032;
  GDK_KEY_Greek_psi_ = 2040;
  GDK_KEY_Greek_rho_ = 2033;
  GDK_KEY_Greek_sigma_ = 2034;
  GDK_KEY_Greek_switch = 65406;
  GDK_KEY_Greek_tau_ = 2036;
  GDK_KEY_Greek_theta_ = 2024;
  GDK_KEY_Greek_upsilon_ = 2037;
  GDK_KEY_Greek_upsilonaccent_ = 1976;
  GDK_KEY_Greek_upsilonaccentdieresis = 1978;
  GDK_KEY_Greek_upsilondieresis_ = 1977;
  GDK_KEY_Greek_xi_ = 2030;
  GDK_KEY_Greek_zeta_ = 2022;
  GDK_KEY_Green = 269025188;
  GDK_KEY_H = 72;
  GDK_KEY_Hangul = 65329;
  GDK_KEY_Hangul_A = 3775;
  GDK_KEY_Hangul_AE = 3776;
  GDK_KEY_Hangul_AraeA = 3830;
  GDK_KEY_Hangul_AraeAE = 3831;
  GDK_KEY_Hangul_Banja = 65337;
  GDK_KEY_Hangul_Cieuc = 3770;
  GDK_KEY_Hangul_Codeinput = 65335;
  GDK_KEY_Hangul_Dikeud = 3751;
  GDK_KEY_Hangul_E = 3780;
  GDK_KEY_Hangul_EO = 3779;
  GDK_KEY_Hangul_EU = 3793;
  GDK_KEY_Hangul_End = 65331;
  GDK_KEY_Hangul_Hanja = 65332;
  GDK_KEY_Hangul_Hieuh = 3774;
  GDK_KEY_Hangul_I = 3795;
  GDK_KEY_Hangul_Ieung = 3767;
  GDK_KEY_Hangul_J_Cieuc = 3818;
  GDK_KEY_Hangul_J_Dikeud = 3802;
  GDK_KEY_Hangul_J_Hieuh = 3822;
  GDK_KEY_Hangul_J_Ieung = 3816;
  GDK_KEY_Hangul_J_Jieuj = 3817;
  GDK_KEY_Hangul_J_Khieuq = 3819;
  GDK_KEY_Hangul_J_Kiyeog = 3796;
  GDK_KEY_Hangul_J_KiyeogSios = 3798;
  GDK_KEY_Hangul_J_KkogjiDalrinIeung = 3833;
  GDK_KEY_Hangul_J_Mieum = 3811;
  GDK_KEY_Hangul_J_Nieun = 3799;
  GDK_KEY_Hangul_J_NieunHieuh = 3801;
  GDK_KEY_Hangul_J_NieunJieuj = 3800;
  GDK_KEY_Hangul_J_PanSios = 3832;
  GDK_KEY_Hangul_J_Phieuf = 3821;
  GDK_KEY_Hangul_J_Pieub = 3812;
  GDK_KEY_Hangul_J_PieubSios = 3813;
  GDK_KEY_Hangul_J_Rieul = 3803;
  GDK_KEY_Hangul_J_RieulHieuh = 3810;
  GDK_KEY_Hangul_J_RieulKiyeog = 3804;
  GDK_KEY_Hangul_J_RieulMieum = 3805;
  GDK_KEY_Hangul_J_RieulPhieuf = 3809;
  GDK_KEY_Hangul_J_RieulPieub = 3806;
  GDK_KEY_Hangul_J_RieulSios = 3807;
  GDK_KEY_Hangul_J_RieulTieut = 3808;
  GDK_KEY_Hangul_J_Sios = 3814;
  GDK_KEY_Hangul_J_SsangKiyeog = 3797;
  GDK_KEY_Hangul_J_SsangSios = 3815;
  GDK_KEY_Hangul_J_Tieut = 3820;
  GDK_KEY_Hangul_J_YeorinHieuh = 3834;
  GDK_KEY_Hangul_Jamo = 65333;
  GDK_KEY_Hangul_Jeonja = 65336;
  GDK_KEY_Hangul_Jieuj = 3768;
  GDK_KEY_Hangul_Khieuq = 3771;
  GDK_KEY_Hangul_Kiyeog = 3745;
  GDK_KEY_Hangul_KiyeogSios = 3747;
  GDK_KEY_Hangul_KkogjiDalrinIeung = 3827;
  GDK_KEY_Hangul_Mieum = 3761;
  GDK_KEY_Hangul_MultipleCandidate = 65341;
  GDK_KEY_Hangul_Nieun = 3748;
  GDK_KEY_Hangul_NieunHieuh = 3750;
  GDK_KEY_Hangul_NieunJieuj = 3749;
  GDK_KEY_Hangul_O = 3783;
  GDK_KEY_Hangul_OE = 3786;
  GDK_KEY_Hangul_PanSios = 3826;
  GDK_KEY_Hangul_Phieuf = 3773;
  GDK_KEY_Hangul_Pieub = 3762;
  GDK_KEY_Hangul_PieubSios = 3764;
  GDK_KEY_Hangul_PostHanja = 65339;
  GDK_KEY_Hangul_PreHanja = 65338;
  GDK_KEY_Hangul_PreviousCandidate = 65342;
  GDK_KEY_Hangul_Rieul = 3753;
  GDK_KEY_Hangul_RieulHieuh = 3760;
  GDK_KEY_Hangul_RieulKiyeog = 3754;
  GDK_KEY_Hangul_RieulMieum = 3755;
  GDK_KEY_Hangul_RieulPhieuf = 3759;
  GDK_KEY_Hangul_RieulPieub = 3756;
  GDK_KEY_Hangul_RieulSios = 3757;
  GDK_KEY_Hangul_RieulTieut = 3758;
  GDK_KEY_Hangul_RieulYeorinHieuh = 3823;
  GDK_KEY_Hangul_Romaja = 65334;
  GDK_KEY_Hangul_SingleCandidate = 65340;
  GDK_KEY_Hangul_Sios = 3765;
  GDK_KEY_Hangul_Special = 65343;
  GDK_KEY_Hangul_SsangDikeud = 3752;
  GDK_KEY_Hangul_SsangJieuj = 3769;
  GDK_KEY_Hangul_SsangKiyeog = 3746;
  GDK_KEY_Hangul_SsangPieub = 3763;
  GDK_KEY_Hangul_SsangSios = 3766;
  GDK_KEY_Hangul_Start = 65330;
  GDK_KEY_Hangul_SunkyeongeumMieum = 3824;
  GDK_KEY_Hangul_SunkyeongeumPhieuf = 3828;
  GDK_KEY_Hangul_SunkyeongeumPieub = 3825;
  GDK_KEY_Hangul_Tieut = 3772;
  GDK_KEY_Hangul_U = 3788;
  GDK_KEY_Hangul_WA = 3784;
  GDK_KEY_Hangul_WAE = 3785;
  GDK_KEY_Hangul_WE = 3790;
  GDK_KEY_Hangul_WEO = 3789;
  GDK_KEY_Hangul_WI = 3791;
  GDK_KEY_Hangul_YA = 3777;
  GDK_KEY_Hangul_YAE = 3778;
  GDK_KEY_Hangul_YE = 3782;
  GDK_KEY_Hangul_YEO = 3781;
  GDK_KEY_Hangul_YI = 3794;
  GDK_KEY_Hangul_YO = 3787;
  GDK_KEY_Hangul_YU = 3792;
  GDK_KEY_Hangul_YeorinHieuh = 3829;
  GDK_KEY_Hangul_switch = 65406;
  GDK_KEY_Hankaku = 65321;
  GDK_KEY_Hcircumflex = 678;
  GDK_KEY_Hebrew_switch = 65406;
  GDK_KEY_Help = 65386;
  GDK_KEY_Henkan = 65315;
  GDK_KEY_Henkan_Mode = 65315;
  GDK_KEY_Hibernate = 269025192;
  GDK_KEY_Hiragana = 65317;
  GDK_KEY_Hiragana_Katakana = 65319;
  GDK_KEY_History = 269025079;
  GDK_KEY_Home = 65360;
  GDK_KEY_HomePage = 269025048;
  GDK_KEY_HotLinks = 269025082;
  GDK_KEY_Hstroke = 673;
  GDK_KEY_Hyper_L = 65517;
  GDK_KEY_Hyper_R = 65518;
  GDK_KEY_I = 73;
  GDK_KEY_ISO_Center_Object = 65075;
  GDK_KEY_ISO_Continuous_Underline = 65072;
  GDK_KEY_ISO_Discontinuous_Underline = 65073;
  GDK_KEY_ISO_Emphasize = 65074;
  GDK_KEY_ISO_Enter = 65076;
  GDK_KEY_ISO_Fast_Cursor_Down = 65071;
  GDK_KEY_ISO_Fast_Cursor_Left = 65068;
  GDK_KEY_ISO_Fast_Cursor_Right = 65069;
  GDK_KEY_ISO_Fast_Cursor_Up = 65070;
  GDK_KEY_ISO_First_Group = 65036;
  GDK_KEY_ISO_First_Group_Lock = 65037;
  GDK_KEY_ISO_Group_Latch = 65030;
  GDK_KEY_ISO_Group_Lock = 65031;
  GDK_KEY_ISO_Group_Shift = 65406;
  GDK_KEY_ISO_Last_Group = 65038;
  GDK_KEY_ISO_Last_Group_Lock = 65039;
  GDK_KEY_ISO_Left_Tab = 65056;
  GDK_KEY_ISO_Level2_Latch = 65026;
  GDK_KEY_ISO_Level3_Latch = 65028;
  GDK_KEY_ISO_Level3_Lock = 65029;
  GDK_KEY_ISO_Level3_Shift = 65027;
  GDK_KEY_ISO_Level5_Latch = 65042;
  GDK_KEY_ISO_Level5_Lock = 65043;
  GDK_KEY_ISO_Level5_Shift = 65041;
  GDK_KEY_ISO_Lock = 65025;
  GDK_KEY_ISO_Move_Line_Down = 65058;
  GDK_KEY_ISO_Move_Line_Up = 65057;
  GDK_KEY_ISO_Next_Group = 65032;
  GDK_KEY_ISO_Next_Group_Lock = 65033;
  GDK_KEY_ISO_Partial_Line_Down = 65060;
  GDK_KEY_ISO_Partial_Line_Up = 65059;
  GDK_KEY_ISO_Partial_Space_Left = 65061;
  GDK_KEY_ISO_Partial_Space_Right = 65062;
  GDK_KEY_ISO_Prev_Group = 65034;
  GDK_KEY_ISO_Prev_Group_Lock = 65035;
  GDK_KEY_ISO_Release_Both_Margins = 65067;
  GDK_KEY_ISO_Release_Margin_Left = 65065;
  GDK_KEY_ISO_Release_Margin_Right = 65066;
  GDK_KEY_ISO_Set_Margin_Left = 65063;
  GDK_KEY_ISO_Set_Margin_Right = 65064;
  GDK_KEY_Iabovedot = 681;
  GDK_KEY_Iacute = 205;
  GDK_KEY_Ibelowdot = 16785098;
  GDK_KEY_Ibreve = 16777516;
  GDK_KEY_Icircumflex = 206;
  GDK_KEY_Idiaeresis = 207;
  GDK_KEY_Igrave = 204;
  GDK_KEY_Ihook = 16785096;
  GDK_KEY_Imacron = 975;
  GDK_KEY_Insert = 65379;
  GDK_KEY_Iogonek = 967;
  GDK_KEY_Itilde = 933;
  GDK_KEY_J = 74;
  GDK_KEY_Jcircumflex = 684;
  GDK_KEY_K = 75;
  GDK_KEY_KP_0 = 65456;
  GDK_KEY_KP_1 = 65457;
  GDK_KEY_KP_2 = 65458;
  GDK_KEY_KP_3 = 65459;
  GDK_KEY_KP_4 = 65460;
  GDK_KEY_KP_5 = 65461;
  GDK_KEY_KP_6 = 65462;
  GDK_KEY_KP_7 = 65463;
  GDK_KEY_KP_8 = 65464;
  GDK_KEY_KP_9 = 65465;
  GDK_KEY_KP_Add = 65451;
  GDK_KEY_KP_Begin = 65437;
  GDK_KEY_KP_Decimal = 65454;
  GDK_KEY_KP_Delete = 65439;
  GDK_KEY_KP_Divide = 65455;
  GDK_KEY_KP_Down = 65433;
  GDK_KEY_KP_End = 65436;
  GDK_KEY_KP_Enter = 65421;
  GDK_KEY_KP_Equal = 65469;
  GDK_KEY_KP_F1 = 65425;
  GDK_KEY_KP_F2 = 65426;
  GDK_KEY_KP_F3 = 65427;
  GDK_KEY_KP_F4 = 65428;
  GDK_KEY_KP_Home = 65429;
  GDK_KEY_KP_Insert = 65438;
  GDK_KEY_KP_Left = 65430;
  GDK_KEY_KP_Multiply = 65450;
  GDK_KEY_KP_Next = 65435;
  GDK_KEY_KP_Page_Down = 65435;
  GDK_KEY_KP_Page_Up = 65434;
  GDK_KEY_KP_Prior = 65434;
  GDK_KEY_KP_Right = 65432;
  GDK_KEY_KP_Separator = 65452;
  GDK_KEY_KP_Space = 65408;
  GDK_KEY_KP_Subtract = 65453;
  GDK_KEY_KP_Tab = 65417;
  GDK_KEY_KP_Up = 65431;
  GDK_KEY_Kana_Lock = 65325;
  GDK_KEY_Kana_Shift = 65326;
  GDK_KEY_Kanji = 65313;
  GDK_KEY_Kanji_Bangou = 65335;
  GDK_KEY_Katakana = 65318;
  GDK_KEY_KbdBrightnessDown = 269025030;
  GDK_KEY_KbdBrightnessUp = 269025029;
  GDK_KEY_KbdLightOnOff = 269025028;
  GDK_KEY_Kcedilla = 979;
  GDK_KEY_Keyboard = 269025203;
  GDK_KEY_Korean_Won = 3839;
  GDK_KEY_L = 76;
  GDK_KEY_L1 = 65480;
  GDK_KEY_L10 = 65489;
  GDK_KEY_L2 = 65481;
  GDK_KEY_L3 = 65482;
  GDK_KEY_L4 = 65483;
  GDK_KEY_L5 = 65484;
  GDK_KEY_L6 = 65485;
  GDK_KEY_L7 = 65486;
  GDK_KEY_L8 = 65487;
  GDK_KEY_L9 = 65488;
  GDK_KEY_Lacute = 453;
  GDK_KEY_Last_Virtual_Screen = 65236;
  GDK_KEY_Launch0 = 269025088;
  GDK_KEY_Launch1 = 269025089;
  GDK_KEY_Launch2 = 269025090;
  GDK_KEY_Launch3 = 269025091;
  GDK_KEY_Launch4 = 269025092;
  GDK_KEY_Launch5 = 269025093;
  GDK_KEY_Launch6 = 269025094;
  GDK_KEY_Launch7 = 269025095;
  GDK_KEY_Launch8 = 269025096;
  GDK_KEY_Launch9 = 269025097;
  GDK_KEY_LaunchA = 269025098;
  GDK_KEY_LaunchB = 269025099;
  GDK_KEY_LaunchC = 269025100;
  GDK_KEY_LaunchD = 269025101;
  GDK_KEY_LaunchE = 269025102;
  GDK_KEY_LaunchF = 269025103;
  GDK_KEY_Lbelowdot = 16784950;
  GDK_KEY_Lcaron = 421;
  GDK_KEY_Lcedilla = 934;
  GDK_KEY_Left = 65361;
  GDK_KEY_LightBulb = 269025077;
  GDK_KEY_Linefeed = 65290;
  GDK_KEY_LiraSign = 16785572;
  GDK_KEY_LogGrabInfo = 269024805;
  GDK_KEY_LogOff = 269025121;
  GDK_KEY_LogWindowTree = 269024804;
  GDK_KEY_Lstroke = 419;
  GDK_KEY_M = 77;
  GDK_KEY_Mabovedot = 16784960;
  GDK_KEY_Macedonia_DSE = 1717;
  GDK_KEY_Macedonia_GJE = 1714;
  GDK_KEY_Macedonia_KJE = 1724;
  GDK_KEY_Macedonia_dse_ = 1701;
  GDK_KEY_Macedonia_gje_ = 1698;
  GDK_KEY_Macedonia_kje_ = 1708;
  GDK_KEY_Mae_Koho = 65342;
  GDK_KEY_Mail = 269025049;
  GDK_KEY_MailForward = 269025168;
  GDK_KEY_Market = 269025122;
  GDK_KEY_Massyo = 65324;
  GDK_KEY_Meeting = 269025123;
  GDK_KEY_Memo = 269025054;
  GDK_KEY_Menu = 65383;
  GDK_KEY_MenuKB = 269025125;
  GDK_KEY_MenuPB = 269025126;
  GDK_KEY_Messenger = 269025166;
  GDK_KEY_Meta_L = 65511;
  GDK_KEY_Meta_R = 65512;
  GDK_KEY_MillSign = 16785573;
  GDK_KEY_ModeLock = 269025025;
  GDK_KEY_Mode_switch = 65406;
  GDK_KEY_MonBrightnessDown = 269025027;
  GDK_KEY_MonBrightnessUp = 269025026;
  GDK_KEY_MouseKeys_Accel_Enable = 65143;
  GDK_KEY_MouseKeys_Enable = 65142;
  GDK_KEY_Muhenkan = 65314;
  GDK_KEY_Multi_key = 65312;
  GDK_KEY_MultipleCandidate = 65341;
  GDK_KEY_Music = 269025170;
  GDK_KEY_MyComputer = 269025075;
  GDK_KEY_MySites = 269025127;
  GDK_KEY_N = 78;
  GDK_KEY_Nacute = 465;
  GDK_KEY_NairaSign = 16785574;
  GDK_KEY_Ncaron = 466;
  GDK_KEY_Ncedilla = 977;
  GDK_KEY_New = 269025128;
  GDK_KEY_NewSheqelSign = 16785578;
  GDK_KEY_News = 269025129;
  GDK_KEY_Next = 65366;
  GDK_KEY_Next_VMode = 269024802;
  GDK_KEY_Next_Virtual_Screen = 65234;
  GDK_KEY_Ntilde = 209;
  GDK_KEY_Num_Lock = 65407;
  GDK_KEY_O = 79;
  GDK_KEY_OE = 5052;
  GDK_KEY_Oacute = 211;
  GDK_KEY_Obarred = 16777631;
  GDK_KEY_Obelowdot = 16785100;
  GDK_KEY_Ocaron = 16777681;
  GDK_KEY_Ocircumflex = 212;
  GDK_KEY_Ocircumflexacute = 16785104;
  GDK_KEY_Ocircumflexbelowdot = 16785112;
  GDK_KEY_Ocircumflexgrave = 16785106;
  GDK_KEY_Ocircumflexhook = 16785108;
  GDK_KEY_Ocircumflextilde = 16785110;
  GDK_KEY_Odiaeresis = 214;
  GDK_KEY_Odoubleacute = 469;
  GDK_KEY_OfficeHome = 269025130;
  GDK_KEY_Ograve = 210;
  GDK_KEY_Ohook = 16785102;
  GDK_KEY_Ohorn = 16777632;
  GDK_KEY_Ohornacute = 16785114;
  GDK_KEY_Ohornbelowdot = 16785122;
  GDK_KEY_Ohorngrave = 16785116;
  GDK_KEY_Ohornhook = 16785118;
  GDK_KEY_Ohorntilde = 16785120;
  GDK_KEY_Omacron = 978;
  GDK_KEY_Ooblique = 216;
  GDK_KEY_Open = 269025131;
  GDK_KEY_OpenURL = 269025080;
  GDK_KEY_Option = 269025132;
  GDK_KEY_Oslash = 216;
  GDK_KEY_Otilde = 213;
  GDK_KEY_Overlay1_Enable = 65144;
  GDK_KEY_Overlay2_Enable = 65145;
  GDK_KEY_P = 80;
  GDK_KEY_Pabovedot = 16784982;
  GDK_KEY_Page_Down = 65366;
  GDK_KEY_Page_Up = 65365;
  GDK_KEY_Paste = 269025133;
  GDK_KEY_Pause = 65299;
  GDK_KEY_PesetaSign = 16785575;
  GDK_KEY_Phone = 269025134;
  GDK_KEY_Pictures = 269025169;
  GDK_KEY_Pointer_Accelerate = 65274;
  GDK_KEY_Pointer_Button1 = 65257;
  GDK_KEY_Pointer_Button2 = 65258;
  GDK_KEY_Pointer_Button3 = 65259;
  GDK_KEY_Pointer_Button4 = 65260;
  GDK_KEY_Pointer_Button5 = 65261;
  GDK_KEY_Pointer_Button_Dflt = 65256;
  GDK_KEY_Pointer_DblClick1 = 65263;
  GDK_KEY_Pointer_DblClick2 = 65264;
  GDK_KEY_Pointer_DblClick3 = 65265;
  GDK_KEY_Pointer_DblClick4 = 65266;
  GDK_KEY_Pointer_DblClick5 = 65267;
  GDK_KEY_Pointer_DblClick_Dflt = 65262;
  GDK_KEY_Pointer_DfltBtnNext = 65275;
  GDK_KEY_Pointer_DfltBtnPrev = 65276;
  GDK_KEY_Pointer_Down = 65251;
  GDK_KEY_Pointer_DownLeft = 65254;
  GDK_KEY_Pointer_DownRight = 65255;
  GDK_KEY_Pointer_Drag1 = 65269;
  GDK_KEY_Pointer_Drag2 = 65270;
  GDK_KEY_Pointer_Drag3 = 65271;
  GDK_KEY_Pointer_Drag4 = 65272;
  GDK_KEY_Pointer_Drag5 = 65277;
  GDK_KEY_Pointer_Drag_Dflt = 65268;
  GDK_KEY_Pointer_EnableKeys = 65273;
  GDK_KEY_Pointer_Left = 65248;
  GDK_KEY_Pointer_Right = 65249;
  GDK_KEY_Pointer_Up = 65250;
  GDK_KEY_Pointer_UpLeft = 65252;
  GDK_KEY_Pointer_UpRight = 65253;
  GDK_KEY_PowerDown = 269025057;
  GDK_KEY_PowerOff = 269025066;
  GDK_KEY_Prev_VMode = 269024803;
  GDK_KEY_Prev_Virtual_Screen = 65233;
  GDK_KEY_PreviousCandidate = 65342;
  GDK_KEY_Print = 65377;
  GDK_KEY_Prior = 65365;
  GDK_KEY_Q = 81;
  GDK_KEY_R = 82;
  GDK_KEY_R1 = 65490;
  GDK_KEY_R10 = 65499;
  GDK_KEY_R11 = 65500;
  GDK_KEY_R12 = 65501;
  GDK_KEY_R13 = 65502;
  GDK_KEY_R14 = 65503;
  GDK_KEY_R15 = 65504;
  GDK_KEY_R2 = 65491;
  GDK_KEY_R3 = 65492;
  GDK_KEY_R4 = 65493;
  GDK_KEY_R5 = 65494;
  GDK_KEY_R6 = 65495;
  GDK_KEY_R7 = 65496;
  GDK_KEY_R8 = 65497;
  GDK_KEY_R9 = 65498;
  GDK_KEY_RFKill = 269025205;
  GDK_KEY_Racute = 448;
  GDK_KEY_Rcaron = 472;
  GDK_KEY_Rcedilla = 931;
  GDK_KEY_Red = 269025187;
  GDK_KEY_Redo = 65382;
  GDK_KEY_Refresh = 269025065;
  GDK_KEY_Reload = 269025139;
  GDK_KEY_RepeatKeys_Enable = 65138;
  GDK_KEY_Reply = 269025138;
  GDK_KEY_Return = 65293;
  GDK_KEY_Right = 65363;
  GDK_KEY_RockerDown = 269025060;
  GDK_KEY_RockerEnter = 269025061;
  GDK_KEY_RockerUp = 269025059;
  GDK_KEY_Romaji = 65316;
  GDK_KEY_RotateWindows = 269025140;
  GDK_KEY_RotationKB = 269025142;
  GDK_KEY_RotationPB = 269025141;
  GDK_KEY_RupeeSign = 16785576;
  GDK_KEY_S = 83;
  GDK_KEY_SCHWA = 16777615;
  GDK_KEY_Sabovedot = 16784992;
  GDK_KEY_Sacute = 422;
  GDK_KEY_Save = 269025143;
  GDK_KEY_Scaron = 425;
  GDK_KEY_Scedilla = 426;
  GDK_KEY_Scircumflex = 734;
  GDK_KEY_ScreenSaver = 269025069;
  GDK_KEY_ScrollClick = 269025146;
  GDK_KEY_ScrollDown = 269025145;
  GDK_KEY_ScrollUp = 269025144;
  GDK_KEY_Scroll_Lock = 65300;
  GDK_KEY_Search = 269025051;
  GDK_KEY_Select = 65376;
  GDK_KEY_SelectButton = 269025184;
  GDK_KEY_Send = 269025147;
  GDK_KEY_Serbian_DJE = 1713;
  GDK_KEY_Serbian_DZE = 1727;
  GDK_KEY_Serbian_JE = 1720;
  GDK_KEY_Serbian_LJE = 1721;
  GDK_KEY_Serbian_NJE = 1722;
  GDK_KEY_Serbian_TSHE = 1723;
  GDK_KEY_Serbian_dje_ = 1697;
  GDK_KEY_Serbian_dze_ = 1711;
  GDK_KEY_Serbian_je_ = 1704;
  GDK_KEY_Serbian_lje_ = 1705;
  GDK_KEY_Serbian_nje_ = 1706;
  GDK_KEY_Serbian_tshe_ = 1707;
  GDK_KEY_Shift_L = 65505;
  GDK_KEY_Shift_Lock = 65510;
  GDK_KEY_Shift_R = 65506;
  GDK_KEY_Shop = 269025078;
  GDK_KEY_SingleCandidate = 65340;
  GDK_KEY_Sinh_a = 16780677;
  GDK_KEY_Sinh_aa = 16780678;
  GDK_KEY_Sinh_aa2 = 16780751;
  GDK_KEY_Sinh_ae = 16780679;
  GDK_KEY_Sinh_ae2 = 16780752;
  GDK_KEY_Sinh_aee = 16780680;
  GDK_KEY_Sinh_aee2 = 16780753;
  GDK_KEY_Sinh_ai = 16780691;
  GDK_KEY_Sinh_ai2 = 16780763;
  GDK_KEY_Sinh_al = 16780746;
  GDK_KEY_Sinh_au = 16780694;
  GDK_KEY_Sinh_au2 = 16780766;
  GDK_KEY_Sinh_ba = 16780726;
  GDK_KEY_Sinh_bha = 16780727;
  GDK_KEY_Sinh_ca = 16780704;
  GDK_KEY_Sinh_cha = 16780705;
  GDK_KEY_Sinh_dda = 16780713;
  GDK_KEY_Sinh_ddha = 16780714;
  GDK_KEY_Sinh_dha = 16780719;
  GDK_KEY_Sinh_dhha = 16780720;
  GDK_KEY_Sinh_e = 16780689;
  GDK_KEY_Sinh_e2 = 16780761;
  GDK_KEY_Sinh_ee = 16780690;
  GDK_KEY_Sinh_ee2 = 16780762;
  GDK_KEY_Sinh_fa = 16780742;
  GDK_KEY_Sinh_ga = 16780700;
  GDK_KEY_Sinh_gha = 16780701;
  GDK_KEY_Sinh_h2 = 16780675;
  GDK_KEY_Sinh_ha = 16780740;
  GDK_KEY_Sinh_i = 16780681;
  GDK_KEY_Sinh_i2 = 16780754;
  GDK_KEY_Sinh_ii = 16780682;
  GDK_KEY_Sinh_ii2 = 16780755;
  GDK_KEY_Sinh_ja = 16780706;
  GDK_KEY_Sinh_jha = 16780707;
  GDK_KEY_Sinh_jnya = 16780709;
  GDK_KEY_Sinh_ka = 16780698;
  GDK_KEY_Sinh_kha = 16780699;
  GDK_KEY_Sinh_kunddaliya = 16780788;
  GDK_KEY_Sinh_la = 16780733;
  GDK_KEY_Sinh_lla = 16780741;
  GDK_KEY_Sinh_lu = 16780687;
  GDK_KEY_Sinh_lu2 = 16780767;
  GDK_KEY_Sinh_luu = 16780688;
  GDK_KEY_Sinh_luu2 = 16780787;
  GDK_KEY_Sinh_ma = 16780728;
  GDK_KEY_Sinh_mba = 16780729;
  GDK_KEY_Sinh_na = 16780721;
  GDK_KEY_Sinh_ndda = 16780716;
  GDK_KEY_Sinh_ndha = 16780723;
  GDK_KEY_Sinh_ng = 16780674;
  GDK_KEY_Sinh_ng2 = 16780702;
  GDK_KEY_Sinh_nga = 16780703;
  GDK_KEY_Sinh_nja = 16780710;
  GDK_KEY_Sinh_nna = 16780715;
  GDK_KEY_Sinh_nya = 16780708;
  GDK_KEY_Sinh_o = 16780692;
  GDK_KEY_Sinh_o2 = 16780764;
  GDK_KEY_Sinh_oo = 16780693;
  GDK_KEY_Sinh_oo2 = 16780765;
  GDK_KEY_Sinh_pa = 16780724;
  GDK_KEY_Sinh_pha = 16780725;
  GDK_KEY_Sinh_ra = 16780731;
  GDK_KEY_Sinh_ri = 16780685;
  GDK_KEY_Sinh_rii = 16780686;
  GDK_KEY_Sinh_ru2 = 16780760;
  GDK_KEY_Sinh_ruu2 = 16780786;
  GDK_KEY_Sinh_sa = 16780739;
  GDK_KEY_Sinh_sha = 16780737;
  GDK_KEY_Sinh_ssha = 16780738;
  GDK_KEY_Sinh_tha = 16780717;
  GDK_KEY_Sinh_thha = 16780718;
  GDK_KEY_Sinh_tta = 16780711;
  GDK_KEY_Sinh_ttha = 16780712;
  GDK_KEY_Sinh_u = 16780683;
  GDK_KEY_Sinh_u2 = 16780756;
  GDK_KEY_Sinh_uu = 16780684;
  GDK_KEY_Sinh_uu2 = 16780758;
  GDK_KEY_Sinh_va = 16780736;
  GDK_KEY_Sinh_ya = 16780730;
  GDK_KEY_Sleep = 269025071;
  GDK_KEY_SlowKeys_Enable = 65139;
  GDK_KEY_Spell = 269025148;
  GDK_KEY_SplitScreen = 269025149;
  GDK_KEY_Standby = 269025040;
  GDK_KEY_Start = 269025050;
  GDK_KEY_StickyKeys_Enable = 65141;
  GDK_KEY_Stop = 269025064;
  GDK_KEY_Subtitle = 269025178;
  GDK_KEY_Super_L = 65515;
  GDK_KEY_Super_R = 65516;
  GDK_KEY_Support = 269025150;
  GDK_KEY_Suspend = 269025191;
  GDK_KEY_Switch_VT_1 = 269024769;
  GDK_KEY_Switch_VT_10 = 269024778;
  GDK_KEY_Switch_VT_11 = 269024779;
  GDK_KEY_Switch_VT_12 = 269024780;
  GDK_KEY_Switch_VT_2 = 269024770;
  GDK_KEY_Switch_VT_3 = 269024771;
  GDK_KEY_Switch_VT_4 = 269024772;
  GDK_KEY_Switch_VT_5 = 269024773;
  GDK_KEY_Switch_VT_6 = 269024774;
  GDK_KEY_Switch_VT_7 = 269024775;
  GDK_KEY_Switch_VT_8 = 269024776;
  GDK_KEY_Switch_VT_9 = 269024777;
  GDK_KEY_Sys_Req = 65301;
  GDK_KEY_T = 84;
  GDK_KEY_THORN = 222;
  GDK_KEY_Tab = 65289;
  GDK_KEY_Tabovedot = 16785002;
  GDK_KEY_TaskPane = 269025151;
  GDK_KEY_Tcaron = 427;
  GDK_KEY_Tcedilla = 478;
  GDK_KEY_Terminal = 269025152;
  GDK_KEY_Terminate_Server = 65237;
  GDK_KEY_Thai_baht = 3551;
  GDK_KEY_Thai_bobaimai = 3514;
  GDK_KEY_Thai_chochan = 3496;
  GDK_KEY_Thai_chochang = 3498;
  GDK_KEY_Thai_choching = 3497;
  GDK_KEY_Thai_chochoe = 3500;
  GDK_KEY_Thai_dochada = 3502;
  GDK_KEY_Thai_dodek = 3508;
  GDK_KEY_Thai_fofa = 3517;
  GDK_KEY_Thai_fofan = 3519;
  GDK_KEY_Thai_hohip = 3531;
  GDK_KEY_Thai_honokhuk = 3534;
  GDK_KEY_Thai_khokhai = 3490;
  GDK_KEY_Thai_khokhon = 3493;
  GDK_KEY_Thai_khokhuat = 3491;
  GDK_KEY_Thai_khokhwai = 3492;
  GDK_KEY_Thai_khorakhang = 3494;
  GDK_KEY_Thai_kokai = 3489;
  GDK_KEY_Thai_lakkhangyao = 3557;
  GDK_KEY_Thai_lekchet = 3575;
  GDK_KEY_Thai_lekha = 3573;
  GDK_KEY_Thai_lekhok = 3574;
  GDK_KEY_Thai_lekkao = 3577;
  GDK_KEY_Thai_leknung = 3569;
  GDK_KEY_Thai_lekpaet = 3576;
  GDK_KEY_Thai_leksam = 3571;
  GDK_KEY_Thai_leksi = 3572;
  GDK_KEY_Thai_leksong = 3570;
  GDK_KEY_Thai_leksun = 3568;
  GDK_KEY_Thai_lochula = 3532;
  GDK_KEY_Thai_loling = 3525;
  GDK_KEY_Thai_lu = 3526;
  GDK_KEY_Thai_maichattawa = 3563;
  GDK_KEY_Thai_maiek = 3560;
  GDK_KEY_Thai_maihanakat = 3537;
  GDK_KEY_Thai_maihanakat_maitho = 3550;
  GDK_KEY_Thai_maitaikhu = 3559;
  GDK_KEY_Thai_maitho = 3561;
  GDK_KEY_Thai_maitri = 3562;
  GDK_KEY_Thai_maiyamok = 3558;
  GDK_KEY_Thai_moma = 3521;
  GDK_KEY_Thai_ngongu = 3495;
  GDK_KEY_Thai_nikhahit = 3565;
  GDK_KEY_Thai_nonen = 3507;
  GDK_KEY_Thai_nonu = 3513;
  GDK_KEY_Thai_oang = 3533;
  GDK_KEY_Thai_paiyannoi = 3535;
  GDK_KEY_Thai_phinthu = 3546;
  GDK_KEY_Thai_phophan = 3518;
  GDK_KEY_Thai_phophung = 3516;
  GDK_KEY_Thai_phosamphao = 3520;
  GDK_KEY_Thai_popla = 3515;
  GDK_KEY_Thai_rorua = 3523;
  GDK_KEY_Thai_ru = 3524;
  GDK_KEY_Thai_saraa = 3536;
  GDK_KEY_Thai_saraaa = 3538;
  GDK_KEY_Thai_saraae = 3553;
  GDK_KEY_Thai_saraaimaimalai = 3556;
  GDK_KEY_Thai_saraaimaimuan = 3555;
  GDK_KEY_Thai_saraam = 3539;
  GDK_KEY_Thai_sarae = 3552;
  GDK_KEY_Thai_sarai = 3540;
  GDK_KEY_Thai_saraii = 3541;
  GDK_KEY_Thai_sarao = 3554;
  GDK_KEY_Thai_sarau = 3544;
  GDK_KEY_Thai_saraue = 3542;
  GDK_KEY_Thai_sarauee = 3543;
  GDK_KEY_Thai_sarauu = 3545;
  GDK_KEY_Thai_sorusi = 3529;
  GDK_KEY_Thai_sosala = 3528;
  GDK_KEY_Thai_soso = 3499;
  GDK_KEY_Thai_sosua = 3530;
  GDK_KEY_Thai_thanthakhat = 3564;
  GDK_KEY_Thai_thonangmontho = 3505;
  GDK_KEY_Thai_thophuthao = 3506;
  GDK_KEY_Thai_thothahan = 3511;
  GDK_KEY_Thai_thothan = 3504;
  GDK_KEY_Thai_thothong = 3512;
  GDK_KEY_Thai_thothung = 3510;
  GDK_KEY_Thai_topatak = 3503;
  GDK_KEY_Thai_totao = 3509;
  GDK_KEY_Thai_wowaen = 3527;
  GDK_KEY_Thai_yoyak = 3522;
  GDK_KEY_Thai_yoying = 3501;
  GDK_KEY_Thorn_ = 222;
  GDK_KEY_Time = 269025183;
  GDK_KEY_ToDoList = 269025055;
  GDK_KEY_Tools = 269025153;
  GDK_KEY_TopMenu = 269025186;
  GDK_KEY_TouchpadOff = 269025201;
  GDK_KEY_TouchpadOn = 269025200;
  GDK_KEY_TouchpadToggle = 269025193;
  GDK_KEY_Touroku = 65323;
  GDK_KEY_Travel = 269025154;
  GDK_KEY_Tslash = 940;
  GDK_KEY_U = 85;
  GDK_KEY_UWB = 269025174;
  GDK_KEY_Uacute = 218;
  GDK_KEY_Ubelowdot = 16785124;
  GDK_KEY_Ubreve = 733;
  GDK_KEY_Ucircumflex = 219;
  GDK_KEY_Udiaeresis = 220;
  GDK_KEY_Udoubleacute = 475;
  GDK_KEY_Ugrave = 217;
  GDK_KEY_Uhook = 16785126;
  GDK_KEY_Uhorn = 16777647;
  GDK_KEY_Uhornacute = 16785128;
  GDK_KEY_Uhornbelowdot = 16785136;
  GDK_KEY_Uhorngrave = 16785130;
  GDK_KEY_Uhornhook = 16785132;
  GDK_KEY_Uhorntilde = 16785134;
  GDK_KEY_Ukrainian_GHE_WITH_UPTURN = 1725;
  GDK_KEY_Ukrainian_I = 1718;
  GDK_KEY_Ukrainian_IE = 1716;
  GDK_KEY_Ukrainian_YI = 1719;
  GDK_KEY_Ukrainian_ghe_with_upturn_ = 1709;
  GDK_KEY_Ukrainian_i_ = 1702;
  GDK_KEY_Ukrainian_ie_ = 1700;
  GDK_KEY_Ukrainian_yi_ = 1703;
  GDK_KEY_Ukranian_I = 1718;
  GDK_KEY_Ukranian_JE = 1716;
  GDK_KEY_Ukranian_YI = 1719;
  GDK_KEY_Ukranian_i_ = 1702;
  GDK_KEY_Ukranian_je_ = 1700;
  GDK_KEY_Ukranian_yi_ = 1703;
  GDK_KEY_Umacron = 990;
  GDK_KEY_Undo = 65381;
  GDK_KEY_Ungrab = 269024800;
  GDK_KEY_Uogonek = 985;
  GDK_KEY_Up = 65362;
  GDK_KEY_Uring = 473;
  GDK_KEY_User1KB = 269025157;
  GDK_KEY_User2KB = 269025158;
  GDK_KEY_UserPB = 269025156;
  GDK_KEY_Utilde = 989;
  GDK_KEY_V = 86;
  GDK_KEY_VendorHome = 269025076;
  GDK_KEY_Video = 269025159;
  GDK_KEY_View = 269025185;
  GDK_KEY_VoidSymbol = 16777215;
  GDK_KEY_W = 87;
  GDK_KEY_WLAN = 269025173;
  GDK_KEY_WWAN = 269025204;
  GDK_KEY_WWW = 269025070;
  GDK_KEY_Wacute = 16785026;
  GDK_KEY_WakeUp = 269025067;
  GDK_KEY_Wcircumflex = 16777588;
  GDK_KEY_Wdiaeresis = 16785028;
  GDK_KEY_WebCam = 269025167;
  GDK_KEY_Wgrave = 16785024;
  GDK_KEY_WheelButton = 269025160;
  GDK_KEY_WindowClear = 269025109;
  GDK_KEY_WonSign = 16785577;
  GDK_KEY_Word = 269025161;
  GDK_KEY_X = 88;
  GDK_KEY_Xabovedot = 16785034;
  GDK_KEY_Xfer = 269025162;
  GDK_KEY_Y = 89;
  GDK_KEY_Yacute = 221;
  GDK_KEY_Ybelowdot = 16785140;
  GDK_KEY_Ycircumflex = 16777590;
  GDK_KEY_Ydiaeresis = 5054;
  GDK_KEY_Yellow = 269025189;
  GDK_KEY_Ygrave = 16785138;
  GDK_KEY_Yhook = 16785142;
  GDK_KEY_Ytilde = 16785144;
  GDK_KEY_Z = 90;
  GDK_KEY_Zabovedot = 431;
  GDK_KEY_Zacute = 428;
  GDK_KEY_Zcaron = 430;
  GDK_KEY_Zen_Koho = 65341;
  GDK_KEY_Zenkaku = 65320;
  GDK_KEY_Zenkaku_Hankaku = 65322;
  GDK_KEY_ZoomIn = 269025163;
  GDK_KEY_ZoomOut = 269025164;
  GDK_KEY_Zstroke = 16777653;
  GDK_KEY_a_ = 97;
  GDK_KEY_aacute_ = 225;
  GDK_KEY_abelowdot_ = 16785057;
  GDK_KEY_abovedot = 511;
  GDK_KEY_abreve_ = 483;
  GDK_KEY_abreveacute_ = 16785071;
  GDK_KEY_abrevebelowdot_ = 16785079;
  GDK_KEY_abrevegrave_ = 16785073;
  GDK_KEY_abrevehook_ = 16785075;
  GDK_KEY_abrevetilde_ = 16785077;
  GDK_KEY_acircumflex_ = 226;
  GDK_KEY_acircumflexacute_ = 16785061;
  GDK_KEY_acircumflexbelowdot_ = 16785069;
  GDK_KEY_acircumflexgrave_ = 16785063;
  GDK_KEY_acircumflexhook_ = 16785065;
  GDK_KEY_acircumflextilde_ = 16785067;
  GDK_KEY_acute = 180;
  GDK_KEY_adiaeresis_ = 228;
  GDK_KEY_ae_ = 230;
  GDK_KEY_agrave_ = 224;
  GDK_KEY_ahook_ = 16785059;
  GDK_KEY_amacron_ = 992;
  GDK_KEY_ampersand = 38;
  GDK_KEY_aogonek_ = 433;
  GDK_KEY_apostrophe = 39;
  GDK_KEY_approxeq = 16785992;
  GDK_KEY_approximate = 2248;
  GDK_KEY_aring_ = 229;
  GDK_KEY_asciicircum = 94;
  GDK_KEY_asciitilde = 126;
  GDK_KEY_asterisk = 42;
  GDK_KEY_at = 64;
  GDK_KEY_atilde_ = 227;
  GDK_KEY_b_ = 98;
  GDK_KEY_babovedot_ = 16784899;
  GDK_KEY_backslash = 92;
  GDK_KEY_ballotcross = 2804;
  GDK_KEY_bar = 124;
  GDK_KEY_because = 16785973;
  GDK_KEY_blank = 2527;
  GDK_KEY_botintegral = 2213;
  GDK_KEY_botleftparens = 2220;
  GDK_KEY_botleftsqbracket = 2216;
  GDK_KEY_botleftsummation = 2226;
  GDK_KEY_botrightparens = 2222;
  GDK_KEY_botrightsqbracket = 2218;
  GDK_KEY_botrightsummation = 2230;
  GDK_KEY_bott = 2550;
  GDK_KEY_botvertsummationconnector = 2228;
  GDK_KEY_braceleft = 123;
  GDK_KEY_braceright = 125;
  GDK_KEY_bracketleft = 91;
  GDK_KEY_bracketright = 93;
  GDK_KEY_braille_blank = 16787456;
  GDK_KEY_braille_dot_1 = 65521;
  GDK_KEY_braille_dot_10 = 65530;
  GDK_KEY_braille_dot_2 = 65522;
  GDK_KEY_braille_dot_3 = 65523;
  GDK_KEY_braille_dot_4 = 65524;
  GDK_KEY_braille_dot_5 = 65525;
  GDK_KEY_braille_dot_6 = 65526;
  GDK_KEY_braille_dot_7 = 65527;
  GDK_KEY_braille_dot_8 = 65528;
  GDK_KEY_braille_dot_9 = 65529;
  GDK_KEY_braille_dots_1 = 16787457;
  GDK_KEY_braille_dots_12 = 16787459;
  GDK_KEY_braille_dots_123 = 16787463;
  GDK_KEY_braille_dots_1234 = 16787471;
  GDK_KEY_braille_dots_12345 = 16787487;
  GDK_KEY_braille_dots_123456 = 16787519;
  GDK_KEY_braille_dots_1234567 = 16787583;
  GDK_KEY_braille_dots_12345678 = 16787711;
  GDK_KEY_braille_dots_1234568 = 16787647;
  GDK_KEY_braille_dots_123457 = 16787551;
  GDK_KEY_braille_dots_1234578 = 16787679;
  GDK_KEY_braille_dots_123458 = 16787615;
  GDK_KEY_braille_dots_12346 = 16787503;
  GDK_KEY_braille_dots_123467 = 16787567;
  GDK_KEY_braille_dots_1234678 = 16787695;
  GDK_KEY_braille_dots_123468 = 16787631;
  GDK_KEY_braille_dots_12347 = 16787535;
  GDK_KEY_braille_dots_123478 = 16787663;
  GDK_KEY_braille_dots_12348 = 16787599;
  GDK_KEY_braille_dots_1235 = 16787479;
  GDK_KEY_braille_dots_12356 = 16787511;
  GDK_KEY_braille_dots_123567 = 16787575;
  GDK_KEY_braille_dots_1235678 = 16787703;
  GDK_KEY_braille_dots_123568 = 16787639;
  GDK_KEY_braille_dots_12357 = 16787543;
  GDK_KEY_braille_dots_123578 = 16787671;
  GDK_KEY_braille_dots_12358 = 16787607;
  GDK_KEY_braille_dots_1236 = 16787495;
  GDK_KEY_braille_dots_12367 = 16787559;
  GDK_KEY_braille_dots_123678 = 16787687;
  GDK_KEY_braille_dots_12368 = 16787623;
  GDK_KEY_braille_dots_1237 = 16787527;
  GDK_KEY_braille_dots_12378 = 16787655;
  GDK_KEY_braille_dots_1238 = 16787591;
  GDK_KEY_braille_dots_124 = 16787467;
  GDK_KEY_braille_dots_1245 = 16787483;
  GDK_KEY_braille_dots_12456 = 16787515;
  GDK_KEY_braille_dots_124567 = 16787579;
  GDK_KEY_braille_dots_1245678 = 16787707;
  GDK_KEY_braille_dots_124568 = 16787643;
  GDK_KEY_braille_dots_12457 = 16787547;
  GDK_KEY_braille_dots_124578 = 16787675;
  GDK_KEY_braille_dots_12458 = 16787611;
  GDK_KEY_braille_dots_1246 = 16787499;
  GDK_KEY_braille_dots_12467 = 16787563;
  GDK_KEY_braille_dots_124678 = 16787691;
  GDK_KEY_braille_dots_12468 = 16787627;
  GDK_KEY_braille_dots_1247 = 16787531;
  GDK_KEY_braille_dots_12478 = 16787659;
  GDK_KEY_braille_dots_1248 = 16787595;
  GDK_KEY_braille_dots_125 = 16787475;
  GDK_KEY_braille_dots_1256 = 16787507;
  GDK_KEY_braille_dots_12567 = 16787571;
  GDK_KEY_braille_dots_125678 = 16787699;
  GDK_KEY_braille_dots_12568 = 16787635;
  GDK_KEY_braille_dots_1257 = 16787539;
  GDK_KEY_braille_dots_12578 = 16787667;
  GDK_KEY_braille_dots_1258 = 16787603;
  GDK_KEY_braille_dots_126 = 16787491;
  GDK_KEY_braille_dots_1267 = 16787555;
  GDK_KEY_braille_dots_12678 = 16787683;
  GDK_KEY_braille_dots_1268 = 16787619;
  GDK_KEY_braille_dots_127 = 16787523;
  GDK_KEY_braille_dots_1278 = 16787651;
  GDK_KEY_braille_dots_128 = 16787587;
  GDK_KEY_braille_dots_13 = 16787461;
  GDK_KEY_braille_dots_134 = 16787469;
  GDK_KEY_braille_dots_1345 = 16787485;
  GDK_KEY_braille_dots_13456 = 16787517;
  GDK_KEY_braille_dots_134567 = 16787581;
  GDK_KEY_braille_dots_1345678 = 16787709;
  GDK_KEY_braille_dots_134568 = 16787645;
  GDK_KEY_braille_dots_13457 = 16787549;
  GDK_KEY_braille_dots_134578 = 16787677;
  GDK_KEY_braille_dots_13458 = 16787613;
  GDK_KEY_braille_dots_1346 = 16787501;
  GDK_KEY_braille_dots_13467 = 16787565;
  GDK_KEY_braille_dots_134678 = 16787693;
  GDK_KEY_braille_dots_13468 = 16787629;
  GDK_KEY_braille_dots_1347 = 16787533;
  GDK_KEY_braille_dots_13478 = 16787661;
  GDK_KEY_braille_dots_1348 = 16787597;
  GDK_KEY_braille_dots_135 = 16787477;
  GDK_KEY_braille_dots_1356 = 16787509;
  GDK_KEY_braille_dots_13567 = 16787573;
  GDK_KEY_braille_dots_135678 = 16787701;
  GDK_KEY_braille_dots_13568 = 16787637;
  GDK_KEY_braille_dots_1357 = 16787541;
  GDK_KEY_braille_dots_13578 = 16787669;
  GDK_KEY_braille_dots_1358 = 16787605;
  GDK_KEY_braille_dots_136 = 16787493;
  GDK_KEY_braille_dots_1367 = 16787557;
  GDK_KEY_braille_dots_13678 = 16787685;
  GDK_KEY_braille_dots_1368 = 16787621;
  GDK_KEY_braille_dots_137 = 16787525;
  GDK_KEY_braille_dots_1378 = 16787653;
  GDK_KEY_braille_dots_138 = 16787589;
  GDK_KEY_braille_dots_14 = 16787465;
  GDK_KEY_braille_dots_145 = 16787481;
  GDK_KEY_braille_dots_1456 = 16787513;
  GDK_KEY_braille_dots_14567 = 16787577;
  GDK_KEY_braille_dots_145678 = 16787705;
  GDK_KEY_braille_dots_14568 = 16787641;
  GDK_KEY_braille_dots_1457 = 16787545;
  GDK_KEY_braille_dots_14578 = 16787673;
  GDK_KEY_braille_dots_1458 = 16787609;
  GDK_KEY_braille_dots_146 = 16787497;
  GDK_KEY_braille_dots_1467 = 16787561;
  GDK_KEY_braille_dots_14678 = 16787689;
  GDK_KEY_braille_dots_1468 = 16787625;
  GDK_KEY_braille_dots_147 = 16787529;
  GDK_KEY_braille_dots_1478 = 16787657;
  GDK_KEY_braille_dots_148 = 16787593;
  GDK_KEY_braille_dots_15 = 16787473;
  GDK_KEY_braille_dots_156 = 16787505;
  GDK_KEY_braille_dots_1567 = 16787569;
  GDK_KEY_braille_dots_15678 = 16787697;
  GDK_KEY_braille_dots_1568 = 16787633;
  GDK_KEY_braille_dots_157 = 16787537;
  GDK_KEY_braille_dots_1578 = 16787665;
  GDK_KEY_braille_dots_158 = 16787601;
  GDK_KEY_braille_dots_16 = 16787489;
  GDK_KEY_braille_dots_167 = 16787553;
  GDK_KEY_braille_dots_1678 = 16787681;
  GDK_KEY_braille_dots_168 = 16787617;
  GDK_KEY_braille_dots_17 = 16787521;
  GDK_KEY_braille_dots_178 = 16787649;
  GDK_KEY_braille_dots_18 = 16787585;
  GDK_KEY_braille_dots_2 = 16787458;
  GDK_KEY_braille_dots_23 = 16787462;
  GDK_KEY_braille_dots_234 = 16787470;
  GDK_KEY_braille_dots_2345 = 16787486;
  GDK_KEY_braille_dots_23456 = 16787518;
  GDK_KEY_braille_dots_234567 = 16787582;
  GDK_KEY_braille_dots_2345678 = 16787710;
  GDK_KEY_braille_dots_234568 = 16787646;
  GDK_KEY_braille_dots_23457 = 16787550;
  GDK_KEY_braille_dots_234578 = 16787678;
  GDK_KEY_braille_dots_23458 = 16787614;
  GDK_KEY_braille_dots_2346 = 16787502;
  GDK_KEY_braille_dots_23467 = 16787566;
  GDK_KEY_braille_dots_234678 = 16787694;
  GDK_KEY_braille_dots_23468 = 16787630;
  GDK_KEY_braille_dots_2347 = 16787534;
  GDK_KEY_braille_dots_23478 = 16787662;
  GDK_KEY_braille_dots_2348 = 16787598;
  GDK_KEY_braille_dots_235 = 16787478;
  GDK_KEY_braille_dots_2356 = 16787510;
  GDK_KEY_braille_dots_23567 = 16787574;
  GDK_KEY_braille_dots_235678 = 16787702;
  GDK_KEY_braille_dots_23568 = 16787638;
  GDK_KEY_braille_dots_2357 = 16787542;
  GDK_KEY_braille_dots_23578 = 16787670;
  GDK_KEY_braille_dots_2358 = 16787606;
  GDK_KEY_braille_dots_236 = 16787494;
  GDK_KEY_braille_dots_2367 = 16787558;
  GDK_KEY_braille_dots_23678 = 16787686;
  GDK_KEY_braille_dots_2368 = 16787622;
  GDK_KEY_braille_dots_237 = 16787526;
  GDK_KEY_braille_dots_2378 = 16787654;
  GDK_KEY_braille_dots_238 = 16787590;
  GDK_KEY_braille_dots_24 = 16787466;
  GDK_KEY_braille_dots_245 = 16787482;
  GDK_KEY_braille_dots_2456 = 16787514;
  GDK_KEY_braille_dots_24567 = 16787578;
  GDK_KEY_braille_dots_245678 = 16787706;
  GDK_KEY_braille_dots_24568 = 16787642;
  GDK_KEY_braille_dots_2457 = 16787546;
  GDK_KEY_braille_dots_24578 = 16787674;
  GDK_KEY_braille_dots_2458 = 16787610;
  GDK_KEY_braille_dots_246 = 16787498;
  GDK_KEY_braille_dots_2467 = 16787562;
  GDK_KEY_braille_dots_24678 = 16787690;
  GDK_KEY_braille_dots_2468 = 16787626;
  GDK_KEY_braille_dots_247 = 16787530;
  GDK_KEY_braille_dots_2478 = 16787658;
  GDK_KEY_braille_dots_248 = 16787594;
  GDK_KEY_braille_dots_25 = 16787474;
  GDK_KEY_braille_dots_256 = 16787506;
  GDK_KEY_braille_dots_2567 = 16787570;
  GDK_KEY_braille_dots_25678 = 16787698;
  GDK_KEY_braille_dots_2568 = 16787634;
  GDK_KEY_braille_dots_257 = 16787538;
  GDK_KEY_braille_dots_2578 = 16787666;
  GDK_KEY_braille_dots_258 = 16787602;
  GDK_KEY_braille_dots_26 = 16787490;
  GDK_KEY_braille_dots_267 = 16787554;
  GDK_KEY_braille_dots_2678 = 16787682;
  GDK_KEY_braille_dots_268 = 16787618;
  GDK_KEY_braille_dots_27 = 16787522;
  GDK_KEY_braille_dots_278 = 16787650;
  GDK_KEY_braille_dots_28 = 16787586;
  GDK_KEY_braille_dots_3 = 16787460;
  GDK_KEY_braille_dots_34 = 16787468;
  GDK_KEY_braille_dots_345 = 16787484;
  GDK_KEY_braille_dots_3456 = 16787516;
  GDK_KEY_braille_dots_34567 = 16787580;
  GDK_KEY_braille_dots_345678 = 16787708;
  GDK_KEY_braille_dots_34568 = 16787644;
  GDK_KEY_braille_dots_3457 = 16787548;
  GDK_KEY_braille_dots_34578 = 16787676;
  GDK_KEY_braille_dots_3458 = 16787612;
  GDK_KEY_braille_dots_346 = 16787500;
  GDK_KEY_braille_dots_3467 = 16787564;
  GDK_KEY_braille_dots_34678 = 16787692;
  GDK_KEY_braille_dots_3468 = 16787628;
  GDK_KEY_braille_dots_347 = 16787532;
  GDK_KEY_braille_dots_3478 = 16787660;
  GDK_KEY_braille_dots_348 = 16787596;
  GDK_KEY_braille_dots_35 = 16787476;
  GDK_KEY_braille_dots_356 = 16787508;
  GDK_KEY_braille_dots_3567 = 16787572;
  GDK_KEY_braille_dots_35678 = 16787700;
  GDK_KEY_braille_dots_3568 = 16787636;
  GDK_KEY_braille_dots_357 = 16787540;
  GDK_KEY_braille_dots_3578 = 16787668;
  GDK_KEY_braille_dots_358 = 16787604;
  GDK_KEY_braille_dots_36 = 16787492;
  GDK_KEY_braille_dots_367 = 16787556;
  GDK_KEY_braille_dots_3678 = 16787684;
  GDK_KEY_braille_dots_368 = 16787620;
  GDK_KEY_braille_dots_37 = 16787524;
  GDK_KEY_braille_dots_378 = 16787652;
  GDK_KEY_braille_dots_38 = 16787588;
  GDK_KEY_braille_dots_4 = 16787464;
  GDK_KEY_braille_dots_45 = 16787480;
  GDK_KEY_braille_dots_456 = 16787512;
  GDK_KEY_braille_dots_4567 = 16787576;
  GDK_KEY_braille_dots_45678 = 16787704;
  GDK_KEY_braille_dots_4568 = 16787640;
  GDK_KEY_braille_dots_457 = 16787544;
  GDK_KEY_braille_dots_4578 = 16787672;
  GDK_KEY_braille_dots_458 = 16787608;
  GDK_KEY_braille_dots_46 = 16787496;
  GDK_KEY_braille_dots_467 = 16787560;
  GDK_KEY_braille_dots_4678 = 16787688;
  GDK_KEY_braille_dots_468 = 16787624;
  GDK_KEY_braille_dots_47 = 16787528;
  GDK_KEY_braille_dots_478 = 16787656;
  GDK_KEY_braille_dots_48 = 16787592;
  GDK_KEY_braille_dots_5 = 16787472;
  GDK_KEY_braille_dots_56 = 16787504;
  GDK_KEY_braille_dots_567 = 16787568;
  GDK_KEY_braille_dots_5678 = 16787696;
  GDK_KEY_braille_dots_568 = 16787632;
  GDK_KEY_braille_dots_57 = 16787536;
  GDK_KEY_braille_dots_578 = 16787664;
  GDK_KEY_braille_dots_58 = 16787600;
  GDK_KEY_braille_dots_6 = 16787488;
  GDK_KEY_braille_dots_67 = 16787552;
  GDK_KEY_braille_dots_678 = 16787680;
  GDK_KEY_braille_dots_68 = 16787616;
  GDK_KEY_braille_dots_7 = 16787520;
  GDK_KEY_braille_dots_78 = 16787648;
  GDK_KEY_braille_dots_8 = 16787584;
  GDK_KEY_breve = 418;
  GDK_KEY_brokenbar = 166;
  GDK_KEY_c_ = 99;
  GDK_KEY_c_h__1 = 65187;
  GDK_KEY_cabovedot_ = 741;
  GDK_KEY_cacute_ = 486;
  GDK_KEY_careof = 2744;
  GDK_KEY_caret = 2812;
  GDK_KEY_caron = 439;
  GDK_KEY_ccaron_ = 488;
  GDK_KEY_ccedilla_ = 231;
  GDK_KEY_ccircumflex_ = 742;
  GDK_KEY_cedilla = 184;
  GDK_KEY_cent = 162;
  GDK_KEY_ch__1 = 65184;
  GDK_KEY_checkerboard = 2529;
  GDK_KEY_checkmark = 2803;
  GDK_KEY_circle = 3023;
  GDK_KEY_club = 2796;
  GDK_KEY_colon = 58;
  GDK_KEY_comma = 44;
  GDK_KEY_containsas = 16785931;
  GDK_KEY_copyright = 169;
  GDK_KEY_cr = 2532;
  GDK_KEY_crossinglines = 2542;
  GDK_KEY_cuberoot = 16785947;
  GDK_KEY_currency = 164;
  GDK_KEY_cursor = 2815;
  GDK_KEY_d_ = 100;
  GDK_KEY_dabovedot_ = 16784907;
  GDK_KEY_dagger = 2801;
  GDK_KEY_dcaron_ = 495;
  GDK_KEY_dead_A = 65153;
  GDK_KEY_dead_E = 65155;
  GDK_KEY_dead_I = 65157;
  GDK_KEY_dead_O = 65159;
  GDK_KEY_dead_U = 65161;
  GDK_KEY_dead_a_ = 65152;
  GDK_KEY_dead_abovecomma = 65124;
  GDK_KEY_dead_abovedot = 65110;
  GDK_KEY_dead_abovereversedcomma = 65125;
  GDK_KEY_dead_abovering = 65112;
  GDK_KEY_dead_aboveverticalline = 65169;
  GDK_KEY_dead_acute = 65105;
  GDK_KEY_dead_belowbreve = 65131;
  GDK_KEY_dead_belowcircumflex = 65129;
  GDK_KEY_dead_belowcomma = 65134;
  GDK_KEY_dead_belowdiaeresis = 65132;
  GDK_KEY_dead_belowdot = 65120;
  GDK_KEY_dead_belowmacron = 65128;
  GDK_KEY_dead_belowring = 65127;
  GDK_KEY_dead_belowtilde = 65130;
  GDK_KEY_dead_belowverticalline = 65170;
  GDK_KEY_dead_breve = 65109;
  GDK_KEY_dead_capital_schwa = 65163;
  GDK_KEY_dead_caron = 65114;
  GDK_KEY_dead_cedilla = 65115;
  GDK_KEY_dead_circumflex = 65106;
  GDK_KEY_dead_currency = 65135;
  GDK_KEY_dead_dasia = 65125;
  GDK_KEY_dead_diaeresis = 65111;
  GDK_KEY_dead_doubleacute = 65113;
  GDK_KEY_dead_doublegrave = 65126;
  GDK_KEY_dead_e_ = 65154;
  GDK_KEY_dead_grave = 65104;
  GDK_KEY_dead_greek = 65164;
  GDK_KEY_dead_hook = 65121;
  GDK_KEY_dead_horn = 65122;
  GDK_KEY_dead_i_ = 65156;
  GDK_KEY_dead_invertedbreve = 65133;
  GDK_KEY_dead_iota = 65117;
  GDK_KEY_dead_longsolidusoverlay = 65171;
  GDK_KEY_dead_lowline = 65168;
  GDK_KEY_dead_macron = 65108;
  GDK_KEY_dead_o_ = 65158;
  GDK_KEY_dead_ogonek = 65116;
  GDK_KEY_dead_perispomeni = 65107;
  GDK_KEY_dead_psili = 65124;
  GDK_KEY_dead_semivoiced_sound = 65119;
  GDK_KEY_dead_small_schwa = 65162;
  GDK_KEY_dead_stroke = 65123;
  GDK_KEY_dead_tilde = 65107;
  GDK_KEY_dead_u_ = 65160;
  GDK_KEY_dead_voiced_sound = 65118;
  GDK_KEY_decimalpoint = 2749;
  GDK_KEY_degree = 176;
  GDK_KEY_diaeresis = 168;
  GDK_KEY_diamond = 2797;
  GDK_KEY_digitspace = 2725;
  GDK_KEY_dintegral = 16785964;
  GDK_KEY_division = 247;
  GDK_KEY_dollar = 36;
  GDK_KEY_doubbaselinedot = 2735;
  GDK_KEY_doubleacute = 445;
  GDK_KEY_doubledagger = 2802;
  GDK_KEY_doublelowquotemark = 2814;
  GDK_KEY_downarrow = 2302;
  GDK_KEY_downcaret = 2984;
  GDK_KEY_downshoe = 3030;
  GDK_KEY_downstile = 3012;
  GDK_KEY_downtack = 3010;
  GDK_KEY_dstroke_ = 496;
  GDK_KEY_e_ = 101;
  GDK_KEY_eabovedot_ = 1004;
  GDK_KEY_eacute_ = 233;
  GDK_KEY_ebelowdot_ = 16785081;
  GDK_KEY_ecaron_ = 492;
  GDK_KEY_ecircumflex_ = 234;
  GDK_KEY_ecircumflexacute_ = 16785087;
  GDK_KEY_ecircumflexbelowdot_ = 16785095;
  GDK_KEY_ecircumflexgrave_ = 16785089;
  GDK_KEY_ecircumflexhook_ = 16785091;
  GDK_KEY_ecircumflextilde_ = 16785093;
  GDK_KEY_ediaeresis_ = 235;
  GDK_KEY_egrave_ = 232;
  GDK_KEY_ehook_ = 16785083;
  GDK_KEY_eightsubscript = 16785544;
  GDK_KEY_eightsuperior = 16785528;
  GDK_KEY_elementof = 16785928;
  GDK_KEY_ellipsis = 2734;
  GDK_KEY_em3space = 2723;
  GDK_KEY_em4space = 2724;
  GDK_KEY_emacron_ = 954;
  GDK_KEY_emdash = 2729;
  GDK_KEY_emfilledcircle = 2782;
  GDK_KEY_emfilledrect = 2783;
  GDK_KEY_emopencircle = 2766;
  GDK_KEY_emopenrectangle = 2767;
  GDK_KEY_emptyset = 16785925;
  GDK_KEY_emspace = 2721;
  GDK_KEY_endash = 2730;
  GDK_KEY_enfilledcircbullet = 2790;
  GDK_KEY_enfilledsqbullet = 2791;
  GDK_KEY_eng_ = 959;
  GDK_KEY_enopencircbullet = 2784;
  GDK_KEY_enopensquarebullet = 2785;
  GDK_KEY_enspace = 2722;
  GDK_KEY_eogonek_ = 490;
  GDK_KEY_equal = 61;
  GDK_KEY_eth__1 = 240;
  GDK_KEY_etilde_ = 16785085;
  GDK_KEY_exclam = 33;
  GDK_KEY_exclamdown = 161;
  GDK_KEY_ezh_ = 16777874;
  GDK_KEY_f_ = 102;
  GDK_KEY_fabovedot_ = 16784927;
  GDK_KEY_femalesymbol = 2808;
  GDK_KEY_ff = 2531;
  GDK_KEY_figdash = 2747;
  GDK_KEY_filledlefttribullet = 2780;
  GDK_KEY_filledrectbullet = 2779;
  GDK_KEY_filledrighttribullet = 2781;
  GDK_KEY_filledtribulletdown = 2793;
  GDK_KEY_filledtribulletup = 2792;
  GDK_KEY_fiveeighths = 2757;
  GDK_KEY_fivesixths = 2743;
  GDK_KEY_fivesubscript = 16785541;
  GDK_KEY_fivesuperior = 16785525;
  GDK_KEY_fourfifths = 2741;
  GDK_KEY_foursubscript = 16785540;
  GDK_KEY_foursuperior = 16785524;
  GDK_KEY_fourthroot = 16785948;
  GDK_KEY_function = 2294;
  GDK_KEY_g_ = 103;
  GDK_KEY_gabovedot_ = 757;
  GDK_KEY_gbreve_ = 699;
  GDK_KEY_gcaron_ = 16777703;
  GDK_KEY_gcedilla_ = 955;
  GDK_KEY_gcircumflex_ = 760;
  GDK_KEY_grave = 96;
  GDK_KEY_greater = 62;
  GDK_KEY_greaterthanequal = 2238;
  GDK_KEY_guillemotleft = 171;
  GDK_KEY_guillemotright = 187;
  GDK_KEY_h_ = 104;
  GDK_KEY_hairspace = 2728;
  GDK_KEY_hcircumflex_ = 694;
  GDK_KEY_heart = 2798;
  GDK_KEY_hebrew_aleph = 3296;
  GDK_KEY_hebrew_ayin = 3314;
  GDK_KEY_hebrew_bet = 3297;
  GDK_KEY_hebrew_beth = 3297;
  GDK_KEY_hebrew_chet = 3303;
  GDK_KEY_hebrew_dalet = 3299;
  GDK_KEY_hebrew_daleth = 3299;
  GDK_KEY_hebrew_doublelowline = 3295;
  GDK_KEY_hebrew_finalkaph = 3306;
  GDK_KEY_hebrew_finalmem = 3309;
  GDK_KEY_hebrew_finalnun = 3311;
  GDK_KEY_hebrew_finalpe = 3315;
  GDK_KEY_hebrew_finalzade = 3317;
  GDK_KEY_hebrew_finalzadi = 3317;
  GDK_KEY_hebrew_gimel = 3298;
  GDK_KEY_hebrew_gimmel = 3298;
  GDK_KEY_hebrew_he = 3300;
  GDK_KEY_hebrew_het = 3303;
  GDK_KEY_hebrew_kaph = 3307;
  GDK_KEY_hebrew_kuf = 3319;
  GDK_KEY_hebrew_lamed = 3308;
  GDK_KEY_hebrew_mem = 3310;
  GDK_KEY_hebrew_nun = 3312;
  GDK_KEY_hebrew_pe = 3316;
  GDK_KEY_hebrew_qoph = 3319;
  GDK_KEY_hebrew_resh = 3320;
  GDK_KEY_hebrew_samech = 3313;
  GDK_KEY_hebrew_samekh = 3313;
  GDK_KEY_hebrew_shin = 3321;
  GDK_KEY_hebrew_taf = 3322;
  GDK_KEY_hebrew_taw = 3322;
  GDK_KEY_hebrew_tet = 3304;
  GDK_KEY_hebrew_teth = 3304;
  GDK_KEY_hebrew_waw = 3301;
  GDK_KEY_hebrew_yod = 3305;
  GDK_KEY_hebrew_zade = 3318;
  GDK_KEY_hebrew_zadi = 3318;
  GDK_KEY_hebrew_zain = 3302;
  GDK_KEY_hebrew_zayin = 3302;
  GDK_KEY_hexagram = 2778;
  GDK_KEY_horizconnector = 2211;
  GDK_KEY_horizlinescan1 = 2543;
  GDK_KEY_horizlinescan3 = 2544;
  GDK_KEY_horizlinescan5 = 2545;
  GDK_KEY_horizlinescan7 = 2546;
  GDK_KEY_horizlinescan9 = 2547;
  GDK_KEY_hstroke_ = 689;
  GDK_KEY_ht = 2530;
  GDK_KEY_hyphen = 173;
  GDK_KEY_i_ = 105;
  GDK_KEY_iTouch = 269025120;
  GDK_KEY_iacute_ = 237;
  GDK_KEY_ibelowdot_ = 16785099;
  GDK_KEY_ibreve_ = 16777517;
  GDK_KEY_icircumflex_ = 238;
  GDK_KEY_identical = 2255;
  GDK_KEY_idiaeresis_ = 239;
  GDK_KEY_idotless = 697;
  GDK_KEY_ifonlyif = 2253;
  GDK_KEY_igrave_ = 236;
  GDK_KEY_ihook_ = 16785097;
  GDK_KEY_imacron_ = 1007;
  GDK_KEY_implies = 2254;
  GDK_KEY_includedin = 2266;
  GDK_KEY_includes = 2267;
  GDK_KEY_infinity = 2242;
  GDK_KEY_integral = 2239;
  GDK_KEY_intersection = 2268;
  GDK_KEY_iogonek_ = 999;
  GDK_KEY_itilde_ = 949;
  GDK_KEY_j_ = 106;
  GDK_KEY_jcircumflex_ = 700;
  GDK_KEY_jot = 3018;
  GDK_KEY_k_ = 107;
  GDK_KEY_kana_A = 1201;
  GDK_KEY_kana_CHI = 1217;
  GDK_KEY_kana_E = 1204;
  GDK_KEY_kana_FU = 1228;
  GDK_KEY_kana_HA = 1226;
  GDK_KEY_kana_HE = 1229;
  GDK_KEY_kana_HI = 1227;
  GDK_KEY_kana_HO = 1230;
  GDK_KEY_kana_HU = 1228;
  GDK_KEY_kana_I = 1202;
  GDK_KEY_kana_KA = 1206;
  GDK_KEY_kana_KE = 1209;
  GDK_KEY_kana_KI = 1207;
  GDK_KEY_kana_KO = 1210;
  GDK_KEY_kana_KU = 1208;
  GDK_KEY_kana_MA = 1231;
  GDK_KEY_kana_ME = 1234;
  GDK_KEY_kana_MI = 1232;
  GDK_KEY_kana_MO = 1235;
  GDK_KEY_kana_MU = 1233;
  GDK_KEY_kana_N = 1245;
  GDK_KEY_kana_NA = 1221;
  GDK_KEY_kana_NE = 1224;
  GDK_KEY_kana_NI = 1222;
  GDK_KEY_kana_NO = 1225;
  GDK_KEY_kana_NU = 1223;
  GDK_KEY_kana_O = 1205;
  GDK_KEY_kana_RA = 1239;
  GDK_KEY_kana_RE = 1242;
  GDK_KEY_kana_RI = 1240;
  GDK_KEY_kana_RO = 1243;
  GDK_KEY_kana_RU = 1241;
  GDK_KEY_kana_SA = 1211;
  GDK_KEY_kana_SE = 1214;
  GDK_KEY_kana_SHI = 1212;
  GDK_KEY_kana_SO = 1215;
  GDK_KEY_kana_SU = 1213;
  GDK_KEY_kana_TA = 1216;
  GDK_KEY_kana_TE = 1219;
  GDK_KEY_kana_TI = 1217;
  GDK_KEY_kana_TO = 1220;
  GDK_KEY_kana_TSU = 1218;
  GDK_KEY_kana_TU = 1218;
  GDK_KEY_kana_U = 1203;
  GDK_KEY_kana_WA = 1244;
  GDK_KEY_kana_WO = 1190;
  GDK_KEY_kana_YA = 1236;
  GDK_KEY_kana_YO = 1238;
  GDK_KEY_kana_YU = 1237;
  GDK_KEY_kana_a_ = 1191;
  GDK_KEY_kana_closingbracket = 1187;
  GDK_KEY_kana_comma = 1188;
  GDK_KEY_kana_conjunctive = 1189;
  GDK_KEY_kana_e_ = 1194;
  GDK_KEY_kana_fullstop = 1185;
  GDK_KEY_kana_i_ = 1192;
  GDK_KEY_kana_middledot = 1189;
  GDK_KEY_kana_o_ = 1195;
  GDK_KEY_kana_openingbracket = 1186;
  GDK_KEY_kana_switch = 65406;
  GDK_KEY_kana_tsu_ = 1199;
  GDK_KEY_kana_tu_ = 1199;
  GDK_KEY_kana_u_ = 1193;
  GDK_KEY_kana_ya_ = 1196;
  GDK_KEY_kana_yo_ = 1198;
  GDK_KEY_kana_yu_ = 1197;
  GDK_KEY_kappa = 930;
  GDK_KEY_kcedilla_ = 1011;
  GDK_KEY_kra = 930;
  GDK_KEY_l_ = 108;
  GDK_KEY_lacute_ = 485;
  GDK_KEY_latincross = 2777;
  GDK_KEY_lbelowdot_ = 16784951;
  GDK_KEY_lcaron_ = 437;
  GDK_KEY_lcedilla_ = 950;
  GDK_KEY_leftanglebracket = 2748;
  GDK_KEY_leftarrow = 2299;
  GDK_KEY_leftcaret = 2979;
  GDK_KEY_leftdoublequotemark = 2770;
  GDK_KEY_leftmiddlecurlybrace = 2223;
  GDK_KEY_leftopentriangle = 2764;
  GDK_KEY_leftpointer = 2794;
  GDK_KEY_leftradical = 2209;
  GDK_KEY_leftshoe = 3034;
  GDK_KEY_leftsinglequotemark = 2768;
  GDK_KEY_leftt = 2548;
  GDK_KEY_lefttack = 3036;
  GDK_KEY_less = 60;
  GDK_KEY_lessthanequal = 2236;
  GDK_KEY_lf = 2533;
  GDK_KEY_logicaland = 2270;
  GDK_KEY_logicalor = 2271;
  GDK_KEY_lowleftcorner = 2541;
  GDK_KEY_lowrightcorner = 2538;
  GDK_KEY_lstroke_ = 435;
  GDK_KEY_m_ = 109;
  GDK_KEY_mabovedot_ = 16784961;
  GDK_KEY_macron = 175;
  GDK_KEY_malesymbol = 2807;
  GDK_KEY_maltesecross = 2800;
  GDK_KEY_marker = 2751;
  GDK_KEY_masculine = 186;
  GDK_KEY_minus = 45;
  GDK_KEY_minutes = 2774;
  GDK_KEY_mu = 181;
  GDK_KEY_multiply = 215;
  GDK_KEY_musicalflat = 2806;
  GDK_KEY_musicalsharp = 2805;
  GDK_KEY_n_ = 110;
  GDK_KEY_nabla = 2245;
  GDK_KEY_nacute_ = 497;
  GDK_KEY_ncaron_ = 498;
  GDK_KEY_ncedilla_ = 1009;
  GDK_KEY_ninesubscript = 16785545;
  GDK_KEY_ninesuperior = 16785529;
  GDK_KEY_nl = 2536;
  GDK_KEY_nobreakspace = 160;
  GDK_KEY_notapproxeq = 16785991;
  GDK_KEY_notelementof = 16785929;
  GDK_KEY_notequal = 2237;
  GDK_KEY_notidentical = 16786018;
  GDK_KEY_notsign = 172;
  GDK_KEY_ntilde_ = 241;
  GDK_KEY_numbersign = 35;
  GDK_KEY_numerosign = 1712;
  GDK_KEY_o_ = 111;
  GDK_KEY_oacute_ = 243;
  GDK_KEY_obarred_ = 16777845;
  GDK_KEY_obelowdot_ = 16785101;
  GDK_KEY_ocaron_ = 16777682;
  GDK_KEY_ocircumflex_ = 244;
  GDK_KEY_ocircumflexacute_ = 16785105;
  GDK_KEY_ocircumflexbelowdot_ = 16785113;
  GDK_KEY_ocircumflexgrave_ = 16785107;
  GDK_KEY_ocircumflexhook_ = 16785109;
  GDK_KEY_ocircumflextilde_ = 16785111;
  GDK_KEY_odiaeresis_ = 246;
  GDK_KEY_odoubleacute_ = 501;
  GDK_KEY_oe_ = 5053;
  GDK_KEY_ogonek = 434;
  GDK_KEY_ograve_ = 242;
  GDK_KEY_ohook_ = 16785103;
  GDK_KEY_ohorn_ = 16777633;
  GDK_KEY_ohornacute_ = 16785115;
  GDK_KEY_ohornbelowdot_ = 16785123;
  GDK_KEY_ohorngrave_ = 16785117;
  GDK_KEY_ohornhook_ = 16785119;
  GDK_KEY_ohorntilde_ = 16785121;
  GDK_KEY_omacron_ = 1010;
  GDK_KEY_oneeighth = 2755;
  GDK_KEY_onefifth = 2738;
  GDK_KEY_onehalf = 189;
  GDK_KEY_onequarter = 188;
  GDK_KEY_onesixth = 2742;
  GDK_KEY_onesubscript = 16785537;
  GDK_KEY_onesuperior = 185;
  GDK_KEY_onethird = 2736;
  GDK_KEY_ooblique_ = 248;
  GDK_KEY_openrectbullet = 2786;
  GDK_KEY_openstar = 2789;
  GDK_KEY_opentribulletdown = 2788;
  GDK_KEY_opentribulletup = 2787;
  GDK_KEY_ordfeminine = 170;
  GDK_KEY_oslash_ = 248;
  GDK_KEY_otilde_ = 245;
  GDK_KEY_overbar = 3008;
  GDK_KEY_overline = 1150;
  GDK_KEY_p_ = 112;
  GDK_KEY_pabovedot_ = 16784983;
  GDK_KEY_paragraph = 182;
  GDK_KEY_parenleft = 40;
  GDK_KEY_parenright = 41;
  GDK_KEY_partdifferential = 16785922;
  GDK_KEY_partialderivative = 2287;
  GDK_KEY_percent = 37;
  GDK_KEY_period = 46;
  GDK_KEY_periodcentered = 183;
  GDK_KEY_permille = 2773;
  GDK_KEY_phonographcopyright = 2811;
  GDK_KEY_plus = 43;
  GDK_KEY_plusminus = 177;
  GDK_KEY_prescription = 2772;
  GDK_KEY_prolongedsound = 1200;
  GDK_KEY_punctspace = 2726;
  GDK_KEY_q_ = 113;
  GDK_KEY_quad = 3020;
  GDK_KEY_question = 63;
  GDK_KEY_questiondown = 191;
  GDK_KEY_quotedbl = 34;
  GDK_KEY_quoteleft = 96;
  GDK_KEY_quoteright = 39;
  GDK_KEY_r_ = 114;
  GDK_KEY_racute_ = 480;
  GDK_KEY_radical = 2262;
  GDK_KEY_rcaron_ = 504;
  GDK_KEY_rcedilla_ = 947;
  GDK_KEY_registered = 174;
  GDK_KEY_rightanglebracket = 2750;
  GDK_KEY_rightarrow = 2301;
  GDK_KEY_rightcaret = 2982;
  GDK_KEY_rightdoublequotemark = 2771;
  GDK_KEY_rightmiddlecurlybrace = 2224;
  GDK_KEY_rightmiddlesummation = 2231;
  GDK_KEY_rightopentriangle = 2765;
  GDK_KEY_rightpointer = 2795;
  GDK_KEY_rightshoe = 3032;
  GDK_KEY_rightsinglequotemark = 2769;
  GDK_KEY_rightt = 2549;
  GDK_KEY_righttack = 3068;
  GDK_KEY_s_ = 115;
  GDK_KEY_sabovedot_ = 16784993;
  GDK_KEY_sacute_ = 438;
  GDK_KEY_scaron_ = 441;
  GDK_KEY_scedilla_ = 442;
  GDK_KEY_schwa_ = 16777817;
  GDK_KEY_scircumflex_ = 766;
  GDK_KEY_script_switch = 65406;
  GDK_KEY_seconds = 2775;
  GDK_KEY_section = 167;
  GDK_KEY_semicolon = 59;
  GDK_KEY_semivoicedsound = 1247;
  GDK_KEY_seveneighths = 2758;
  GDK_KEY_sevensubscript = 16785543;
  GDK_KEY_sevensuperior = 16785527;
  GDK_KEY_signaturemark = 2762;
  GDK_KEY_signifblank = 2732;
  GDK_KEY_similarequal = 2249;
  GDK_KEY_singlelowquotemark = 2813;
  GDK_KEY_sixsubscript = 16785542;
  GDK_KEY_sixsuperior = 16785526;
  GDK_KEY_slash = 47;
  GDK_KEY_soliddiamond = 2528;
  GDK_KEY_space = 32;
  GDK_KEY_squareroot = 16785946;
  GDK_KEY_ssharp = 223;
  GDK_KEY_sterling = 163;
  GDK_KEY_stricteq = 16786019;
  GDK_KEY_t_ = 116;
  GDK_KEY_tabovedot_ = 16785003;
  GDK_KEY_tcaron_ = 443;
  GDK_KEY_tcedilla_ = 510;
  GDK_KEY_telephone = 2809;
  GDK_KEY_telephonerecorder = 2810;
  GDK_KEY_therefore = 2240;
  GDK_KEY_thinspace = 2727;
  GDK_KEY_thorn__1 = 254;
  GDK_KEY_threeeighths = 2756;
  GDK_KEY_threefifths = 2740;
  GDK_KEY_threequarters = 190;
  GDK_KEY_threesubscript = 16785539;
  GDK_KEY_threesuperior = 179;
  GDK_KEY_tintegral = 16785965;
  GDK_KEY_topintegral = 2212;
  GDK_KEY_topleftparens = 2219;
  GDK_KEY_topleftradical = 2210;
  GDK_KEY_topleftsqbracket = 2215;
  GDK_KEY_topleftsummation = 2225;
  GDK_KEY_toprightparens = 2221;
  GDK_KEY_toprightsqbracket = 2217;
  GDK_KEY_toprightsummation = 2229;
  GDK_KEY_topt = 2551;
  GDK_KEY_topvertsummationconnector = 2227;
  GDK_KEY_trademark = 2761;
  GDK_KEY_trademarkincircle = 2763;
  GDK_KEY_tslash_ = 956;
  GDK_KEY_twofifths = 2739;
  GDK_KEY_twosubscript = 16785538;
  GDK_KEY_twosuperior = 178;
  GDK_KEY_twothirds = 2737;
  GDK_KEY_u_ = 117;
  GDK_KEY_uacute_ = 250;
  GDK_KEY_ubelowdot_ = 16785125;
  GDK_KEY_ubreve_ = 765;
  GDK_KEY_ucircumflex_ = 251;
  GDK_KEY_udiaeresis_ = 252;
  GDK_KEY_udoubleacute_ = 507;
  GDK_KEY_ugrave_ = 249;
  GDK_KEY_uhook_ = 16785127;
  GDK_KEY_uhorn_ = 16777648;
  GDK_KEY_uhornacute_ = 16785129;
  GDK_KEY_uhornbelowdot_ = 16785137;
  GDK_KEY_uhorngrave_ = 16785131;
  GDK_KEY_uhornhook_ = 16785133;
  GDK_KEY_uhorntilde_ = 16785135;
  GDK_KEY_umacron_ = 1022;
  GDK_KEY_underbar = 3014;
  GDK_KEY_underscore = 95;
  GDK_KEY_union = 2269;
  GDK_KEY_uogonek_ = 1017;
  GDK_KEY_uparrow = 2300;
  GDK_KEY_upcaret = 2985;
  GDK_KEY_upleftcorner = 2540;
  GDK_KEY_uprightcorner = 2539;
  GDK_KEY_upshoe = 3011;
  GDK_KEY_upstile = 3027;
  GDK_KEY_uptack = 3022;
  GDK_KEY_uring_ = 505;
  GDK_KEY_utilde_ = 1021;
  GDK_KEY_v_ = 118;
  GDK_KEY_variation = 2241;
  GDK_KEY_vertbar = 2552;
  GDK_KEY_vertconnector = 2214;
  GDK_KEY_voicedsound = 1246;
  GDK_KEY_vt = 2537;
  GDK_KEY_w_ = 119;
  GDK_KEY_wacute_ = 16785027;
  GDK_KEY_wcircumflex_ = 16777589;
  GDK_KEY_wdiaeresis_ = 16785029;
  GDK_KEY_wgrave_ = 16785025;
  GDK_KEY_x_ = 120;
  GDK_KEY_xabovedot_ = 16785035;
  GDK_KEY_y_ = 121;
  GDK_KEY_yacute_ = 253;
  GDK_KEY_ybelowdot_ = 16785141;
  GDK_KEY_ycircumflex_ = 16777591;
  GDK_KEY_ydiaeresis_ = 255;
  GDK_KEY_yen = 165;
  GDK_KEY_ygrave_ = 16785139;
  GDK_KEY_yhook_ = 16785143;
  GDK_KEY_ytilde_ = 16785145;
  GDK_KEY_z_ = 122;
  GDK_KEY_zabovedot_ = 447;
  GDK_KEY_zacute_ = 444;
  GDK_KEY_zcaron_ = 446;
  GDK_KEY_zerosubscript = 16785536;
  GDK_KEY_zerosuperior = 16785520;
  GDK_KEY_zstroke_ = 16777654;
  GDK_MAJOR_VERSION = 3;
  GDK_MAX_TIMECOORD_AXES = 128;
  GDK_MICRO_VERSION = 37;
  GDK_MINOR_VERSION = 24;
  GDK_PARENT_RELATIVE = 1;
  GDK_PRIORITY_REDRAW = 120;
type
  TGdkAnchorHintsIdx = (
    TGdkAnchorHintsIdxMinValue = 0,
    GDK_ANCHOR_FLIP_X = 0,
    GDK_ANCHOR_FLIP_Y = 1,
    GDK_ANCHOR_SLIDE_X = 2,
    GDK_ANCHOR_SLIDE_Y = 3,
    GDK_ANCHOR_RESIZE_X = 4,
    GDK_ANCHOR_RESIZE_Y = 5,
    TGdkAnchorHintsIdxMaxValue = 31
  );
  TGdkAnchorHints = Set of TGdkAnchorHintsIdx;
const
  GDK_ANCHOR_FLIP = [
    GDK_ANCHOR_FLIP_X,
    GDK_ANCHOR_FLIP_Y
  ]; {3 = $00000003}

  GDK_ANCHOR_SLIDE = [
    GDK_ANCHOR_SLIDE_X,
    GDK_ANCHOR_SLIDE_Y
  ]; {12 = $0000000C}

  GDK_ANCHOR_RESIZE = [
    GDK_ANCHOR_RESIZE_X,
    GDK_ANCHOR_RESIZE_Y
  ]; {48 = $00000030}

type
  TGdkAxisFlagsIdx = (
    TGdkAxisFlagsIdxMinValue = 0,
    GDK_AXIS_FLAG_X = 1,
    GDK_AXIS_FLAG_Y = 2,
    GDK_AXIS_FLAG_PRESSURE = 3,
    GDK_AXIS_FLAG_XTILT = 4,
    GDK_AXIS_FLAG_YTILT = 5,
    GDK_AXIS_FLAG_WHEEL = 6,
    GDK_AXIS_FLAG_DISTANCE = 7,
    GDK_AXIS_FLAG_ROTATION = 8,
    GDK_AXIS_FLAG_SLIDER = 9,
    TGdkAxisFlagsIdxMaxValue = 31
  );
  TGdkAxisFlags = Set of TGdkAxisFlagsIdx;
  TGdkAxisUse = (
    TGdkAxisUseMinValue = -$7FFFFFFF,
    GDK_AXIS_IGNORE = 0,
    GDK_AXIS_X = 1,
    GDK_AXIS_Y = 2,
    GDK_AXIS_PRESSURE = 3,
    GDK_AXIS_XTILT = 4,
    GDK_AXIS_YTILT = 5,
    GDK_AXIS_WHEEL = 6,
    GDK_AXIS_DISTANCE = 7,
    GDK_AXIS_ROTATION = 8,
    GDK_AXIS_SLIDER = 9,
    GDK_AXIS_LAST = 10,
    TGdkAxisUseMaxValue = $7FFFFFFF
  );
  TGdkByteOrder = (
    TGdkByteOrderMinValue = -$7FFFFFFF,
    GDK_LSB_FIRST = 0,
    GDK_MSB_FIRST = 1,
    TGdkByteOrderMaxValue = $7FFFFFFF
  );
  TGdkCrossingMode = (
    TGdkCrossingModeMinValue = -$7FFFFFFF,
    GDK_CROSSING_NORMAL = 0,
    GDK_CROSSING_GRAB = 1,
    GDK_CROSSING_UNGRAB = 2,
    GDK_CROSSING_GTK_GRAB = 3,
    GDK_CROSSING_GTK_UNGRAB = 4,
    GDK_CROSSING_STATE_CHANGED = 5,
    GDK_CROSSING_TOUCH_BEGIN = 6,
    GDK_CROSSING_TOUCH_END = 7,
    GDK_CROSSING_DEVICE_SWITCH = 8,
    TGdkCrossingModeMaxValue = $7FFFFFFF
  );
  TGdkCursorType = (
    TGdkCursorTypeMinValue = -$7FFFFFFF,
    GDK_BLANK_CURSOR = -2,
    GDK_CURSOR_IS_PIXMAP = -1,
    GDK_X_CURSOR = 0,
    GDK_ARROW = 2,
    GDK_BASED_ARROW_DOWN = 4,
    GDK_BASED_ARROW_UP = 6,
    GDK_BOAT = 8,
    GDK_BOGOSITY = 10,
    GDK_BOTTOM_LEFT_CORNER = 12,
    GDK_BOTTOM_RIGHT_CORNER = 14,
    GDK_BOTTOM_SIDE = 16,
    GDK_BOTTOM_TEE = 18,
    GDK_BOX_SPIRAL = 20,
    GDK_CENTER_PTR = 22,
    GDK_CIRCLE = 24,
    GDK_CLOCK = 26,
    GDK_COFFEE_MUG = 28,
    GDK_CROSS = 30,
    GDK_CROSS_REVERSE = 32,
    GDK_CROSSHAIR = 34,
    GDK_DIAMOND_CROSS = 36,
    GDK_DOT = 38,
    GDK_DOTBOX = 40,
    GDK_DOUBLE_ARROW = 42,
    GDK_DRAFT_LARGE = 44,
    GDK_DRAFT_SMALL = 46,
    GDK_DRAPED_BOX = 48,
    GDK_EXCHANGE = 50,
    GDK_FLEUR = 52,
    GDK_GOBBLER = 54,
    GDK_GUMBY = 56,
    GDK_HAND1 = 58,
    GDK_HAND2 = 60,
    GDK_HEART = 62,
    GDK_ICON = 64,
    GDK_IRON_CROSS = 66,
    GDK_LEFT_PTR = 68,
    GDK_LEFT_SIDE = 70,
    GDK_LEFT_TEE = 72,
    GDK_LEFTBUTTON = 74,
    GDK_LL_ANGLE = 76,
    GDK_LR_ANGLE = 78,
    GDK_MAN = 80,
    GDK_MIDDLEBUTTON = 82,
    GDK_MOUSE = 84,
    GDK_PENCIL = 86,
    GDK_PIRATE = 88,
    GDK_PLUS = 90,
    GDK_QUESTION_ARROW = 92,
    GDK_RIGHT_PTR = 94,
    GDK_RIGHT_SIDE = 96,
    GDK_RIGHT_TEE = 98,
    GDK_RIGHTBUTTON = 100,
    GDK_RTL_LOGO = 102,
    GDK_SAILBOAT = 104,
    GDK_SB_DOWN_ARROW = 106,
    GDK_SB_H_DOUBLE_ARROW = 108,
    GDK_SB_LEFT_ARROW = 110,
    GDK_SB_RIGHT_ARROW = 112,
    GDK_SB_UP_ARROW = 114,
    GDK_SB_V_DOUBLE_ARROW = 116,
    GDK_SHUTTLE = 118,
    GDK_SIZING = 120,
    GDK_SPIDER = 122,
    GDK_SPRAYCAN = 124,
    GDK_STAR = 126,
    GDK_TARGET = 128,
    GDK_TCROSS = 130,
    GDK_TOP_LEFT_ARROW = 132,
    GDK_TOP_LEFT_CORNER = 134,
    GDK_TOP_RIGHT_CORNER = 136,
    GDK_TOP_SIDE = 138,
    GDK_TOP_TEE = 140,
    GDK_TREK = 142,
    GDK_UL_ANGLE = 144,
    GDK_UMBRELLA = 146,
    GDK_UR_ANGLE = 148,
    GDK_WATCH = 150,
    GDK_XTERM = 152,
    GDK_LAST_CURSOR = 153,
    TGdkCursorTypeMaxValue = $7FFFFFFF
  );
  TGdkModifierTypeIdx = (
    TGdkModifierTypeIdxMinValue = 0,
    GDK_SHIFT_MASK = 0,
    GDK_LOCK_MASK = 1,
    GDK_CONTROL_MASK = 2,
    GDK_MOD1_MASK = 3,
    GDK_MOD2_MASK = 4,
    GDK_MOD3_MASK = 5,
    GDK_MOD4_MASK = 6,
    GDK_MOD5_MASK = 7,
    GDK_BUTTON1_MASK = 8,
    GDK_BUTTON2_MASK = 9,
    GDK_BUTTON3_MASK = 10,
    GDK_BUTTON4_MASK = 11,
    GDK_BUTTON5_MASK = 12,
    GDK_MODIFIER_RESERVED_13_MASK = 13,
    GDK_MODIFIER_RESERVED_14_MASK = 14,
    GDK_MODIFIER_RESERVED_15_MASK = 15,
    GDK_MODIFIER_RESERVED_16_MASK = 16,
    GDK_MODIFIER_RESERVED_17_MASK = 17,
    GDK_MODIFIER_RESERVED_18_MASK = 18,
    GDK_MODIFIER_RESERVED_19_MASK = 19,
    GDK_MODIFIER_RESERVED_20_MASK = 20,
    GDK_MODIFIER_RESERVED_21_MASK = 21,
    GDK_MODIFIER_RESERVED_22_MASK = 22,
    GDK_MODIFIER_RESERVED_23_MASK = 23,
    GDK_MODIFIER_RESERVED_24_MASK = 24,
    GDK_MODIFIER_RESERVED_25_MASK = 25,
    GDK_SUPER_MASK = 26,
    GDK_HYPER_MASK = 27,
    GDK_META_MASK = 28,
    GDK_MODIFIER_RESERVED_29_MASK = 29,
    GDK_RELEASE_MASK = 30,
    TGdkModifierTypeIdxMaxValue = 31
  );
  TGdkModifierType = Set of TGdkModifierTypeIdx;
const
  GDK_MODIFIER_MASK = [
    GDK_SHIFT_MASK,
    GDK_LOCK_MASK,
    GDK_CONTROL_MASK,
    GDK_MOD1_MASK,
    GDK_MOD2_MASK,
    GDK_MOD3_MASK,
    GDK_MOD4_MASK,
    GDK_MOD5_MASK,
    GDK_BUTTON1_MASK,
    GDK_BUTTON2_MASK,
    GDK_BUTTON3_MASK,
    GDK_BUTTON4_MASK,
    GDK_BUTTON5_MASK,
    GDK_SUPER_MASK,
    GDK_HYPER_MASK,
    GDK_META_MASK,
    GDK_RELEASE_MASK
  ]; {1543512063 = $5C001FFF}

type
  TGdkInputMode = (
    TGdkInputModeMinValue = -$7FFFFFFF,
    GDK_MODE_DISABLED = 0,
    GDK_MODE_SCREEN = 1,
    GDK_MODE_WINDOW = 2,
    TGdkInputModeMaxValue = $7FFFFFFF
  );
  TGdkWindowAttributesTypeIdx = (
    TGdkWindowAttributesTypeIdxMinValue = 0,
    GDK_WA_TITLE = 1,
    GDK_WA_X = 2,
    GDK_WA_Y = 3,
    GDK_WA_CURSOR = 4,
    GDK_WA_VISUAL = 5,
    GDK_WA_WMCLASS = 6,
    GDK_WA_NOREDIR = 7,
    GDK_WA_TYPE_HINT = 8,
    TGdkWindowAttributesTypeIdxMaxValue = 31
  );
  TGdkWindowAttributesType = Set of TGdkWindowAttributesTypeIdx;
  TGdkWindowHintsIdx = (
    TGdkWindowHintsIdxMinValue = 0,
    GDK_HINT_POS = 0,
    GDK_HINT_MIN_SIZE = 1,
    GDK_HINT_MAX_SIZE = 2,
    GDK_HINT_BASE_SIZE = 3,
    GDK_HINT_ASPECT = 4,
    GDK_HINT_RESIZE_INC = 5,
    GDK_HINT_WIN_GRAVITY = 6,
    GDK_HINT_USER_POS = 7,
    GDK_HINT_USER_SIZE = 8,
    TGdkWindowHintsIdxMaxValue = 31
  );
  TGdkWindowHints = Set of TGdkWindowHintsIdx;
  TGdkWindowEdge = (
    TGdkWindowEdgeMinValue = -$7FFFFFFF,
    GDK_WINDOW_EDGE_NORTH_WEST = 0,
    GDK_WINDOW_EDGE_NORTH = 1,
    GDK_WINDOW_EDGE_NORTH_EAST = 2,
    GDK_WINDOW_EDGE_WEST = 3,
    GDK_WINDOW_EDGE_EAST = 4,
    GDK_WINDOW_EDGE_SOUTH_WEST = 5,
    GDK_WINDOW_EDGE_SOUTH = 6,
    GDK_WINDOW_EDGE_SOUTH_EAST = 7,
    TGdkWindowEdgeMaxValue = $7FFFFFFF
  );
  TGdkWMDecorationIdx = (
    TGdkWMDecorationIdxMinValue = 0,
    GDK_DECOR_ALL = 0,
    GDK_DECOR_BORDER = 1,
    GDK_DECOR_RESIZEH = 2,
    GDK_DECOR_TITLE = 3,
    GDK_DECOR_MENU = 4,
    GDK_DECOR_MINIMIZE = 5,
    GDK_DECOR_MAXIMIZE = 6,
    TGdkWMDecorationIdxMaxValue = 31
  );
  TGdkWMDecoration = Set of TGdkWMDecorationIdx;
  TGdkEventMaskIdx = (
    TGdkEventMaskIdxMinValue = 0,
    GDK_EXPOSURE_MASK = 1,
    GDK_POINTER_MOTION_MASK = 2,
    GDK_POINTER_MOTION_HINT_MASK = 3,
    GDK_BUTTON_MOTION_MASK = 4,
    GDK_BUTTON1_MOTION_MASK = 5,
    GDK_BUTTON2_MOTION_MASK = 6,
    GDK_BUTTON3_MOTION_MASK = 7,
    GDK_BUTTON_PRESS_MASK = 8,
    GDK_BUTTON_RELEASE_MASK = 9,
    GDK_KEY_PRESS_MASK = 10,
    GDK_KEY_RELEASE_MASK = 11,
    GDK_ENTER_NOTIFY_MASK = 12,
    GDK_LEAVE_NOTIFY_MASK = 13,
    GDK_FOCUS_CHANGE_MASK = 14,
    GDK_STRUCTURE_MASK = 15,
    GDK_PROPERTY_CHANGE_MASK = 16,
    GDK_VISIBILITY_NOTIFY_MASK = 17,
    GDK_PROXIMITY_IN_MASK = 18,
    GDK_PROXIMITY_OUT_MASK = 19,
    GDK_SUBSTRUCTURE_MASK = 20,
    GDK_SCROLL_MASK = 21,
    GDK_TOUCH_MASK = 22,
    GDK_SMOOTH_SCROLL_MASK = 23,
    GDK_TOUCHPAD_GESTURE_MASK = 24,
    GDK_TABLET_PAD_MASK = 25,
    TGdkEventMaskIdxMaxValue = 31
  );
  TGdkEventMask = Set of TGdkEventMaskIdx;
const
  GDK_ALL_EVENTS_MASK = [
    GDK_EXPOSURE_MASK,
    GDK_POINTER_MOTION_MASK,
    GDK_POINTER_MOTION_HINT_MASK,
    GDK_BUTTON_MOTION_MASK,
    GDK_BUTTON1_MOTION_MASK,
    GDK_BUTTON2_MOTION_MASK,
    GDK_BUTTON3_MOTION_MASK,
    GDK_BUTTON_PRESS_MASK,
    GDK_BUTTON_RELEASE_MASK,
    GDK_KEY_PRESS_MASK,
    GDK_KEY_RELEASE_MASK,
    GDK_ENTER_NOTIFY_MASK,
    GDK_LEAVE_NOTIFY_MASK,
    GDK_FOCUS_CHANGE_MASK,
    GDK_STRUCTURE_MASK,
    GDK_PROPERTY_CHANGE_MASK,
    GDK_VISIBILITY_NOTIFY_MASK,
    GDK_PROXIMITY_IN_MASK,
    GDK_PROXIMITY_OUT_MASK,
    GDK_SUBSTRUCTURE_MASK,
    GDK_SCROLL_MASK,
    GDK_TOUCH_MASK,
    GDK_SMOOTH_SCROLL_MASK,
    GDK_TOUCHPAD_GESTURE_MASK,
    GDK_TABLET_PAD_MASK
  ]; {67108862 = $03FFFFFE}

type
  TGdkInputSource = (
    TGdkInputSourceMinValue = -$7FFFFFFF,
    GDK_SOURCE_MOUSE = 0,
    GDK_SOURCE_PEN = 1,
    GDK_SOURCE_ERASER = 2,
    GDK_SOURCE_CURSOR = 3,
    GDK_SOURCE_KEYBOARD = 4,
    GDK_SOURCE_TOUCHSCREEN = 5,
    GDK_SOURCE_TOUCHPAD = 6,
    GDK_SOURCE_TRACKPOINT = 7,
    GDK_SOURCE_TABLET_PAD = 8,
    TGdkInputSourceMaxValue = $7FFFFFFF
  );
  TGdkWindowStateIdx = (
    TGdkWindowStateIdxMinValue = 0,
    GDK_WINDOW_STATE_WITHDRAWN = 0,
    GDK_WINDOW_STATE_ICONIFIED = 1,
    GDK_WINDOW_STATE_MAXIMIZED = 2,
    GDK_WINDOW_STATE_STICKY = 3,
    GDK_WINDOW_STATE_FULLSCREEN = 4,
    GDK_WINDOW_STATE_ABOVE = 5,
    GDK_WINDOW_STATE_BELOW = 6,
    GDK_WINDOW_STATE_FOCUSED = 7,
    GDK_WINDOW_STATE_TILED = 8,
    GDK_WINDOW_STATE_TOP_TILED = 9,
    GDK_WINDOW_STATE_TOP_RESIZABLE = 10,
    GDK_WINDOW_STATE_RIGHT_TILED = 11,
    GDK_WINDOW_STATE_RIGHT_RESIZABLE = 12,
    GDK_WINDOW_STATE_BOTTOM_TILED = 13,
    GDK_WINDOW_STATE_BOTTOM_RESIZABLE = 14,
    GDK_WINDOW_STATE_LEFT_TILED = 15,
    GDK_WINDOW_STATE_LEFT_RESIZABLE = 16,
    TGdkWindowStateIdxMaxValue = 31
  );
  TGdkWindowState = Set of TGdkWindowStateIdx;
  TGdkGravity = (
    TGdkGravityMinValue = -$7FFFFFFF,
    GDK_GRAVITY_NORTH_WEST = 1,
    GDK_GRAVITY_NORTH = 2,
    GDK_GRAVITY_NORTH_EAST = 3,
    GDK_GRAVITY_WEST = 4,
    GDK_GRAVITY_CENTER = 5,
    GDK_GRAVITY_EAST = 6,
    GDK_GRAVITY_SOUTH_WEST = 7,
    GDK_GRAVITY_SOUTH = 8,
    GDK_GRAVITY_SOUTH_EAST = 9,
    GDK_GRAVITY_STATIC = 10,
    TGdkGravityMaxValue = $7FFFFFFF
  );
  TGdkFullscreenMode = (
    TGdkFullscreenModeMinValue = -$7FFFFFFF,
    GDK_FULLSCREEN_ON_CURRENT_MONITOR = 0,
    GDK_FULLSCREEN_ON_ALL_MONITORS = 1,
    TGdkFullscreenModeMaxValue = $7FFFFFFF
  );
  TGdkWMFunctionIdx = (
    TGdkWMFunctionIdxMinValue = 0,
    GDK_FUNC_ALL = 0,
    GDK_FUNC_RESIZE = 1,
    GDK_FUNC_MOVE = 2,
    GDK_FUNC_MINIMIZE = 3,
    GDK_FUNC_MAXIMIZE = 4,
    GDK_FUNC_CLOSE = 5,
    TGdkWMFunctionIdxMaxValue = 31
  );
  TGdkWMFunction = Set of TGdkWMFunctionIdx;
  TGdkWindowTypeHint = (
    TGdkWindowTypeHintMinValue = -$7FFFFFFF,
    GDK_WINDOW_TYPE_HINT_NORMAL = 0,
    GDK_WINDOW_TYPE_HINT_DIALOG = 1,
    GDK_WINDOW_TYPE_HINT_MENU = 2,
    GDK_WINDOW_TYPE_HINT_TOOLBAR = 3,
    GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = 4,
    GDK_WINDOW_TYPE_HINT_UTILITY = 5,
    GDK_WINDOW_TYPE_HINT_DOCK = 6,
    GDK_WINDOW_TYPE_HINT_DESKTOP = 7,
    GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = 8,
    GDK_WINDOW_TYPE_HINT_POPUP_MENU = 9,
    GDK_WINDOW_TYPE_HINT_TOOLTIP = 10,
    GDK_WINDOW_TYPE_HINT_NOTIFICATION = 11,
    GDK_WINDOW_TYPE_HINT_COMBO = 12,
    GDK_WINDOW_TYPE_HINT_DND = 13,
    TGdkWindowTypeHintMaxValue = $7FFFFFFF
  );
  TGdkDeviceType = (
    TGdkDeviceTypeMinValue = -$7FFFFFFF,
    GDK_DEVICE_TYPE_MASTER = 0,
    GDK_DEVICE_TYPE_SLAVE = 1,
    GDK_DEVICE_TYPE_FLOATING = 2,
    TGdkDeviceTypeMaxValue = $7FFFFFFF
  );
  TGdkSeatCapabilitiesIdx = (
    TGdkSeatCapabilitiesIdxMinValue = 0,
    GDK_SEAT_CAPABILITY_POINTER = 0,
    GDK_SEAT_CAPABILITY_TOUCH = 1,
    GDK_SEAT_CAPABILITY_TABLET_STYLUS = 2,
    GDK_SEAT_CAPABILITY_KEYBOARD = 3,
    TGdkSeatCapabilitiesIdxMaxValue = 31
  );
  TGdkSeatCapabilities = Set of TGdkSeatCapabilitiesIdx;
const
  GDK_SEAT_CAPABILITY_NONE = []; {0 = $00000000}

  GDK_SEAT_CAPABILITY_ALL_POINTING = [
    GDK_SEAT_CAPABILITY_POINTER,
    GDK_SEAT_CAPABILITY_TOUCH,
    GDK_SEAT_CAPABILITY_TABLET_STYLUS
  ]; {7 = $00000007}

  GDK_SEAT_CAPABILITY_ALL = [
    GDK_SEAT_CAPABILITY_POINTER,
    GDK_SEAT_CAPABILITY_TOUCH,
    GDK_SEAT_CAPABILITY_TABLET_STYLUS,
    GDK_SEAT_CAPABILITY_KEYBOARD
  ]; {15 = $0000000F}

type
  TGdkGrabStatus = (
    TGdkGrabStatusMinValue = -$7FFFFFFF,
    GDK_GRAB_SUCCESS = 0,
    GDK_GRAB_ALREADY_GRABBED = 1,
    GDK_GRAB_INVALID_TIME = 2,
    GDK_GRAB_NOT_VIEWABLE = 3,
    GDK_GRAB_FROZEN = 4,
    GDK_GRAB_FAILED = 5,
    TGdkGrabStatusMaxValue = $7FFFFFFF
  );
  TGdkGrabOwnership = (
    TGdkGrabOwnershipMinValue = -$7FFFFFFF,
    GDK_OWNERSHIP_NONE = 0,
    GDK_OWNERSHIP_WINDOW = 1,
    GDK_OWNERSHIP_APPLICATION = 2,
    TGdkGrabOwnershipMaxValue = $7FFFFFFF
  );
  TGdkDevicePadFeature = (
    TGdkDevicePadFeatureMinValue = -$7FFFFFFF,
    GDK_DEVICE_PAD_FEATURE_BUTTON = 0,
    GDK_DEVICE_PAD_FEATURE_RING = 1,
    GDK_DEVICE_PAD_FEATURE_STRIP = 2,
    TGdkDevicePadFeatureMaxValue = $7FFFFFFF
  );
  TGdkDeviceToolType = (
    TGdkDeviceToolTypeMinValue = -$7FFFFFFF,
    GDK_DEVICE_TOOL_TYPE_UNKNOWN = 0,
    GDK_DEVICE_TOOL_TYPE_PEN = 1,
    GDK_DEVICE_TOOL_TYPE_ERASER = 2,
    GDK_DEVICE_TOOL_TYPE_BRUSH = 3,
    GDK_DEVICE_TOOL_TYPE_PENCIL = 4,
    GDK_DEVICE_TOOL_TYPE_AIRBRUSH = 5,
    GDK_DEVICE_TOOL_TYPE_MOUSE = 6,
    GDK_DEVICE_TOOL_TYPE_LENS = 7,
    TGdkDeviceToolTypeMaxValue = $7FFFFFFF
  );
  TGdkEventType = (
    TGdkEventTypeMinValue = -$7FFFFFFF,
    GDK_NOTHING = -1,
    GDK_DELETE = 0,
    GDK_DESTROY = 1,
    GDK_EXPOSE = 2,
    GDK_MOTION_NOTIFY = 3,
    GDK_BUTTON_PRESS = 4,
    GDK_DOUBLE_BUTTON_PRESS = 5,
    GDK_2BUTTON_PRESS = 5,
    GDK_TRIPLE_BUTTON_PRESS = 6,
    GDK_3BUTTON_PRESS = 6,
    GDK_BUTTON_RELEASE = 7,
    GDK_KEY_PRESS = 8,
    GDK_KEY_RELEASE = 9,
    GDK_ENTER_NOTIFY = 10,
    GDK_LEAVE_NOTIFY = 11,
    GDK_FOCUS_CHANGE = 12,
    GDK_CONFIGURE = 13,
    GDK_MAP = 14,
    GDK_UNMAP = 15,
    GDK_PROPERTY_NOTIFY = 16,
    GDK_SELECTION_CLEAR = 17,
    GDK_SELECTION_REQUEST = 18,
    GDK_SELECTION_NOTIFY = 19,
    GDK_PROXIMITY_IN = 20,
    GDK_PROXIMITY_OUT = 21,
    GDK_DRAG_ENTER = 22,
    GDK_DRAG_LEAVE = 23,
    GDK_DRAG_MOTION_ = 24,
    GDK_DRAG_STATUS_ = 25,
    GDK_DROP_START = 26,
    GDK_DROP_FINISHED = 27,
    GDK_CLIENT_EVENT = 28,
    GDK_VISIBILITY_NOTIFY = 29,
    GDK_SCROLL = 31,
    GDK_WINDOW_STATE = 32,
    GDK_SETTING = 33,
    GDK_OWNER_CHANGE = 34,
    GDK_GRAB_BROKEN = 35,
    GDK_DAMAGE = 36,
    GDK_TOUCH_BEGIN = 37,
    GDK_TOUCH_UPDATE = 38,
    GDK_TOUCH_END = 39,
    GDK_TOUCH_CANCEL = 40,
    GDK_TOUCHPAD_SWIPE = 41,
    GDK_TOUCHPAD_PINCH = 42,
    GDK_PAD_BUTTON_PRESS = 43,
    GDK_PAD_BUTTON_RELEASE = 44,
    GDK_PAD_RING = 45,
    GDK_PAD_STRIP = 46,
    GDK_PAD_GROUP_MODE = 47,
    GDK_EVENT_LAST = 48,
    TGdkEventTypeMaxValue = $7FFFFFFF
  );
  TGdkVisibilityState = (
    TGdkVisibilityStateMinValue = -$7FFFFFFF,
    GDK_VISIBILITY_UNOBSCURED = 0,
    GDK_VISIBILITY_PARTIAL = 1,
    GDK_VISIBILITY_FULLY_OBSCURED = 2,
    TGdkVisibilityStateMaxValue = $7FFFFFFF
  );
  TGdkScrollDirection = (
    TGdkScrollDirectionMinValue = -$7FFFFFFF,
    GDK_SCROLL_UP = 0,
    GDK_SCROLL_DOWN = 1,
    GDK_SCROLL_LEFT = 2,
    GDK_SCROLL_RIGHT = 3,
    GDK_SCROLL_SMOOTH = 4,
    TGdkScrollDirectionMaxValue = $7FFFFFFF
  );
  TGdkNotifyType = (
    TGdkNotifyTypeMinValue = -$7FFFFFFF,
    GDK_NOTIFY_ANCESTOR = 0,
    GDK_NOTIFY_VIRTUAL = 1,
    GDK_NOTIFY_INFERIOR = 2,
    GDK_NOTIFY_NONLINEAR = 3,
    GDK_NOTIFY_NONLINEAR_VIRTUAL = 4,
    GDK_NOTIFY_UNKNOWN = 5,
    TGdkNotifyTypeMaxValue = $7FFFFFFF
  );
  TGdkPropertyState = (
    TGdkPropertyStateMinValue = -$7FFFFFFF,
    GDK_PROPERTY_NEW_VALUE = 0,
    GDK_PROPERTY_DELETE_ = 1,
    TGdkPropertyStateMaxValue = $7FFFFFFF
  );
  TGdkOwnerChange = (
    TGdkOwnerChangeMinValue = -$7FFFFFFF,
    GDK_OWNER_CHANGE_NEW_OWNER = 0,
    GDK_OWNER_CHANGE_DESTROY = 1,
    GDK_OWNER_CHANGE_CLOSE = 2,
    TGdkOwnerChangeMaxValue = $7FFFFFFF
  );
  TGdkSettingAction = (
    TGdkSettingActionMinValue = -$7FFFFFFF,
    GDK_SETTING_ACTION_NEW = 0,
    GDK_SETTING_ACTION_CHANGED = 1,
    GDK_SETTING_ACTION_DELETED = 2,
    TGdkSettingActionMaxValue = $7FFFFFFF
  );
  TGdkDragActionIdx = (
    TGdkDragActionIdxMinValue = 0,
    GDK_ACTION_DEFAULT = 0,
    GDK_ACTION_COPY = 1,
    GDK_ACTION_MOVE = 2,
    GDK_ACTION_LINK = 3,
    GDK_ACTION_PRIVATE = 4,
    GDK_ACTION_ASK = 5,
    TGdkDragActionIdxMaxValue = 31
  );
  TGdkDragAction = Set of TGdkDragActionIdx;
  TGdkDragCancelReason = (
    TGdkDragCancelReasonMinValue = -$7FFFFFFF,
    GDK_DRAG_CANCEL_NO_TARGET = 0,
    GDK_DRAG_CANCEL_USER_CANCELLED = 1,
    GDK_DRAG_CANCEL_ERROR = 2,
    TGdkDragCancelReasonMaxValue = $7FFFFFFF
  );
  TGdkDragProtocol = (
    TGdkDragProtocolMinValue = -$7FFFFFFF,
    GDK_DRAG_PROTO_NONE = 0,
    GDK_DRAG_PROTO_MOTIF = 1,
    GDK_DRAG_PROTO_XDND = 2,
    GDK_DRAG_PROTO_ROOTWIN = 3,
    GDK_DRAG_PROTO_WIN32_DROPFILES = 4,
    GDK_DRAG_PROTO_OLE2 = 5,
    GDK_DRAG_PROTO_LOCAL = 6,
    GDK_DRAG_PROTO_WAYLAND = 7,
    TGdkDragProtocolMaxValue = $7FFFFFFF
  );
  TGdkFilterReturn = (
    TGdkFilterReturnMinValue = -$7FFFFFFF,
    GDK_FILTER_CONTINUE = 0,
    GDK_FILTER_TRANSLATE = 1,
    GDK_FILTER_REMOVE = 2,
    TGdkFilterReturnMaxValue = $7FFFFFFF
  );
  TGdkFrameClockPhaseIdx = (
    TGdkFrameClockPhaseIdxMinValue = 0,
    GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = 0,
    GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = 1,
    GDK_FRAME_CLOCK_PHASE_UPDATE = 2,
    GDK_FRAME_CLOCK_PHASE_LAYOUT = 3,
    GDK_FRAME_CLOCK_PHASE_PAINT = 4,
    GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = 5,
    GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = 6,
    TGdkFrameClockPhaseIdxMaxValue = 31
  );
  TGdkFrameClockPhase = Set of TGdkFrameClockPhaseIdx;
const
  GDK_FRAME_CLOCK_PHASE_NONE = []; {0 = $00000000}

type
  TGdkGLError = (
    TGdkGLErrorMinValue = -$7FFFFFFF,
    GDK_GL_ERROR_NOT_AVAILABLE = 0,
    GDK_GL_ERROR_UNSUPPORTED_FORMAT = 1,
    GDK_GL_ERROR_UNSUPPORTED_PROFILE = 2,
    TGdkGLErrorMaxValue = $7FFFFFFF
  );
  TGdkModifierIntent = (
    TGdkModifierIntentMinValue = -$7FFFFFFF,
    GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR = 0,
    GDK_MODIFIER_INTENT_CONTEXT_MENU = 1,
    GDK_MODIFIER_INTENT_EXTEND_SELECTION = 2,
    GDK_MODIFIER_INTENT_MODIFY_SELECTION = 3,
    GDK_MODIFIER_INTENT_NO_TEXT_INPUT = 4,
    GDK_MODIFIER_INTENT_SHIFT_GROUP = 5,
    GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK = 6,
    TGdkModifierIntentMaxValue = $7FFFFFFF
  );
  TGdkSubpixelLayout = (
    TGdkSubpixelLayoutMinValue = -$7FFFFFFF,
    GDK_SUBPIXEL_LAYOUT_UNKNOWN = 0,
    GDK_SUBPIXEL_LAYOUT_NONE = 1,
    GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB = 2,
    GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR = 3,
    GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB = 4,
    GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR = 5,
    TGdkSubpixelLayoutMaxValue = $7FFFFFFF
  );
  TGdkPropMode = (
    TGdkPropModeMinValue = -$7FFFFFFF,
    GDK_PROP_MODE_REPLACE = 0,
    GDK_PROP_MODE_PREPEND = 1,
    GDK_PROP_MODE_APPEND = 2,
    TGdkPropModeMaxValue = $7FFFFFFF
  );
  TGdkStatus = (
    TGdkStatusMinValue = -$7FFFFFFF,
    GDK_ERROR_MEM = -4,
    GDK_ERROR_FILE = -3,
    GDK_ERROR_PARAM = -2,
    GDK_ERROR = -1,
    GDK_OK = 0,
    TGdkStatusMaxValue = $7FFFFFFF
  );
  TGdkTouchpadGesturePhase = (
    TGdkTouchpadGesturePhaseMinValue = -$7FFFFFFF,
    GDK_TOUCHPAD_GESTURE_PHASE_BEGIN = 0,
    GDK_TOUCHPAD_GESTURE_PHASE_UPDATE = 1,
    GDK_TOUCHPAD_GESTURE_PHASE_END = 2,
    GDK_TOUCHPAD_GESTURE_PHASE_CANCEL = 3,
    TGdkTouchpadGesturePhaseMaxValue = $7FFFFFFF
  );
  TGdkVisualType = (
    TGdkVisualTypeMinValue = -$7FFFFFFF,
    GDK_VISUAL_STATIC_GRAY = 0,
    GDK_VISUAL_GRAYSCALE = 1,
    GDK_VISUAL_STATIC_COLOR = 2,
    GDK_VISUAL_PSEUDO_COLOR = 3,
    GDK_VISUAL_TRUE_COLOR = 4,
    GDK_VISUAL_DIRECT_COLOR = 5,
    TGdkVisualTypeMaxValue = $7FFFFFFF
  );
  TGdkWindowWindowClass = (
    TGdkWindowWindowClassMinValue = -$7FFFFFFF,
    GDK_INPUT_OUTPUT = 0,
    GDK_INPUT_ONLY = 1,
    TGdkWindowWindowClassMaxValue = $7FFFFFFF
  );
  TGdkWindowType = (
    TGdkWindowTypeMinValue = -$7FFFFFFF,
    GDK_WINDOW_ROOT = 0,
    GDK_WINDOW_TOPLEVEL = 1,
    GDK_WINDOW_CHILD = 2,
    GDK_WINDOW_TEMP = 3,
    GDK_WINDOW_FOREIGN = 4,
    GDK_WINDOW_OFFSCREEN = 5,
    GDK_WINDOW_SUBSURFACE = 6,
    TGdkWindowTypeMaxValue = $7FFFFFFF
  );
type


  { TGdkXEvent }
  PPGdkXEvent = ^PGdkXEvent;
  PGdkXEvent = ^TGdkXEvent;

  { GdkXEvent }
  TGdkXEvent = record
    { opaque type }
    Unknown: Pointer;
  end;



  { TGdkAnchorHints }
  PPGdkAnchorHints = ^PGdkAnchorHints;
  PGdkAnchorHints = ^TGdkAnchorHints;


  { TGdkAppLaunchContext }
  PPGdkAppLaunchContext = ^PGdkAppLaunchContext;
  PGdkAppLaunchContext = ^TGdkAppLaunchContext;


  { TGdkScreen }
  PPGdkScreen = ^PGdkScreen;
  PGdkScreen = ^TGdkScreen;
  TGdkAppLaunchContext = object(TGAppLaunchContext)
    procedure set_desktop(desktop: gint); cdecl; inline;
    procedure set_icon(icon: PGIcon); cdecl; inline;
    procedure set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    procedure set_timestamp(timestamp: guint32); cdecl; inline;
    //property display: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_display  { property is writeable but setter not declared } ;
  end;


  { TGdkDisplay }
  PPGdkDisplay = ^PGdkDisplay;
  PGdkDisplay = ^TGdkDisplay;


  { TGdkDevice }
  PPGdkDevice = ^PGdkDevice;
  PGdkDevice = ^TGdkDevice;


  { TGdkWindow }
  PPGdkWindow = ^PGdkWindow;
  PGdkWindow = ^TGdkWindow;


  { TGdkSeat }
  PPGdkSeat = ^PGdkSeat;
  PGdkSeat = ^TGdkSeat;


  { TGdkEvent }
  PPGdkEvent = ^PGdkEvent;
  PGdkEvent = ^TGdkEvent;


  { TGdkMonitor }
  PPGdkMonitor = ^PGdkMonitor;
  PGdkMonitor = ^TGdkMonitor;


  { TGdkAtom }
  PPPGdkAtom = ^PPGdkAtom;
  PPGdkAtom = ^PGdkAtom;
  PGdkAtom = ^TGdkAtom;
  TGdkAtom = object
    function name: Pgchar; cdecl; inline;
    function intern(atom_name: Pgchar; only_if_exists: gboolean): PGdkAtom; cdecl; inline; static;
    function intern_static_string(atom_name: Pgchar): PGdkAtom; cdecl; inline; static;
  end;
  TGdkDisplay = object(TGObject)
    function get_default: PGdkDisplay; cdecl; inline; static;
    function open(display_name: Pgchar): PGdkDisplay; cdecl; inline; static;
    procedure beep; cdecl; inline;
    procedure close; cdecl; inline;
    function device_is_grabbed(device: PGdkDevice): gboolean; cdecl; inline;
    procedure flush; cdecl; inline;
    function get_app_launch_context: PGdkAppLaunchContext; cdecl; inline;
    function get_default_cursor_size: guint; cdecl; inline;
    function get_default_group: PGdkWindow; cdecl; inline;
    function get_default_screen: PGdkScreen; cdecl; inline;
    function get_default_seat: PGdkSeat; cdecl; inline;
    function get_event: PGdkEvent; cdecl; inline;
    procedure get_maximal_cursor_size(width: Pguint; height: Pguint); cdecl; inline;
    function get_monitor(monitor_num: gint): PGdkMonitor; cdecl; inline;
    function get_monitor_at_point(x: gint; y: gint): PGdkMonitor; cdecl; inline;
    function get_monitor_at_window(window: PGdkWindow): PGdkMonitor; cdecl; inline;
    function get_n_monitors: gint; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_primary_monitor: PGdkMonitor; cdecl; inline;
    function has_pending: gboolean; cdecl; inline;
    function is_closed: gboolean; cdecl; inline;
    function list_seats: PGList; cdecl; inline;
    procedure notify_startup_complete(startup_id: Pgchar); cdecl; inline;
    function peek_event: PGdkEvent; cdecl; inline;
    procedure put_event(event: PGdkEvent); cdecl; inline;
    function request_selection_notification(selection: PGdkAtom): gboolean; cdecl; inline;
    procedure set_double_click_distance(distance: guint); cdecl; inline;
    procedure set_double_click_time(msec: guint); cdecl; inline;
    procedure store_clipboard(clipboard_window: PGdkWindow; time_: guint32; targets: PGdkAtom; n_targets: gint); cdecl; inline;
    function supports_clipboard_persistence: gboolean; cdecl; inline;
    function supports_cursor_alpha: gboolean; cdecl; inline;
    function supports_cursor_color: gboolean; cdecl; inline;
    function supports_input_shapes: gboolean; cdecl; inline;
    function supports_selection_notification: gboolean; cdecl; inline;
    function supports_shapes: gboolean; cdecl; inline;
    procedure sync; cdecl; inline;
  end;


  { TGdkVisual }
  PPGdkVisual = ^PGdkVisual;
  PGdkVisual = ^TGdkVisual;
  TGdkScreen = object(TGObject)
    function get_default: PGdkScreen; cdecl; inline; static;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_font_options: Pcairo_font_options_t; cdecl; inline;
    function get_height: gint; cdecl; inline;
    function get_height_mm: gint; cdecl; inline;
    function get_monitor_at_point(x: gint; y: gint): gint; cdecl; inline;
    function get_monitor_at_window(window: PGdkWindow): gint; cdecl; inline;
    function get_resolution: gdouble; cdecl; inline;
    function get_rgba_visual: PGdkVisual; cdecl; inline;
    function get_root_window: PGdkWindow; cdecl; inline;
    function get_setting(name: Pgchar; value: PGValue): gboolean; cdecl; inline;
    function get_system_visual: PGdkVisual; cdecl; inline;
    function get_toplevel_windows: PGList; cdecl; inline;
    function get_width: gint; cdecl; inline;
    function get_width_mm: gint; cdecl; inline;
    function get_window_stack: PGList; cdecl; inline;
    function is_composited: gboolean; cdecl; inline;
    function list_visuals: PGList; cdecl; inline;
    procedure set_font_options(options: Pcairo_font_options_t); cdecl; inline;
    procedure set_resolution(dpi: gdouble); cdecl; inline;
    property font_options: Pcairo_font_options_t read get_font_options write set_font_options;
    property resolution: gdouble read get_resolution write set_resolution;
  end;


  { TGdkAxisFlags }
  PPGdkAxisFlags = ^PGdkAxisFlags;
  PGdkAxisFlags = ^TGdkAxisFlags;


  { TGdkAxisUse }
  PPGdkAxisUse = ^PGdkAxisUse;
  PGdkAxisUse = ^TGdkAxisUse;


  { TGdkByteOrder }
  PPGdkByteOrder = ^PGdkByteOrder;
  PGdkByteOrder = ^TGdkByteOrder;


  { TGdkColor }
  PPGdkColor = ^PGdkColor;
  PGdkColor = ^TGdkColor;
  TGdkColor = object
    pixel: guint32;
    red: guint16;
    green: guint16;
    blue: guint16;
  end;


  { TGdkCrossingMode }
  PPGdkCrossingMode = ^PGdkCrossingMode;
  PGdkCrossingMode = ^TGdkCrossingMode;


  { TGdkCursor }
  PPGdkCursor = ^PGdkCursor;
  PGdkCursor = ^TGdkCursor;


  { TGdkCursorType }
  PPGdkCursorType = ^PGdkCursorType;
  PGdkCursorType = ^TGdkCursorType;
  TGdkCursor = object(TGObject)
    function new(cursor_type: TGdkCursorType): PGdkCursor; cdecl; inline; static;
    function new_for_display(display: PGdkDisplay; cursor_type: TGdkCursorType): PGdkCursor; cdecl; inline; static;
    function new_from_name(display: PGdkDisplay; name: Pgchar): PGdkCursor; cdecl; inline; static;
    function new_from_pixbuf(display: PGdkDisplay; pixbuf: PGdkPixbuf; x: gint; y: gint): PGdkCursor; cdecl; inline; static;
    function new_from_surface(display: PGdkDisplay; surface: Pcairo_surface_t; x: gdouble; y: gdouble): PGdkCursor; cdecl; inline; static;
    function get_cursor_type: TGdkCursorType; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_image: PGdkPixbuf; cdecl; inline;
    function get_surface(x_hot: Pgdouble; y_hot: Pgdouble): Pcairo_surface_t; cdecl; inline;
    property cursor_type: TGdkCursorType read get_cursor_type  { property is writeable but setter not declared } ;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
  end;


  { TGdkTimeCoord }
  PPPGdkTimeCoord = ^PPGdkTimeCoord;
  PPGdkTimeCoord = ^PGdkTimeCoord;
  PGdkTimeCoord = ^TGdkTimeCoord;

  TGdkTimeCoord = record
    time: guint32;
    axes: array [0..127] of gdouble;
  end;




  { TGdkDeviceType }
  PPGdkDeviceType = ^PGdkDeviceType;
  PGdkDeviceType = ^TGdkDeviceType;


  { TGdkModifierType }
  PPGdkModifierType = ^PGdkModifierType;
  PGdkModifierType = ^TGdkModifierType;


  { TGdkInputMode }
  PPGdkInputMode = ^PGdkInputMode;
  PGdkInputMode = ^TGdkInputMode;


  { TGdkInputSource }
  PPGdkInputSource = ^PGdkInputSource;
  PGdkInputSource = ^TGdkInputSource;
  TGdkDevice = object(TGObject)
    procedure free_history(events: PPGdkTimeCoord; n_events: gint); cdecl; inline; static;
    function get_associated_device: PGdkDevice; cdecl; inline;
    function get_axes: TGdkAxisFlags; cdecl; inline;
    function get_axis(axes: Pgdouble; use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl; inline;
    function get_axis_use(index_: guint): TGdkAxisUse; cdecl; inline;
    function get_axis_value(axes: Pgdouble; axis_label: PGdkAtom; value: Pgdouble): gboolean; cdecl; inline;
    function get_device_type: TGdkDeviceType; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_has_cursor: gboolean; cdecl; inline;
    function get_history(window: PGdkWindow; start: guint32; stop: guint32; events: PPPGdkTimeCoord; n_events: Pgint): gboolean; cdecl; inline;
    function get_key(index_: guint; keyval: Pguint; modifiers: PGdkModifierType): gboolean; cdecl; inline;
    function get_last_event_window: PGdkWindow; cdecl; inline;
    function get_mode: TGdkInputMode; cdecl; inline;
    function get_n_axes: gint; cdecl; inline;
    function get_n_keys: gint; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    procedure get_position(screen: PPGdkScreen; x: Pgint; y: Pgint); cdecl; inline;
    procedure get_position_double(screen: PPGdkScreen; x: Pgdouble; y: Pgdouble); cdecl; inline;
    function get_product_id: Pgchar; cdecl; inline;
    function get_seat: PGdkSeat; cdecl; inline;
    function get_source: TGdkInputSource; cdecl; inline;
    procedure get_state(window: PGdkWindow; axes: Pgdouble; mask: PGdkModifierType); cdecl; inline;
    function get_vendor_id: Pgchar; cdecl; inline;
    function get_window_at_position(win_x: Pgint; win_y: Pgint): PGdkWindow; cdecl; inline;
    function get_window_at_position_double(win_x: Pgdouble; win_y: Pgdouble): PGdkWindow; cdecl; inline;
    function list_axes: PGList; cdecl; inline;
    function list_slave_devices: PGList; cdecl; inline;
    procedure set_axis_use(index_: guint; use: TGdkAxisUse); cdecl; inline;
    procedure set_key(index_: guint; keyval: guint; modifiers: TGdkModifierType); cdecl; inline;
    function set_mode(mode: TGdkInputMode): gboolean; cdecl; inline;
    procedure warp(screen: PGdkScreen; x: gint; y: gint); cdecl; inline;
    property associated_device: PGdkDevice read get_associated_device ;
    property axes: TGdkAxisFlags read get_axes ;
    //property device_manager: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_device_manager  { property is writeable but setter not declared } ;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    property has_cursor: gboolean read get_has_cursor  { property is writeable but setter not declared } ;
    //property input_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_input_mode  { property is writeable but setter not declared } ;
    //property input_source: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_input_source  { property is writeable but setter not declared } ;
    property n_axes: gint read get_n_axes ;
    property name: Pgchar read get_name  { property is writeable but setter not declared } ;
    //property num_touches: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_num_touches  { property is writeable but setter not declared } ;
    property product_id: Pgchar read get_product_id  { property is writeable but setter not declared } ;
    property seat: PGdkSeat read get_seat  { property is writeable but setter not declared } ;
    //property tool: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tool ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property vendor_id: Pgchar read get_vendor_id  { property is writeable but setter not declared } ;
  end;


  { TGdkWindowAttr }
  PPGdkWindowAttr = ^PGdkWindowAttr;
  PGdkWindowAttr = ^TGdkWindowAttr;


  { TGdkWindowAttributesType }
  PPGdkWindowAttributesType = ^PGdkWindowAttributesType;
  PGdkWindowAttributesType = ^TGdkWindowAttributesType;


  { TGdkGeometry }
  PPGdkGeometry = ^PGdkGeometry;
  PGdkGeometry = ^TGdkGeometry;


  { TGdkWindowHints }
  PPGdkWindowHints = ^PGdkWindowHints;
  PGdkWindowHints = ^TGdkWindowHints;


  { TGdkFilterFunc }
  PPGdkFilterFunc = ^PGdkFilterFunc;
  PGdkFilterFunc = ^TGdkFilterFunc;


  { TGdkFilterReturn }
  PPGdkFilterReturn = ^PGdkFilterReturn;
  PGdkFilterReturn = ^TGdkFilterReturn;
  TGdkFilterFunc = function(xevent: PGdkXEvent; event: PGdkEvent; data: gpointer): TGdkFilterReturn; cdecl;


  { TGdkDrawingContext }
  PPGdkDrawingContext = ^PGdkDrawingContext;
  PGdkDrawingContext = ^TGdkDrawingContext;


  { TGdkWindowEdge }
  PPGdkWindowEdge = ^PGdkWindowEdge;
  PGdkWindowEdge = ^TGdkWindowEdge;


  { TGdkGLContext }
  PPGdkGLContext = ^PGdkGLContext;
  PGdkGLContext = ^TGdkGLContext;


  { TGdkWMDecoration }
  PPGdkWMDecoration = ^PGdkWMDecoration;
  PGdkWMDecoration = ^TGdkWMDecoration;


  { TGdkEventMask }
  PPGdkEventMask = ^PGdkEventMask;
  PGdkEventMask = ^TGdkEventMask;


  { TGdkDragProtocol }
  PPGdkDragProtocol = ^PGdkDragProtocol;
  PGdkDragProtocol = ^TGdkDragProtocol;


  { TGdkFrameClock }
  PPGdkFrameClock = ^PGdkFrameClock;
  PGdkFrameClock = ^TGdkFrameClock;


  { TGdkRectangle }
  PPGdkRectangle = ^PGdkRectangle;
  PGdkRectangle = ^TGdkRectangle;


  { TGdkFullscreenMode }
  PPGdkFullscreenMode = ^PGdkFullscreenMode;
  PGdkFullscreenMode = ^TGdkFullscreenMode;


  { TGdkWindowState }
  PPGdkWindowState = ^PGdkWindowState;
  PGdkWindowState = ^TGdkWindowState;


  { TGdkWindowTypeHint }
  PPGdkWindowTypeHint = ^PGdkWindowTypeHint;
  PGdkWindowTypeHint = ^TGdkWindowTypeHint;


  { TGdkWindowType }
  PPGdkWindowType = ^PGdkWindowType;
  PGdkWindowType = ^TGdkWindowType;


  { TGdkWindowChildFunc }
  PPGdkWindowChildFunc = ^PGdkWindowChildFunc;
  PGdkWindowChildFunc = ^TGdkWindowChildFunc;
  TGdkWindowChildFunc = function(window: PGdkWindow; user_data: gpointer): gboolean; cdecl;


  { TGdkGravity }
  PPGdkGravity = ^PGdkGravity;
  PGdkGravity = ^TGdkGravity;


  { TGdkWMFunction }
  PPGdkWMFunction = ^PGdkWMFunction;
  PGdkWMFunction = ^TGdkWMFunction;


  { TGdkWindowInvalidateHandlerFunc }
  PPGdkWindowInvalidateHandlerFunc = ^PGdkWindowInvalidateHandlerFunc;
  PGdkWindowInvalidateHandlerFunc = ^TGdkWindowInvalidateHandlerFunc;
  TGdkWindowInvalidateHandlerFunc = procedure(window: PGdkWindow; region: Pcairo_region_t); cdecl;
  TGdkWindow = object(TGObject)
    function new(parent: PGdkWindow; attributes: PGdkWindowAttr; attributes_mask: TGdkWindowAttributesType): PGdkWindow; cdecl; inline; static;
    procedure constrain_size(geometry: PGdkGeometry; flags: TGdkWindowHints; width: gint; height: gint; new_width: Pgint; new_height: Pgint); cdecl; inline; static;
    procedure add_filter(function_: TGdkFilterFunc; data: gpointer); cdecl; inline;
    procedure beep; cdecl; inline;
    function begin_draw_frame(region: Pcairo_region_t): PGdkDrawingContext; cdecl; inline;
    procedure begin_move_drag(button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; inline;
    procedure begin_move_drag_for_device(device: PGdkDevice; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; inline;
    procedure begin_resize_drag(edge: TGdkWindowEdge; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; inline;
    procedure begin_resize_drag_for_device(edge: TGdkWindowEdge; device: PGdkDevice; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; inline;
    procedure coords_from_parent(parent_x: gdouble; parent_y: gdouble; x: Pgdouble; y: Pgdouble); cdecl; inline;
    procedure coords_to_parent(x: gdouble; y: gdouble; parent_x: Pgdouble; parent_y: Pgdouble); cdecl; inline;
    function create_gl_context(error: PPGError): PGdkGLContext; cdecl; inline;
    function create_similar_image_surface(format: Tcairo_format_t; width: gint; height: gint; scale: gint): Pcairo_surface_t; cdecl; inline;
    function create_similar_surface(content: Tcairo_content_t; width: gint; height: gint): Pcairo_surface_t; cdecl; inline;
    procedure deiconify; cdecl; inline;
    procedure destroy_; cdecl; inline;
    procedure destroy_notify; cdecl; inline;
    procedure end_draw_frame(context: PGdkDrawingContext); cdecl; inline;
    procedure end_paint; cdecl; inline;
    function ensure_native: gboolean; cdecl; inline;
    procedure focus(timestamp: guint32); cdecl; inline;
    procedure freeze_updates; cdecl; inline;
    procedure fullscreen; cdecl; inline;
    procedure fullscreen_on_monitor(monitor: gint); cdecl; inline;
    procedure geometry_changed; cdecl; inline;
    function get_accept_focus: gboolean; cdecl; inline;
    function get_children: PGList; cdecl; inline;
    function get_children_with_user_data(user_data: gpointer): PGList; cdecl; inline;
    function get_clip_region: Pcairo_region_t; cdecl; inline;
    function get_cursor: PGdkCursor; cdecl; inline;
    function get_decorations(decorations: PGdkWMDecoration): gboolean; cdecl; inline;
    function get_device_cursor(device: PGdkDevice): PGdkCursor; cdecl; inline;
    function get_device_events(device: PGdkDevice): TGdkEventMask; cdecl; inline;
    function get_device_position(device: PGdkDevice; x: Pgint; y: Pgint; mask: PGdkModifierType): PGdkWindow; cdecl; inline;
    function get_device_position_double(device: PGdkDevice; x: Pgdouble; y: Pgdouble; mask: PGdkModifierType): PGdkWindow; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_drag_protocol(target: PPGdkWindow): TGdkDragProtocol; cdecl; inline;
    function get_effective_parent: PGdkWindow; cdecl; inline;
    function get_effective_toplevel: PGdkWindow; cdecl; inline;
    function get_event_compression: gboolean; cdecl; inline;
    function get_events: TGdkEventMask; cdecl; inline;
    function get_focus_on_map: gboolean; cdecl; inline;
    function get_frame_clock: PGdkFrameClock; cdecl; inline;
    procedure get_frame_extents(rect: PGdkRectangle); cdecl; inline;
    function get_fullscreen_mode: TGdkFullscreenMode; cdecl; inline;
    procedure get_geometry(x: Pgint; y: Pgint; width: Pgint; height: Pgint); cdecl; inline;
    function get_group: PGdkWindow; cdecl; inline;
    function get_height: gint; cdecl; inline;
    function get_modal_hint: gboolean; cdecl; inline;
    function get_origin(x: Pgint; y: Pgint): gint; cdecl; inline;
    function get_parent: PGdkWindow; cdecl; inline;
    function get_pass_through: gboolean; cdecl; inline;
    procedure get_position(x: Pgint; y: Pgint); cdecl; inline;
    procedure get_root_coords(x: gint; y: gint; root_x: Pgint; root_y: Pgint); cdecl; inline;
    procedure get_root_origin(x: Pgint; y: Pgint); cdecl; inline;
    function get_scale_factor: gint; cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    function get_source_events(source: TGdkInputSource): TGdkEventMask; cdecl; inline;
    function get_state: TGdkWindowState; cdecl; inline;
    function get_support_multidevice: gboolean; cdecl; inline;
    function get_toplevel: PGdkWindow; cdecl; inline;
    function get_type_hint: TGdkWindowTypeHint; cdecl; inline;
    function get_update_area: Pcairo_region_t; cdecl; inline;
    procedure get_user_data(data: Pgpointer); cdecl; inline;
    function get_visible_region: Pcairo_region_t; cdecl; inline;
    function get_visual: PGdkVisual; cdecl; inline;
    function get_width: gint; cdecl; inline;
    function get_window_type: TGdkWindowType; cdecl; inline;
    function has_native: gboolean; cdecl; inline;
    procedure hide; cdecl; inline;
    procedure iconify; cdecl; inline;
    procedure input_shape_combine_region(shape_region: Pcairo_region_t; offset_x: gint; offset_y: gint); cdecl; inline;
    procedure invalidate_maybe_recurse(region: Pcairo_region_t; child_func: TGdkWindowChildFunc; user_data: gpointer); cdecl; inline;
    procedure invalidate_rect(rect: PGdkRectangle; invalidate_children: gboolean); cdecl; inline;
    procedure invalidate_region(region: Pcairo_region_t; invalidate_children: gboolean); cdecl; inline;
    function is_destroyed: gboolean; cdecl; inline;
    function is_input_only: gboolean; cdecl; inline;
    function is_shaped: gboolean; cdecl; inline;
    function is_viewable: gboolean; cdecl; inline;
    function is_visible: gboolean; cdecl; inline;
    procedure lower; cdecl; inline;
    procedure mark_paint_from_clip(cr: Pcairo_t); cdecl; inline;
    procedure maximize; cdecl; inline;
    procedure merge_child_input_shapes; cdecl; inline;
    procedure merge_child_shapes; cdecl; inline;
    procedure move(x: gint; y: gint); cdecl; inline;
    procedure move_region(region: Pcairo_region_t; dx: gint; dy: gint); cdecl; inline;
    procedure move_resize(x: gint; y: gint; width: gint; height: gint); cdecl; inline;
    procedure move_to_rect(rect: PGdkRectangle; rect_anchor: TGdkGravity; window_anchor: TGdkGravity; anchor_hints: TGdkAnchorHints; rect_anchor_dx: gint; rect_anchor_dy: gint); cdecl; inline;
    function peek_children: PGList; cdecl; inline;
    procedure process_updates(update_children: gboolean); cdecl; inline;
    procedure raise_; cdecl; inline;
    procedure register_dnd; cdecl; inline;
    procedure remove_filter(function_: TGdkFilterFunc; data: gpointer); cdecl; inline;
    procedure reparent(new_parent: PGdkWindow; x: gint; y: gint); cdecl; inline;
    procedure resize(width: gint; height: gint); cdecl; inline;
    procedure restack(sibling: PGdkWindow; above: gboolean); cdecl; inline;
    procedure scroll(dx: gint; dy: gint); cdecl; inline;
    procedure set_accept_focus(accept_focus: gboolean); cdecl; inline;
    procedure set_child_input_shapes; cdecl; inline;
    procedure set_child_shapes; cdecl; inline;
    procedure set_cursor(cursor: PGdkCursor); cdecl; inline;
    procedure set_decorations(decorations: TGdkWMDecoration); cdecl; inline;
    procedure set_device_cursor(device: PGdkDevice; cursor: PGdkCursor); cdecl; inline;
    procedure set_device_events(device: PGdkDevice; event_mask: TGdkEventMask); cdecl; inline;
    procedure set_event_compression(event_compression: gboolean); cdecl; inline;
    procedure set_events(event_mask: TGdkEventMask); cdecl; inline;
    procedure set_focus_on_map(focus_on_map: gboolean); cdecl; inline;
    procedure set_fullscreen_mode(mode: TGdkFullscreenMode); cdecl; inline;
    procedure set_functions(functions: TGdkWMFunction); cdecl; inline;
    procedure set_geometry_hints(geometry: PGdkGeometry; geom_mask: TGdkWindowHints); cdecl; inline;
    procedure set_group(leader: PGdkWindow); cdecl; inline;
    procedure set_icon_list(pixbufs: PGList); cdecl; inline;
    procedure set_icon_name(name: Pgchar); cdecl; inline;
    procedure set_invalidate_handler(handler: TGdkWindowInvalidateHandlerFunc); cdecl; inline;
    procedure set_keep_above(setting: gboolean); cdecl; inline;
    procedure set_keep_below(setting: gboolean); cdecl; inline;
    procedure set_modal_hint(modal: gboolean); cdecl; inline;
    procedure set_opacity(opacity: gdouble); cdecl; inline;
    procedure set_opaque_region(region: Pcairo_region_t); cdecl; inline;
    procedure set_override_redirect(override_redirect: gboolean); cdecl; inline;
    procedure set_pass_through(pass_through: gboolean); cdecl; inline;
    procedure set_role(role: Pgchar); cdecl; inline;
    procedure set_shadow_width(left: gint; right: gint; top: gint; bottom: gint); cdecl; inline;
    procedure set_skip_pager_hint(skips_pager: gboolean); cdecl; inline;
    procedure set_skip_taskbar_hint(skips_taskbar: gboolean); cdecl; inline;
    procedure set_source_events(source: TGdkInputSource; event_mask: TGdkEventMask); cdecl; inline;
    procedure set_startup_id(startup_id: Pgchar); cdecl; inline;
    procedure set_support_multidevice(support_multidevice: gboolean); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_transient_for(parent: PGdkWindow); cdecl; inline;
    procedure set_type_hint(hint: TGdkWindowTypeHint); cdecl; inline;
    procedure set_urgency_hint(urgent: gboolean); cdecl; inline;
    procedure set_user_data(user_data: PGObject); cdecl; inline;
    procedure shape_combine_region(shape_region: Pcairo_region_t; offset_x: gint; offset_y: gint); cdecl; inline;
    procedure show; cdecl; inline;
    procedure show_unraised; cdecl; inline;
    function show_window_menu(event: PGdkEvent): gboolean; cdecl; inline;
    procedure stick; cdecl; inline;
    procedure thaw_updates; cdecl; inline;
    procedure unfullscreen; cdecl; inline;
    procedure unmaximize; cdecl; inline;
    procedure unstick; cdecl; inline;
    procedure withdraw; cdecl; inline;
    property cursor: PGdkCursor read get_cursor write set_cursor;
  end;


  { TGdkSeatCapabilities }
  PPGdkSeatCapabilities = ^PGdkSeatCapabilities;
  PGdkSeatCapabilities = ^TGdkSeatCapabilities;


  { TGdkGrabStatus }
  PPGdkGrabStatus = ^PGdkGrabStatus;
  PGdkGrabStatus = ^TGdkGrabStatus;


  { TGdkSeatGrabPrepareFunc }
  PPGdkSeatGrabPrepareFunc = ^PGdkSeatGrabPrepareFunc;
  PGdkSeatGrabPrepareFunc = ^TGdkSeatGrabPrepareFunc;
  TGdkSeatGrabPrepareFunc = procedure(seat: PGdkSeat; window: PGdkWindow; user_data: gpointer); cdecl;
  TGdkSeat = object(TGObject)
    function get_capabilities: TGdkSeatCapabilities; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_keyboard: PGdkDevice; cdecl; inline;
    function get_pointer: PGdkDevice; cdecl; inline;
    function get_slaves(capabilities: TGdkSeatCapabilities): PGList; cdecl; inline;
    function grab(window: PGdkWindow; capabilities: TGdkSeatCapabilities; owner_events: gboolean; cursor: PGdkCursor; event: PGdkEvent; prepare_func: TGdkSeatGrabPrepareFunc; prepare_func_data: gpointer): TGdkGrabStatus; cdecl; inline;
    procedure ungrab; cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
  end;


  { TGdkGrabOwnership }
  PPGdkGrabOwnership = ^PGdkGrabOwnership;
  PGdkGrabOwnership = ^TGdkGrabOwnership;


  { TGdkDeviceManager }
  PPGdkDeviceManager = ^PGdkDeviceManager;
  PGdkDeviceManager = ^TGdkDeviceManager;
  TGdkDeviceManager = object(TGObject)
    function get_display: PGdkDisplay; cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
  end;


  { TGdkDeviceTool }
  PPGdkDeviceTool = ^PGdkDeviceTool;
  PGdkDeviceTool = ^TGdkDeviceTool;


  { TGdkDeviceToolType }
  PPGdkDeviceToolType = ^PGdkDeviceToolType;
  PGdkDeviceToolType = ^TGdkDeviceToolType;
  TGdkDeviceTool = object(TGObject)
    function get_hardware_id: guint64; cdecl; inline;
    function get_serial: guint64; cdecl; inline;
    function get_tool_type: TGdkDeviceToolType; cdecl; inline;
    //property axes: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_axes  { property is writeable but setter not declared } ;
    property hardware_id: guint64 read get_hardware_id  { property is writeable but setter not declared } ;
    property serial: guint64 read get_serial  { property is writeable but setter not declared } ;
    property tool_type: TGdkDeviceToolType read get_tool_type  { property is writeable but setter not declared } ;
  end;


  { TGdkDevicePad }
  PPGdkDevicePad = ^PGdkDevicePad;
  PGdkDevicePad = ^TGdkDevicePad;


  { TGdkDevicePadFeature }
  PPGdkDevicePadFeature = ^PGdkDevicePadFeature;
  PGdkDevicePadFeature = ^TGdkDevicePadFeature;
  TGdkDevicePad = object
    function get_feature_group(feature: TGdkDevicePadFeature; feature_idx: gint): gint; cdecl; inline;
    function get_group_n_modes(group_idx: gint): gint; cdecl; inline;
    function get_n_features(feature: TGdkDevicePadFeature): gint; cdecl; inline;
    function get_n_groups: gint; cdecl; inline;
  end;


  { TGdkDevicePadInterface }
  PPGdkDevicePadInterface = ^PGdkDevicePadInterface;
  PGdkDevicePadInterface = ^TGdkDevicePadInterface;
  TGdkDevicePadInterface = object
  end;


  { TGdkEventType }
  PPGdkEventType = ^PGdkEventType;
  PGdkEventType = ^TGdkEventType;


  { TGdkEventAny }
  PPGdkEventAny = ^PGdkEventAny;
  PGdkEventAny = ^TGdkEventAny;

  TGdkEventAny = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
  end;




  { TGdkEventExpose }
  PPGdkEventExpose = ^PGdkEventExpose;
  PGdkEventExpose = ^TGdkEventExpose;
  TGdkRectangle = object
    x: gint;
    y: gint;
    width: gint;
    height: gint;
    function equal(rect2: PGdkRectangle): gboolean; cdecl; inline;
    function intersect(src2: PGdkRectangle; dest: PGdkRectangle): gboolean; cdecl; inline;
    procedure union(src2: PGdkRectangle; dest: PGdkRectangle); cdecl; inline;
  end;

  TGdkEventExpose = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    area: TGdkRectangle;
    region: Pcairo_region_t;
    count: gint;
  end;




  { TGdkEventVisibility }
  PPGdkEventVisibility = ^PGdkEventVisibility;
  PGdkEventVisibility = ^TGdkEventVisibility;


  { TGdkVisibilityState }
  PPGdkVisibilityState = ^PGdkVisibilityState;
  PGdkVisibilityState = ^TGdkVisibilityState;

  TGdkEventVisibility = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    state: TGdkVisibilityState;
  end;




  { TGdkEventMotion }
  PPGdkEventMotion = ^PGdkEventMotion;
  PGdkEventMotion = ^TGdkEventMotion;

  TGdkEventMotion = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    x: gdouble;
    y: gdouble;
    axes: Pgdouble;
    state: TGdkModifierType;
    is_hint: gint16;
    device: PGdkDevice;
    x_root: gdouble;
    y_root: gdouble;
  end;




  { TGdkEventButton }
  PPGdkEventButton = ^PGdkEventButton;
  PGdkEventButton = ^TGdkEventButton;

  TGdkEventButton = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    x: gdouble;
    y: gdouble;
    axes: Pgdouble;
    state: TGdkModifierType;
    button: guint;
    device: PGdkDevice;
    x_root: gdouble;
    y_root: gdouble;
  end;




  { TGdkEventTouch }
  PPGdkEventTouch = ^PGdkEventTouch;
  PGdkEventTouch = ^TGdkEventTouch;


  { TGdkEventSequence }
  PPGdkEventSequence = ^PGdkEventSequence;
  PGdkEventSequence = ^TGdkEventSequence;

  TGdkEventTouch = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    x: gdouble;
    y: gdouble;
    axes: Pgdouble;
    state: TGdkModifierType;
    sequence: PGdkEventSequence;
    emulating_pointer: gboolean;
    device: PGdkDevice;
    x_root: gdouble;
    y_root: gdouble;
  end;




  { TGdkEventScroll }
  PPGdkEventScroll = ^PGdkEventScroll;
  PGdkEventScroll = ^TGdkEventScroll;


  { TGdkScrollDirection }
  PPGdkScrollDirection = ^PGdkScrollDirection;
  PGdkScrollDirection = ^TGdkScrollDirection;
  TGdkEventScrollBitfield0 = bitpacked record
    is_stop: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;


  TGdkEventScroll = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    x: gdouble;
    y: gdouble;
    state: TGdkModifierType;
    direction: TGdkScrollDirection;
    device: PGdkDevice;
    x_root: gdouble;
    y_root: gdouble;
    delta_x: gdouble;
    delta_y: gdouble;
    Bitfield0 : TGdkEventScrollBitfield0; { auto generated type }
  end;




  { TGdkEventKey }
  PPGdkEventKey = ^PGdkEventKey;
  PGdkEventKey = ^TGdkEventKey;
  TGdkEventKeyBitfield0 = bitpacked record
    is_modifier: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;


  TGdkEventKey = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    state: TGdkModifierType;
    keyval: guint;
    length: gint;
    string_: Pgchar;
    hardware_keycode: guint16;
    group: guint8;
    Bitfield0 : TGdkEventKeyBitfield0; { auto generated type }
  end;




  { TGdkEventCrossing }
  PPGdkEventCrossing = ^PGdkEventCrossing;
  PGdkEventCrossing = ^TGdkEventCrossing;


  { TGdkNotifyType }
  PPGdkNotifyType = ^PGdkNotifyType;
  PGdkNotifyType = ^TGdkNotifyType;

  TGdkEventCrossing = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    subwindow: PGdkWindow;
    time: guint32;
    x: gdouble;
    y: gdouble;
    x_root: gdouble;
    y_root: gdouble;
    mode: TGdkCrossingMode;
    detail: TGdkNotifyType;
    focus: gboolean;
    state: TGdkModifierType;
  end;




  { TGdkEventFocus }
  PPGdkEventFocus = ^PGdkEventFocus;
  PGdkEventFocus = ^TGdkEventFocus;

  TGdkEventFocus = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    in_: gint16;
  end;




  { TGdkEventConfigure }
  PPGdkEventConfigure = ^PGdkEventConfigure;
  PGdkEventConfigure = ^TGdkEventConfigure;

  TGdkEventConfigure = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    x: gint;
    y: gint;
    width: gint;
    height: gint;
  end;




  { TGdkEventProperty }
  PPGdkEventProperty = ^PGdkEventProperty;
  PGdkEventProperty = ^TGdkEventProperty;


  { TGdkPropertyState }
  PPGdkPropertyState = ^PGdkPropertyState;
  PGdkPropertyState = ^TGdkPropertyState;

  TGdkEventProperty = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    atom: TGdkAtom;
    time: guint32;
    state: TGdkPropertyState;
  end;




  { TGdkEventSelection }
  PPGdkEventSelection = ^PGdkEventSelection;
  PGdkEventSelection = ^TGdkEventSelection;

  TGdkEventSelection = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    selection: TGdkAtom;
    target: TGdkAtom;
    property_: TGdkAtom;
    time: guint32;
    requestor: PGdkWindow;
  end;




  { TGdkEventOwnerChange }
  PPGdkEventOwnerChange = ^PGdkEventOwnerChange;
  PGdkEventOwnerChange = ^TGdkEventOwnerChange;


  { TGdkOwnerChange }
  PPGdkOwnerChange = ^PGdkOwnerChange;
  PGdkOwnerChange = ^TGdkOwnerChange;

  TGdkEventOwnerChange = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    owner: PGdkWindow;
    reason: TGdkOwnerChange;
    selection: TGdkAtom;
    time: guint32;
    selection_time: guint32;
  end;




  { TGdkEventProximity }
  PPGdkEventProximity = ^PGdkEventProximity;
  PGdkEventProximity = ^TGdkEventProximity;

  TGdkEventProximity = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    device: PGdkDevice;
  end;




  { TGdkEventDND }
  PPGdkEventDND = ^PGdkEventDND;
  PGdkEventDND = ^TGdkEventDND;


  { TGdkDragContext }
  PPGdkDragContext = ^PGdkDragContext;
  PGdkDragContext = ^TGdkDragContext;

  TGdkEventDND = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    context: PGdkDragContext;
    time: guint32;
    x_root: gshort;
    y_root: gshort;
  end;




  { TGdkEventWindowState }
  PPGdkEventWindowState = ^PGdkEventWindowState;
  PGdkEventWindowState = ^TGdkEventWindowState;

  TGdkEventWindowState = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    changed_mask: TGdkWindowState;
    new_window_state: TGdkWindowState;
  end;




  { TGdkEventSetting }
  PPGdkEventSetting = ^PGdkEventSetting;
  PGdkEventSetting = ^TGdkEventSetting;


  { TGdkSettingAction }
  PPGdkSettingAction = ^PGdkSettingAction;
  PGdkSettingAction = ^TGdkSettingAction;

  TGdkEventSetting = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    action: TGdkSettingAction;
    name: Pgchar;
  end;




  { TGdkEventGrabBroken }
  PPGdkEventGrabBroken = ^PGdkEventGrabBroken;
  PGdkEventGrabBroken = ^TGdkEventGrabBroken;

  TGdkEventGrabBroken = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    keyboard: gboolean;
    implicit: gboolean;
    grab_window: PGdkWindow;
  end;




  { TGdkEventTouchpadSwipe }
  PPGdkEventTouchpadSwipe = ^PGdkEventTouchpadSwipe;
  PGdkEventTouchpadSwipe = ^TGdkEventTouchpadSwipe;

  TGdkEventTouchpadSwipe = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    phase: gint8;
    n_fingers: gint8;
    time: guint32;
    x: gdouble;
    y: gdouble;
    dx: gdouble;
    dy: gdouble;
    x_root: gdouble;
    y_root: gdouble;
    state: TGdkModifierType;
  end;




  { TGdkEventTouchpadPinch }
  PPGdkEventTouchpadPinch = ^PGdkEventTouchpadPinch;
  PGdkEventTouchpadPinch = ^TGdkEventTouchpadPinch;

  TGdkEventTouchpadPinch = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    phase: gint8;
    n_fingers: gint8;
    time: guint32;
    x: gdouble;
    y: gdouble;
    dx: gdouble;
    dy: gdouble;
    angle_delta: gdouble;
    scale: gdouble;
    x_root: gdouble;
    y_root: gdouble;
    state: TGdkModifierType;
  end;




  { TGdkEventPadButton }
  PPGdkEventPadButton = ^PGdkEventPadButton;
  PGdkEventPadButton = ^TGdkEventPadButton;

  TGdkEventPadButton = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    group: guint;
    button: guint;
    mode: guint;
  end;




  { TGdkEventPadAxis }
  PPGdkEventPadAxis = ^PGdkEventPadAxis;
  PGdkEventPadAxis = ^TGdkEventPadAxis;

  TGdkEventPadAxis = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    group: guint;
    index: guint;
    mode: guint;
    value: gdouble;
  end;




  { TGdkEventPadGroupMode }
  PPGdkEventPadGroupMode = ^PGdkEventPadGroupMode;
  PGdkEventPadGroupMode = ^TGdkEventPadGroupMode;

  TGdkEventPadGroupMode = record
    type_: TGdkEventType;
    window: PGdkWindow;
    send_event: gint8;
    time: guint32;
    group: guint;
    mode: guint;
  end;




  { TGdkEventFunc }
  PPGdkEventFunc = ^PGdkEventFunc;
  PGdkEventFunc = ^TGdkEventFunc;
  TGdkEventFunc = procedure(event: PGdkEvent; data: gpointer); cdecl;
  TGdkEvent = record
    case longint of
      0 : (type_: TGdkEventType);
      1 : (any: TGdkEventAny);
      2 : (expose: TGdkEventExpose);
      3 : (visibility: TGdkEventVisibility);
      4 : (motion: TGdkEventMotion);
      5 : (button: TGdkEventButton);
      6 : (touch: TGdkEventTouch);
      7 : (scroll: TGdkEventScroll);
      8 : (key: TGdkEventKey);
      9 : (crossing: TGdkEventCrossing);
      10 : (focus_change: TGdkEventFocus);
      11 : (configure: TGdkEventConfigure);
      12 : (property_: TGdkEventProperty);
      13 : (selection: TGdkEventSelection);
      14 : (owner_change: TGdkEventOwnerChange);
      15 : (proximity: TGdkEventProximity);
      16 : (dnd: TGdkEventDND);
      17 : (window_state: TGdkEventWindowState);
      18 : (setting: TGdkEventSetting);
      19 : (grab_broken: TGdkEventGrabBroken);
      20 : (touchpad_swipe: TGdkEventTouchpadSwipe);
      21 : (touchpad_pinch: TGdkEventTouchpadPinch);
      22 : (pad_button: TGdkEventPadButton);
      23 : (pad_axis: TGdkEventPadAxis);
      24 : (pad_group_mode: TGdkEventPadGroupMode);
    //function new(type_: TGdkEventType): PGdkEvent; cdecl;
    //function _get_angle(event2: PGdkEvent; angle: Pgdouble): gboolean; cdecl;
    //function _get_center(event2: PGdkEvent; x: Pgdouble; y: Pgdouble): gboolean; cdecl;
    //function _get_distance(event2: PGdkEvent; distance: Pgdouble): gboolean; cdecl;
    //function copy: PGdkEvent; cdecl;
    //procedure free; cdecl;
    //function get_axis(axis_use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl;
    //function get_button(button: Pguint): gboolean; cdecl;
    //function get_click_count(click_count: Pguint): gboolean; cdecl;
    //function get_coords(x_win: Pgdouble; y_win: Pgdouble): gboolean; cdecl;
    //function get_device: PGdkDevice; cdecl;
    //function get_device_tool: PGdkDeviceTool; cdecl;
    //function get_event_sequence: PGdkEventSequence; cdecl;
    //function get_event_type: TGdkEventType; cdecl;
    //function get_keycode(keycode: Pguint16): gboolean; cdecl;
    //function get_keyval(keyval: Pguint): gboolean; cdecl;
    //function get_pointer_emulated: gboolean; cdecl;
    //function get_root_coords(x_root: Pgdouble; y_root: Pgdouble): gboolean; cdecl;
    //function get_scancode: gint; cdecl;
    //function get_screen: PGdkScreen; cdecl;
    //function get_scroll_deltas(delta_x: Pgdouble; delta_y: Pgdouble): gboolean; cdecl;
    //function get_scroll_direction(direction: PGdkScrollDirection): gboolean; cdecl;
    //function get_seat: PGdkSeat; cdecl;
    //function get_source_device: PGdkDevice; cdecl;
    //function get_state(state: PGdkModifierType): gboolean; cdecl;
    //function get_time: guint32; cdecl;
    //function get_window: PGdkWindow; cdecl;
    //function is_scroll_stop_event: gboolean; cdecl;
    //procedure put; cdecl;
    //procedure set_device(device: PGdkDevice); cdecl;
    //procedure set_device_tool(tool: PGdkDeviceTool); cdecl;
    //procedure set_screen(screen: PGdkScreen); cdecl;
    //procedure set_source_device(device: PGdkDevice); cdecl;
    //function triggers_context_menu: gboolean; cdecl;
    //function get: PGdkEvent; cdecl;
    //procedure handler_set(func: TGdkEventFunc; data: gpointer; notify: TGDestroyNotify); cdecl;
    //function peek: PGdkEvent; cdecl;
    //procedure request_motions(event: PGdkEventMotion); cdecl;
  end;




  { TGdkSubpixelLayout }
  PPGdkSubpixelLayout = ^PGdkSubpixelLayout;
  PGdkSubpixelLayout = ^TGdkSubpixelLayout;
  TGdkMonitor = object(TGObject)
    function get_display: PGdkDisplay; cdecl; inline;
    procedure get_geometry(geometry: PGdkRectangle); cdecl; inline;
    function get_height_mm: gint; cdecl; inline;
    function get_manufacturer: Pgchar; cdecl; inline;
    function get_model: Pgchar; cdecl; inline;
    function get_refresh_rate: gint; cdecl; inline;
    function get_scale_factor: gint; cdecl; inline;
    function get_subpixel_layout: TGdkSubpixelLayout; cdecl; inline;
    function get_width_mm: gint; cdecl; inline;
    procedure get_workarea(workarea: PGdkRectangle); cdecl; inline;
    function is_primary: gboolean; cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    //property geometry: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_geometry ;
    property height_mm: gint read get_height_mm ;
    property manufacturer: Pgchar read get_manufacturer ;
    property model: Pgchar read get_model ;
    property refresh_rate: gint read get_refresh_rate ;
    property scale_factor: gint read get_scale_factor ;
    property subpixel_layout: TGdkSubpixelLayout read get_subpixel_layout ;
    property width_mm: gint read get_width_mm ;
    //property workarea: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_workarea ;
  end;


  { TGdkDisplayManager }
  PPGdkDisplayManager = ^PGdkDisplayManager;
  PGdkDisplayManager = ^TGdkDisplayManager;
  TGdkDisplayManager = object(TGObject)
    function get: PGdkDisplayManager; cdecl; inline; static;
    function get_default_display: PGdkDisplay; cdecl; inline;
    function list_displays: PGSList; cdecl; inline;
    function open_display(name: Pgchar): PGdkDisplay; cdecl; inline;
    procedure set_default_display(display: PGdkDisplay); cdecl; inline;
    property default_display: PGdkDisplay read get_default_display write set_default_display;
  end;


  { TGdkDragAction }
  PPGdkDragAction = ^PGdkDragAction;
  PGdkDragAction = ^TGdkDragAction;


  { TGdkDragCancelReason }
  PPGdkDragCancelReason = ^PGdkDragCancelReason;
  PGdkDragCancelReason = ^TGdkDragCancelReason;
  TGdkDragContext = object(TGObject)
    function get_actions: TGdkDragAction; cdecl; inline;
    function get_dest_window: PGdkWindow; cdecl; inline;
    function get_device: PGdkDevice; cdecl; inline;
    function get_drag_window: PGdkWindow; cdecl; inline;
    function get_protocol: TGdkDragProtocol; cdecl; inline;
    function get_selected_action: TGdkDragAction; cdecl; inline;
    function get_source_window: PGdkWindow; cdecl; inline;
    function get_suggested_action: TGdkDragAction; cdecl; inline;
    function list_targets: PGList; cdecl; inline;
    function manage_dnd(ipc_window: PGdkWindow; actions: TGdkDragAction): gboolean; cdecl; inline;
    procedure set_device(device: PGdkDevice); cdecl; inline;
    procedure set_hotspot(hot_x: gint; hot_y: gint); cdecl; inline;
  end;
  TGdkDrawingContext = object(TGObject)
    function get_cairo_context: Pcairo_t; cdecl; inline;
    function get_clip: Pcairo_region_t; cdecl; inline;
    function get_window: PGdkWindow; cdecl; inline;
    function is_valid: gboolean; cdecl; inline;
    property clip: Pcairo_region_t read get_clip  { property is writeable but setter not declared } ;
    property window: PGdkWindow read get_window  { property is writeable but setter not declared } ;
  end;


  { TGdkDrawingContextClass }
  PPGdkDrawingContextClass = ^PGdkDrawingContextClass;
  PGdkDrawingContextClass = ^TGdkDrawingContextClass;
  TGdkDrawingContextClass = object
  end;
  TGdkEventSequence = object
  end;


  { TGdkFrameTimings }
  PPGdkFrameTimings = ^PGdkFrameTimings;
  PGdkFrameTimings = ^TGdkFrameTimings;


  { TGdkFrameClockPhase }
  PPGdkFrameClockPhase = ^PGdkFrameClockPhase;
  PGdkFrameClockPhase = ^TGdkFrameClockPhase;
  TGdkFrameClock = object(TGObject)
    procedure begin_updating; cdecl; inline;
    procedure end_updating; cdecl; inline;
    function get_current_timings: PGdkFrameTimings; cdecl; inline;
    function get_frame_counter: gint64; cdecl; inline;
    function get_frame_time: gint64; cdecl; inline;
    function get_history_start: gint64; cdecl; inline;
    procedure get_refresh_info(base_time: gint64; refresh_interval_return: Pgint64; presentation_time_return: Pgint64); cdecl; inline;
    function get_timings(frame_counter: gint64): PGdkFrameTimings; cdecl; inline;
    procedure request_phase(phase: TGdkFrameClockPhase); cdecl; inline;
  end;
  TGdkFrameTimings = object
    function get_complete: gboolean; cdecl; inline;
    function get_frame_counter: gint64; cdecl; inline;
    function get_frame_time: gint64; cdecl; inline;
    function get_predicted_presentation_time: gint64; cdecl; inline;
    function get_presentation_time: gint64; cdecl; inline;
    function get_refresh_interval: gint64; cdecl; inline;
    function ref: PGdkFrameTimings; cdecl; inline;
    procedure unref; cdecl; inline;
  end;


  { TGdkFrameClockClass }
  PPGdkFrameClockClass = ^PGdkFrameClockClass;
  PGdkFrameClockClass = ^TGdkFrameClockClass;
  TGdkFrameClockClass = object
  end;


  { TGdkFrameClockPrivate }
  PPGdkFrameClockPrivate = ^PGdkFrameClockPrivate;
  PGdkFrameClockPrivate = ^TGdkFrameClockPrivate;

  TGdkFrameClockPrivate = record
  end;


  TGdkGLContext = object(TGObject)
    procedure clear_current; cdecl; inline; static;
    function get_current: PGdkGLContext; cdecl; inline; static;
    function get_debug_enabled: gboolean; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_forward_compatible: gboolean; cdecl; inline;
    procedure get_required_version(major: Pgint; minor: Pgint); cdecl; inline;
    function get_shared_context: PGdkGLContext; cdecl; inline;
    function get_use_es: gboolean; cdecl; inline;
    procedure get_version(major: Pgint; minor: Pgint); cdecl; inline;
    function get_window: PGdkWindow; cdecl; inline;
    function is_legacy: gboolean; cdecl; inline;
    procedure make_current; cdecl; inline;
    function realize(error: PPGError): gboolean; cdecl; inline;
    procedure set_debug_enabled(enabled: gboolean); cdecl; inline;
    procedure set_forward_compatible(compatible: gboolean); cdecl; inline;
    procedure set_required_version(major: gint; minor: gint); cdecl; inline;
    procedure set_use_es(use_es: gint); cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    property shared_context: PGdkGLContext read get_shared_context  { property is writeable but setter not declared } ;
    property window: PGdkWindow read get_window  { property is writeable but setter not declared } ;
  end;


  { TGdkGLError }
  PPGdkGLError = ^PGdkGLError;
  PGdkGLError = ^TGdkGLError;

  TGdkGeometry = record
    min_width: gint;
    min_height: gint;
    max_width: gint;
    max_height: gint;
    base_width: gint;
    base_height: gint;
    width_inc: gint;
    height_inc: gint;
    min_aspect: gdouble;
    max_aspect: gdouble;
    win_gravity: TGdkGravity;
  end;




  { TGdkKeymap }
  PPGdkKeymap = ^PGdkKeymap;
  PGdkKeymap = ^TGdkKeymap;


  { TGdkKeymapKey }
  PPPGdkKeymapKey = ^PPGdkKeymapKey;
  PPGdkKeymapKey = ^PGdkKeymapKey;
  PGdkKeymapKey = ^TGdkKeymapKey;


  { TGdkModifierIntent }
  PPGdkModifierIntent = ^PGdkModifierIntent;
  PGdkModifierIntent = ^TGdkModifierIntent;
  TGdkKeymap = object(TGObject)
    function get_for_display(display: PGdkDisplay): PGdkKeymap; cdecl; inline; static;
    procedure add_virtual_modifiers(state: PGdkModifierType); cdecl; inline;
    function get_caps_lock_state: gboolean; cdecl; inline;
    function get_direction: TPangoDirection; cdecl; inline;
    function get_entries_for_keycode(hardware_keycode: guint; keys: PPGdkKeymapKey; keyvals: PPguint; n_entries: Pgint): gboolean; cdecl; inline;
    function get_entries_for_keyval(keyval: guint; keys: PPGdkKeymapKey; n_keys: Pgint): gboolean; cdecl; inline;
    function get_modifier_mask(intent: TGdkModifierIntent): TGdkModifierType; cdecl; inline;
    function get_modifier_state: TGdkModifierType; cdecl; inline;
    function get_num_lock_state: gboolean; cdecl; inline;
    function get_scroll_lock_state: gboolean; cdecl; inline;
    function have_bidi_layouts: gboolean; cdecl; inline;
    function lookup_key(key: PGdkKeymapKey): guint; cdecl; inline;
    function map_virtual_modifiers(state: PGdkModifierType): gboolean; cdecl; inline;
    function translate_keyboard_state(hardware_keycode: guint; state: TGdkModifierType; group: gint; keyval: Pguint; effective_group: Pgint; level: Pgint; consumed_modifiers: PGdkModifierType): gboolean; cdecl; inline;
  end;

  TGdkKeymapKey = record
    keycode: guint;
    group: gint;
    level: gint;
  end;




  { TGdkMonitorClass }
  PPGdkMonitorClass = ^PGdkMonitorClass;
  PGdkMonitorClass = ^TGdkMonitorClass;
  TGdkMonitorClass = object
  end;


  { TGdkPoint }
  PPGdkPoint = ^PGdkPoint;
  PGdkPoint = ^TGdkPoint;

  TGdkPoint = record
    x: gint;
    y: gint;
  end;




  { TGdkPropMode }
  PPGdkPropMode = ^PGdkPropMode;
  PGdkPropMode = ^TGdkPropMode;


  { TGdkRGBA }
  PPPGdkRGBA = ^PPGdkRGBA;
  PPGdkRGBA = ^PGdkRGBA;
  PGdkRGBA = ^TGdkRGBA;
  TGdkRGBA = object
    red: gdouble;
    green: gdouble;
    blue: gdouble;
    alpha: gdouble;
    function copy: PGdkRGBA; cdecl; inline;
    function equal(p2: PGdkRGBA): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function hash: guint; cdecl; inline;
    function parse(spec: Pgchar): gboolean; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
  end;


  { TGdkVisualType }
  PPGdkVisualType = ^PGdkVisualType;
  PGdkVisualType = ^TGdkVisualType;
  TGdkVisual = object(TGObject)
    function get_best: PGdkVisual; cdecl; inline; static;
    function get_bits_per_rgb: gint; cdecl; inline;
    procedure get_blue_pixel_details(mask: Pguint32; shift: Pgint; precision: Pgint); cdecl; inline;
    function get_byte_order: TGdkByteOrder; cdecl; inline;
    function get_colormap_size: gint; cdecl; inline;
    function get_depth: gint; cdecl; inline;
    procedure get_green_pixel_details(mask: Pguint32; shift: Pgint; precision: Pgint); cdecl; inline;
    procedure get_red_pixel_details(mask: Pguint32; shift: Pgint; precision: Pgint); cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    function get_visual_type: TGdkVisualType; cdecl; inline;
  end;


  { TGdkStatus }
  PPGdkStatus = ^PGdkStatus;
  PGdkStatus = ^TGdkStatus;


  { TGdkTouchpadGesturePhase }
  PPGdkTouchpadGesturePhase = ^PGdkTouchpadGesturePhase;
  PGdkTouchpadGesturePhase = ^TGdkTouchpadGesturePhase;


  { TGdkWindowWindowClass }
  PPGdkWindowWindowClass = ^PGdkWindowWindowClass;
  PGdkWindowWindowClass = ^TGdkWindowWindowClass;

  TGdkWindowAttr = record
    title: Pgchar;
    event_mask: gint;
    x: gint;
    y: gint;
    width: gint;
    height: gint;
    wclass: TGdkWindowWindowClass;
    visual: PGdkVisual;
    window_type: TGdkWindowType;
    cursor: PGdkCursor;
    wmclass_name: Pgchar;
    wmclass_class: Pgchar;
    override_redirect: gboolean;
    type_hint: TGdkWindowTypeHint;
  end;




  { TGdkWindowClass }
  PPGdkWindowClass = ^PGdkWindowClass;
  PGdkWindowClass = ^TGdkWindowClass;
  TGdkWindowClass = object
    parent_class: TGObjectClass;
    pick_embedded_child: function(window: PGdkWindow; x: gdouble; y: gdouble): PGdkWindow; cdecl;
    to_embedder: procedure(window: PGdkWindow; offscreen_x: gdouble; offscreen_y: gdouble; embedder_x: Pgdouble; embedder_y: Pgdouble); cdecl;
    from_embedder: procedure(window: PGdkWindow; embedder_x: gdouble; embedder_y: gdouble; offscreen_x: Pgdouble; offscreen_y: Pgdouble); cdecl;
    create_surface: function(window: PGdkWindow; width: gint; height: gint): Pcairo_surface_t; cdecl;
    _gdk_reserved1: procedure; cdecl;
    _gdk_reserved2: procedure; cdecl;
    _gdk_reserved3: procedure; cdecl;
    _gdk_reserved4: procedure; cdecl;
    _gdk_reserved5: procedure; cdecl;
    _gdk_reserved6: procedure; cdecl;
    _gdk_reserved7: procedure; cdecl;
    _gdk_reserved8: procedure; cdecl;
  end;


  { TGdkWindowRedirect }
  PPGdkWindowRedirect = ^PGdkWindowRedirect;
  PGdkWindowRedirect = ^TGdkWindowRedirect;

  TGdkWindowRedirect = record
  end;

function gdk_cairo_create(window: PGdkWindow): Pcairo_t; cdecl; external;
function gdk_cursor_new(cursor_type: TGdkCursorType): PGdkCursor; cdecl; external;
function gdk_device_manager_get_client_pointer(device_manager: PGdkDeviceManager): PGdkDevice; cdecl; external;
function gdk_display_get_device_manager(display: PGdkDisplay): PGdkDeviceManager; cdecl; external;
function gdk_keymap_get_default: PGdkKeymap; cdecl; external;
function gdk_screen_get_active_window(screen: PGdkScreen): PGdkWindow; cdecl; external;
function gdk_screen_get_height(screen: PGdkScreen): gint; cdecl; external;
function gdk_screen_get_height_mm(screen: PGdkScreen): gint; cdecl; external;
function gdk_screen_get_monitor_at_point(screen: PGdkScreen; x: gint; y: gint): gint; cdecl; external;
function gdk_screen_get_monitor_at_window(screen: PGdkScreen; window: PGdkWindow): gint; cdecl; external;
function gdk_screen_get_n_monitors(screen: PGdkScreen): gint; cdecl; external;
function gdk_screen_get_primary_monitor(screen: PGdkScreen): gint; cdecl; external;
function gdk_screen_get_width(screen: PGdkScreen): gint; cdecl; external;
function gdk_screen_get_width_mm(screen: PGdkScreen): gint; cdecl; external;
function gdk_screen_height: gint; cdecl; external;
function gdk_screen_height_mm: gint; cdecl; external;
function gdk_screen_width: gint; cdecl; external;
function gdk_screen_width_mm: gint; cdecl; external;
function gdk_visual_get_best: PGdkVisual; cdecl; external;
function gdk_visual_get_bits_per_rgb(visual: PGdkVisual): gint; cdecl; external;
function gdk_visual_get_byte_order(visual: PGdkVisual): TGdkByteOrder; cdecl; external;
function gdk_visual_get_colormap_size(visual: PGdkVisual): gint; cdecl; external;
function gdk_visual_get_system: PGdkVisual; cdecl; external;
procedure gdk_window_process_updates(window: PGdkWindow; update_children: gboolean); cdecl; external;
procedure gdk_screen_get_monitor_geometry(screen: PGdkScreen; monitor_num: gint; dest: PGdkRectangle); cdecl; external;
procedure gdk_screen_get_monitor_workarea(screen: PGdkScreen; monitor_num: gint; dest: PGdkRectangle); cdecl; external;
function gdk_pointer_grab(window: PGdkWindow; owner_events: gboolean; event_mask: TGdkEventMask; confine_to: PGdkWindow; cursor: PGdkCursor; time_: guint32): TGdkGrabStatus; cdecl; external LazGdk3_library name 'gdk_pointer_grab';
procedure gdk_pointer_ungrab(time_: guint32); cdecl; external LazGdk3_library name 'gdk_pointer_ungrab';


function gdk_app_launch_context_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_app_launch_context_get_type';
function gdk_atom_intern(atom_name: Pgchar; only_if_exists: gboolean): PGdkAtom; cdecl; external LazGdk3_library name 'gdk_atom_intern';
function gdk_atom_intern_static_string(atom_name: Pgchar): PGdkAtom; cdecl; external LazGdk3_library name 'gdk_atom_intern_static_string';
function gdk_atom_name(atom: PGdkAtom): Pgchar; cdecl; external LazGdk3_library name 'gdk_atom_name';
function gdk_cairo_get_clip_rectangle(cr: Pcairo_t; rect: PGdkRectangle): gboolean; cdecl; external LazGdk3_library name 'gdk_cairo_get_clip_rectangle';
function gdk_cairo_get_drawing_context(cr: Pcairo_t): PGdkDrawingContext; cdecl; external LazGdk3_library name 'gdk_cairo_get_drawing_context';
function gdk_cairo_region_create_from_surface(surface: Pcairo_surface_t): Pcairo_region_t; cdecl; external LazGdk3_library name 'gdk_cairo_region_create_from_surface';
function gdk_cairo_surface_create_from_pixbuf(pixbuf: PGdkPixbuf; scale: gint; for_window: PGdkWindow): Pcairo_surface_t; cdecl; external LazGdk3_library name 'gdk_cairo_surface_create_from_pixbuf';
function gdk_color_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_color_get_type';
function gdk_cursor_get_cursor_type(cursor: PGdkCursor): TGdkCursorType; cdecl; external LazGdk3_library name 'gdk_cursor_get_cursor_type';
function gdk_cursor_get_display(cursor: PGdkCursor): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_cursor_get_display';
function gdk_cursor_get_image(cursor: PGdkCursor): PGdkPixbuf; cdecl; external LazGdk3_library name 'gdk_cursor_get_image';
function gdk_cursor_get_surface(cursor: PGdkCursor; x_hot: Pgdouble; y_hot: Pgdouble): Pcairo_surface_t; cdecl; external LazGdk3_library name 'gdk_cursor_get_surface';
function gdk_cursor_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_cursor_get_type';
function gdk_cursor_new_for_display(display: PGdkDisplay; cursor_type: TGdkCursorType): PGdkCursor; cdecl; external LazGdk3_library name 'gdk_cursor_new_for_display';
function gdk_cursor_new_from_name(display: PGdkDisplay; name: Pgchar): PGdkCursor; cdecl; external LazGdk3_library name 'gdk_cursor_new_from_name';
function gdk_cursor_new_from_pixbuf(display: PGdkDisplay; pixbuf: PGdkPixbuf; x: gint; y: gint): PGdkCursor; cdecl; external LazGdk3_library name 'gdk_cursor_new_from_pixbuf';
function gdk_cursor_new_from_surface(display: PGdkDisplay; surface: Pcairo_surface_t; x: gdouble; y: gdouble): PGdkCursor; cdecl; external LazGdk3_library name 'gdk_cursor_new_from_surface';
function gdk_device_get_associated_device(device: PGdkDevice): PGdkDevice; cdecl; external LazGdk3_library name 'gdk_device_get_associated_device';
function gdk_device_get_axes(device: PGdkDevice): TGdkAxisFlags; cdecl; external LazGdk3_library name 'gdk_device_get_axes';
function gdk_device_get_axis(device: PGdkDevice; axes: Pgdouble; use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_device_get_axis';
function gdk_device_get_axis_use(device: PGdkDevice; index_: guint): TGdkAxisUse; cdecl; external LazGdk3_library name 'gdk_device_get_axis_use';
function gdk_device_get_axis_value(device: PGdkDevice; axes: Pgdouble; axis_label: PGdkAtom; value: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_device_get_axis_value';
function gdk_device_get_device_type(device: PGdkDevice): TGdkDeviceType; cdecl; external LazGdk3_library name 'gdk_device_get_device_type';
function gdk_device_get_display(device: PGdkDevice): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_device_get_display';
function gdk_device_get_has_cursor(device: PGdkDevice): gboolean; cdecl; external LazGdk3_library name 'gdk_device_get_has_cursor';
function gdk_device_get_history(device: PGdkDevice; window: PGdkWindow; start: guint32; stop: guint32; events: PPPGdkTimeCoord; n_events: Pgint): gboolean; cdecl; external LazGdk3_library name 'gdk_device_get_history';
function gdk_device_get_key(device: PGdkDevice; index_: guint; keyval: Pguint; modifiers: PGdkModifierType): gboolean; cdecl; external LazGdk3_library name 'gdk_device_get_key';
function gdk_device_get_last_event_window(device: PGdkDevice): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_device_get_last_event_window';
function gdk_device_get_mode(device: PGdkDevice): TGdkInputMode; cdecl; external LazGdk3_library name 'gdk_device_get_mode';
function gdk_device_get_n_axes(device: PGdkDevice): gint; cdecl; external LazGdk3_library name 'gdk_device_get_n_axes';
function gdk_device_get_n_keys(device: PGdkDevice): gint; cdecl; external LazGdk3_library name 'gdk_device_get_n_keys';
function gdk_device_get_name(device: PGdkDevice): Pgchar; cdecl; external LazGdk3_library name 'gdk_device_get_name';
function gdk_device_get_product_id(device: PGdkDevice): Pgchar; cdecl; external LazGdk3_library name 'gdk_device_get_product_id';
function gdk_device_get_seat(device: PGdkDevice): PGdkSeat; cdecl; external LazGdk3_library name 'gdk_device_get_seat';
function gdk_device_get_source(device: PGdkDevice): TGdkInputSource; cdecl; external LazGdk3_library name 'gdk_device_get_source';
function gdk_device_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_device_get_type';
function gdk_device_get_vendor_id(device: PGdkDevice): Pgchar; cdecl; external LazGdk3_library name 'gdk_device_get_vendor_id';
function gdk_device_get_window_at_position(device: PGdkDevice; win_x: Pgint; win_y: Pgint): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_device_get_window_at_position';
function gdk_device_get_window_at_position_double(device: PGdkDevice; win_x: Pgdouble; win_y: Pgdouble): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_device_get_window_at_position_double';
function gdk_device_list_axes(device: PGdkDevice): PGList; cdecl; external LazGdk3_library name 'gdk_device_list_axes';
function gdk_device_list_slave_devices(device: PGdkDevice): PGList; cdecl; external LazGdk3_library name 'gdk_device_list_slave_devices';
function gdk_device_manager_get_display(device_manager: PGdkDeviceManager): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_device_manager_get_display';
function gdk_device_manager_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_device_manager_get_type';
function gdk_device_pad_get_feature_group(pad: PGdkDevicePad; feature: TGdkDevicePadFeature; feature_idx: gint): gint; cdecl; external LazGdk3_library name 'gdk_device_pad_get_feature_group';
function gdk_device_pad_get_group_n_modes(pad: PGdkDevicePad; group_idx: gint): gint; cdecl; external LazGdk3_library name 'gdk_device_pad_get_group_n_modes';
function gdk_device_pad_get_n_features(pad: PGdkDevicePad; feature: TGdkDevicePadFeature): gint; cdecl; external LazGdk3_library name 'gdk_device_pad_get_n_features';
function gdk_device_pad_get_n_groups(pad: PGdkDevicePad): gint; cdecl; external LazGdk3_library name 'gdk_device_pad_get_n_groups';
function gdk_device_pad_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_device_pad_get_type';
function gdk_device_set_mode(device: PGdkDevice; mode: TGdkInputMode): gboolean; cdecl; external LazGdk3_library name 'gdk_device_set_mode';
function gdk_device_tool_get_hardware_id(tool: PGdkDeviceTool): guint64; cdecl; external LazGdk3_library name 'gdk_device_tool_get_hardware_id';
function gdk_device_tool_get_serial(tool: PGdkDeviceTool): guint64; cdecl; external LazGdk3_library name 'gdk_device_tool_get_serial';
function gdk_device_tool_get_tool_type(tool: PGdkDeviceTool): TGdkDeviceToolType; cdecl; external LazGdk3_library name 'gdk_device_tool_get_tool_type';
function gdk_device_tool_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_device_tool_get_type';
function gdk_display_device_is_grabbed(display: PGdkDisplay; device: PGdkDevice): gboolean; cdecl; external LazGdk3_library name 'gdk_display_device_is_grabbed';
function gdk_display_get_app_launch_context(display: PGdkDisplay): PGdkAppLaunchContext; cdecl; external LazGdk3_library name 'gdk_display_get_app_launch_context';
function gdk_display_get_default: PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_display_get_default';
function gdk_display_get_default_cursor_size(display: PGdkDisplay): guint; cdecl; external LazGdk3_library name 'gdk_display_get_default_cursor_size';
function gdk_display_get_default_group(display: PGdkDisplay): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_display_get_default_group';
function gdk_display_get_default_screen(display: PGdkDisplay): PGdkScreen; cdecl; external LazGdk3_library name 'gdk_display_get_default_screen';
function gdk_display_get_default_seat(display: PGdkDisplay): PGdkSeat; cdecl; external LazGdk3_library name 'gdk_display_get_default_seat';
function gdk_display_get_event(display: PGdkDisplay): PGdkEvent; cdecl; external LazGdk3_library name 'gdk_display_get_event';
function gdk_display_get_monitor(display: PGdkDisplay; monitor_num: gint): PGdkMonitor; cdecl; external LazGdk3_library name 'gdk_display_get_monitor';
function gdk_display_get_monitor_at_point(display: PGdkDisplay; x: gint; y: gint): PGdkMonitor; cdecl; external LazGdk3_library name 'gdk_display_get_monitor_at_point';
function gdk_display_get_monitor_at_window(display: PGdkDisplay; window: PGdkWindow): PGdkMonitor; cdecl; external LazGdk3_library name 'gdk_display_get_monitor_at_window';
function gdk_display_get_n_monitors(display: PGdkDisplay): gint; cdecl; external LazGdk3_library name 'gdk_display_get_n_monitors';
function gdk_display_get_name(display: PGdkDisplay): Pgchar; cdecl; external LazGdk3_library name 'gdk_display_get_name';
function gdk_display_get_primary_monitor(display: PGdkDisplay): PGdkMonitor; cdecl; external LazGdk3_library name 'gdk_display_get_primary_monitor';
function gdk_display_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_display_get_type';
function gdk_display_has_pending(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_has_pending';
function gdk_display_is_closed(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_is_closed';
function gdk_display_list_seats(display: PGdkDisplay): PGList; cdecl; external LazGdk3_library name 'gdk_display_list_seats';
function gdk_display_manager_get: PGdkDisplayManager; cdecl; external LazGdk3_library name 'gdk_display_manager_get';
function gdk_display_manager_get_default_display(manager: PGdkDisplayManager): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_display_manager_get_default_display';
function gdk_display_manager_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_display_manager_get_type';
function gdk_display_manager_list_displays(manager: PGdkDisplayManager): PGSList; cdecl; external LazGdk3_library name 'gdk_display_manager_list_displays';
function gdk_display_manager_open_display(manager: PGdkDisplayManager; name: Pgchar): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_display_manager_open_display';
function gdk_display_open(display_name: Pgchar): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_display_open';
function gdk_display_peek_event(display: PGdkDisplay): PGdkEvent; cdecl; external LazGdk3_library name 'gdk_display_peek_event';
function gdk_display_request_selection_notification(display: PGdkDisplay; selection: PGdkAtom): gboolean; cdecl; external LazGdk3_library name 'gdk_display_request_selection_notification';
function gdk_display_supports_clipboard_persistence(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_supports_clipboard_persistence';
function gdk_display_supports_cursor_alpha(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_supports_cursor_alpha';
function gdk_display_supports_cursor_color(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_supports_cursor_color';
function gdk_display_supports_input_shapes(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_supports_input_shapes';
function gdk_display_supports_selection_notification(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_supports_selection_notification';
function gdk_display_supports_shapes(display: PGdkDisplay): gboolean; cdecl; external LazGdk3_library name 'gdk_display_supports_shapes';
function gdk_drag_begin(window: PGdkWindow; targets: PGList): PGdkDragContext; cdecl; external LazGdk3_library name 'gdk_drag_begin';
function gdk_drag_begin_for_device(window: PGdkWindow; device: PGdkDevice; targets: PGList): PGdkDragContext; cdecl; external LazGdk3_library name 'gdk_drag_begin_for_device';
function gdk_drag_begin_from_point(window: PGdkWindow; device: PGdkDevice; targets: PGList; x_root: gint; y_root: gint): PGdkDragContext; cdecl; external LazGdk3_library name 'gdk_drag_begin_from_point';
function gdk_drag_context_get_actions(context: PGdkDragContext): TGdkDragAction; cdecl; external LazGdk3_library name 'gdk_drag_context_get_actions';
function gdk_drag_context_get_dest_window(context: PGdkDragContext): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_drag_context_get_dest_window';
function gdk_drag_context_get_device(context: PGdkDragContext): PGdkDevice; cdecl; external LazGdk3_library name 'gdk_drag_context_get_device';
function gdk_drag_context_get_drag_window(context: PGdkDragContext): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_drag_context_get_drag_window';
function gdk_drag_context_get_protocol(context: PGdkDragContext): TGdkDragProtocol; cdecl; external LazGdk3_library name 'gdk_drag_context_get_protocol';
function gdk_drag_context_get_selected_action(context: PGdkDragContext): TGdkDragAction; cdecl; external LazGdk3_library name 'gdk_drag_context_get_selected_action';
function gdk_drag_context_get_source_window(context: PGdkDragContext): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_drag_context_get_source_window';
function gdk_drag_context_get_suggested_action(context: PGdkDragContext): TGdkDragAction; cdecl; external LazGdk3_library name 'gdk_drag_context_get_suggested_action';
function gdk_drag_context_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_drag_context_get_type';
function gdk_drag_context_list_targets(context: PGdkDragContext): PGList; cdecl; external LazGdk3_library name 'gdk_drag_context_list_targets';
function gdk_drag_context_manage_dnd(context: PGdkDragContext; ipc_window: PGdkWindow; actions: TGdkDragAction): gboolean; cdecl; external LazGdk3_library name 'gdk_drag_context_manage_dnd';
function gdk_drag_drop_succeeded(context: PGdkDragContext): gboolean; cdecl; external LazGdk3_library name 'gdk_drag_drop_succeeded';
function gdk_drag_get_selection(context: PGdkDragContext): PGdkAtom; cdecl; external LazGdk3_library name 'gdk_drag_get_selection';
function gdk_drag_motion(context: PGdkDragContext; dest_window: PGdkWindow; protocol: TGdkDragProtocol; x_root: gint; y_root: gint; suggested_action: TGdkDragAction; possible_actions: TGdkDragAction; time_: guint32): gboolean; cdecl; external LazGdk3_library name 'gdk_drag_motion';
function gdk_drawing_context_get_cairo_context(context: PGdkDrawingContext): Pcairo_t; cdecl; external LazGdk3_library name 'gdk_drawing_context_get_cairo_context';
function gdk_drawing_context_get_clip(context: PGdkDrawingContext): Pcairo_region_t; cdecl; external LazGdk3_library name 'gdk_drawing_context_get_clip';
function gdk_drawing_context_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_drawing_context_get_type';
function gdk_drawing_context_get_window(context: PGdkDrawingContext): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_drawing_context_get_window';
function gdk_drawing_context_is_valid(context: PGdkDrawingContext): gboolean; cdecl; external LazGdk3_library name 'gdk_drawing_context_is_valid';
function gdk_error_trap_pop: gint; cdecl; external LazGdk3_library name 'gdk_error_trap_pop';
function gdk_event_copy(event: PGdkEvent): PGdkEvent; cdecl; external LazGdk3_library name 'gdk_event_copy';
function gdk_event_get: PGdkEvent; cdecl; external LazGdk3_library name 'gdk_event_get';
function gdk_event_get_axis(event: PGdkEvent; axis_use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_axis';
function gdk_event_get_button(event: PGdkEvent; button: Pguint): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_button';
function gdk_event_get_click_count(event: PGdkEvent; click_count: Pguint): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_click_count';
function gdk_event_get_coords(event: PGdkEvent; x_win: Pgdouble; y_win: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_coords';
function gdk_event_get_device(event: PGdkEvent): PGdkDevice; cdecl; external LazGdk3_library name 'gdk_event_get_device';
function gdk_event_get_device_tool(event: PGdkEvent): PGdkDeviceTool; cdecl; external LazGdk3_library name 'gdk_event_get_device_tool';
function gdk_event_get_event_sequence(event: PGdkEvent): PGdkEventSequence; cdecl; external LazGdk3_library name 'gdk_event_get_event_sequence';
function gdk_event_get_event_type(event: PGdkEvent): TGdkEventType; cdecl; external LazGdk3_library name 'gdk_event_get_event_type';
function gdk_event_get_keycode(event: PGdkEvent; keycode: Pguint16): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_keycode';
function gdk_event_get_keyval(event: PGdkEvent; keyval: Pguint): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_keyval';
function gdk_event_get_pointer_emulated(event: PGdkEvent): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_pointer_emulated';
function gdk_event_get_root_coords(event: PGdkEvent; x_root: Pgdouble; y_root: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_root_coords';
function gdk_event_get_scancode(event: PGdkEvent): gint; cdecl; external LazGdk3_library name 'gdk_event_get_scancode';
function gdk_event_get_screen(event: PGdkEvent): PGdkScreen; cdecl; external LazGdk3_library name 'gdk_event_get_screen';
function gdk_event_get_scroll_deltas(event: PGdkEvent; delta_x: Pgdouble; delta_y: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_scroll_deltas';
function gdk_event_get_scroll_direction(event: PGdkEvent; direction: PGdkScrollDirection): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_scroll_direction';
function gdk_event_get_seat(event: PGdkEvent): PGdkSeat; cdecl; external LazGdk3_library name 'gdk_event_get_seat';
function gdk_event_get_source_device(event: PGdkEvent): PGdkDevice; cdecl; external LazGdk3_library name 'gdk_event_get_source_device';
function gdk_event_get_state(event: PGdkEvent; state: PGdkModifierType): gboolean; cdecl; external LazGdk3_library name 'gdk_event_get_state';
function gdk_event_get_time(event: PGdkEvent): guint32; cdecl; external LazGdk3_library name 'gdk_event_get_time';
function gdk_event_get_window(event: PGdkEvent): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_event_get_window';
function gdk_event_is_scroll_stop_event(event: PGdkEvent): gboolean; cdecl; external LazGdk3_library name 'gdk_event_is_scroll_stop_event';
function gdk_event_new(type_: TGdkEventType): PGdkEvent; cdecl; external LazGdk3_library name 'gdk_event_new';
function gdk_event_peek: PGdkEvent; cdecl; external LazGdk3_library name 'gdk_event_peek';
function gdk_event_sequence_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_event_sequence_get_type';
function gdk_event_triggers_context_menu(event: PGdkEvent): gboolean; cdecl; external LazGdk3_library name 'gdk_event_triggers_context_menu';
function gdk_events_get_angle(event1: PGdkEvent; event2: PGdkEvent; angle: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_events_get_angle';
function gdk_events_get_center(event1: PGdkEvent; event2: PGdkEvent; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_events_get_center';
function gdk_events_get_distance(event1: PGdkEvent; event2: PGdkEvent; distance: Pgdouble): gboolean; cdecl; external LazGdk3_library name 'gdk_events_get_distance';
function gdk_events_pending: gboolean; cdecl; external LazGdk3_library name 'gdk_events_pending';
function gdk_frame_clock_get_current_timings(frame_clock: PGdkFrameClock): PGdkFrameTimings; cdecl; external LazGdk3_library name 'gdk_frame_clock_get_current_timings';
function gdk_frame_clock_get_frame_counter(frame_clock: PGdkFrameClock): gint64; cdecl; external LazGdk3_library name 'gdk_frame_clock_get_frame_counter';
function gdk_frame_clock_get_frame_time(frame_clock: PGdkFrameClock): gint64; cdecl; external LazGdk3_library name 'gdk_frame_clock_get_frame_time';
function gdk_frame_clock_get_history_start(frame_clock: PGdkFrameClock): gint64; cdecl; external LazGdk3_library name 'gdk_frame_clock_get_history_start';
function gdk_frame_clock_get_timings(frame_clock: PGdkFrameClock; frame_counter: gint64): PGdkFrameTimings; cdecl; external LazGdk3_library name 'gdk_frame_clock_get_timings';
function gdk_frame_clock_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_frame_clock_get_type';
function gdk_frame_timings_get_complete(timings: PGdkFrameTimings): gboolean; cdecl; external LazGdk3_library name 'gdk_frame_timings_get_complete';
function gdk_frame_timings_get_frame_counter(timings: PGdkFrameTimings): gint64; cdecl; external LazGdk3_library name 'gdk_frame_timings_get_frame_counter';
function gdk_frame_timings_get_frame_time(timings: PGdkFrameTimings): gint64; cdecl; external LazGdk3_library name 'gdk_frame_timings_get_frame_time';
function gdk_frame_timings_get_predicted_presentation_time(timings: PGdkFrameTimings): gint64; cdecl; external LazGdk3_library name 'gdk_frame_timings_get_predicted_presentation_time';
function gdk_frame_timings_get_presentation_time(timings: PGdkFrameTimings): gint64; cdecl; external LazGdk3_library name 'gdk_frame_timings_get_presentation_time';
function gdk_frame_timings_get_refresh_interval(timings: PGdkFrameTimings): gint64; cdecl; external LazGdk3_library name 'gdk_frame_timings_get_refresh_interval';
function gdk_frame_timings_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_frame_timings_get_type';
function gdk_frame_timings_ref(timings: PGdkFrameTimings): PGdkFrameTimings; cdecl; external LazGdk3_library name 'gdk_frame_timings_ref';
function gdk_get_default_root_window: PGdkWindow; cdecl; external LazGdk3_library name 'gdk_get_default_root_window';
function gdk_get_display_arg_name: Pgchar; cdecl; external LazGdk3_library name 'gdk_get_display_arg_name';
function gdk_get_program_class: Pgchar; cdecl; external LazGdk3_library name 'gdk_get_program_class';
function gdk_get_show_events: gboolean; cdecl; external LazGdk3_library name 'gdk_get_show_events';
function gdk_gl_context_get_current: PGdkGLContext; cdecl; external LazGdk3_library name 'gdk_gl_context_get_current';
function gdk_gl_context_get_debug_enabled(context: PGdkGLContext): gboolean; cdecl; external LazGdk3_library name 'gdk_gl_context_get_debug_enabled';
function gdk_gl_context_get_display(context: PGdkGLContext): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_gl_context_get_display';
function gdk_gl_context_get_forward_compatible(context: PGdkGLContext): gboolean; cdecl; external LazGdk3_library name 'gdk_gl_context_get_forward_compatible';
function gdk_gl_context_get_shared_context(context: PGdkGLContext): PGdkGLContext; cdecl; external LazGdk3_library name 'gdk_gl_context_get_shared_context';
function gdk_gl_context_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_gl_context_get_type';
function gdk_gl_context_get_use_es(context: PGdkGLContext): gboolean; cdecl; external LazGdk3_library name 'gdk_gl_context_get_use_es';
function gdk_gl_context_get_window(context: PGdkGLContext): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_gl_context_get_window';
function gdk_gl_context_is_legacy(context: PGdkGLContext): gboolean; cdecl; external LazGdk3_library name 'gdk_gl_context_is_legacy';
function gdk_gl_context_realize(context: PGdkGLContext; error: PPGError): gboolean; cdecl; external LazGdk3_library name 'gdk_gl_context_realize';
function gdk_gl_error_quark: TGQuark; cdecl; external LazGdk3_library name 'gdk_gl_error_quark';
function gdk_init_check(argc: Pgint; argv: PPPgchar): gboolean; cdecl; external LazGdk3_library name 'gdk_init_check';
function gdk_keymap_get_caps_lock_state(keymap: PGdkKeymap): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_get_caps_lock_state';
function gdk_keymap_get_direction(keymap: PGdkKeymap): TPangoDirection; cdecl; external LazGdk3_library name 'gdk_keymap_get_direction';
function gdk_keymap_get_entries_for_keycode(keymap: PGdkKeymap; hardware_keycode: guint; keys: PPGdkKeymapKey; keyvals: PPguint; n_entries: Pgint): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_get_entries_for_keycode';
function gdk_keymap_get_entries_for_keyval(keymap: PGdkKeymap; keyval: guint; keys: PPGdkKeymapKey; n_keys: Pgint): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_get_entries_for_keyval';
function gdk_keymap_get_for_display(display: PGdkDisplay): PGdkKeymap; cdecl; external LazGdk3_library name 'gdk_keymap_get_for_display';
function gdk_keymap_get_modifier_mask(keymap: PGdkKeymap; intent: TGdkModifierIntent): TGdkModifierType; cdecl; external LazGdk3_library name 'gdk_keymap_get_modifier_mask';
function gdk_keymap_get_modifier_state(keymap: PGdkKeymap): TGdkModifierType; cdecl; external LazGdk3_library name 'gdk_keymap_get_modifier_state';
function gdk_keymap_get_num_lock_state(keymap: PGdkKeymap): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_get_num_lock_state';
function gdk_keymap_get_scroll_lock_state(keymap: PGdkKeymap): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_get_scroll_lock_state';
function gdk_keymap_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_keymap_get_type';
function gdk_keymap_have_bidi_layouts(keymap: PGdkKeymap): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_have_bidi_layouts';
function gdk_keymap_lookup_key(keymap: PGdkKeymap; key: PGdkKeymapKey): guint; cdecl; external LazGdk3_library name 'gdk_keymap_lookup_key';
function gdk_keymap_map_virtual_modifiers(keymap: PGdkKeymap; state: PGdkModifierType): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_map_virtual_modifiers';
function gdk_keymap_translate_keyboard_state(keymap: PGdkKeymap; hardware_keycode: guint; state: TGdkModifierType; group: gint; keyval: Pguint; effective_group: Pgint; level: Pgint; consumed_modifiers: PGdkModifierType): gboolean; cdecl; external LazGdk3_library name 'gdk_keymap_translate_keyboard_state';
function gdk_keyval_from_name(keyval_name: Pgchar): guint; cdecl; external LazGdk3_library name 'gdk_keyval_from_name';
function gdk_keyval_is_lower(keyval: guint): gboolean; cdecl; external LazGdk3_library name 'gdk_keyval_is_lower';
function gdk_keyval_is_upper(keyval: guint): gboolean; cdecl; external LazGdk3_library name 'gdk_keyval_is_upper';
function gdk_keyval_name(keyval: guint): Pgchar; cdecl; external LazGdk3_library name 'gdk_keyval_name';
function gdk_keyval_to_lower(keyval: guint): guint; cdecl; external LazGdk3_library name 'gdk_keyval_to_lower';
function gdk_keyval_to_unicode(keyval: guint): guint32; cdecl; external LazGdk3_library name 'gdk_keyval_to_unicode';
function gdk_keyval_to_upper(keyval: guint): guint; cdecl; external LazGdk3_library name 'gdk_keyval_to_upper';
function gdk_monitor_get_display(monitor: PGdkMonitor): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_monitor_get_display';
function gdk_monitor_get_height_mm(monitor: PGdkMonitor): gint; cdecl; external LazGdk3_library name 'gdk_monitor_get_height_mm';
function gdk_monitor_get_manufacturer(monitor: PGdkMonitor): Pgchar; cdecl; external LazGdk3_library name 'gdk_monitor_get_manufacturer';
function gdk_monitor_get_model(monitor: PGdkMonitor): Pgchar; cdecl; external LazGdk3_library name 'gdk_monitor_get_model';
function gdk_monitor_get_refresh_rate(monitor: PGdkMonitor): gint; cdecl; external LazGdk3_library name 'gdk_monitor_get_refresh_rate';
function gdk_monitor_get_scale_factor(monitor: PGdkMonitor): gint; cdecl; external LazGdk3_library name 'gdk_monitor_get_scale_factor';
function gdk_monitor_get_subpixel_layout(monitor: PGdkMonitor): TGdkSubpixelLayout; cdecl; external LazGdk3_library name 'gdk_monitor_get_subpixel_layout';
function gdk_monitor_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_monitor_get_type';
function gdk_monitor_get_width_mm(monitor: PGdkMonitor): gint; cdecl; external LazGdk3_library name 'gdk_monitor_get_width_mm';
function gdk_monitor_is_primary(monitor: PGdkMonitor): gboolean; cdecl; external LazGdk3_library name 'gdk_monitor_is_primary';
function gdk_offscreen_window_get_embedder(window: PGdkWindow): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_offscreen_window_get_embedder';
function gdk_offscreen_window_get_surface(window: PGdkWindow): Pcairo_surface_t; cdecl; external LazGdk3_library name 'gdk_offscreen_window_get_surface';
function gdk_pango_context_get: PPangoContext; cdecl; external LazGdk3_library name 'gdk_pango_context_get';
function gdk_pango_context_get_for_display(display: PGdkDisplay): PPangoContext; cdecl; external LazGdk3_library name 'gdk_pango_context_get_for_display';
function gdk_pango_context_get_for_screen(screen: PGdkScreen): PPangoContext; cdecl; external LazGdk3_library name 'gdk_pango_context_get_for_screen';
function gdk_pango_layout_get_clip_region(layout: PPangoLayout; x_origin: gint; y_origin: gint; index_ranges: Pgint; n_ranges: gint): Pcairo_region_t; cdecl; external LazGdk3_library name 'gdk_pango_layout_get_clip_region';
function gdk_pango_layout_line_get_clip_region(line: PPangoLayoutLine; x_origin: gint; y_origin: gint; index_ranges: Pgint; n_ranges: gint): Pcairo_region_t; cdecl; external LazGdk3_library name 'gdk_pango_layout_line_get_clip_region';
function gdk_pixbuf_get_from_surface(surface: Pcairo_surface_t; src_x: gint; src_y: gint; width: gint; height: gint): PGdkPixbuf; cdecl; external LazGdk3_library name 'gdk_pixbuf_get_from_surface';
function gdk_pixbuf_get_from_window(window: PGdkWindow; src_x: gint; src_y: gint; width: gint; height: gint): PGdkPixbuf; cdecl; external LazGdk3_library name 'gdk_pixbuf_get_from_window';
function gdk_property_get(window: PGdkWindow; property_: PGdkAtom; type_: PGdkAtom; offset: gulong; length: gulong; pdelete: gint; actual_property_type: PGdkAtom; actual_format: Pgint; actual_length: Pgint; data: PPguint8): gboolean; cdecl; external LazGdk3_library name 'gdk_property_get';
function gdk_rectangle_equal(rect1: PGdkRectangle; rect2: PGdkRectangle): gboolean; cdecl; external LazGdk3_library name 'gdk_rectangle_equal';
function gdk_rectangle_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_rectangle_get_type';
function gdk_rectangle_intersect(src1: PGdkRectangle; src2: PGdkRectangle; dest: PGdkRectangle): gboolean; cdecl; external LazGdk3_library name 'gdk_rectangle_intersect';
function gdk_rgba_copy(rgba: PGdkRGBA): PGdkRGBA; cdecl; external LazGdk3_library name 'gdk_rgba_copy';
function gdk_rgba_equal(p1: PGdkRGBA; p2: PGdkRGBA): gboolean; cdecl; external LazGdk3_library name 'gdk_rgba_equal';
function gdk_rgba_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_rgba_get_type';
function gdk_rgba_hash(p: PGdkRGBA): guint; cdecl; external LazGdk3_library name 'gdk_rgba_hash';
function gdk_rgba_parse(rgba: PGdkRGBA; spec: Pgchar): gboolean; cdecl; external LazGdk3_library name 'gdk_rgba_parse';
function gdk_rgba_to_string(rgba: PGdkRGBA): Pgchar; cdecl; external LazGdk3_library name 'gdk_rgba_to_string';
function gdk_screen_get_default: PGdkScreen; cdecl; external LazGdk3_library name 'gdk_screen_get_default';
function gdk_screen_get_display(screen: PGdkScreen): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_screen_get_display';
function gdk_screen_get_font_options(screen: PGdkScreen): Pcairo_font_options_t; cdecl; external LazGdk3_library name 'gdk_screen_get_font_options';
function gdk_screen_get_resolution(screen: PGdkScreen): gdouble; cdecl; external LazGdk3_library name 'gdk_screen_get_resolution';
function gdk_screen_get_rgba_visual(screen: PGdkScreen): PGdkVisual; cdecl; external LazGdk3_library name 'gdk_screen_get_rgba_visual';
function gdk_screen_get_root_window(screen: PGdkScreen): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_screen_get_root_window';
function gdk_screen_get_setting(screen: PGdkScreen; name: Pgchar; value: PGValue): gboolean; cdecl; external LazGdk3_library name 'gdk_screen_get_setting';
function gdk_screen_get_system_visual(screen: PGdkScreen): PGdkVisual; cdecl; external LazGdk3_library name 'gdk_screen_get_system_visual';
function gdk_screen_get_toplevel_windows(screen: PGdkScreen): PGList; cdecl; external LazGdk3_library name 'gdk_screen_get_toplevel_windows';
function gdk_screen_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_screen_get_type';
function gdk_screen_get_window_stack(screen: PGdkScreen): PGList; cdecl; external LazGdk3_library name 'gdk_screen_get_window_stack';
function gdk_screen_is_composited(screen: PGdkScreen): gboolean; cdecl; external LazGdk3_library name 'gdk_screen_is_composited';
function gdk_screen_list_visuals(screen: PGdkScreen): PGList; cdecl; external LazGdk3_library name 'gdk_screen_list_visuals';
function gdk_seat_get_capabilities(seat: PGdkSeat): TGdkSeatCapabilities; cdecl; external LazGdk3_library name 'gdk_seat_get_capabilities';
function gdk_seat_get_display(seat: PGdkSeat): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_seat_get_display';
function gdk_seat_get_keyboard(seat: PGdkSeat): PGdkDevice; cdecl; external LazGdk3_library name 'gdk_seat_get_keyboard';
function gdk_seat_get_pointer(seat: PGdkSeat): PGdkDevice; cdecl; external LazGdk3_library name 'gdk_seat_get_pointer';
function gdk_seat_get_slaves(seat: PGdkSeat; capabilities: TGdkSeatCapabilities): PGList; cdecl; external LazGdk3_library name 'gdk_seat_get_slaves';
function gdk_seat_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_seat_get_type';
function gdk_seat_grab(seat: PGdkSeat; window: PGdkWindow; capabilities: TGdkSeatCapabilities; owner_events: gboolean; cursor: PGdkCursor; event: PGdkEvent; prepare_func: TGdkSeatGrabPrepareFunc; prepare_func_data: gpointer): TGdkGrabStatus; cdecl; external LazGdk3_library name 'gdk_seat_grab';
function gdk_selection_owner_get(selection: PGdkAtom): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_selection_owner_get';
function gdk_selection_owner_get_for_display(display: PGdkDisplay; selection: PGdkAtom): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_selection_owner_get_for_display';
function gdk_selection_owner_set(owner: PGdkWindow; selection: PGdkAtom; time_: guint32; send_event: gboolean): gboolean; cdecl; external LazGdk3_library name 'gdk_selection_owner_set';
function gdk_selection_owner_set_for_display(display: PGdkDisplay; owner: PGdkWindow; selection: PGdkAtom; time_: guint32; send_event: gboolean): gboolean; cdecl; external LazGdk3_library name 'gdk_selection_owner_set_for_display';
function gdk_selection_property_get(requestor: PGdkWindow; data: PPguint8; prop_type: PGdkAtom; prop_format: Pgint): gint; cdecl; external LazGdk3_library name 'gdk_selection_property_get';
function gdk_setting_get(name: Pgchar; value: PGValue): gboolean; cdecl; external LazGdk3_library name 'gdk_setting_get';
function gdk_test_simulate_button(window: PGdkWindow; x: gint; y: gint; button: guint; modifiers: TGdkModifierType; button_pressrelease: TGdkEventType): gboolean; cdecl; external LazGdk3_library name 'gdk_test_simulate_button';
function gdk_test_simulate_key(window: PGdkWindow; x: gint; y: gint; keyval: guint; modifiers: TGdkModifierType; key_pressrelease: TGdkEventType): gboolean; cdecl; external LazGdk3_library name 'gdk_test_simulate_key';
function gdk_text_property_to_utf8_list_for_display(display: PGdkDisplay; encoding: PGdkAtom; format: gint; text: Pguint8; length: gint; list: PPPgchar): gint; cdecl; external LazGdk3_library name 'gdk_text_property_to_utf8_list_for_display';
function gdk_threads_add_idle(function_: TGSourceFunc; data: gpointer): guint; cdecl; external LazGdk3_library name 'gdk_threads_add_idle';
function gdk_threads_add_idle_full(priority: gint; function_: TGSourceFunc; data: gpointer; notify: TGDestroyNotify): guint; cdecl; external LazGdk3_library name 'gdk_threads_add_idle_full';
function gdk_threads_add_timeout(interval: guint; function_: TGSourceFunc; data: gpointer): guint; cdecl; external LazGdk3_library name 'gdk_threads_add_timeout';
function gdk_threads_add_timeout_full(priority: gint; interval: guint; function_: TGSourceFunc; data: gpointer; notify: TGDestroyNotify): guint; cdecl; external LazGdk3_library name 'gdk_threads_add_timeout_full';
function gdk_threads_add_timeout_seconds(interval: guint; function_: TGSourceFunc; data: gpointer): guint; cdecl; external LazGdk3_library name 'gdk_threads_add_timeout_seconds';
function gdk_threads_add_timeout_seconds_full(priority: gint; interval: guint; function_: TGSourceFunc; data: gpointer; notify: TGDestroyNotify): guint; cdecl; external LazGdk3_library name 'gdk_threads_add_timeout_seconds_full';
function gdk_unicode_to_keyval(wc: guint32): guint; cdecl; external LazGdk3_library name 'gdk_unicode_to_keyval';
function gdk_utf8_to_string_target(str: Pgchar): Pgchar; cdecl; external LazGdk3_library name 'gdk_utf8_to_string_target';
function gdk_visual_get_depth(visual: PGdkVisual): gint; cdecl; external LazGdk3_library name 'gdk_visual_get_depth';
function gdk_visual_get_screen(visual: PGdkVisual): PGdkScreen; cdecl; external LazGdk3_library name 'gdk_visual_get_screen';
function gdk_visual_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_visual_get_type';
function gdk_visual_get_visual_type(visual: PGdkVisual): TGdkVisualType; cdecl; external LazGdk3_library name 'gdk_visual_get_visual_type';
function gdk_window_begin_draw_frame(window: PGdkWindow; region: Pcairo_region_t): PGdkDrawingContext; cdecl; external LazGdk3_library name 'gdk_window_begin_draw_frame';
function gdk_window_create_gl_context(window: PGdkWindow; error: PPGError): PGdkGLContext; cdecl; external LazGdk3_library name 'gdk_window_create_gl_context';
function gdk_window_create_similar_image_surface(window: PGdkWindow; format: Tcairo_format_t; width: gint; height: gint; scale: gint): Pcairo_surface_t; cdecl; external LazGdk3_library name 'gdk_window_create_similar_image_surface';
function gdk_window_create_similar_surface(window: PGdkWindow; content: Tcairo_content_t; width: gint; height: gint): Pcairo_surface_t; cdecl; external LazGdk3_library name 'gdk_window_create_similar_surface';
function gdk_window_ensure_native(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_ensure_native';
function gdk_window_get_accept_focus(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_get_accept_focus';
function gdk_window_get_children(window: PGdkWindow): PGList; cdecl; external LazGdk3_library name 'gdk_window_get_children';
function gdk_window_get_children_with_user_data(window: PGdkWindow; user_data: gpointer): PGList; cdecl; external LazGdk3_library name 'gdk_window_get_children_with_user_data';
function gdk_window_get_clip_region(window: PGdkWindow): Pcairo_region_t; cdecl; external LazGdk3_library name 'gdk_window_get_clip_region';
function gdk_window_get_cursor(window: PGdkWindow): PGdkCursor; cdecl; external LazGdk3_library name 'gdk_window_get_cursor';
function gdk_window_get_decorations(window: PGdkWindow; decorations: PGdkWMDecoration): gboolean; cdecl; external LazGdk3_library name 'gdk_window_get_decorations';
function gdk_window_get_device_cursor(window: PGdkWindow; device: PGdkDevice): PGdkCursor; cdecl; external LazGdk3_library name 'gdk_window_get_device_cursor';
function gdk_window_get_device_events(window: PGdkWindow; device: PGdkDevice): TGdkEventMask; cdecl; external LazGdk3_library name 'gdk_window_get_device_events';
function gdk_window_get_device_position(window: PGdkWindow; device: PGdkDevice; x: Pgint; y: Pgint; mask: PGdkModifierType): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_get_device_position';
function gdk_window_get_device_position_double(window: PGdkWindow; device: PGdkDevice; x: Pgdouble; y: Pgdouble; mask: PGdkModifierType): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_get_device_position_double';
function gdk_window_get_display(window: PGdkWindow): PGdkDisplay; cdecl; external LazGdk3_library name 'gdk_window_get_display';
function gdk_window_get_drag_protocol(window: PGdkWindow; target: PPGdkWindow): TGdkDragProtocol; cdecl; external LazGdk3_library name 'gdk_window_get_drag_protocol';
function gdk_window_get_effective_parent(window: PGdkWindow): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_get_effective_parent';
function gdk_window_get_effective_toplevel(window: PGdkWindow): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_get_effective_toplevel';
function gdk_window_get_event_compression(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_get_event_compression';
function gdk_window_get_events(window: PGdkWindow): TGdkEventMask; cdecl; external LazGdk3_library name 'gdk_window_get_events';
function gdk_window_get_focus_on_map(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_get_focus_on_map';
function gdk_window_get_frame_clock(window: PGdkWindow): PGdkFrameClock; cdecl; external LazGdk3_library name 'gdk_window_get_frame_clock';
function gdk_window_get_fullscreen_mode(window: PGdkWindow): TGdkFullscreenMode; cdecl; external LazGdk3_library name 'gdk_window_get_fullscreen_mode';
function gdk_window_get_group(window: PGdkWindow): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_get_group';
function gdk_window_get_height(window: PGdkWindow): gint; cdecl; external LazGdk3_library name 'gdk_window_get_height';
function gdk_window_get_modal_hint(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_get_modal_hint';
function gdk_window_get_origin(window: PGdkWindow; x: Pgint; y: Pgint): gint; cdecl; external LazGdk3_library name 'gdk_window_get_origin';
function gdk_window_get_parent(window: PGdkWindow): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_get_parent';
function gdk_window_get_pass_through(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_get_pass_through';
function gdk_window_get_scale_factor(window: PGdkWindow): gint; cdecl; external LazGdk3_library name 'gdk_window_get_scale_factor';
function gdk_window_get_screen(window: PGdkWindow): PGdkScreen; cdecl; external LazGdk3_library name 'gdk_window_get_screen';
function gdk_window_get_source_events(window: PGdkWindow; source: TGdkInputSource): TGdkEventMask; cdecl; external LazGdk3_library name 'gdk_window_get_source_events';
function gdk_window_get_state(window: PGdkWindow): TGdkWindowState; cdecl; external LazGdk3_library name 'gdk_window_get_state';
function gdk_window_get_support_multidevice(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_get_support_multidevice';
function gdk_window_get_toplevel(window: PGdkWindow): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_get_toplevel';
function gdk_window_get_type: TGType; cdecl; external LazGdk3_library name 'gdk_window_get_type';
function gdk_window_get_type_hint(window: PGdkWindow): TGdkWindowTypeHint; cdecl; external LazGdk3_library name 'gdk_window_get_type_hint';
function gdk_window_get_update_area(window: PGdkWindow): Pcairo_region_t; cdecl; external LazGdk3_library name 'gdk_window_get_update_area';
function gdk_window_get_visible_region(window: PGdkWindow): Pcairo_region_t; cdecl; external LazGdk3_library name 'gdk_window_get_visible_region';
function gdk_window_get_visual(window: PGdkWindow): PGdkVisual; cdecl; external LazGdk3_library name 'gdk_window_get_visual';
function gdk_window_get_width(window: PGdkWindow): gint; cdecl; external LazGdk3_library name 'gdk_window_get_width';
function gdk_window_get_window_type(window: PGdkWindow): TGdkWindowType; cdecl; external LazGdk3_library name 'gdk_window_get_window_type';
function gdk_window_has_native(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_has_native';
function gdk_window_is_destroyed(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_is_destroyed';
function gdk_window_is_input_only(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_is_input_only';
function gdk_window_is_shaped(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_is_shaped';
function gdk_window_is_viewable(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_is_viewable';
function gdk_window_is_visible(window: PGdkWindow): gboolean; cdecl; external LazGdk3_library name 'gdk_window_is_visible';
function gdk_window_new(parent: PGdkWindow; attributes: PGdkWindowAttr; attributes_mask: TGdkWindowAttributesType): PGdkWindow; cdecl; external LazGdk3_library name 'gdk_window_new';
function gdk_window_peek_children(window: PGdkWindow): PGList; cdecl; external LazGdk3_library name 'gdk_window_peek_children';
function gdk_window_show_window_menu(window: PGdkWindow; event: PGdkEvent): gboolean; cdecl; external LazGdk3_library name 'gdk_window_show_window_menu';
procedure gdk_app_launch_context_set_desktop(context: PGdkAppLaunchContext; desktop: gint); cdecl; external LazGdk3_library name 'gdk_app_launch_context_set_desktop';
procedure gdk_app_launch_context_set_icon(context: PGdkAppLaunchContext; icon: PGIcon); cdecl; external LazGdk3_library name 'gdk_app_launch_context_set_icon';
procedure gdk_app_launch_context_set_icon_name(context: PGdkAppLaunchContext; icon_name: Pgchar); cdecl; external LazGdk3_library name 'gdk_app_launch_context_set_icon_name';
procedure gdk_app_launch_context_set_screen(context: PGdkAppLaunchContext; screen: PGdkScreen); cdecl; external LazGdk3_library name 'gdk_app_launch_context_set_screen';
procedure gdk_app_launch_context_set_timestamp(context: PGdkAppLaunchContext; timestamp: guint32); cdecl; external LazGdk3_library name 'gdk_app_launch_context_set_timestamp';
procedure gdk_beep; cdecl; external LazGdk3_library name 'gdk_beep';
procedure gdk_cairo_draw_from_gl(cr: Pcairo_t; window: PGdkWindow; source: gint; source_type: gint; buffer_scale: gint; x: gint; y: gint; width: gint; height: gint); cdecl; external LazGdk3_library name 'gdk_cairo_draw_from_gl';
procedure gdk_cairo_rectangle(cr: Pcairo_t; rectangle: PGdkRectangle); cdecl; external LazGdk3_library name 'gdk_cairo_rectangle';
procedure gdk_cairo_region(cr: Pcairo_t; region: Pcairo_region_t); cdecl; external LazGdk3_library name 'gdk_cairo_region';
procedure gdk_cairo_set_source_pixbuf(cr: Pcairo_t; pixbuf: PGdkPixbuf; pixbuf_x: gdouble; pixbuf_y: gdouble); cdecl; external LazGdk3_library name 'gdk_cairo_set_source_pixbuf';
procedure gdk_cairo_set_source_rgba(cr: Pcairo_t; rgba: PGdkRGBA); cdecl; external LazGdk3_library name 'gdk_cairo_set_source_rgba';
procedure gdk_cairo_set_source_window(cr: Pcairo_t; window: PGdkWindow; x: gdouble; y: gdouble); cdecl; external LazGdk3_library name 'gdk_cairo_set_source_window';
procedure gdk_device_free_history(events: PPGdkTimeCoord; n_events: gint); cdecl; external LazGdk3_library name 'gdk_device_free_history';
procedure gdk_device_get_position(device: PGdkDevice; screen: PPGdkScreen; x: Pgint; y: Pgint); cdecl; external LazGdk3_library name 'gdk_device_get_position';
procedure gdk_device_get_position_double(device: PGdkDevice; screen: PPGdkScreen; x: Pgdouble; y: Pgdouble); cdecl; external LazGdk3_library name 'gdk_device_get_position_double';
procedure gdk_device_get_state(device: PGdkDevice; window: PGdkWindow; axes: Pgdouble; mask: PGdkModifierType); cdecl; external LazGdk3_library name 'gdk_device_get_state';
procedure gdk_device_set_axis_use(device: PGdkDevice; index_: guint; use: TGdkAxisUse); cdecl; external LazGdk3_library name 'gdk_device_set_axis_use';
procedure gdk_device_set_key(device: PGdkDevice; index_: guint; keyval: guint; modifiers: TGdkModifierType); cdecl; external LazGdk3_library name 'gdk_device_set_key';
procedure gdk_device_warp(device: PGdkDevice; screen: PGdkScreen; x: gint; y: gint); cdecl; external LazGdk3_library name 'gdk_device_warp';
procedure gdk_disable_multidevice; cdecl; external LazGdk3_library name 'gdk_disable_multidevice';
procedure gdk_display_beep(display: PGdkDisplay); cdecl; external LazGdk3_library name 'gdk_display_beep';
procedure gdk_display_close(display: PGdkDisplay); cdecl; external LazGdk3_library name 'gdk_display_close';
procedure gdk_display_flush(display: PGdkDisplay); cdecl; external LazGdk3_library name 'gdk_display_flush';
procedure gdk_display_get_maximal_cursor_size(display: PGdkDisplay; width: Pguint; height: Pguint); cdecl; external LazGdk3_library name 'gdk_display_get_maximal_cursor_size';
procedure gdk_display_manager_set_default_display(manager: PGdkDisplayManager; display: PGdkDisplay); cdecl; external LazGdk3_library name 'gdk_display_manager_set_default_display';
procedure gdk_display_notify_startup_complete(display: PGdkDisplay; startup_id: Pgchar); cdecl; external LazGdk3_library name 'gdk_display_notify_startup_complete';
procedure gdk_display_put_event(display: PGdkDisplay; event: PGdkEvent); cdecl; external LazGdk3_library name 'gdk_display_put_event';
procedure gdk_display_set_double_click_distance(display: PGdkDisplay; distance: guint); cdecl; external LazGdk3_library name 'gdk_display_set_double_click_distance';
procedure gdk_display_set_double_click_time(display: PGdkDisplay; msec: guint); cdecl; external LazGdk3_library name 'gdk_display_set_double_click_time';
procedure gdk_display_store_clipboard(display: PGdkDisplay; clipboard_window: PGdkWindow; time_: guint32; targets: PGdkAtom; n_targets: gint); cdecl; external LazGdk3_library name 'gdk_display_store_clipboard';
procedure gdk_display_sync(display: PGdkDisplay); cdecl; external LazGdk3_library name 'gdk_display_sync';
procedure gdk_drag_abort(context: PGdkDragContext; time_: guint32); cdecl; external LazGdk3_library name 'gdk_drag_abort';
procedure gdk_drag_context_set_device(context: PGdkDragContext; device: PGdkDevice); cdecl; external LazGdk3_library name 'gdk_drag_context_set_device';
procedure gdk_drag_context_set_hotspot(context: PGdkDragContext; hot_x: gint; hot_y: gint); cdecl; external LazGdk3_library name 'gdk_drag_context_set_hotspot';
procedure gdk_drag_drop(context: PGdkDragContext; time_: guint32); cdecl; external LazGdk3_library name 'gdk_drag_drop';
procedure gdk_drag_drop_done(context: PGdkDragContext; success: gboolean); cdecl; external LazGdk3_library name 'gdk_drag_drop_done';
procedure gdk_drag_find_window_for_screen(context: PGdkDragContext; drag_window: PGdkWindow; screen: PGdkScreen; x_root: gint; y_root: gint; dest_window: PPGdkWindow; protocol: PGdkDragProtocol); cdecl; external LazGdk3_library name 'gdk_drag_find_window_for_screen';
procedure gdk_drag_status(context: PGdkDragContext; action: TGdkDragAction; time_: guint32); cdecl; external LazGdk3_library name 'gdk_drag_status';
procedure gdk_drop_finish(context: PGdkDragContext; success: gboolean; time_: guint32); cdecl; external LazGdk3_library name 'gdk_drop_finish';
procedure gdk_drop_reply(context: PGdkDragContext; accepted: gboolean; time_: guint32); cdecl; external LazGdk3_library name 'gdk_drop_reply';
procedure gdk_error_trap_pop_ignored; cdecl; external LazGdk3_library name 'gdk_error_trap_pop_ignored';
procedure gdk_error_trap_push; cdecl; external LazGdk3_library name 'gdk_error_trap_push';
procedure gdk_event_free(event: PGdkEvent); cdecl; external LazGdk3_library name 'gdk_event_free';
procedure gdk_event_handler_set(func: TGdkEventFunc; data: gpointer; notify: TGDestroyNotify); cdecl; external LazGdk3_library name 'gdk_event_handler_set';
procedure gdk_event_put(event: PGdkEvent); cdecl; external LazGdk3_library name 'gdk_event_put';
procedure gdk_event_request_motions(event: PGdkEventMotion); cdecl; external LazGdk3_library name 'gdk_event_request_motions';
procedure gdk_event_set_device(event: PGdkEvent; device: PGdkDevice); cdecl; external LazGdk3_library name 'gdk_event_set_device';
procedure gdk_event_set_device_tool(event: PGdkEvent; tool: PGdkDeviceTool); cdecl; external LazGdk3_library name 'gdk_event_set_device_tool';
procedure gdk_event_set_screen(event: PGdkEvent; screen: PGdkScreen); cdecl; external LazGdk3_library name 'gdk_event_set_screen';
procedure gdk_event_set_source_device(event: PGdkEvent; device: PGdkDevice); cdecl; external LazGdk3_library name 'gdk_event_set_source_device';
procedure gdk_flush; cdecl; external LazGdk3_library name 'gdk_flush';
procedure gdk_frame_clock_begin_updating(frame_clock: PGdkFrameClock); cdecl; external LazGdk3_library name 'gdk_frame_clock_begin_updating';
procedure gdk_frame_clock_end_updating(frame_clock: PGdkFrameClock); cdecl; external LazGdk3_library name 'gdk_frame_clock_end_updating';
procedure gdk_frame_clock_get_refresh_info(frame_clock: PGdkFrameClock; base_time: gint64; refresh_interval_return: Pgint64; presentation_time_return: Pgint64); cdecl; external LazGdk3_library name 'gdk_frame_clock_get_refresh_info';
procedure gdk_frame_clock_request_phase(frame_clock: PGdkFrameClock; phase: TGdkFrameClockPhase); cdecl; external LazGdk3_library name 'gdk_frame_clock_request_phase';
procedure gdk_frame_timings_unref(timings: PGdkFrameTimings); cdecl; external LazGdk3_library name 'gdk_frame_timings_unref';
procedure gdk_gl_context_clear_current; cdecl; external LazGdk3_library name 'gdk_gl_context_clear_current';
procedure gdk_gl_context_get_required_version(context: PGdkGLContext; major: Pgint; minor: Pgint); cdecl; external LazGdk3_library name 'gdk_gl_context_get_required_version';
procedure gdk_gl_context_get_version(context: PGdkGLContext; major: Pgint; minor: Pgint); cdecl; external LazGdk3_library name 'gdk_gl_context_get_version';
procedure gdk_gl_context_make_current(context: PGdkGLContext); cdecl; external LazGdk3_library name 'gdk_gl_context_make_current';
procedure gdk_gl_context_set_debug_enabled(context: PGdkGLContext; enabled: gboolean); cdecl; external LazGdk3_library name 'gdk_gl_context_set_debug_enabled';
procedure gdk_gl_context_set_forward_compatible(context: PGdkGLContext; compatible: gboolean); cdecl; external LazGdk3_library name 'gdk_gl_context_set_forward_compatible';
procedure gdk_gl_context_set_required_version(context: PGdkGLContext; major: gint; minor: gint); cdecl; external LazGdk3_library name 'gdk_gl_context_set_required_version';
procedure gdk_gl_context_set_use_es(context: PGdkGLContext; use_es: gint); cdecl; external LazGdk3_library name 'gdk_gl_context_set_use_es';
procedure gdk_init(argc: Pgint; argv: PPPgchar); cdecl; external LazGdk3_library name 'gdk_init';
procedure gdk_keymap_add_virtual_modifiers(keymap: PGdkKeymap; state: PGdkModifierType); cdecl; external LazGdk3_library name 'gdk_keymap_add_virtual_modifiers';
procedure gdk_keyval_convert_case(symbol: guint; lower: Pguint; upper: Pguint); cdecl; external LazGdk3_library name 'gdk_keyval_convert_case';
procedure gdk_monitor_get_geometry(monitor: PGdkMonitor; geometry: PGdkRectangle); cdecl; external LazGdk3_library name 'gdk_monitor_get_geometry';
procedure gdk_monitor_get_workarea(monitor: PGdkMonitor; workarea: PGdkRectangle); cdecl; external LazGdk3_library name 'gdk_monitor_get_workarea';
procedure gdk_notify_startup_complete; cdecl; external LazGdk3_library name 'gdk_notify_startup_complete';
procedure gdk_notify_startup_complete_with_id(startup_id: Pgchar); cdecl; external LazGdk3_library name 'gdk_notify_startup_complete_with_id';
procedure gdk_offscreen_window_set_embedder(window: PGdkWindow; embedder: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_offscreen_window_set_embedder';
procedure gdk_parse_args(argc: Pgint; argv: PPPgchar); cdecl; external LazGdk3_library name 'gdk_parse_args';
procedure gdk_property_change(window: PGdkWindow; property_: PGdkAtom; type_: PGdkAtom; format: gint; mode: TGdkPropMode; data: Pguint8; nelements: gint); cdecl; external LazGdk3_library name 'gdk_property_change';
procedure gdk_property_delete(window: PGdkWindow; property_: PGdkAtom); cdecl; external LazGdk3_library name 'gdk_property_delete';
procedure gdk_rectangle_union(src1: PGdkRectangle; src2: PGdkRectangle; dest: PGdkRectangle); cdecl; external LazGdk3_library name 'gdk_rectangle_union';
procedure gdk_rgba_free(rgba: PGdkRGBA); cdecl; external LazGdk3_library name 'gdk_rgba_free';
procedure gdk_screen_set_font_options(screen: PGdkScreen; options: Pcairo_font_options_t); cdecl; external LazGdk3_library name 'gdk_screen_set_font_options';
procedure gdk_screen_set_resolution(screen: PGdkScreen; dpi: gdouble); cdecl; external LazGdk3_library name 'gdk_screen_set_resolution';
procedure gdk_seat_ungrab(seat: PGdkSeat); cdecl; external LazGdk3_library name 'gdk_seat_ungrab';
procedure gdk_selection_convert(requestor: PGdkWindow; selection: PGdkAtom; target: PGdkAtom; time_: guint32); cdecl; external LazGdk3_library name 'gdk_selection_convert';
procedure gdk_selection_send_notify(requestor: PGdkWindow; selection: PGdkAtom; target: PGdkAtom; property_: PGdkAtom; time_: guint32); cdecl; external LazGdk3_library name 'gdk_selection_send_notify';
procedure gdk_selection_send_notify_for_display(display: PGdkDisplay; requestor: PGdkWindow; selection: PGdkAtom; target: PGdkAtom; property_: PGdkAtom; time_: guint32); cdecl; external LazGdk3_library name 'gdk_selection_send_notify_for_display';
procedure gdk_set_allowed_backends(backends: Pgchar); cdecl; external LazGdk3_library name 'gdk_set_allowed_backends';
procedure gdk_set_double_click_time(msec: guint); cdecl; external LazGdk3_library name 'gdk_set_double_click_time';
procedure gdk_set_program_class(program_class: Pgchar); cdecl; external LazGdk3_library name 'gdk_set_program_class';
procedure gdk_set_show_events(show_events: gboolean); cdecl; external LazGdk3_library name 'gdk_set_show_events';
procedure gdk_synthesize_window_state(window: PGdkWindow; unset_flags: TGdkWindowState; set_flags: TGdkWindowState); cdecl; external LazGdk3_library name 'gdk_synthesize_window_state';
procedure gdk_test_render_sync(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_test_render_sync';
procedure gdk_visual_get_blue_pixel_details(visual: PGdkVisual; mask: Pguint32; shift: Pgint; precision: Pgint); cdecl; external LazGdk3_library name 'gdk_visual_get_blue_pixel_details';
procedure gdk_visual_get_green_pixel_details(visual: PGdkVisual; mask: Pguint32; shift: Pgint; precision: Pgint); cdecl; external LazGdk3_library name 'gdk_visual_get_green_pixel_details';
procedure gdk_visual_get_red_pixel_details(visual: PGdkVisual; mask: Pguint32; shift: Pgint; precision: Pgint); cdecl; external LazGdk3_library name 'gdk_visual_get_red_pixel_details';
procedure gdk_window_add_filter(window: PGdkWindow; function_: TGdkFilterFunc; data: gpointer); cdecl; external LazGdk3_library name 'gdk_window_add_filter';
procedure gdk_window_beep(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_beep';
procedure gdk_window_begin_move_drag(window: PGdkWindow; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; external LazGdk3_library name 'gdk_window_begin_move_drag';
procedure gdk_window_begin_move_drag_for_device(window: PGdkWindow; device: PGdkDevice; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; external LazGdk3_library name 'gdk_window_begin_move_drag_for_device';
procedure gdk_window_begin_resize_drag(window: PGdkWindow; edge: TGdkWindowEdge; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; external LazGdk3_library name 'gdk_window_begin_resize_drag';
procedure gdk_window_begin_resize_drag_for_device(window: PGdkWindow; edge: TGdkWindowEdge; device: PGdkDevice; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; external LazGdk3_library name 'gdk_window_begin_resize_drag_for_device';
procedure gdk_window_constrain_size(geometry: PGdkGeometry; flags: TGdkWindowHints; width: gint; height: gint; new_width: Pgint; new_height: Pgint); cdecl; external LazGdk3_library name 'gdk_window_constrain_size';
procedure gdk_window_coords_from_parent(window: PGdkWindow; parent_x: gdouble; parent_y: gdouble; x: Pgdouble; y: Pgdouble); cdecl; external LazGdk3_library name 'gdk_window_coords_from_parent';
procedure gdk_window_coords_to_parent(window: PGdkWindow; x: gdouble; y: gdouble; parent_x: Pgdouble; parent_y: Pgdouble); cdecl; external LazGdk3_library name 'gdk_window_coords_to_parent';
procedure gdk_window_deiconify(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_deiconify';
procedure gdk_window_destroy(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_destroy';
procedure gdk_window_destroy_notify(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_destroy_notify';
procedure gdk_window_end_draw_frame(window: PGdkWindow; context: PGdkDrawingContext); cdecl; external LazGdk3_library name 'gdk_window_end_draw_frame';
procedure gdk_window_end_paint(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_end_paint';
procedure gdk_window_focus(window: PGdkWindow; timestamp: guint32); cdecl; external LazGdk3_library name 'gdk_window_focus';
procedure gdk_window_freeze_updates(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_freeze_updates';
procedure gdk_window_fullscreen(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_fullscreen';
procedure gdk_window_fullscreen_on_monitor(window: PGdkWindow; monitor: gint); cdecl; external LazGdk3_library name 'gdk_window_fullscreen_on_monitor';
procedure gdk_window_geometry_changed(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_geometry_changed';
procedure gdk_window_get_frame_extents(window: PGdkWindow; rect: PGdkRectangle); cdecl; external LazGdk3_library name 'gdk_window_get_frame_extents';
procedure gdk_window_get_geometry(window: PGdkWindow; x: Pgint; y: Pgint; width: Pgint; height: Pgint); cdecl; external LazGdk3_library name 'gdk_window_get_geometry';
procedure gdk_window_get_position(window: PGdkWindow; x: Pgint; y: Pgint); cdecl; external LazGdk3_library name 'gdk_window_get_position';
procedure gdk_window_get_root_coords(window: PGdkWindow; x: gint; y: gint; root_x: Pgint; root_y: Pgint); cdecl; external LazGdk3_library name 'gdk_window_get_root_coords';
procedure gdk_window_get_root_origin(window: PGdkWindow; x: Pgint; y: Pgint); cdecl; external LazGdk3_library name 'gdk_window_get_root_origin';
procedure gdk_window_get_user_data(window: PGdkWindow; data: Pgpointer); cdecl; external LazGdk3_library name 'gdk_window_get_user_data';
procedure gdk_window_hide(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_hide';
procedure gdk_window_iconify(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_iconify';
procedure gdk_window_input_shape_combine_region(window: PGdkWindow; shape_region: Pcairo_region_t; offset_x: gint; offset_y: gint); cdecl; external LazGdk3_library name 'gdk_window_input_shape_combine_region';
procedure gdk_window_invalidate_maybe_recurse(window: PGdkWindow; region: Pcairo_region_t; child_func: TGdkWindowChildFunc; user_data: gpointer); cdecl; external LazGdk3_library name 'gdk_window_invalidate_maybe_recurse';
procedure gdk_window_invalidate_rect(window: PGdkWindow; rect: PGdkRectangle; invalidate_children: gboolean); cdecl; external LazGdk3_library name 'gdk_window_invalidate_rect';
procedure gdk_window_invalidate_region(window: PGdkWindow; region: Pcairo_region_t; invalidate_children: gboolean); cdecl; external LazGdk3_library name 'gdk_window_invalidate_region';
procedure gdk_window_lower(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_lower';
procedure gdk_window_mark_paint_from_clip(window: PGdkWindow; cr: Pcairo_t); cdecl; external LazGdk3_library name 'gdk_window_mark_paint_from_clip';
procedure gdk_window_maximize(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_maximize';
procedure gdk_window_merge_child_input_shapes(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_merge_child_input_shapes';
procedure gdk_window_merge_child_shapes(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_merge_child_shapes';
procedure gdk_window_move(window: PGdkWindow; x: gint; y: gint); cdecl; external LazGdk3_library name 'gdk_window_move';
procedure gdk_window_move_region(window: PGdkWindow; region: Pcairo_region_t; dx: gint; dy: gint); cdecl; external LazGdk3_library name 'gdk_window_move_region';
procedure gdk_window_move_resize(window: PGdkWindow; x: gint; y: gint; width: gint; height: gint); cdecl; external LazGdk3_library name 'gdk_window_move_resize';
procedure gdk_window_move_to_rect(window: PGdkWindow; rect: PGdkRectangle; rect_anchor: TGdkGravity; window_anchor: TGdkGravity; anchor_hints: TGdkAnchorHints; rect_anchor_dx: gint; rect_anchor_dy: gint); cdecl; external LazGdk3_library name 'gdk_window_move_to_rect';
procedure gdk_window_raise(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_raise';
procedure gdk_window_register_dnd(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_register_dnd';
procedure gdk_window_remove_filter(window: PGdkWindow; function_: TGdkFilterFunc; data: gpointer); cdecl; external LazGdk3_library name 'gdk_window_remove_filter';
procedure gdk_window_reparent(window: PGdkWindow; new_parent: PGdkWindow; x: gint; y: gint); cdecl; external LazGdk3_library name 'gdk_window_reparent';
procedure gdk_window_resize(window: PGdkWindow; width: gint; height: gint); cdecl; external LazGdk3_library name 'gdk_window_resize';
procedure gdk_window_restack(window: PGdkWindow; sibling: PGdkWindow; above: gboolean); cdecl; external LazGdk3_library name 'gdk_window_restack';
procedure gdk_window_scroll(window: PGdkWindow; dx: gint; dy: gint); cdecl; external LazGdk3_library name 'gdk_window_scroll';
procedure gdk_window_set_accept_focus(window: PGdkWindow; accept_focus: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_accept_focus';
procedure gdk_window_set_child_input_shapes(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_set_child_input_shapes';
procedure gdk_window_set_child_shapes(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_set_child_shapes';
procedure gdk_window_set_cursor(window: PGdkWindow; cursor: PGdkCursor); cdecl; external LazGdk3_library name 'gdk_window_set_cursor';
procedure gdk_window_set_decorations(window: PGdkWindow; decorations: TGdkWMDecoration); cdecl; external LazGdk3_library name 'gdk_window_set_decorations';
procedure gdk_window_set_device_cursor(window: PGdkWindow; device: PGdkDevice; cursor: PGdkCursor); cdecl; external LazGdk3_library name 'gdk_window_set_device_cursor';
procedure gdk_window_set_device_events(window: PGdkWindow; device: PGdkDevice; event_mask: TGdkEventMask); cdecl; external LazGdk3_library name 'gdk_window_set_device_events';
procedure gdk_window_set_event_compression(window: PGdkWindow; event_compression: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_event_compression';
procedure gdk_window_set_events(window: PGdkWindow; event_mask: TGdkEventMask); cdecl; external LazGdk3_library name 'gdk_window_set_events';
procedure gdk_window_set_focus_on_map(window: PGdkWindow; focus_on_map: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_focus_on_map';
procedure gdk_window_set_fullscreen_mode(window: PGdkWindow; mode: TGdkFullscreenMode); cdecl; external LazGdk3_library name 'gdk_window_set_fullscreen_mode';
procedure gdk_window_set_functions(window: PGdkWindow; functions: TGdkWMFunction); cdecl; external LazGdk3_library name 'gdk_window_set_functions';
procedure gdk_window_set_geometry_hints(window: PGdkWindow; geometry: PGdkGeometry; geom_mask: TGdkWindowHints); cdecl; external LazGdk3_library name 'gdk_window_set_geometry_hints';
procedure gdk_window_set_group(window: PGdkWindow; leader: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_set_group';
procedure gdk_window_set_icon_list(window: PGdkWindow; pixbufs: PGList); cdecl; external LazGdk3_library name 'gdk_window_set_icon_list';
procedure gdk_window_set_icon_name(window: PGdkWindow; name: Pgchar); cdecl; external LazGdk3_library name 'gdk_window_set_icon_name';
procedure gdk_window_set_invalidate_handler(window: PGdkWindow; handler: TGdkWindowInvalidateHandlerFunc); cdecl; external LazGdk3_library name 'gdk_window_set_invalidate_handler';
procedure gdk_window_set_keep_above(window: PGdkWindow; setting: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_keep_above';
procedure gdk_window_set_keep_below(window: PGdkWindow; setting: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_keep_below';
procedure gdk_window_set_modal_hint(window: PGdkWindow; modal: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_modal_hint';
procedure gdk_window_set_opacity(window: PGdkWindow; opacity: gdouble); cdecl; external LazGdk3_library name 'gdk_window_set_opacity';
procedure gdk_window_set_opaque_region(window: PGdkWindow; region: Pcairo_region_t); cdecl; external LazGdk3_library name 'gdk_window_set_opaque_region';
procedure gdk_window_set_override_redirect(window: PGdkWindow; override_redirect: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_override_redirect';
procedure gdk_window_set_pass_through(window: PGdkWindow; pass_through: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_pass_through';
procedure gdk_window_set_role(window: PGdkWindow; role: Pgchar); cdecl; external LazGdk3_library name 'gdk_window_set_role';
procedure gdk_window_set_shadow_width(window: PGdkWindow; left: gint; right: gint; top: gint; bottom: gint); cdecl; external LazGdk3_library name 'gdk_window_set_shadow_width';
procedure gdk_window_set_skip_pager_hint(window: PGdkWindow; skips_pager: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_skip_pager_hint';
procedure gdk_window_set_skip_taskbar_hint(window: PGdkWindow; skips_taskbar: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_skip_taskbar_hint';
procedure gdk_window_set_source_events(window: PGdkWindow; source: TGdkInputSource; event_mask: TGdkEventMask); cdecl; external LazGdk3_library name 'gdk_window_set_source_events';
procedure gdk_window_set_startup_id(window: PGdkWindow; startup_id: Pgchar); cdecl; external LazGdk3_library name 'gdk_window_set_startup_id';
procedure gdk_window_set_support_multidevice(window: PGdkWindow; support_multidevice: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_support_multidevice';
procedure gdk_window_set_title(window: PGdkWindow; title: Pgchar); cdecl; external LazGdk3_library name 'gdk_window_set_title';
procedure gdk_window_set_transient_for(window: PGdkWindow; parent: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_set_transient_for';
procedure gdk_window_set_type_hint(window: PGdkWindow; hint: TGdkWindowTypeHint); cdecl; external LazGdk3_library name 'gdk_window_set_type_hint';
procedure gdk_window_set_urgency_hint(window: PGdkWindow; urgent: gboolean); cdecl; external LazGdk3_library name 'gdk_window_set_urgency_hint';
procedure gdk_window_set_user_data(window: PGdkWindow; user_data: PGObject); cdecl; external LazGdk3_library name 'gdk_window_set_user_data';
procedure gdk_window_shape_combine_region(window: PGdkWindow; shape_region: Pcairo_region_t; offset_x: gint; offset_y: gint); cdecl; external LazGdk3_library name 'gdk_window_shape_combine_region';
procedure gdk_window_show(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_show';
procedure gdk_window_show_unraised(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_show_unraised';
procedure gdk_window_stick(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_stick';
procedure gdk_window_thaw_updates(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_thaw_updates';
procedure gdk_window_unfullscreen(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_unfullscreen';
procedure gdk_window_unmaximize(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_unmaximize';
procedure gdk_window_unstick(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_unstick';
procedure gdk_window_withdraw(window: PGdkWindow); cdecl; external LazGdk3_library name 'gdk_window_withdraw';
implementation
procedure TGdkAppLaunchContext.set_desktop(desktop: gint); cdecl;
begin
  LazGdk3.gdk_app_launch_context_set_desktop(@self, desktop);
end;

procedure TGdkAppLaunchContext.set_icon(icon: PGIcon); cdecl;
begin
  LazGdk3.gdk_app_launch_context_set_icon(@self, icon);
end;

procedure TGdkAppLaunchContext.set_icon_name(icon_name: Pgchar); cdecl;
begin
  LazGdk3.gdk_app_launch_context_set_icon_name(@self, icon_name);
end;

procedure TGdkAppLaunchContext.set_screen(screen: PGdkScreen); cdecl;
begin
  LazGdk3.gdk_app_launch_context_set_screen(@self, screen);
end;

procedure TGdkAppLaunchContext.set_timestamp(timestamp: guint32); cdecl;
begin
  LazGdk3.gdk_app_launch_context_set_timestamp(@self, timestamp);
end;

function TGdkDisplay.get_default: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_display_get_default();
end;

function TGdkDisplay.open(display_name: Pgchar): PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_display_open(display_name);
end;

procedure TGdkDisplay.beep; cdecl;
begin
  LazGdk3.gdk_display_beep(@self);
end;

procedure TGdkDisplay.close; cdecl;
begin
  LazGdk3.gdk_display_close(@self);
end;

function TGdkDisplay.device_is_grabbed(device: PGdkDevice): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_device_is_grabbed(@self, device);
end;

procedure TGdkDisplay.flush; cdecl;
begin
  LazGdk3.gdk_display_flush(@self);
end;

function TGdkDisplay.get_app_launch_context: PGdkAppLaunchContext; cdecl;
begin
  Result := LazGdk3.gdk_display_get_app_launch_context(@self);
end;

function TGdkDisplay.get_default_cursor_size: guint; cdecl;
begin
  Result := LazGdk3.gdk_display_get_default_cursor_size(@self);
end;

function TGdkDisplay.get_default_group: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_display_get_default_group(@self);
end;

function TGdkDisplay.get_default_screen: PGdkScreen; cdecl;
begin
  Result := LazGdk3.gdk_display_get_default_screen(@self);
end;

function TGdkDisplay.get_default_seat: PGdkSeat; cdecl;
begin
  Result := LazGdk3.gdk_display_get_default_seat(@self);
end;

function TGdkDisplay.get_event: PGdkEvent; cdecl;
begin
  Result := LazGdk3.gdk_display_get_event(@self);
end;

procedure TGdkDisplay.get_maximal_cursor_size(width: Pguint; height: Pguint); cdecl;
begin
  LazGdk3.gdk_display_get_maximal_cursor_size(@self, width, height);
end;

function TGdkDisplay.get_monitor(monitor_num: gint): PGdkMonitor; cdecl;
begin
  Result := LazGdk3.gdk_display_get_monitor(@self, monitor_num);
end;

function TGdkDisplay.get_monitor_at_point(x: gint; y: gint): PGdkMonitor; cdecl;
begin
  Result := LazGdk3.gdk_display_get_monitor_at_point(@self, x, y);
end;

function TGdkDisplay.get_monitor_at_window(window: PGdkWindow): PGdkMonitor; cdecl;
begin
  Result := LazGdk3.gdk_display_get_monitor_at_window(@self, window);
end;

function TGdkDisplay.get_n_monitors: gint; cdecl;
begin
  Result := LazGdk3.gdk_display_get_n_monitors(@self);
end;

function TGdkDisplay.get_name: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_display_get_name(@self);
end;

function TGdkDisplay.get_primary_monitor: PGdkMonitor; cdecl;
begin
  Result := LazGdk3.gdk_display_get_primary_monitor(@self);
end;

function TGdkDisplay.has_pending: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_has_pending(@self);
end;

function TGdkDisplay.is_closed: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_is_closed(@self);
end;

function TGdkDisplay.list_seats: PGList; cdecl;
begin
  Result := LazGdk3.gdk_display_list_seats(@self);
end;

procedure TGdkDisplay.notify_startup_complete(startup_id: Pgchar); cdecl;
begin
  LazGdk3.gdk_display_notify_startup_complete(@self, startup_id);
end;

function TGdkDisplay.peek_event: PGdkEvent; cdecl;
begin
  Result := LazGdk3.gdk_display_peek_event(@self);
end;

procedure TGdkDisplay.put_event(event: PGdkEvent); cdecl;
begin
  LazGdk3.gdk_display_put_event(@self, event);
end;

function TGdkAtom.name: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_atom_name(@self);
end;

function TGdkAtom.intern(atom_name: Pgchar; only_if_exists: gboolean): PGdkAtom; cdecl;
begin
  Result := LazGdk3.gdk_atom_intern(atom_name, only_if_exists);
end;

function TGdkAtom.intern_static_string(atom_name: Pgchar): PGdkAtom; cdecl;
begin
  Result := LazGdk3.gdk_atom_intern_static_string(atom_name);
end;

function TGdkDisplay.request_selection_notification(selection: PGdkAtom): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_request_selection_notification(@self, selection);
end;

procedure TGdkDisplay.set_double_click_distance(distance: guint); cdecl;
begin
  LazGdk3.gdk_display_set_double_click_distance(@self, distance);
end;

procedure TGdkDisplay.set_double_click_time(msec: guint); cdecl;
begin
  LazGdk3.gdk_display_set_double_click_time(@self, msec);
end;

procedure TGdkDisplay.store_clipboard(clipboard_window: PGdkWindow; time_: guint32; targets: PGdkAtom; n_targets: gint); cdecl;
begin
  LazGdk3.gdk_display_store_clipboard(@self, clipboard_window, time_, targets, n_targets);
end;

function TGdkDisplay.supports_clipboard_persistence: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_supports_clipboard_persistence(@self);
end;

function TGdkDisplay.supports_cursor_alpha: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_supports_cursor_alpha(@self);
end;

function TGdkDisplay.supports_cursor_color: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_supports_cursor_color(@self);
end;

function TGdkDisplay.supports_input_shapes: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_supports_input_shapes(@self);
end;

function TGdkDisplay.supports_selection_notification: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_supports_selection_notification(@self);
end;

function TGdkDisplay.supports_shapes: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_display_supports_shapes(@self);
end;

procedure TGdkDisplay.sync; cdecl;
begin
  LazGdk3.gdk_display_sync(@self);
end;

function TGdkScreen.get_default: PGdkScreen; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_default();
end;

function TGdkScreen.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_display(@self);
end;

function TGdkScreen.get_font_options: Pcairo_font_options_t; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_font_options(@self);
end;

function TGdkScreen.get_height: gint; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_height(@self);
end;

function TGdkScreen.get_height_mm: gint; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_height_mm(@self);
end;

function TGdkScreen.get_monitor_at_point(x: gint; y: gint): gint; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_monitor_at_point(@self, x, y);
end;

function TGdkScreen.get_monitor_at_window(window: PGdkWindow): gint; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_monitor_at_window(@self, window);
end;

function TGdkScreen.get_resolution: gdouble; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_resolution(@self);
end;

function TGdkScreen.get_rgba_visual: PGdkVisual; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_rgba_visual(@self);
end;

function TGdkScreen.get_root_window: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_root_window(@self);
end;

function TGdkScreen.get_setting(name: Pgchar; value: PGValue): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_setting(@self, name, value);
end;

function TGdkScreen.get_system_visual: PGdkVisual; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_system_visual(@self);
end;

function TGdkScreen.get_toplevel_windows: PGList; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_toplevel_windows(@self);
end;

function TGdkScreen.get_width: gint; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_width(@self);
end;

function TGdkScreen.get_width_mm: gint; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_width_mm(@self);
end;

function TGdkScreen.get_window_stack: PGList; cdecl;
begin
  Result := LazGdk3.gdk_screen_get_window_stack(@self);
end;

function TGdkScreen.is_composited: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_screen_is_composited(@self);
end;

function TGdkScreen.list_visuals: PGList; cdecl;
begin
  Result := LazGdk3.gdk_screen_list_visuals(@self);
end;

procedure TGdkScreen.set_font_options(options: Pcairo_font_options_t); cdecl;
begin
  LazGdk3.gdk_screen_set_font_options(@self, options);
end;

procedure TGdkScreen.set_resolution(dpi: gdouble); cdecl;
begin
  LazGdk3.gdk_screen_set_resolution(@self, dpi);
end;

function TGdkCursor.new(cursor_type: TGdkCursorType): PGdkCursor; cdecl;
begin
  Result := LazGdk3.gdk_cursor_new(cursor_type);
end;

function TGdkCursor.new_for_display(display: PGdkDisplay; cursor_type: TGdkCursorType): PGdkCursor; cdecl;
begin
  Result := LazGdk3.gdk_cursor_new_for_display(display, cursor_type);
end;

function TGdkCursor.new_from_name(display: PGdkDisplay; name: Pgchar): PGdkCursor; cdecl;
begin
  Result := LazGdk3.gdk_cursor_new_from_name(display, name);
end;

function TGdkCursor.new_from_pixbuf(display: PGdkDisplay; pixbuf: PGdkPixbuf; x: gint; y: gint): PGdkCursor; cdecl;
begin
  Result := LazGdk3.gdk_cursor_new_from_pixbuf(display, pixbuf, x, y);
end;

function TGdkCursor.new_from_surface(display: PGdkDisplay; surface: Pcairo_surface_t; x: gdouble; y: gdouble): PGdkCursor; cdecl;
begin
  Result := LazGdk3.gdk_cursor_new_from_surface(display, surface, x, y);
end;

function TGdkCursor.get_cursor_type: TGdkCursorType; cdecl;
begin
  Result := LazGdk3.gdk_cursor_get_cursor_type(@self);
end;

function TGdkCursor.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_cursor_get_display(@self);
end;

function TGdkCursor.get_image: PGdkPixbuf; cdecl;
begin
  Result := LazGdk3.gdk_cursor_get_image(@self);
end;

function TGdkCursor.get_surface(x_hot: Pgdouble; y_hot: Pgdouble): Pcairo_surface_t; cdecl;
begin
  Result := LazGdk3.gdk_cursor_get_surface(@self, x_hot, y_hot);
end;

procedure TGdkDevice.free_history(events: PPGdkTimeCoord; n_events: gint); cdecl;
begin
  LazGdk3.gdk_device_free_history(events, n_events);
end;

function TGdkDevice.get_associated_device: PGdkDevice; cdecl;
begin
  Result := LazGdk3.gdk_device_get_associated_device(@self);
end;

function TGdkDevice.get_axes: TGdkAxisFlags; cdecl;
begin
  Result := LazGdk3.gdk_device_get_axes(@self);
end;

function TGdkDevice.get_axis(axes: Pgdouble; use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_device_get_axis(@self, axes, use, value);
end;

function TGdkDevice.get_axis_use(index_: guint): TGdkAxisUse; cdecl;
begin
  Result := LazGdk3.gdk_device_get_axis_use(@self, index_);
end;

function TGdkDevice.get_axis_value(axes: Pgdouble; axis_label: PGdkAtom; value: Pgdouble): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_device_get_axis_value(@self, axes, axis_label, value);
end;

function TGdkDevice.get_device_type: TGdkDeviceType; cdecl;
begin
  Result := LazGdk3.gdk_device_get_device_type(@self);
end;

function TGdkDevice.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_device_get_display(@self);
end;

function TGdkDevice.get_has_cursor: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_device_get_has_cursor(@self);
end;

function TGdkDevice.get_history(window: PGdkWindow; start: guint32; stop: guint32; events: PPPGdkTimeCoord; n_events: Pgint): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_device_get_history(@self, window, start, stop, events, n_events);
end;

function TGdkDevice.get_key(index_: guint; keyval: Pguint; modifiers: PGdkModifierType): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_device_get_key(@self, index_, keyval, modifiers);
end;

function TGdkDevice.get_last_event_window: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_device_get_last_event_window(@self);
end;

function TGdkDevice.get_mode: TGdkInputMode; cdecl;
begin
  Result := LazGdk3.gdk_device_get_mode(@self);
end;

function TGdkDevice.get_n_axes: gint; cdecl;
begin
  Result := LazGdk3.gdk_device_get_n_axes(@self);
end;

function TGdkDevice.get_n_keys: gint; cdecl;
begin
  Result := LazGdk3.gdk_device_get_n_keys(@self);
end;

function TGdkDevice.get_name: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_device_get_name(@self);
end;

procedure TGdkDevice.get_position(screen: PPGdkScreen; x: Pgint; y: Pgint); cdecl;
begin
  LazGdk3.gdk_device_get_position(@self, screen, x, y);
end;

procedure TGdkDevice.get_position_double(screen: PPGdkScreen; x: Pgdouble; y: Pgdouble); cdecl;
begin
  LazGdk3.gdk_device_get_position_double(@self, screen, x, y);
end;

function TGdkDevice.get_product_id: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_device_get_product_id(@self);
end;

function TGdkDevice.get_seat: PGdkSeat; cdecl;
begin
  Result := LazGdk3.gdk_device_get_seat(@self);
end;

function TGdkDevice.get_source: TGdkInputSource; cdecl;
begin
  Result := LazGdk3.gdk_device_get_source(@self);
end;

procedure TGdkDevice.get_state(window: PGdkWindow; axes: Pgdouble; mask: PGdkModifierType); cdecl;
begin
  LazGdk3.gdk_device_get_state(@self, window, axes, mask);
end;

function TGdkDevice.get_vendor_id: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_device_get_vendor_id(@self);
end;

function TGdkDevice.get_window_at_position(win_x: Pgint; win_y: Pgint): PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_device_get_window_at_position(@self, win_x, win_y);
end;

function TGdkDevice.get_window_at_position_double(win_x: Pgdouble; win_y: Pgdouble): PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_device_get_window_at_position_double(@self, win_x, win_y);
end;

function TGdkDevice.list_axes: PGList; cdecl;
begin
  Result := LazGdk3.gdk_device_list_axes(@self);
end;

function TGdkDevice.list_slave_devices: PGList; cdecl;
begin
  Result := LazGdk3.gdk_device_list_slave_devices(@self);
end;

procedure TGdkDevice.set_axis_use(index_: guint; use: TGdkAxisUse); cdecl;
begin
  LazGdk3.gdk_device_set_axis_use(@self, index_, use);
end;

procedure TGdkDevice.set_key(index_: guint; keyval: guint; modifiers: TGdkModifierType); cdecl;
begin
  LazGdk3.gdk_device_set_key(@self, index_, keyval, modifiers);
end;

function TGdkDevice.set_mode(mode: TGdkInputMode): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_device_set_mode(@self, mode);
end;

procedure TGdkDevice.warp(screen: PGdkScreen; x: gint; y: gint); cdecl;
begin
  LazGdk3.gdk_device_warp(@self, screen, x, y);
end;

function TGdkWindow.new(parent: PGdkWindow; attributes: PGdkWindowAttr; attributes_mask: TGdkWindowAttributesType): PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_new(parent, attributes, attributes_mask);
end;

procedure TGdkWindow.constrain_size(geometry: PGdkGeometry; flags: TGdkWindowHints; width: gint; height: gint; new_width: Pgint; new_height: Pgint); cdecl;
begin
  LazGdk3.gdk_window_constrain_size(geometry, flags, width, height, new_width, new_height);
end;

procedure TGdkWindow.add_filter(function_: TGdkFilterFunc; data: gpointer); cdecl;
begin
  LazGdk3.gdk_window_add_filter(@self, function_, data);
end;

procedure TGdkWindow.beep; cdecl;
begin
  LazGdk3.gdk_window_beep(@self);
end;

function TGdkWindow.begin_draw_frame(region: Pcairo_region_t): PGdkDrawingContext; cdecl;
begin
  Result := LazGdk3.gdk_window_begin_draw_frame(@self, region);
end;

procedure TGdkWindow.begin_move_drag(button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl;
begin
  LazGdk3.gdk_window_begin_move_drag(@self, button, root_x, root_y, timestamp);
end;

procedure TGdkWindow.begin_move_drag_for_device(device: PGdkDevice; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl;
begin
  LazGdk3.gdk_window_begin_move_drag_for_device(@self, device, button, root_x, root_y, timestamp);
end;

procedure TGdkWindow.begin_resize_drag(edge: TGdkWindowEdge; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl;
begin
  LazGdk3.gdk_window_begin_resize_drag(@self, edge, button, root_x, root_y, timestamp);
end;

procedure TGdkWindow.begin_resize_drag_for_device(edge: TGdkWindowEdge; device: PGdkDevice; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl;
begin
  LazGdk3.gdk_window_begin_resize_drag_for_device(@self, edge, device, button, root_x, root_y, timestamp);
end;

procedure TGdkWindow.coords_from_parent(parent_x: gdouble; parent_y: gdouble; x: Pgdouble; y: Pgdouble); cdecl;
begin
  LazGdk3.gdk_window_coords_from_parent(@self, parent_x, parent_y, x, y);
end;

procedure TGdkWindow.coords_to_parent(x: gdouble; y: gdouble; parent_x: Pgdouble; parent_y: Pgdouble); cdecl;
begin
  LazGdk3.gdk_window_coords_to_parent(@self, x, y, parent_x, parent_y);
end;

function TGdkWindow.create_gl_context(error: PPGError): PGdkGLContext; cdecl;
begin
  Result := LazGdk3.gdk_window_create_gl_context(@self, error);
end;

function TGdkWindow.create_similar_image_surface(format: Tcairo_format_t; width: gint; height: gint; scale: gint): Pcairo_surface_t; cdecl;
begin
  Result := LazGdk3.gdk_window_create_similar_image_surface(@self, format, width, height, scale);
end;

function TGdkWindow.create_similar_surface(content: Tcairo_content_t; width: gint; height: gint): Pcairo_surface_t; cdecl;
begin
  Result := LazGdk3.gdk_window_create_similar_surface(@self, content, width, height);
end;

procedure TGdkWindow.deiconify; cdecl;
begin
  LazGdk3.gdk_window_deiconify(@self);
end;

procedure TGdkWindow.destroy_; cdecl;
begin
  LazGdk3.gdk_window_destroy(@self);
end;

procedure TGdkWindow.destroy_notify; cdecl;
begin
  LazGdk3.gdk_window_destroy_notify(@self);
end;

procedure TGdkWindow.end_draw_frame(context: PGdkDrawingContext); cdecl;
begin
  LazGdk3.gdk_window_end_draw_frame(@self, context);
end;

procedure TGdkWindow.end_paint; cdecl;
begin
  LazGdk3.gdk_window_end_paint(@self);
end;

function TGdkWindow.ensure_native: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_ensure_native(@self);
end;

procedure TGdkWindow.focus(timestamp: guint32); cdecl;
begin
  LazGdk3.gdk_window_focus(@self, timestamp);
end;

procedure TGdkWindow.freeze_updates; cdecl;
begin
  LazGdk3.gdk_window_freeze_updates(@self);
end;

procedure TGdkWindow.fullscreen; cdecl;
begin
  LazGdk3.gdk_window_fullscreen(@self);
end;

procedure TGdkWindow.fullscreen_on_monitor(monitor: gint); cdecl;
begin
  LazGdk3.gdk_window_fullscreen_on_monitor(@self, monitor);
end;

procedure TGdkWindow.geometry_changed; cdecl;
begin
  LazGdk3.gdk_window_geometry_changed(@self);
end;

function TGdkWindow.get_accept_focus: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_get_accept_focus(@self);
end;

function TGdkWindow.get_children: PGList; cdecl;
begin
  Result := LazGdk3.gdk_window_get_children(@self);
end;

function TGdkWindow.get_children_with_user_data(user_data: gpointer): PGList; cdecl;
begin
  Result := LazGdk3.gdk_window_get_children_with_user_data(@self, user_data);
end;

function TGdkWindow.get_clip_region: Pcairo_region_t; cdecl;
begin
  Result := LazGdk3.gdk_window_get_clip_region(@self);
end;

function TGdkWindow.get_cursor: PGdkCursor; cdecl;
begin
  Result := LazGdk3.gdk_window_get_cursor(@self);
end;

function TGdkWindow.get_decorations(decorations: PGdkWMDecoration): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_get_decorations(@self, decorations);
end;

function TGdkWindow.get_device_cursor(device: PGdkDevice): PGdkCursor; cdecl;
begin
  Result := LazGdk3.gdk_window_get_device_cursor(@self, device);
end;

function TGdkWindow.get_device_events(device: PGdkDevice): TGdkEventMask; cdecl;
begin
  Result := LazGdk3.gdk_window_get_device_events(@self, device);
end;

function TGdkWindow.get_device_position(device: PGdkDevice; x: Pgint; y: Pgint; mask: PGdkModifierType): PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_get_device_position(@self, device, x, y, mask);
end;

function TGdkWindow.get_device_position_double(device: PGdkDevice; x: Pgdouble; y: Pgdouble; mask: PGdkModifierType): PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_get_device_position_double(@self, device, x, y, mask);
end;

function TGdkWindow.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_window_get_display(@self);
end;

function TGdkWindow.get_drag_protocol(target: PPGdkWindow): TGdkDragProtocol; cdecl;
begin
  Result := LazGdk3.gdk_window_get_drag_protocol(@self, target);
end;

function TGdkWindow.get_effective_parent: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_get_effective_parent(@self);
end;

function TGdkWindow.get_effective_toplevel: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_get_effective_toplevel(@self);
end;

function TGdkWindow.get_event_compression: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_get_event_compression(@self);
end;

function TGdkWindow.get_events: TGdkEventMask; cdecl;
begin
  Result := LazGdk3.gdk_window_get_events(@self);
end;

function TGdkWindow.get_focus_on_map: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_get_focus_on_map(@self);
end;

function TGdkWindow.get_frame_clock: PGdkFrameClock; cdecl;
begin
  Result := LazGdk3.gdk_window_get_frame_clock(@self);
end;

procedure TGdkWindow.get_frame_extents(rect: PGdkRectangle); cdecl;
begin
  LazGdk3.gdk_window_get_frame_extents(@self, rect);
end;

function TGdkWindow.get_fullscreen_mode: TGdkFullscreenMode; cdecl;
begin
  Result := LazGdk3.gdk_window_get_fullscreen_mode(@self);
end;

procedure TGdkWindow.get_geometry(x: Pgint; y: Pgint; width: Pgint; height: Pgint); cdecl;
begin
  LazGdk3.gdk_window_get_geometry(@self, x, y, width, height);
end;

function TGdkWindow.get_group: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_get_group(@self);
end;

function TGdkWindow.get_height: gint; cdecl;
begin
  Result := LazGdk3.gdk_window_get_height(@self);
end;

function TGdkWindow.get_modal_hint: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_get_modal_hint(@self);
end;

function TGdkWindow.get_origin(x: Pgint; y: Pgint): gint; cdecl;
begin
  Result := LazGdk3.gdk_window_get_origin(@self, x, y);
end;

function TGdkWindow.get_parent: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_get_parent(@self);
end;

function TGdkWindow.get_pass_through: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_get_pass_through(@self);
end;

procedure TGdkWindow.get_position(x: Pgint; y: Pgint); cdecl;
begin
  LazGdk3.gdk_window_get_position(@self, x, y);
end;

procedure TGdkWindow.get_root_coords(x: gint; y: gint; root_x: Pgint; root_y: Pgint); cdecl;
begin
  LazGdk3.gdk_window_get_root_coords(@self, x, y, root_x, root_y);
end;

procedure TGdkWindow.get_root_origin(x: Pgint; y: Pgint); cdecl;
begin
  LazGdk3.gdk_window_get_root_origin(@self, x, y);
end;

function TGdkWindow.get_scale_factor: gint; cdecl;
begin
  Result := LazGdk3.gdk_window_get_scale_factor(@self);
end;

function TGdkWindow.get_screen: PGdkScreen; cdecl;
begin
  Result := LazGdk3.gdk_window_get_screen(@self);
end;

function TGdkWindow.get_source_events(source: TGdkInputSource): TGdkEventMask; cdecl;
begin
  Result := LazGdk3.gdk_window_get_source_events(@self, source);
end;

function TGdkWindow.get_state: TGdkWindowState; cdecl;
begin
  Result := LazGdk3.gdk_window_get_state(@self);
end;

function TGdkWindow.get_support_multidevice: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_get_support_multidevice(@self);
end;

function TGdkWindow.get_toplevel: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_window_get_toplevel(@self);
end;

function TGdkWindow.get_type_hint: TGdkWindowTypeHint; cdecl;
begin
  Result := LazGdk3.gdk_window_get_type_hint(@self);
end;

function TGdkWindow.get_update_area: Pcairo_region_t; cdecl;
begin
  Result := LazGdk3.gdk_window_get_update_area(@self);
end;

procedure TGdkWindow.get_user_data(data: Pgpointer); cdecl;
begin
  LazGdk3.gdk_window_get_user_data(@self, data);
end;

function TGdkWindow.get_visible_region: Pcairo_region_t; cdecl;
begin
  Result := LazGdk3.gdk_window_get_visible_region(@self);
end;

function TGdkWindow.get_visual: PGdkVisual; cdecl;
begin
  Result := LazGdk3.gdk_window_get_visual(@self);
end;

function TGdkWindow.get_width: gint; cdecl;
begin
  Result := LazGdk3.gdk_window_get_width(@self);
end;

function TGdkWindow.get_window_type: TGdkWindowType; cdecl;
begin
  Result := LazGdk3.gdk_window_get_window_type(@self);
end;

function TGdkWindow.has_native: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_has_native(@self);
end;

procedure TGdkWindow.hide; cdecl;
begin
  LazGdk3.gdk_window_hide(@self);
end;

procedure TGdkWindow.iconify; cdecl;
begin
  LazGdk3.gdk_window_iconify(@self);
end;

procedure TGdkWindow.input_shape_combine_region(shape_region: Pcairo_region_t; offset_x: gint; offset_y: gint); cdecl;
begin
  LazGdk3.gdk_window_input_shape_combine_region(@self, shape_region, offset_x, offset_y);
end;

procedure TGdkWindow.invalidate_maybe_recurse(region: Pcairo_region_t; child_func: TGdkWindowChildFunc; user_data: gpointer); cdecl;
begin
  LazGdk3.gdk_window_invalidate_maybe_recurse(@self, region, child_func, user_data);
end;

procedure TGdkWindow.invalidate_rect(rect: PGdkRectangle; invalidate_children: gboolean); cdecl;
begin
  LazGdk3.gdk_window_invalidate_rect(@self, rect, invalidate_children);
end;

procedure TGdkWindow.invalidate_region(region: Pcairo_region_t; invalidate_children: gboolean); cdecl;
begin
  LazGdk3.gdk_window_invalidate_region(@self, region, invalidate_children);
end;

function TGdkWindow.is_destroyed: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_is_destroyed(@self);
end;

function TGdkWindow.is_input_only: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_is_input_only(@self);
end;

function TGdkWindow.is_shaped: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_is_shaped(@self);
end;

function TGdkWindow.is_viewable: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_is_viewable(@self);
end;

function TGdkWindow.is_visible: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_is_visible(@self);
end;

procedure TGdkWindow.lower; cdecl;
begin
  LazGdk3.gdk_window_lower(@self);
end;

procedure TGdkWindow.mark_paint_from_clip(cr: Pcairo_t); cdecl;
begin
  LazGdk3.gdk_window_mark_paint_from_clip(@self, cr);
end;

procedure TGdkWindow.maximize; cdecl;
begin
  LazGdk3.gdk_window_maximize(@self);
end;

procedure TGdkWindow.merge_child_input_shapes; cdecl;
begin
  LazGdk3.gdk_window_merge_child_input_shapes(@self);
end;

procedure TGdkWindow.merge_child_shapes; cdecl;
begin
  LazGdk3.gdk_window_merge_child_shapes(@self);
end;

procedure TGdkWindow.move(x: gint; y: gint); cdecl;
begin
  LazGdk3.gdk_window_move(@self, x, y);
end;

procedure TGdkWindow.move_region(region: Pcairo_region_t; dx: gint; dy: gint); cdecl;
begin
  LazGdk3.gdk_window_move_region(@self, region, dx, dy);
end;

procedure TGdkWindow.move_resize(x: gint; y: gint; width: gint; height: gint); cdecl;
begin
  LazGdk3.gdk_window_move_resize(@self, x, y, width, height);
end;

procedure TGdkWindow.move_to_rect(rect: PGdkRectangle; rect_anchor: TGdkGravity; window_anchor: TGdkGravity; anchor_hints: TGdkAnchorHints; rect_anchor_dx: gint; rect_anchor_dy: gint); cdecl;
begin
  LazGdk3.gdk_window_move_to_rect(@self, rect, rect_anchor, window_anchor, anchor_hints, rect_anchor_dx, rect_anchor_dy);
end;

function TGdkWindow.peek_children: PGList; cdecl;
begin
  Result := LazGdk3.gdk_window_peek_children(@self);
end;

procedure TGdkWindow.process_updates(update_children: gboolean); cdecl;
begin
  LazGdk3.gdk_window_process_updates(@self, update_children);
end;

procedure TGdkWindow.raise_; cdecl;
begin
  LazGdk3.gdk_window_raise(@self);
end;

procedure TGdkWindow.register_dnd; cdecl;
begin
  LazGdk3.gdk_window_register_dnd(@self);
end;

procedure TGdkWindow.remove_filter(function_: TGdkFilterFunc; data: gpointer); cdecl;
begin
  LazGdk3.gdk_window_remove_filter(@self, function_, data);
end;

procedure TGdkWindow.reparent(new_parent: PGdkWindow; x: gint; y: gint); cdecl;
begin
  LazGdk3.gdk_window_reparent(@self, new_parent, x, y);
end;

procedure TGdkWindow.resize(width: gint; height: gint); cdecl;
begin
  LazGdk3.gdk_window_resize(@self, width, height);
end;

procedure TGdkWindow.restack(sibling: PGdkWindow; above: gboolean); cdecl;
begin
  LazGdk3.gdk_window_restack(@self, sibling, above);
end;

procedure TGdkWindow.scroll(dx: gint; dy: gint); cdecl;
begin
  LazGdk3.gdk_window_scroll(@self, dx, dy);
end;

procedure TGdkWindow.set_accept_focus(accept_focus: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_accept_focus(@self, accept_focus);
end;

procedure TGdkWindow.set_child_input_shapes; cdecl;
begin
  LazGdk3.gdk_window_set_child_input_shapes(@self);
end;

procedure TGdkWindow.set_child_shapes; cdecl;
begin
  LazGdk3.gdk_window_set_child_shapes(@self);
end;

procedure TGdkWindow.set_cursor(cursor: PGdkCursor); cdecl;
begin
  LazGdk3.gdk_window_set_cursor(@self, cursor);
end;

procedure TGdkWindow.set_decorations(decorations: TGdkWMDecoration); cdecl;
begin
  LazGdk3.gdk_window_set_decorations(@self, decorations);
end;

procedure TGdkWindow.set_device_cursor(device: PGdkDevice; cursor: PGdkCursor); cdecl;
begin
  LazGdk3.gdk_window_set_device_cursor(@self, device, cursor);
end;

procedure TGdkWindow.set_device_events(device: PGdkDevice; event_mask: TGdkEventMask); cdecl;
begin
  LazGdk3.gdk_window_set_device_events(@self, device, event_mask);
end;

procedure TGdkWindow.set_event_compression(event_compression: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_event_compression(@self, event_compression);
end;

procedure TGdkWindow.set_events(event_mask: TGdkEventMask); cdecl;
begin
  LazGdk3.gdk_window_set_events(@self, event_mask);
end;

procedure TGdkWindow.set_focus_on_map(focus_on_map: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_focus_on_map(@self, focus_on_map);
end;

procedure TGdkWindow.set_fullscreen_mode(mode: TGdkFullscreenMode); cdecl;
begin
  LazGdk3.gdk_window_set_fullscreen_mode(@self, mode);
end;

procedure TGdkWindow.set_functions(functions: TGdkWMFunction); cdecl;
begin
  LazGdk3.gdk_window_set_functions(@self, functions);
end;

procedure TGdkWindow.set_geometry_hints(geometry: PGdkGeometry; geom_mask: TGdkWindowHints); cdecl;
begin
  LazGdk3.gdk_window_set_geometry_hints(@self, geometry, geom_mask);
end;

procedure TGdkWindow.set_group(leader: PGdkWindow); cdecl;
begin
  LazGdk3.gdk_window_set_group(@self, leader);
end;

procedure TGdkWindow.set_icon_list(pixbufs: PGList); cdecl;
begin
  LazGdk3.gdk_window_set_icon_list(@self, pixbufs);
end;

procedure TGdkWindow.set_icon_name(name: Pgchar); cdecl;
begin
  LazGdk3.gdk_window_set_icon_name(@self, name);
end;

procedure TGdkWindow.set_invalidate_handler(handler: TGdkWindowInvalidateHandlerFunc); cdecl;
begin
  LazGdk3.gdk_window_set_invalidate_handler(@self, handler);
end;

procedure TGdkWindow.set_keep_above(setting: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_keep_above(@self, setting);
end;

procedure TGdkWindow.set_keep_below(setting: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_keep_below(@self, setting);
end;

procedure TGdkWindow.set_modal_hint(modal: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_modal_hint(@self, modal);
end;

procedure TGdkWindow.set_opacity(opacity: gdouble); cdecl;
begin
  LazGdk3.gdk_window_set_opacity(@self, opacity);
end;

procedure TGdkWindow.set_opaque_region(region: Pcairo_region_t); cdecl;
begin
  LazGdk3.gdk_window_set_opaque_region(@self, region);
end;

procedure TGdkWindow.set_override_redirect(override_redirect: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_override_redirect(@self, override_redirect);
end;

procedure TGdkWindow.set_pass_through(pass_through: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_pass_through(@self, pass_through);
end;

procedure TGdkWindow.set_role(role: Pgchar); cdecl;
begin
  LazGdk3.gdk_window_set_role(@self, role);
end;

procedure TGdkWindow.set_shadow_width(left: gint; right: gint; top: gint; bottom: gint); cdecl;
begin
  LazGdk3.gdk_window_set_shadow_width(@self, left, right, top, bottom);
end;

procedure TGdkWindow.set_skip_pager_hint(skips_pager: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_skip_pager_hint(@self, skips_pager);
end;

procedure TGdkWindow.set_skip_taskbar_hint(skips_taskbar: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_skip_taskbar_hint(@self, skips_taskbar);
end;

procedure TGdkWindow.set_source_events(source: TGdkInputSource; event_mask: TGdkEventMask); cdecl;
begin
  LazGdk3.gdk_window_set_source_events(@self, source, event_mask);
end;

procedure TGdkWindow.set_startup_id(startup_id: Pgchar); cdecl;
begin
  LazGdk3.gdk_window_set_startup_id(@self, startup_id);
end;

procedure TGdkWindow.set_support_multidevice(support_multidevice: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_support_multidevice(@self, support_multidevice);
end;

procedure TGdkWindow.set_title(title: Pgchar); cdecl;
begin
  LazGdk3.gdk_window_set_title(@self, title);
end;

procedure TGdkWindow.set_transient_for(parent: PGdkWindow); cdecl;
begin
  LazGdk3.gdk_window_set_transient_for(@self, parent);
end;

procedure TGdkWindow.set_type_hint(hint: TGdkWindowTypeHint); cdecl;
begin
  LazGdk3.gdk_window_set_type_hint(@self, hint);
end;

procedure TGdkWindow.set_urgency_hint(urgent: gboolean); cdecl;
begin
  LazGdk3.gdk_window_set_urgency_hint(@self, urgent);
end;

procedure TGdkWindow.set_user_data(user_data: PGObject); cdecl;
begin
  LazGdk3.gdk_window_set_user_data(@self, user_data);
end;

procedure TGdkWindow.shape_combine_region(shape_region: Pcairo_region_t; offset_x: gint; offset_y: gint); cdecl;
begin
  LazGdk3.gdk_window_shape_combine_region(@self, shape_region, offset_x, offset_y);
end;

procedure TGdkWindow.show; cdecl;
begin
  LazGdk3.gdk_window_show(@self);
end;

procedure TGdkWindow.show_unraised; cdecl;
begin
  LazGdk3.gdk_window_show_unraised(@self);
end;

function TGdkWindow.show_window_menu(event: PGdkEvent): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_window_show_window_menu(@self, event);
end;

procedure TGdkWindow.stick; cdecl;
begin
  LazGdk3.gdk_window_stick(@self);
end;

procedure TGdkWindow.thaw_updates; cdecl;
begin
  LazGdk3.gdk_window_thaw_updates(@self);
end;

procedure TGdkWindow.unfullscreen; cdecl;
begin
  LazGdk3.gdk_window_unfullscreen(@self);
end;

procedure TGdkWindow.unmaximize; cdecl;
begin
  LazGdk3.gdk_window_unmaximize(@self);
end;

procedure TGdkWindow.unstick; cdecl;
begin
  LazGdk3.gdk_window_unstick(@self);
end;

procedure TGdkWindow.withdraw; cdecl;
begin
  LazGdk3.gdk_window_withdraw(@self);
end;

function TGdkSeat.get_capabilities: TGdkSeatCapabilities; cdecl;
begin
  Result := LazGdk3.gdk_seat_get_capabilities(@self);
end;

function TGdkSeat.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_seat_get_display(@self);
end;

function TGdkSeat.get_keyboard: PGdkDevice; cdecl;
begin
  Result := LazGdk3.gdk_seat_get_keyboard(@self);
end;

function TGdkSeat.get_pointer: PGdkDevice; cdecl;
begin
  Result := LazGdk3.gdk_seat_get_pointer(@self);
end;

function TGdkSeat.get_slaves(capabilities: TGdkSeatCapabilities): PGList; cdecl;
begin
  Result := LazGdk3.gdk_seat_get_slaves(@self, capabilities);
end;

function TGdkSeat.grab(window: PGdkWindow; capabilities: TGdkSeatCapabilities; owner_events: gboolean; cursor: PGdkCursor; event: PGdkEvent; prepare_func: TGdkSeatGrabPrepareFunc; prepare_func_data: gpointer): TGdkGrabStatus; cdecl;
begin
  Result := LazGdk3.gdk_seat_grab(@self, window, capabilities, owner_events, cursor, event, prepare_func, prepare_func_data);
end;

procedure TGdkSeat.ungrab; cdecl;
begin
  LazGdk3.gdk_seat_ungrab(@self);
end;

function TGdkDeviceManager.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_device_manager_get_display(@self);
end;

function TGdkDeviceTool.get_hardware_id: guint64; cdecl;
begin
  Result := LazGdk3.gdk_device_tool_get_hardware_id(@self);
end;

function TGdkDeviceTool.get_serial: guint64; cdecl;
begin
  Result := LazGdk3.gdk_device_tool_get_serial(@self);
end;

function TGdkDeviceTool.get_tool_type: TGdkDeviceToolType; cdecl;
begin
  Result := LazGdk3.gdk_device_tool_get_tool_type(@self);
end;

function TGdkDevicePad.get_feature_group(feature: TGdkDevicePadFeature; feature_idx: gint): gint; cdecl;
begin
  Result := LazGdk3.gdk_device_pad_get_feature_group(@self, feature, feature_idx);
end;

function TGdkDevicePad.get_group_n_modes(group_idx: gint): gint; cdecl;
begin
  Result := LazGdk3.gdk_device_pad_get_group_n_modes(@self, group_idx);
end;

function TGdkDevicePad.get_n_features(feature: TGdkDevicePadFeature): gint; cdecl;
begin
  Result := LazGdk3.gdk_device_pad_get_n_features(@self, feature);
end;

function TGdkDevicePad.get_n_groups: gint; cdecl;
begin
  Result := LazGdk3.gdk_device_pad_get_n_groups(@self);
end;

function TGdkRectangle.equal(rect2: PGdkRectangle): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_rectangle_equal(@self, rect2);
end;

function TGdkRectangle.intersect(src2: PGdkRectangle; dest: PGdkRectangle): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_rectangle_intersect(@self, src2, dest);
end;

procedure TGdkRectangle.union(src2: PGdkRectangle; dest: PGdkRectangle); cdecl;
begin
  LazGdk3.gdk_rectangle_union(@self, src2, dest);
end;

function TGdkMonitor.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_display(@self);
end;

procedure TGdkMonitor.get_geometry(geometry: PGdkRectangle); cdecl;
begin
  LazGdk3.gdk_monitor_get_geometry(@self, geometry);
end;

function TGdkMonitor.get_height_mm: gint; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_height_mm(@self);
end;

function TGdkMonitor.get_manufacturer: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_manufacturer(@self);
end;

function TGdkMonitor.get_model: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_model(@self);
end;

function TGdkMonitor.get_refresh_rate: gint; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_refresh_rate(@self);
end;

function TGdkMonitor.get_scale_factor: gint; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_scale_factor(@self);
end;

function TGdkMonitor.get_subpixel_layout: TGdkSubpixelLayout; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_subpixel_layout(@self);
end;

function TGdkMonitor.get_width_mm: gint; cdecl;
begin
  Result := LazGdk3.gdk_monitor_get_width_mm(@self);
end;

procedure TGdkMonitor.get_workarea(workarea: PGdkRectangle); cdecl;
begin
  LazGdk3.gdk_monitor_get_workarea(@self, workarea);
end;

function TGdkMonitor.is_primary: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_monitor_is_primary(@self);
end;

function TGdkDisplayManager.get: PGdkDisplayManager; cdecl;
begin
  Result := LazGdk3.gdk_display_manager_get();
end;

function TGdkDisplayManager.get_default_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_display_manager_get_default_display(@self);
end;

function TGdkDisplayManager.list_displays: PGSList; cdecl;
begin
  Result := LazGdk3.gdk_display_manager_list_displays(@self);
end;

function TGdkDisplayManager.open_display(name: Pgchar): PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_display_manager_open_display(@self, name);
end;

procedure TGdkDisplayManager.set_default_display(display: PGdkDisplay); cdecl;
begin
  LazGdk3.gdk_display_manager_set_default_display(@self, display);
end;

function TGdkDragContext.get_actions: TGdkDragAction; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_actions(@self);
end;

function TGdkDragContext.get_dest_window: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_dest_window(@self);
end;

function TGdkDragContext.get_device: PGdkDevice; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_device(@self);
end;

function TGdkDragContext.get_drag_window: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_drag_window(@self);
end;

function TGdkDragContext.get_protocol: TGdkDragProtocol; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_protocol(@self);
end;

function TGdkDragContext.get_selected_action: TGdkDragAction; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_selected_action(@self);
end;

function TGdkDragContext.get_source_window: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_source_window(@self);
end;

function TGdkDragContext.get_suggested_action: TGdkDragAction; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_get_suggested_action(@self);
end;

function TGdkDragContext.list_targets: PGList; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_list_targets(@self);
end;

function TGdkDragContext.manage_dnd(ipc_window: PGdkWindow; actions: TGdkDragAction): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_drag_context_manage_dnd(@self, ipc_window, actions);
end;

procedure TGdkDragContext.set_device(device: PGdkDevice); cdecl;
begin
  LazGdk3.gdk_drag_context_set_device(@self, device);
end;

procedure TGdkDragContext.set_hotspot(hot_x: gint; hot_y: gint); cdecl;
begin
  LazGdk3.gdk_drag_context_set_hotspot(@self, hot_x, hot_y);
end;

function TGdkDrawingContext.get_cairo_context: Pcairo_t; cdecl;
begin
  Result := LazGdk3.gdk_drawing_context_get_cairo_context(@self);
end;

function TGdkDrawingContext.get_clip: Pcairo_region_t; cdecl;
begin
  Result := LazGdk3.gdk_drawing_context_get_clip(@self);
end;

function TGdkDrawingContext.get_window: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_drawing_context_get_window(@self);
end;

function TGdkDrawingContext.is_valid: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_drawing_context_is_valid(@self);
end;

procedure TGdkFrameClock.begin_updating; cdecl;
begin
  LazGdk3.gdk_frame_clock_begin_updating(@self);
end;

procedure TGdkFrameClock.end_updating; cdecl;
begin
  LazGdk3.gdk_frame_clock_end_updating(@self);
end;

function TGdkFrameClock.get_current_timings: PGdkFrameTimings; cdecl;
begin
  Result := LazGdk3.gdk_frame_clock_get_current_timings(@self);
end;

function TGdkFrameClock.get_frame_counter: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_clock_get_frame_counter(@self);
end;

function TGdkFrameClock.get_frame_time: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_clock_get_frame_time(@self);
end;

function TGdkFrameClock.get_history_start: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_clock_get_history_start(@self);
end;

procedure TGdkFrameClock.get_refresh_info(base_time: gint64; refresh_interval_return: Pgint64; presentation_time_return: Pgint64); cdecl;
begin
  LazGdk3.gdk_frame_clock_get_refresh_info(@self, base_time, refresh_interval_return, presentation_time_return);
end;

function TGdkFrameClock.get_timings(frame_counter: gint64): PGdkFrameTimings; cdecl;
begin
  Result := LazGdk3.gdk_frame_clock_get_timings(@self, frame_counter);
end;

procedure TGdkFrameClock.request_phase(phase: TGdkFrameClockPhase); cdecl;
begin
  LazGdk3.gdk_frame_clock_request_phase(@self, phase);
end;

function TGdkFrameTimings.get_complete: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_frame_timings_get_complete(@self);
end;

function TGdkFrameTimings.get_frame_counter: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_timings_get_frame_counter(@self);
end;

function TGdkFrameTimings.get_frame_time: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_timings_get_frame_time(@self);
end;

function TGdkFrameTimings.get_predicted_presentation_time: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_timings_get_predicted_presentation_time(@self);
end;

function TGdkFrameTimings.get_presentation_time: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_timings_get_presentation_time(@self);
end;

function TGdkFrameTimings.get_refresh_interval: gint64; cdecl;
begin
  Result := LazGdk3.gdk_frame_timings_get_refresh_interval(@self);
end;

function TGdkFrameTimings.ref: PGdkFrameTimings; cdecl;
begin
  Result := LazGdk3.gdk_frame_timings_ref(@self);
end;

procedure TGdkFrameTimings.unref; cdecl;
begin
  LazGdk3.gdk_frame_timings_unref(@self);
end;

procedure TGdkGLContext.clear_current; cdecl;
begin
  LazGdk3.gdk_gl_context_clear_current();
end;

function TGdkGLContext.get_current: PGdkGLContext; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_get_current();
end;

function TGdkGLContext.get_debug_enabled: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_get_debug_enabled(@self);
end;

function TGdkGLContext.get_display: PGdkDisplay; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_get_display(@self);
end;

function TGdkGLContext.get_forward_compatible: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_get_forward_compatible(@self);
end;

procedure TGdkGLContext.get_required_version(major: Pgint; minor: Pgint); cdecl;
begin
  LazGdk3.gdk_gl_context_get_required_version(@self, major, minor);
end;

function TGdkGLContext.get_shared_context: PGdkGLContext; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_get_shared_context(@self);
end;

function TGdkGLContext.get_use_es: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_get_use_es(@self);
end;

procedure TGdkGLContext.get_version(major: Pgint; minor: Pgint); cdecl;
begin
  LazGdk3.gdk_gl_context_get_version(@self, major, minor);
end;

function TGdkGLContext.get_window: PGdkWindow; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_get_window(@self);
end;

function TGdkGLContext.is_legacy: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_is_legacy(@self);
end;

procedure TGdkGLContext.make_current; cdecl;
begin
  LazGdk3.gdk_gl_context_make_current(@self);
end;

function TGdkGLContext.realize(error: PPGError): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_gl_context_realize(@self, error);
end;

procedure TGdkGLContext.set_debug_enabled(enabled: gboolean); cdecl;
begin
  LazGdk3.gdk_gl_context_set_debug_enabled(@self, enabled);
end;

procedure TGdkGLContext.set_forward_compatible(compatible: gboolean); cdecl;
begin
  LazGdk3.gdk_gl_context_set_forward_compatible(@self, compatible);
end;

procedure TGdkGLContext.set_required_version(major: gint; minor: gint); cdecl;
begin
  LazGdk3.gdk_gl_context_set_required_version(@self, major, minor);
end;

procedure TGdkGLContext.set_use_es(use_es: gint); cdecl;
begin
  LazGdk3.gdk_gl_context_set_use_es(@self, use_es);
end;

function TGdkKeymap.get_for_display(display: PGdkDisplay): PGdkKeymap; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_for_display(display);
end;

procedure TGdkKeymap.add_virtual_modifiers(state: PGdkModifierType); cdecl;
begin
  LazGdk3.gdk_keymap_add_virtual_modifiers(@self, state);
end;

function TGdkKeymap.get_caps_lock_state: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_caps_lock_state(@self);
end;

function TGdkKeymap.get_direction: TPangoDirection; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_direction(@self);
end;

function TGdkKeymap.get_entries_for_keycode(hardware_keycode: guint; keys: PPGdkKeymapKey; keyvals: PPguint; n_entries: Pgint): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_entries_for_keycode(@self, hardware_keycode, keys, keyvals, n_entries);
end;

function TGdkKeymap.get_entries_for_keyval(keyval: guint; keys: PPGdkKeymapKey; n_keys: Pgint): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_entries_for_keyval(@self, keyval, keys, n_keys);
end;

function TGdkKeymap.get_modifier_mask(intent: TGdkModifierIntent): TGdkModifierType; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_modifier_mask(@self, intent);
end;

function TGdkKeymap.get_modifier_state: TGdkModifierType; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_modifier_state(@self);
end;

function TGdkKeymap.get_num_lock_state: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_num_lock_state(@self);
end;

function TGdkKeymap.get_scroll_lock_state: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_get_scroll_lock_state(@self);
end;

function TGdkKeymap.have_bidi_layouts: gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_have_bidi_layouts(@self);
end;

function TGdkKeymap.lookup_key(key: PGdkKeymapKey): guint; cdecl;
begin
  Result := LazGdk3.gdk_keymap_lookup_key(@self, key);
end;

function TGdkKeymap.map_virtual_modifiers(state: PGdkModifierType): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_map_virtual_modifiers(@self, state);
end;

function TGdkKeymap.translate_keyboard_state(hardware_keycode: guint; state: TGdkModifierType; group: gint; keyval: Pguint; effective_group: Pgint; level: Pgint; consumed_modifiers: PGdkModifierType): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_keymap_translate_keyboard_state(@self, hardware_keycode, state, group, keyval, effective_group, level, consumed_modifiers);
end;

function TGdkRGBA.copy: PGdkRGBA; cdecl;
begin
  Result := LazGdk3.gdk_rgba_copy(@self);
end;

function TGdkRGBA.equal(p2: PGdkRGBA): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_rgba_equal(@self, p2);
end;

procedure TGdkRGBA.free; cdecl;
begin
  LazGdk3.gdk_rgba_free(@self);
end;

function TGdkRGBA.hash: guint; cdecl;
begin
  Result := LazGdk3.gdk_rgba_hash(@self);
end;

function TGdkRGBA.parse(spec: Pgchar): gboolean; cdecl;
begin
  Result := LazGdk3.gdk_rgba_parse(@self, spec);
end;

function TGdkRGBA.to_string: Pgchar; cdecl;
begin
  Result := LazGdk3.gdk_rgba_to_string(@self);
end;

function TGdkVisual.get_best: PGdkVisual; cdecl;
begin
  Result := LazGdk3.gdk_visual_get_best();
end;

function TGdkVisual.get_bits_per_rgb: gint; cdecl;
begin
  Result := LazGdk3.gdk_visual_get_bits_per_rgb(@self);
end;

procedure TGdkVisual.get_blue_pixel_details(mask: Pguint32; shift: Pgint; precision: Pgint); cdecl;
begin
  LazGdk3.gdk_visual_get_blue_pixel_details(@self, mask, shift, precision);
end;

function TGdkVisual.get_byte_order: TGdkByteOrder; cdecl;
begin
  Result := LazGdk3.gdk_visual_get_byte_order(@self);
end;

function TGdkVisual.get_colormap_size: gint; cdecl;
begin
  Result := LazGdk3.gdk_visual_get_colormap_size(@self);
end;

function TGdkVisual.get_depth: gint; cdecl;
begin
  Result := LazGdk3.gdk_visual_get_depth(@self);
end;

procedure TGdkVisual.get_green_pixel_details(mask: Pguint32; shift: Pgint; precision: Pgint); cdecl;
begin
  LazGdk3.gdk_visual_get_green_pixel_details(@self, mask, shift, precision);
end;

procedure TGdkVisual.get_red_pixel_details(mask: Pguint32; shift: Pgint; precision: Pgint); cdecl;
begin
  LazGdk3.gdk_visual_get_red_pixel_details(@self, mask, shift, precision);
end;

function TGdkVisual.get_screen: PGdkScreen; cdecl;
begin
  Result := LazGdk3.gdk_visual_get_screen(@self);
end;

function TGdkVisual.get_visual_type: TGdkVisualType; cdecl;
begin
  Result := LazGdk3.gdk_visual_get_visual_type(@self);
end;

end.
