[arrayd | array declaration (var)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
!FileVersion=1
$(AttributesEnd)
$Param(VariableName): array[0..$Param(HighNumber)] of $Param(Type);|
[arrayc | array declaration (const)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
array[$Param(0)..$Param(1)] of $Param(Type) = (|);
[cases | case statement]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
case $Param(var) of
  : |;
  : ;
end$AddSemicolon()
[be | begin end else begin end]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
begin
  |
end else begin

end$AddSemicolon()
[casee | case statement (with else)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
case $Param(var) of
  : |;
  : ;
else ;
end$AddSemicolon()
[classf | class declaration (all parts)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
$Param(ClassName) = class($Param(InheritedClass))
private

public
  |
  constructor Create;
  destructor Destroy; override;
end;
[classd | class declaration (no parts)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
$Param(ClassName) = class($Param(InheritedClass))
  |
end;
[classc | class declaration (with Create/Destroy overrides)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
$Param(ClassName) = class($Param(InheritedClass))
private

protected

public
  |
  constructor Create; override;
  destructor Destroy; override;
published
end;
[d | debugln]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
debugln(['$ProcedureName() '|])$AddSemicolon()
[fors | for (no begin/end)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
for $Param(CounterVar) := $Param(0) to Pred($Param(Count)) do
  |
[forb | for statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
for $Param(CounterVar) := $Param(0) to Pred($Param(Count)) do
begin
  |
end$AddSemicolon()
[function | function declaration]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
function $Param(Name)($Param()): $Param(Type);
begin
  |
end;
[hexc | HexStr(Cardinal(),8)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
HexStr(PtrUInt($Param()),8)|
[ifs | if (no begin/end)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
if $Param(Conditional) then
  |
[ifb | if statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
if $Param(Conditional) then
begin
  |
end$AddSemicolon()
[ife | if then (no begin/end) else (no begin/end)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
if $Param(Conditional) then
  |
else
[ifeb | if then else]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
if $Param(Conditional) then
begin
  |
end else begin

end$AddSemicolon()
[procedure | procedure declaration]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
procedure $Param(ProcName)($Param());
begin
  |
end;
[ofall | case of all enums]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
of
|$OfAll()end$AddSemicolon()
[trye | try except]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
try
  | 
except

end$AddSemicolon()
[tryf | try finally]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
try
  |
finally
  $Param(FreeStatement,default)
end$AddSemicolon()
[trycf | try finally (with Create/Free)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
$Param(VarName) := $Param(TMyClassName).Create;
try
  |
finally
  $Param(VarName,Sync=1).Free;
end;
[whileb | while statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
while $Param(LoopCondition) do
begin
  |
end$AddSemicolon()
[whiles | while (no begin)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
while $Param(LoopCondition) do
  |
[withb | with statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
with $Param(Object) do
begin
  |
end$AddSemicolon()
[b | begin end]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
begin
  |
end$AddSemicolon()
[withs | with (no begin)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
with $Param(Object) do
  |
[withc | with for components]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
with $Param(Object) do
begin
  Name:='$Param(NameText)';
  Parent:=Self;
  Left:=$Param(0);
  Top:=$Param(0);
  Width:=$Param(0);
  Height:=$Param(0);
  Caption:='$Param(CaptionText)';
end$AddSemicolon()
|
[fpc | Conditional FPC Mode]
$(AttributesStart)
RemoveChar=true
$(AttributesEnd)
{$IFDEF FPC}
  {$mode objfpc}{$H+}
{$ENDIF}
|
[todo | ToDo item creator]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
{ TODO -o$Param(Author) : $Param(Note) } |
[w | writeln]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
writeln('$ProcedureName() '|)$AddSemicolon()
[prws | property read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name) read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[prwd | property read write default]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name) read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1) default $Param(Const);|
[pirws | property Integer read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Integer read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[pirwd | property Integer read write default]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Integer read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1) default $Param(Const);|
[psrw | property string read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): string read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[pdrwd | property Double read write default]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Double read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1) default $Param(Const);|
[pdrws | property Double read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Double read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[is | IntToStr]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
IntToStr($Param())|
[si | StrToInt()]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
StrToInt($Param())|
[sid | StrToIntDef]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
StrToIntDef($Param(), $Param(-1))|
[bs | BoolToStr]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
BoolToStr($Param(), true)|
[sb | StrToBool]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
StrToBool($Param())|
[sbd | StrToBoolDef]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
StrToBoolDef($Param(), $Param(false))|
[ih | IntToHex]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
IntToHex($Param())|