<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
<package name="lcl">
<!--
====================================================================
InterfaceBase
====================================================================
-->
<module name="InterfaceBase">
<short>
Provides a platform-independent widgetset class and helper functions.
</short>
<descr>
<p>
<file>interfacebase.pp</file> contains classes, types, and routines used to 
define a platform-independent widgetset class (<var>TWidgetSet</var>) and 
helper functions.
</p>
<p>
This file is part of the Lazarus Component Library (<b>LCL</b>).
</p>
</descr>

<!-- unresolved external references -->
<element name="Types"/>
<element name="Classes"/>
<element name="SysUtils"/>
<element name="Math"/>
<element name="FPImage"/>
<element name="LCLProc"/>
<element name="LCLType"/>
<element name="LMessages"/>
<element name="LCLPlatformDef"/>
<element name="IntfGraphics"/>
<element name="Themes"/>
<element name="LazUTF8"/>
<element name="IntegerList"/>
<element name="LazUtilities"/>
<element name="LazLoggerBase"/>
<element name="GraphType"/>
<element name="GraphMath"/>

<element name="PEventHandler">
<short>Pointer to an event handler routine.</short>
<descr>
<p>
PEventHandler is an alias to the Pointer type. It is used in widgetset class 
to add or remove event handlers in the class instance.
</p>
</descr>
<seealso/>
</element>

<element name="PProcessEventHandler">
<short>Pointer to a process event handler routine.</short>
<short/>
<descr>
<p>
PProcessEventHandler is an alias to the Pointer type. It is used in widgetset 
class to add or remove process event handlers in the class instance.
</p>
</descr>
<seealso/>
</element>

<element name="PPipeEventHandler">
<short>Pointer to a pipe event handler routine.</short>
<descr>
<p>
PPipeEventHandler is an alias to the Pointer type. It is used in widgetset 
class to add or remove pipe event handlers in the class instance.
</p>
</descr>
<seealso/>
</element>

<element name="PSocketEventHandler">
<short>Pointer to a socket event handler routine.</short>
<descr>
<p>
PSocketEventHandler is an alias to the Pointer type. It is used in widgetset 
class to add or socket event handlers in the class instance.
</p>
</descr>
<seealso/>
</element>

<element name="TChildExitReason">
<short>Represents reasons that a child process was exited.</short>
<descr>
<p>
<var>TChildExitReason</var> is an enumerated type with values that represent 
reasons a child process was exited. TChildExitReason values are passed as a 
parameter to <var>TChildExitEvent</var> event handler routines, and used in 
the <var>TAsyncProcess.HandleProcessTermination</var> method which implements 
the event handler.
</p>
</descr>
<seealso>
<link id="TChildExitEvent"/>
<link id="#lcl.asyncprocess.TAsyncProcess.HandleProcessTermination">TAsyncProcess.HandleProcessTermination</link>
</seealso>
</element>
<element name="TChildExitReason.cerExit">
<short>Child process was exited normally.</short>
</element>
<element name="TChildExitReason.cerSignal">
<short>Child process was terminated by a signal.</short>
</element>

<element name="TPipeReason">
<short>Represents reasons that a pipe event was signalled.</short>
<descr>
<p>
<var>TPipeReason</var> is an enumerated type with values that represent 
reasons a pipe event was signalled. TPipeReason values are passed as a 
parameter to <var>TPipeEvent</var> event handler routines used in WidgetSet 
classes.
</p>
</descr>
<seealso>
<link id="TPipeEvent"/>
</seealso>
</element>
<element name="TPipeReason.prDataAvailable">
<short>Data is available as input for the pipe.</short>
</element>
<element name="TPipeReason.prBroken">
<short>The pipe was closed or did not provide expected data.</short>
</element>
<element name="TPipeReason.prCanWrite">
<short>Data is available to be written as output.</short>
</element>

<element name="TPipeReasons">
<short>Set type used to store values from TPipeReason.</short>
<descr/>
<seealso>
<link id="TPipeReason"/>
<link id="TPipeEvent"/>
</seealso>
</element>

<element name="TApplicationMainLoop">
<short>Represents the main processing loop in an application.</short>
<descr>
<p>
<var>TApplicationMainLoop</var> is an object procedure type which represents 
the main processing loop for an application. TApplicationMainLoop is the type 
passed as an argument to the <var>TWidgetSet.AppRun</var> method.
</p>
</descr>
<seealso>
<link id="TWidgetSet.AppRun"/>
</seealso>
</element>

<element name="TWaitHandleEvent">
<short>
Specifies an event handler signalled for the handle in an interface object.
</short>
<descr>
<p>
<var>TWaitHandleEvent</var> is an object procedure which specifies an event 
handler signalled for the handle in an interface object. The parameters 
contain a pointer to the data and flag values used in the event notification. 
It provides a callback routine executed when the signal occurs on the handle.
</p>
<p>
TWaitHandleEvent is passed as an argument to the 
<var>TWidgetSet.AddEventHandler</var> method.
</p>
</descr>
<seealso>
<link id="TWidgetSet.AddEventHandler"/>
<link id="PEventHandler"/>
<link id="PPipeEventHandler"/>
<link id="PProcessEventHandler"/>
<link id="PSocketEventHandler"/>
</seealso>
</element>
<element name="TWaitHandleEvent.AData">
<short>Integer pointer to the data for the event.</short>
</element>
<element name="TWaitHandleEvent.AFlags">
<short>Flag value(s) for the event notification.</short>
</element>

<element name="TChildExitEvent">
<short>
Specifies an event handler signalled when a child process is exited.
</short>
<descr>
<p>
<var>TChildExitEvent</var> is an object precedure type which specifies an 
event handler signalled when a child process is exited in a widgetset object. 
The parameters provide a pointer to the event data, the reason the process 
was exited, and a unique identifier for the event.
</p>
<p>
TChildExitEvent is the type passed as an argument to the 
<var>TWidgetSet.AddProcessEventHandler</var> method.
</p>
</descr>
<seealso>
<link id="TChildExitReason"/>
<link id="TWidgetSet.AddProcessEventHandler"/>
</seealso>
</element>
<element name="TChildExitEvent.AData">
<short>Pointer to the data for the event.</short>
</element>
<element name="TChildExitEvent.AReason">
<short>Reason the process was exited.</short>
</element>
<element name="TChildExitEvent.AInfo">
<short>Unique identifier for the event notification.</short>
</element>

<element name="TPipeEvent">
<short>
Specifies an event handler signalled for a pipe handle in a widgetset object.
</short>
<descr>
<p>
<var>TPipeEvent</var> is an object procedure type which specifies an event 
handler signalled for a pipe handle in a widgetset object. It is used for 
asynchronous process event notifications. The parameters contain a pointer to 
the data for the event, and the reason for the event notification.
</p>
<p>
TPipeEvent is the type passed as an argument to the 
<var>TWidgetSet.AddPipeEventHandler</var> method.
</p>
</descr>
<seealso>
<link id="TPipeReason"/>
<link id="#lcl.asyncprocess.TAsyncProcess">TAsyncProcess</link>
</seealso>
</element>
<element name="TPipeEvent.AData">
<short>Pointer to the data for the event notification.</short>
</element>
<element name="TPipeEvent.AReasons">
<short>Reason for the event notification.</short>
</element>

<element name="TSocketEvent">
<short>
Specifies an event handler signalled for a socket handle in a widgetset 
object.
</short>
<descr>
<p>
<var>TSocketEvent</var> is an object procedure type which specifies an event 
handler signalled for a socket handle in a widgetset object.
</p>
</descr>
<seealso/>
<notes><note>Cannot find a use case. Redeclared in widgetset 
classes.</note></notes>
</element>
<element name="TSocketEvent.AData">
<short>Pointer to the data for the event notification.</short>
</element>
<element name="TSocketEvent.AFlags">
<short>Flag values for the event notification.</short>
</element>

<element name="TLCLWndMethod">
<short>The type used for all LCL message handlers.</short>
<descr/>
<seealso/>
</element>
<element name="TLCLWndMethod.TheMessage">
<short/>
</element>

<element name="TLCLCapability">
<short>Represents capabilities used in the LCL.</short>
<descr>
<var>TLCLCapability</var> is an enumerated type with values that represent 
capabilities used in the Lazarus Component Library (<b>LCL</b>). The 
enumeration values identify features or behaviors that may be implemented in 
a given widgetset object. The enumeration values can be passed to the 
<var>TWidgetSet.GetLCLCapability</var> method to determine whether the 
feature or behavior is implemented for the platform.
</descr>
<seealso>
<link id="TWidgetSet.GetLCLCapability"/>
</seealso>
</element>
<element name="TLCLCapability.lcAsyncProcess">
<short>Supports asynchronous processes.</short>
</element>
<element name="TLCLCapability.lcCanDrawOutsideOnPaint">
<short>Supports drawing outside of the OnPaint event for a control.</short>
</element>
<element name="TLCLCapability.lcNeedMininimizeAppWithMainForm">
<short>
When the main form is minimized, the application is minimized too.
</short>
</element>
<element name="TLCLCapability.lcApplicationTitle">
<short>Can change application title at run-time.</short>
</element>
<element name="TLCLCapability.lcApplicationWindow">
<short>Application has a special root window.</short>
</element>
<element name="TLCLCapability.lcFormIcon">
<short>Forms have an icon.</short>
</element>
<element name="TLCLCapability.lcModalWindow">
<short>Has native modal window support.</short>
</element>
<element name="TLCLCapability.lcDragDockStartOnTitleClick">
<short>Can drag-dock forms by clicking on the title bar.</short>
</element>
<element name="TLCLCapability.lcAntialiasingEnabledByDefault">
<short>amDontCare is the same as amOn for the widgetset.</short>
</element>
<element name="TLCLCapability.lcLMHelpSupport">
<short>Has support for the LM_HELP command.</short>
</element>
<element name="TLCLCapability.lcReceivesLMClearCutCopyPasteReliably">
<short>
Carbon does not receive LM_CLEAR, LM_CUT, LM_COPY, LM_PASTE reliably; this 
affects DB controls.
</short>
</element>
<element name="TLCLCapability.lcSendsUTF8KeyPress">
<short>
The interface sends UTF8KeyPress directly. When not available, it will be 
emulated in TWinControl.CNChar.
</short>
</element>
<element name="TLCLCapability.lcAllowChildControlsInNativeControls">
<short>
Used by the LCL custom-drawn widgetset so that it can inject child controls 
in native ones.
</short>
</element>
<element name="TLCLCapability.lcEmulatedMDI">
<short>
Provides emulation of MDI commands for widgetsets which do not provide native 
MDI handling.
</short>
</element>
<element name="TLCLCapability.lcAccessibilitySupport">
<short>
Indicates accessibility is implemented; mostly for TCustomControl descendents 
as native widgetsets should have in-built accessibility.
</short>
</element>
<element name="TLCLCapability.lcRadialGradientBrush">
<short>
Indicates that CreateBrushWithRadialGradient is supported to create a brush 
with a radial gradient pattern.
</short>
</element>
<element name="TLCLCapability.lcTransparentWindow">
<short>
Has the ability to pass mouse messages through a window (on win32 
LM_NCHITTEST with HTTRANSPARENT result).
</short>
</element>
<element name="TLCLCapability.lcTextHint">
<short>Has native TextHint support.</short>
</element>
<element name="TLCLCapability.lcNativeTaskDialog">
<short>
Task dialogs on MS Windows for widgetsets different than win32/wince. Used in 
LCLTaskDialog. Qt/Qt5 must set this option to <b>False</b> otherwise 
taskdialog segfaults.
</short>
</element>
<element name="TLCLCapability.lcCanDrawHidden">
<short>
The system rendering engine might request a hidden control to be drawn (macOS 
10.9 and later).
</short>
</element>
<element name="TLCLCapability.lcAccelleratorKeys">
<short>
Supports UI accelerator keys using &amp; as a prefix for the accelerator 
character.
</short>
</element>

<element name="TDialogButton">
<short>Implements a standard dialog button.</short>
<descr>
<p>
<var>TDialogButton</var> is a <var>TCollectionItem</var> descendant which 
implements a standard dialog button.
</p>
<p>
TDialogButton is the type created and stored in the <var>TDialogButtons</var> 
<var>Collection</var>. An overridden method is provided to use the 
<var>Caption</var> as the <var>DisplayName</var> for the collection item.
</p>
<p>
TDialogButton contains properties used to control how a dialog button button 
is displayed and used.
</p>
<p>
<var>Caption</var> contains the text displayed on the button face, and can 
define an accelerator key by prefixing a character with an <b>Ampersand</b> 
(<b>&amp;</b>).
</p>
<p>
<var>Cancels</var> indicate if the dialog button is used as the Cancel button 
in the Collection.
</p>
<p>
<var>Default</var> indicates if the dialog button is the default button in 
the Collection.
</p>
</descr>
<seealso>
<link id="TDialogButtons"/>
<link id="TWidgetSet.AskUser"/>
<link id="#rtl.classes.TCollectionItem.Collection">TCollectionItem.Collection</link>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>

<!-- private -->
<element name="TDialogButton.FCaption" link="#lcl.interfacebase.TDialogButton.Caption"/>
<element name="TDialogButton.FModalResult" link="#lcl.interfacebase.TDialogButton.ModalResult"/>
<element name="TDialogButton.GetCancel" link="#lcl.interfacebase.TDialogButton.Cancel"/>
<element name="TDialogButton.GetCancel.Result"/>
<element name="TDialogButton.GetDefault" link="#lcl.interfacebase.TDialogButton.Default"/>
<element name="TDialogButton.GetDefault.Result"/>
<element name="TDialogButton.SetCancel" link="#lcl.interfacebase.TDialogButton.Cancel"/>
<element name="TDialogButton.SetCancel.AValue"/>
<element name="TDialogButton.SetDefault" link="#lcl.interfacebase.TDialogButton.Default"/>
<element name="TDialogButton.SetDefault.AValue"/>

<element name="TDialogButton.GetDisplayName">
<short>Gets the value for the DisplayName property.</short>
<descr>
<p>
<var>GetDisplayName</var> is an overridden method in <var>TDialogButton</var> 
and uses the value in the <var>Caption</var> property as the name displayed 
for the collection item.
</p>
</descr>
<seealso>
<link id="TDialogButton.Caption"/>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>
<element name="TDialogButton.GetDisplayName.Result">
<short>Display name for the collection item.</short>
</element>

<element name="TDialogButton.SetCaption">
<short>Sets the value for the Caption property.</short>
<descr/>
<seealso>
<link id="TDialogButton.Caption"/>
</seealso>
</element>
<element name="TDialogButton.SetCaption.AValue">
<short>New value for the properly.</short>
</element>

<element name="TDialogButton.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
Create is the overridden constructor for the class instance, and calls the 
inherited method on entry.
</p>
<p>
ACollection is the <var>TCollection</var> instance which owns the new dialog 
button. It is assigned to the <var>Collection</var> property in the 
collection item.
</p>
<p>
Create sets the default values for the <var>Caption</var> and 
<var>ModalResult</var> properties.
</p>
</descr>
<seealso>
<link id="TDialogButton.Caption"/>
<link id="TDialogButton.ModalResult"/>
</seealso>
</element>
<element name="TDialogButton.Create.ACollection">
<short>Collection which owns the collection item.</short>
</element>

<element name="TDialogButton.Caption">
<short>Value displayed on the button face.</short>
<descr>
<p>
<var>Caption</var> is a <var>String</var> property with the value displayed 
on the button face for the dialog button. The value in Caption is also used 
as the <var>DisplayName</var> for the collection item in the 
<var>TDialogButtons</var> collection.
</p>
</descr>
<seealso>
<link id="TDialogButtons"/>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>

<element name="TDialogButton.Cancel">
<short><b>True</b> if the button is the Cancel button.</short>
<descr>
<p>
<var>Cancel</var> is a <var>Boolean</var> property which indicates if the 
button is used as the Cancel button in the dialog.
</p>
<p>
Cancel is <b>True</b> when the button instance is the value assigned to the 
<var>CancelButton</var> property in <var>TDialogButtons</var> collection. 
Setting a new value in Cancel causes the CancelButton property in 
TDialogButtons to be updated accordingly.
</p>
<p>
Use <var>Default</var> to control whether the button is the default button 
for the dialog.
</p>
<p>
Use <var>ModalResult</var> to set the value returned when the button is 
clicked.
</p>
</descr>
<seealso>
<link id="TDialogButton.Default"/>
<link id="TDialogButton.ModalResult"/>
<link id="TDialogButtons.CancelButton"/>
</seealso>
</element>

<element name="TDialogButton.Default">
<short><b>True</b> if the button is the default button.</short>
<descr>
<p>
<var>Default</var> is a <var>Boolean</var> property which indicates if the 
button is the default button for the dialog.
</p>
<p>
Default is <b>True</b> when the button instance is the value assigned to the 
<var>DefaultButton</var> property in the <var>TDialogButtons</var> 
<var>Collection</var>. Setting a new value in Default causes the 
DefaultButton property in TDialogButtons to be updated accordingly.
</p>
<p>
Use <var>Cancel</var> to control whether the button is used as the Cancel 
button in the dialog.
</p>
<p>
Use <var>ModalResult</var> to set the value returned when the button is 
clicked.
</p>
</descr>
<seealso>
<link id="TDialogButton.Cancel"/>
<link id="TDialogButton.ModalResult"/>
<link id="TDialogButtons.DefaultButton"/>
</seealso>
</element>

<element name="TDialogButton.ModalResult">
<short>The modal result value returned when the button is clicked.</short>
<descr>
<p>
<var>ModalResult</var> is a <var>LongInt</var> property which contains the 
modal result value returned when the button is clicked in the dialog.
</p>
<p>
ModalResult values correspond to the values in the <var>TModalResult</var> 
enumeration, but use the native data type expected in <var>TWidgetSet</var> 
methods.
</p>
</descr>
<seealso>
<link id="#lazutils.uitypes.TModalResult">TModalResult</link>
</seealso>
</element>

<element name="TDialogButtons">
<short>Collection used to store TDialogButton instances.</short>
<descr>
<p>
<var>TDialogButtons</var> is a <var>TCollection</var> descendant used to 
create and maintain the <var>TDialogButton</var> instances in the 
<var>Items</var> for the collection.
</p>
<p>
TDialogButtons re-implements methods like <var>GetItem</var>, 
<var>SetItem</var>, and <var>Add</var> to use the TDialogButton class type 
when adding or accessing the Items in the collection.
</p>
<p>
The <var>FindButton</var> method can be used to find a dialog button in the 
collection which has specific modal result value(s).
</p>
<p>
Use the <var>DefaultButton</var> and <var>CancelButton</var> properties to 
access the button instances used for the corresponding purpose in the 
collection.
</p>
<p>
TDialogButtons is the type passed as a parameter to the 
<var>TWidgetSet.AskUser</var> method.
</p>
</descr>
<seealso>
<link id="TDialogButtons.Items"/>
<link id="TDialogButtons.Add"/>
<link id="TDialogButtons.CancelButton"/>
<link id="TDialogButtons.DefaultButton"/>
<link id="TDialogButtons.FindButton"/>
<link id="TWidgetSet.AskUser"/>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>

<element name="TDialogButtons.FCancelButton" link="#lcl.interfacebase.TDialogButtons.CancelButton"/>
<element name="TDialogButtons.FDefaultButton" link="#lcl.interfacebase.TDialogButtons.DefaultButton"/>

<element name="TDialogButtons.GetItem">
<short>Gets the value for the indexed Items property.</short>
<descr/>
<seealso>
<link id="TDialogButtons.Items"/>
</seealso>
</element>
<element name="TDialogButtons.GetItem.Result">
<short>Value for the indexed property.</short>
</element>
<element name="TDialogButtons.GetItem.Index">
<short>Ordinal position for the collection item in the property.</short>
</element>

<element name="TDialogButtons.SetCancelButton">
<short>Sets the value for the CancelButton property.</short>
<descr/>
<seealso>
<link id="TDialogButtons.CancelButton"/>
</seealso>
</element>
<element name="TDialogButtons.SetCancelButton.AValue">
<short>New value for the property.</short>
</element>

<element name="TDialogButtons.SetDefaultButton">
<short>Sets the value for the DefaultButton property.</short>
<descr/>
<seealso>
<link id="TDialogButtons.DefaultButton"/>
</seealso>
</element>
<element name="TDialogButtons.SetDefaultButton.Value">
<short>New value for the property.</short>
</element>

<element name="TDialogButtons.SetItem">
<short>Sets the value in the indexed Items property.</short>
<descr/>
<seealso>
<link id="TDialogButtons.Items"/>
</seealso>
</element>
<element name="TDialogButtons.SetItem.Index">
<short>Ordinal position for the new value in the Items property.</short>
</element>
<element name="TDialogButtons.SetItem.Value">
<short>New value stored in the indexed Items property.</short>
</element>

<element name="TDialogButtons.Destroy" link="#rtl.classes.TCollection.Destroy"/>

<element name="TDialogButtons.Add">
<short>Adds a new button instance to the Items in the collection.</short>
<descr>
<p>
<var>Add</var> is an overridden <var>TDialogButton</var> function in 
<var>TDialogButtons</var> used to add a new button instance to the 
<var>Items</var> in the collection. Add ensures that the value returned from 
the inherited Add method is cast to the TDialogButton type used in Items.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
</seealso>
</element>
<element name="TDialogButtons.Add.Result">
<short>
TDialogButton instance created and stored in the Items for the collection.
</short>
</element>

<element name="TDialogButtons.FindButton">
<short>
Finds the button associated with (one of) the given modal result values.
</short>
<descr>
<p>
<var>FindButton</var> is an overloaded <var>TDialogButton</var> function used 
to locate a dialog button in the collection which uses the specified modal 
result value. Overloaded variants are provided which accept one or multiple 
modal result values to locate in the method.
</p>
<p>
<var>AModalResult</var> contains the modal result value to locate in the 
collection Items.
</p>
<p>
<var>AOrder</var> allows an array of modal result values to be located in the 
method. It specifies the search order for the modal result values.
</p>
<p>
FindButton iterates over the <var>Items</var> in the collection to find the 
first button which uses the modal result value(s). The return value is the 
first TDialogButton instance in Items which matches the requested value(s).
</p>
</descr>
<seealso>
<link id="TDialogButtons.Items"/>
<link id="TDialogButton.ModalResult"/>
</seealso>
</element>
<element name="TDialogButtons.FindButton.Result">
<short>Dialog button which uses the modal result value.</short>
</element>
<element name="TDialogButtons.FindButton.AModalResult">
<short>The modal result value for the button located in the method.</short>
</element>
<element name="TDialogButtons.FindButton.Order">
<short>List of modal result values to find in the collection.</short>
</element>

<element name="TDialogButtons.DefaultButton">
<short>The default button for the dialog.</short>
<descr>
<p>
<var>DefaultButton</var> is a <var>TDialogButton</var> property which 
contains the dialog button which has its <var>Default</var> property set to 
<b>True</b>.
</p>
<p>
The property value is assigned when the Default property for a TDialogButton 
instance in the collection is changed. When Default (in the button) is 
changed to <b>True</b>, it is stored in DefaultButton. When Default (in the 
button) is set to <b>False</b>, the value in DefaultButton is set to Nil. It 
is assumed that a another button will be designated as the default button.
</p>
<p>
Use <var>CancelButton</var> for the button with its <var>Cancel</var> 
property set to <b>True</b>.
</p>
</descr>
<seealso>
<link id="TDialogButtons.CancelButton"/>
<link id="TDialogButton.Default"/>
<link id="TDialogButton.Cancel"/>
</seealso>
</element>

<element name="TDialogButtons.CancelButton">
<short>The cancel button for the dialog.</short>
<descr/>
<seealso/>
</element>

<element name="TDialogButtons.Items">
<short>
Provides indexed access to the dialog buttons in the collection.
</short>
<descr>
<p>
<var>Items</var> is an indexed <var>TDialogButton</var> property used to 
access to a dialog button by its ordinal position in the Items for the 
collection. Read and write access to the property value is re-implemented in 
<var>TDialogButtons</var> to use the TDialogButton type for the collection 
item in the property value.
</p>
<p>
Use <var>Count</var> to get the number of dialog buttons stored in Items.
</p>
<p>
Use <var>Add</var> to create and store a new TDialogButtoon instance in Items.
</p>
<p>
Use <var>Delete</var> to remove a collection item at a specific position in 
Items.
</p>
<p>
Use <var>Clear</var> to remove all Items in the collection.
</p>
</descr>
<seealso>
<link id="TDialogButtons.GetItem"/>
<link id="TDialogButtons.SetItem"/>
<link id="TDialogButtons.Add"/>
<link id="#rtl.classes.TCollection.Clear">TCollection.Clear</link>
<link id="#rtl.classes.TCollection.Count">TCollection.Count</link>
<link id="#rtl.classes.TCollection.Delete">TCollection.Delete</link>
</seealso>
</element>
<element name="TDialogButtons.Items.Index">
<short>Ordinal position for the dialog button.</short>
</element>

<element name="TWSTimerProc">
<short>Type used for a timer callback procedure.</short>
<descr/>
<seealso>
<link id="TWidgetSet.CreateTimer"/>
</seealso>
</element>

<element name="TWidgetSet">
<short>
Provides an application helper class (platform and drawing interface).
</short>
<descr>
<p>
<var>TWidgetSet</var> is a <var>TObject</var> descendant which implements an 
application helper class that provides access to platform-specific operating 
system and drawing interfaces. A number of methods are declared as abstract 
virtual, and must be implemented in descendent classes. Other methods are 
declared as virtual to allow them to be overridden for a specific platform.
</p>
<p>
TWidgetSet is used as the ancestor for platform-specific implementations like 
<var>TWin32WidgetSet</var>, <var>TGTKWidgetSet</var>, 
<var>TQtWidgetSet</var>, <var>TCarbonWidgetSet</var>, 
<var>TCocoaWidgetSet</var>, et. al.
</p>
<p>
The <var>WidgetSet</var> variable provides access to the TWidgetSet singleton 
for the current widgetset implementation.
</p>
</descr>
<seealso>
<link id="TWidgetSet.AppHandle"/>
<link id="TWidgetSet.ThemeServices"/>
<link id="WidgetSet"/>
</seealso>
</element>

<element name="TWidgetSet.FThemeServices" link="#lcl.interfacebase.TWidgetSet.ThemeServices"/>

<element name="TWidgetSet.PassCmdLineOptions">
<short>Passes command line arguments needed for the platform.</short>
<descr>
<p>
<var>PassCmdLineOptions</var> is a procedure used to pass command line 
arguments used for the platform-specific widgetset implementation. 
PassCmdLineOptions has an empty implementation in <var>TWidgetSet</var>, and 
must be overridden in a descendent class. It allows command line arguments to 
be preprocessed or modified prior to starting an application.
</p>
</descr>
<seealso/>
</element>

<!-- ptivate -->
<element name="TWidgetSet.CreateThemeServices" link="#lcl.interfacebase.TWidgetSet.ThemeServices"/>
<element name="TWidgetSet.CreateThemeServices.Result"/>
<element name="TWidgetSet.GetAppHandle" link="#lcl.interfacebase.TWidgetSet.AppHandle"/>
<element name="TWidgetSet.GetAppHandle.Result"/>
<element name="TWidgetSet.SetAppHandle" link="#lcl.interfacebase.TWidgetSet.AppHandle"/>
<element name="TWidgetSet.SetAppHandle.AValue"/>

<element name="TWidgetSet.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for the class instance, and calls the 
inherited method on entry. Create calls <var>CreateThemeServices</var> to 
allocate the <var>TThemeServices</var> instance used in the 
<var>ThemeServices</var> property.
</p>
</descr>
<seealso>
<link id="TWidgetSet.ThemeServices"/>
<link id="#lcl.themes.TThemeServices">TThemeServices</link>
</seealso>
</element>

<element name="TWidgetSet.BeforeDestruction">
<short>Performs actions needed before freeing the class instance.</short>
<descr>
<p>
<var>BeforeDestruction</var> is an overridden method used to perform actions 
needed prior to freeing the class instance. BeforeDestruction ensures that 
resources allocated for the <var>ThemeServices</var> property are freed and 
nil'd. BeforeDestruction calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="TWidgetSet.ThemeServices"/>
<link id="#rtl.objects.TObject">TObject</link>
</seealso>
</element>

<element name="TWidgetSet.AppInit">
<short>
Initializes the application for the platform, and returns Screen information.
</short>
<descr>
<p>
Called by Application.Initialize. Don't call this directly, the LCL will use 
it when adequate.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AppInit.ScreenInfo">
<short/>
</element>

<element name="TWidgetSet.AppRun">
<short>
Enters a state in which the application waits for system messages.
</short>
<descr>
<p>
Called by Application.Run. Don't call this directly, the LCL will use it when 
adequate.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AppRun.ALoop">
<short>Main processing loop for the application.</short>
</element>

<element name="TWidgetSet.AppWaitMessage">
<short>Waits for arrival of a message.</short>
<descr>Don't call this directly, the LCL will use it when adequate.</descr>
<seealso/>
</element>

<element name="TWidgetSet.AppProcessMessages">
<short>Handles all pending messages.</short>
<descr>
<p>
Called by Application.ProcessMessages. Don't call this directly, the LCL will 
use it when adequate.
</p>
</descr>
<seealso/>
</element>

<element name="TWidgetSet.AppTerminate">
<short>Terminates the application.</short>
<descr>
<p>
Called by Application.Terminate. Don't call this directly, the LCL will use 
it when adequate.
</p>
</descr>
<seealso/>
</element>

<element name="TWidgetSet.AppMinimize">
<short>Minimizes the whole application to the taskbar.</short>
<descr>
<p>
Called by Application.Minimize. Don't call this directly, the LCL will use it 
when adequate.
</p>
</descr>
<seealso>
<link id="TWidgetSet.AppRestore"/>
</seealso>
</element>

<element name="TWidgetSet.AppRestore">
<short>Restore application previously minimized to the taskbar.</short>
<descr>
<p>
Called by Application.Restore. Don't call this directly, the LCL will use it 
when adequate.
</p>
</descr>
<seealso>
<link id="TWidgetSet.AppMinimize"/>
</seealso>
</element>

<element name="TWidgetSet.AppBringToFront">
<short>
Brings the entire application on top of all other non-topmost programs.
</short>
<descr>
<p>
Called by Application.BringToFront. Don't call this directly, the LCL will 
use it when adequate.
</p>
</descr>
<seealso/>
</element>

<element name="TWidgetSet.AppSetIcon">
<short>Sets the icon in the taskbar.</short>
<descr>
<p>
Don't call this directly, the LCL will use it when adequate.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AppSetIcon.Small">
<short/>
</element>
<element name="TWidgetSet.AppSetIcon.Big">
<short/>
</element>

<element name="TWidgetSet.AppSetTitle">
<short>Sets the title for an application.</short>
<descr>
<p>
Don't call this directly, the LCL will use it when adequate.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AppSetTitle.ATitle">
<short/>
</element>

<element name="TWidgetSet.AppSetVisible">
<short>Changes the visibility of the application window.</short>
<descr>
<p>
Don't call this directly, the LCL will use it when adequate.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AppSetVisible.AVisible">
<short/>
</element>

<element name="TWidgetSet.AppRemoveStayOnTopFlags">
<short>Resets all StayOnTop windows to NoTopmost.</short>
<descr>
<p>
Don't call this directly, the LCL will use it when adequate.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AppRemoveStayOnTopFlags.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.AppRemoveStayOnTopFlags.ASystemTopAlso">
<short/>
</element>

<element name="TWidgetSet.AppRestoreStayOnTopFlags">
<short>Sets all windows in the StayOnTop list to TopMost.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.AppRestoreStayOnTopFlags.Result">
<short/>
</element>
<element name="TWidgetSet.AppRestoreStayOnTopFlags.ASystemTopAlso">
<short/>
</element>

<element name="TWidgetSet.AppSetMainFormOnTaskBar">
<short>Shows or hides the taskbar icon for the MainForm.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.AppSetMainFormOnTaskBar.DoSet">
<short>The visibility of the MainForm icon in the TaskBar.</short>
</element>

<element name="TWidgetSet.LCLPlatform">
<short>Returns the name for the widgetset used for the platform.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.LCLPlatform.Result">
<short>Widgetset in use for the platform.</short>
</element>

<element name="TWidgetSet.GetLCLCapability">
<short>
Checks whether the widgetset supports the specified LCL capability.
</short>
<descr>
<p>
<var>GetLCLCapability</var> is a <var>PtrUInt</var> function used to 
determine if a specific LCL capability is supported in the widgetset 
implementation.
</p>
<p>
<var>ACapability</var> contains a <var>TLCLCapability</var> enumeration value 
examined in the method. The value identifies a feature or behavior in the LCL.
</p>
<p>
The return value is either <var>LCL_CAPABILITY_NO</var> or 
<var>LCL_CAPABILITY_YES</var>. LCL_CAPABILITY_YES indicates that the 
capability is implemented for the platform.
</p>
<p>
GetLCLCapability is overridden in descendent classes to return a value valid 
for the platform-specific implementation. The implementation in TWidgetSet 
handles the capabilities common to all widgetsets supported in the LCL. It is 
called when the descendent class does not handle the value in ACapability.
</p>
<p>
TWidgetSet returns LCL_CAPABILITY_YES for the following enumeration values:
</p>
<ul>
<li>lcCanDrawOutsideOnPaint</li>
<li>lcNeedMininimizeAppWithMainForm</li>
<li>lcApplicationTitle</li>
<li>lcFormIcon</li>
<li>lcModalWindow</li>
<li>lcReceivesLMClearCutCopyPasteReliably</li>
<li>lcSendsUTF8KeyPress</li>
<li>lcEmulatedMDI</li>
<li>lcNativeTaskDialog</li>
<li>lcAccelleratorKeys</li>
</ul>
<p>
All other enumeration values in TLCLCapability return LCL_CAPABILITY_NO.
</p>
</descr>
<seealso>
<link id="TLCLCapability"/>
<link id="LCL_CAPABILITY_NO"/>
<link id="LCL_CAPABILITY_YES"/>
</seealso>
</element>
<element name="TWidgetSet.GetLCLCapability.Result">
<short>Can be either LCL_CAPABILITY_NO or LCL_CAPABILITY_YES.</short>
</element>
<element name="TWidgetSet.GetLCLCapability.ACapability">
<short>TLCLCapability enumeration value checked in the method.</short>
</element>

<element name="TWidgetSet.DCGetPixel">
<short>Gets the color for a pixel on the specified device context.</short>
<descr>
<p>
Defined as an abstract virtual method. Must be implemented in a descendent 
class to use the image format and device context needed for the platform.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.DCGetPixel.Result">
<short/>
</element>
<element name="TWidgetSet.DCGetPixel.CanvasHandle">
<short/>
</element>
<element name="TWidgetSet.DCGetPixel.X">
<short/>
</element>
<element name="TWidgetSet.DCGetPixel.Y">
<short/>
</element>

<element name="TWidgetSet.DCSetPixel">
<short>Sets the color for a pixel on the specified device context.</short>
<descr>
<p>
Defined as an abstract virtual method. Must be implemented in a descendent 
class to use the image format and device context needed for the platform.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.DCSetPixel.CanvasHandle">
<short/>
</element>
<element name="TWidgetSet.DCSetPixel.X">
<short/>
</element>
<element name="TWidgetSet.DCSetPixel.Y">
<short/>
</element>
<element name="TWidgetSet.DCSetPixel.AColor">
<short/>
</element>

<element name="TWidgetSet.DCRedraw">
<short>Redraws the device context for the specified canvas handle.</short>
<descr>
<p>
Used in the implementation of the TCanvas.RealizeAutoRedraw method called 
when its AutoRedraw property is changed.
</p>
<p>
Implemented for Gtk, Gtk2, Carbon, and Cocoa widgetsets.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.DCRedraw.CanvasHandle">
<short>Canvas handle with the device context for the redraw operation.</short>
</element>

<element name="TWidgetSet.DCSetAntialiasing">
<short>
Enables or disables anti-aliasing for the specified device context.
</short>
<descr>
<p>
Called from the RealizeAntiAliasing method in TCanvas when its handle or 
AntialiasingMode property is changed.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.DCSetAntialiasing.CanvasHandle">
<short>Canvas handle with the device context updated in the method.</short>
</element>
<element name="TWidgetSet.DCSetAntialiasing.AEnabled">
<short><b>True</b> to enable anti-aliasing for the device context.</short>
</element>

<element name="TWidgetSet.SetDesigning">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetDesigning.AComponent">
<short/>
</element>

<element name="TWidgetSet.InitStockFont">
<short>Initializes a font object to a (predefined) stock font.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.InitStockFont.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.InitStockFont.AFont">
<short>The font to initialize.</short>
</element>
<element name="TWidgetSet.InitStockFont.AStockFont">
<short>The predefined font to use for the initialization.</short>
</element>

<element name="TWidgetSet.IsHelpKey">
<short>Checks whether the widgetset uses the key to show help.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsHelpKey.Result">
<short><b>True</b> when this is a Help key.</short>
</element>
<element name="TWidgetSet.IsHelpKey.Key">
<short>The virtual key.</short>
</element>
<element name="TWidgetSet.IsHelpKey.Shift">
<short>The modifier key state.</short>
</element>

<element name="TWidgetSet.CreateTimer">
<short>Creates a timer with the given callback method.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateTimer.Result">
<short>The timer ID, zero on failure.</short>
<seealso>
<link id="TWidgetSet.DestroyTimer"/>
</seealso>
</element>
<element name="TWidgetSet.CreateTimer.Interval">
<short>The time interval.</short>
</element>
<element name="TWidgetSet.CreateTimer.TimerProc">
<short>The callback method.</short>
</element>

<element name="TWidgetSet.DestroyTimer">
<short>Destroys a timer.</short>
<descr>
<p>
Declared as an abstract virtual method in TWidgetSet. Must be implemented in 
a descendent class to use the platform-specific mechanism(s) required for the 
implementation.
</p>
</descr>
<seealso>
<link id="TWidgetSet.CreateTimer"/>
</seealso>
</element>
<element name="TWidgetSet.DestroyTimer.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DestroyTimer.TimerHandle">
<short>The timer ID.</short>
</element>

<element name="TWidgetSet.AppHandle">
<short>Native handle for a TApplication instance.</short>
<descr>
<p>
<var>AppHandle</var> is a platform-specific property. The meaning and use for 
the handle changes from widgetset to widgetset.
</p>
</descr>
<seealso/>
</element>

<!-- winapi includes -->
<element name="TWidgetSet.Arc">
<short>
Use Arc to draw an elliptically curved line with the current Pen.
</short>
<descr>
<p>
The arc is part of the ellipse inscribed in the bounding rectangle.
</p>
<p>
The angles angle1 and angle2 are 1/16th of a degree. For example, a full 
circle equals 5760 (16*360). Positive values of Angle and AngleLength mean 
counter-clockwise while negative values mean clockwise direction. Zero 
degrees is at the 3 o'clock position.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.Arc.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.Arc.DC">
<short/>
</element>
<element name="TWidgetSet.Arc.Left">
<short/>
</element>
<element name="TWidgetSet.Arc.Top">
<short/>
</element>
<element name="TWidgetSet.Arc.Right">
<short/>
</element>
<element name="TWidgetSet.Arc.Bottom">
<short/>
</element>
<element name="TWidgetSet.Arc.Angle16Deg">
<short>base angle.</short>
</element>
<element name="TWidgetSet.Arc.Angle16DegLength">
<short>angle length.</short>
</element>

<element name="TWidgetSet.AngleChord">
<short>Use AngleChord to draw a filled Chord shape on a canvas.</short>
<descr>
<p>
The chord is outlined with the current pen, and filled with the current brush.
</p>
<p>
The angles angle1 and angle2 are 1/16th of a degree. For example, a full 
circle equals 5760 16*360). Positive values of Angle and AngleLength mean 
counter-clockwise while negative values mean clockwise direction. Zero 
degrees is at the 3 o'clock position.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AngleChord.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.AngleChord.DC">
<short/>
</element>
<element name="TWidgetSet.AngleChord.x1">
<short/>
</element>
<element name="TWidgetSet.AngleChord.y1">
<short/>
</element>
<element name="TWidgetSet.AngleChord.x2">
<short/>
</element>
<element name="TWidgetSet.AngleChord.y2">
<short/>
</element>
<element name="TWidgetSet.AngleChord.angle1">
<short>Base angle.</short>
</element>
<element name="TWidgetSet.AngleChord.angle2">
<short>Angle length.</short>
</element>

<element name="TWidgetSet.BeginPaint">
<short>Start painting in a window.</short>
<descr>
<p>
This function is for use in WM_PAINT handlers only. Not all platforms allow 
for painting outside WM_PAINT messages.
</p>
<p>
BeginPaint prepares the specified window for painting and fills a PAINTSTRUCT 
structure with information about the painting.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.BeginPaint.Result">
<short>A Device Context for the window, Nil on failure.</short>
</element>
<element name="TWidgetSet.BeginPaint.Handle">
<short>The window Handle.</short>
</element>
<element name="TWidgetSet.BeginPaint.PS">
<short>Will receive painting information.</short>
</element>

<element name="TWidgetSet.BitBlt">
<short>
Copies part of a source DC into a destination DC, using the specified raster 
operation.
</short>
<descr>
<p>
This routine implements the equivalent Windows GDI API of the same name in 
all platforms supported by Lazarus.
</p>
<p>
It copies a section of a Canvas to another one, without any stretching. It 
allows one to select the kind of operation which should be performed to draw 
the pixels into the destination in the parameter ROP. Allowed operations go 
from simply copying the pixels without change to inverting them and also to 
executing logical operations involving the source pixels and the previously 
existing pixels in the destination Canvas.
</p>
<p>
For normal usage one should only use SRCOPY in the ROP parameter, other 
operations may not be supported by all widgetsets.
</p>
<p>
There exist 16 raster operations, according to the possible combinations of 
two (boolean) values. Excluding the NOP case, that doesn't modify the target 
area, the possible values for ROP are:
</p>
<ul>
<li>BLACKNESS - Fills the destination rectangle with black</li>
<li>DSTINVERT - Inverts the colors of the destination area</li>
<li>MERGECOPY -</li>
<li>MERGEPAINT -</li>
<li>NOTSRCCOPY -</li>
<li>NOTSRCERASE -</li>
<li>PATCOPY -</li>
<li>PATINVERT -</li>
<li>PATPAINT -</li>
<li>SRCAND -</li>
<li>SRCCOPY -</li>
<li>SRCERASE -</li>
<li>SRCINVERT -</li>
<li>SRCPAINT - Combines the colors of the source and the destination using 
the operator OR on each pixel</li>
<li>WHITENESS - Fills the destination rectangle with white</li>
</ul>
<p>These flags can be added to above ROPs:
</p>
<dl>
<dt>CAPTUREBLT</dt>
<dd>
Includes windows which are on top of the specified Canvas. This option is not 
recommended and is very hard to implement in all supported platforms.
</dd>
<dt>NOMIRRORBITMAP</dt>
<dd>
Prevents the bitmap from being mirrored. (The coordinates are sorted before 
painting?)
</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.BitBlt.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.BitBlt.DestDC">
<short>The destination Device Context.</short>
</element>
<element name="TWidgetSet.BitBlt.X">
<short>The origin in the destination DC.</short>
</element>
<element name="TWidgetSet.BitBlt.Y">
<short>The origin in the destination DC.</short>
</element>
<element name="TWidgetSet.BitBlt.Width">
<short>The image size.</short>
</element>
<element name="TWidgetSet.BitBlt.Height">
<short>The image size.</short>
</element>
<element name="TWidgetSet.BitBlt.SrcDC">
<short>The source Device Context.</short>
</element>
<element name="TWidgetSet.BitBlt.XSrc">
<short>The origin in the source DC.</short>
</element>
<element name="TWidgetSet.BitBlt.YSrc">
<short>The origin in the source DC.</short>
</element>
<element name="TWidgetSet.BitBlt.Rop">
<short>The raster operation.</short>
</element>

<element name="TWidgetSet.CallNextHookEx">
<short>Calls the next procedure in the hook chain.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CallNextHookEx.Result">
<short>Depends on the Hook type.</short>
</element>
<element name="TWidgetSet.CallNextHookEx.hhk">
<short>Handle of the current hook.</short>
</element>
<element name="TWidgetSet.CallNextHookEx.ncode">
<short>The Hook code (message ID).</short>
</element>
<element name="TWidgetSet.CallNextHookEx.WParam">
<short>Message parameter.</short>
</element>
<element name="TWidgetSet.CallNextHookEx.LParam">
<short>Message parameter.</short>
</element>

<element name="TWidgetSet.CallWindowProc">
<short>Calls another Window procedure, to handle a message.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CallWindowProc.Result">
<short/>
</element>
<element name="TWidgetSet.CallWindowProc.lpPrevWndFunc">
<short/>
</element>
<element name="TWidgetSet.CallWindowProc.Handle">
<short/>
</element>
<element name="TWidgetSet.CallWindowProc.Msg">
<short/>
</element>
<element name="TWidgetSet.CallWindowProc.WParam">
<short/>
</element>
<element name="TWidgetSet.CallWindowProc.LParam">
<short/>
</element>

<element name="TWidgetSet.ClientToScreen">
<short>
Converts (relative) Client coordinates into absolute Screen coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ClientToScreen.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.ClientToScreen.Handle">
<short>The window with the client area.</short>
</element>
<element name="TWidgetSet.ClientToScreen.P">
<short>The point to convert.</short>
</element>

<element name="TWidgetSet.CombineRgn">
<short>Combines two regions.</short>
<descr>
<p>The Destination must already be initialized. The Return value is the 
Region type for the Destination, or ERROR (0).
</p>
<p>
fnCombineMode can be one of:
</p>
<dl>
<dt>RGN_AND</dt>
<dd>Gets a region of all points which are in both source regions.</dd>
<dt>RGN_COPY</dt>
<dd>Gets an exact copy of the first source region.</dd>
<dt>RGN_DIFF</dt>
<dd>
Gets a region of all points which are in the first source region but not in 
the second.(Src1 - Src2).
</dd>
<dt>RGN_OR</dt>
<dd>
Gets a region of all points which are in either the first source region or in 
the second.(Src1 + Src2).
</dd>
<dt>RGN_XOR</dt>
<dd>
Gets all points which are in either the first Source Region or in the second, 
but not in both.
</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.CombineRgn.Result">
<short>The Destination's Region type, or ERROR (0).</short>
</element>
<element name="TWidgetSet.CombineRgn.Dest">
<short>
The Handle of the destination region. This region must already exist!
</short>
</element>
<element name="TWidgetSet.CombineRgn.Src1">
<short>The handle of a region to combine.</short>
</element>
<element name="TWidgetSet.CombineRgn.Src2">
<short>The handle of a region to combine.</short>
</element>
<element name="TWidgetSet.CombineRgn.fnCombineMode">
<short>How the regions are combined.</short>
</element>

<element name="TWidgetSet.CreateBitmap">
<short>Creates a bitmap for the widgetset.</short>
<descr>
Creates a bitmap with the specified width, height, and color format (color 
planes and bits per pixel).
</descr>
<seealso/>
</element>
<element name="TWidgetSet.CreateBitmap.Result">
<short>The bitmap Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateBitmap.Width">
<short/>
</element>
<element name="TWidgetSet.CreateBitmap.Height">
<short/>
</element>
<element name="TWidgetSet.CreateBitmap.Planes">
<short>The number of color planes.</short>
</element>
<element name="TWidgetSet.CreateBitmap.BitCount">
<short>The number of color bits per pixel and plane.</short>
</element>
<element name="TWidgetSet.CreateBitmap.BitmapBits">
<short>Pointer to array containing color data.</short>
</element>

<element name="TWidgetSet.CreateBrushIndirect">
<short>
Creates a logical brush that has the specified style, color, and pattern.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateBrushIndirect.Result">
<short>The brush Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateBrushIndirect.LogBrush">
<short>Description of the brush.</short>
</element>

<element name="TWidgetSet.CreateCaret">
<short>
Creates a new shape for the system caret and assigns ownership of the caret 
to the specified window.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateCaret.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.CreateCaret.Handle">
<short>The window that owns the caret.</short>
</element>
<element name="TWidgetSet.CreateCaret.Bitmap">
<short>
Bitmap Handle, or zero for a solid (black) caret, 1 for a grey caret.
</short>
</element>
<element name="TWidgetSet.CreateCaret.Width">
<short/>
</element>
<element name="TWidgetSet.CreateCaret.Height">
<short/>
</element>

<element name="TWidgetSet.CreateCompatibleBitmap">
<short>Creates a bitmap that is compatible with the given DC.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateCompatibleBitmap.Result">
<short>The bitmap handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateCompatibleBitmap.DC">
<short>The Device Context for the bitmap.</short>
</element>
<element name="TWidgetSet.CreateCompatibleBitmap.Width">
<short/>
</element>
<element name="TWidgetSet.CreateCompatibleBitmap.Height">
<short/>
</element>

<element name="TWidgetSet.CreateCompatibleDC">
<short>
Creates a memory Device Context, compatible with the device for the given DC.
</short>
<descr/>
<seealso/>
</element>

<element name="TWidgetSet.CreateCompatibleDC.Result">
<short>The memory DC, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateCompatibleDC.DC">
<short>The device DC.</short>
</element>

<element name="TWidgetSet.CreateDIBitmap">
<short>
Creates a Device Dependent Bitmap (DDB) from a Device Independent Bitmap 
(DIB).
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateDIBitmap.Result">
<short>The bitmap handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateDIBitmap.DC">
<short>The context for the DDB.</short>
</element>
<element name="TWidgetSet.CreateDIBitmap.InfoHeader">
<short/>
</element>
<element name="TWidgetSet.CreateDIBitmap.dwUsage">
<short/>
</element>
<element name="TWidgetSet.CreateDIBitmap.InitBits">
<short>An array containing the bitmap pixels.</short>
</element>
<element name="TWidgetSet.CreateDIBitmap.InitInfo">
<short>CBM_INIT when InitBits contains valid data, else zero.</short>
</element>
<element name="TWidgetSet.CreateDIBitmap.wUsage">
<short/>
</element>

<element name="TWidgetSet.CreateDIBSection">
<short>Creates a bitmap into which the application can write.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateDIBSection.Result">
<short>The bitmap Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateDIBSection.DC">
<short>The DC for the bitmap.</short>
</element>
<element name="TWidgetSet.CreateDIBSection.BitmapInfo">
<short>Contains all information about the bitmap, except the pixels.</short>
</element>
<element name="TWidgetSet.CreateDIBSection.Usage">
<short>The type of the bitmap colors, e.g. DIB_RGB_COLORS.</short>
</element>
<element name="TWidgetSet.CreateDIBSection.Bits">
<short>Pointer to the bitmap pixels.</short>
</element>
<element name="TWidgetSet.CreateDIBSection.SectionHandle">
<short>
Zero or the Handle of a file-mapping object, from which the bitmap is 
initialized (needs CreateFileMapping).
</short>
</element>
<element name="TWidgetSet.CreateDIBSection.Offset">
<short>The offset to the bitmap bits in the file-mapping object.</short>
</element>

<element name="TWidgetSet.CreateEllipticRgn">
<short>Creates an elliptic region, bounded by the given rectangle.</short>
<descr/>
<seealso/>
</element>

<element name="TWidgetSet.CreateEllipticRgn.Result">
<short>The region Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateEllipticRgn.X1">
<short/>
</element>
<element name="TWidgetSet.CreateEllipticRgn.Y1">
<short/>
</element>
<element name="TWidgetSet.CreateEllipticRgn.X2">
<short/>
</element>
<element name="TWidgetSet.CreateEllipticRgn.Y2">
<short/>
</element>

<element name="TWidgetSet.CreateFontIndirect">
<short>Creates a logical font, selectable into any DC.</short>
<descr/>
<seealso>
<link id="TWidgetSet.CreateFontIndirectEx"/>
</seealso>
</element>
<element name="TWidgetSet.CreateFontIndirect.Result">
<short>The font handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateFontIndirect.LogFont">
<short>The font description.</short>
</element>

<element name="TWidgetSet.CreateFontIndirectEx">
<short>
Creates a logical font, selectable into any DC. Allows for a long font name.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.CreateFontIndirect"/>
</seealso>
</element>
<element name="TWidgetSet.CreateFontIndirectEx.Result">
<short>The font handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateFontIndirectEx.LogFont">
<short>The font description.</short>
</element>
<element name="TWidgetSet.CreateFontIndirectEx.LongFontName">
<short>The font name, can be longer than 32 characters.</short>
</element>

<element name="TWidgetSet.CreateIconIndirect">
<short>Creates an icon or cursor.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateIconIndirect.Result">
<short>The Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateIconIndirect.IconInfo">
<short/>
</element>

<element name="TWidgetSet.CreatePalette">
<short>Creates a logical palette, selectable into any DC.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreatePalette.Result">
<short>The palette Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreatePalette.LogPalette">
<short/>
</element>

<element name="TWidgetSet.CreatePatternBrush">
<short>Creates a logical brush, selectable into any DC.</short>
<descr>
<p>
The bitmap pattern is repeated for areas of larger width or height, it should 
allow for smooth transitions.
</p>
<p>
Monochrome bitmaps obtain the actual text (0) or background (1) color of the 
DC.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.CreatePatternBrush.Result">
<short>The brush handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreatePatternBrush.ABitmap">
<short>The bitmap to use for the brush.</short>
</element>

<element name="TWidgetSet.CreatePenIndirect">
<short>Creates a logical Pen, selectable into any DC.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreatePenIndirect.Result">
<short>The pen Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreatePenIndirect.LogPen">
<short/>
</element>

<element name="TWidgetSet.CreatePolygonRgn">
<short>Creates a polygonal region.</short>
<descr>
<p>
The Points parameter is an array of points that give the vertices of the 
polygon. The connections between two points can cross others.
</p>
<p>
FillMode determines what points are going to be included in the region. When 
FillMode=Winding points are selected by using the Winding fill algorithm. 
When FillMode=ALTERNATE points are selected by using using the even-odd 
(alternative) fill algorithm.
</p>
<p>
The last point is connected to the first point to close the region.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.CreatePolygonRgn.Result">
<short>The region Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreatePolygonRgn.Points">
<short>The array of points.</short>
</element>
<element name="TWidgetSet.CreatePolygonRgn.NumPts">
<short>The number of points in Points.</short>
</element>
<element name="TWidgetSet.CreatePolygonRgn.FillMode">
<short>Can be ALTERNATE or WINDING.</short>
</element>

<element name="TWidgetSet.CreateRectRgn">
<short>Creates a rectangular region.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateRectRgn.Result">
<short>The region handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateRectRgn.X1">
<short/>
</element>
<element name="TWidgetSet.CreateRectRgn.Y1">
<short/>
</element>
<element name="TWidgetSet.CreateRectRgn.X2">
<short/>
</element>
<element name="TWidgetSet.CreateRectRgn.Y2">
<short/>
</element>

<element name="TWidgetSet.CreateRoundRectRgn">
<short>Creates a rectangular region with rounded corners.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateRoundRectRgn.Result">
<short>The region Handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateRoundRectRgn.X1">
<short/>
</element>
<element name="TWidgetSet.CreateRoundRectRgn.Y1">
<short/>
</element>
<element name="TWidgetSet.CreateRoundRectRgn.X2">
<short/>
</element>
<element name="TWidgetSet.CreateRoundRectRgn.Y2">
<short/>
</element>
<element name="TWidgetSet.CreateRoundRectRgn.nWidthEllipse">
<short>The extent of the ellipse, used for the rounded corners.</short>
</element>
<element name="TWidgetSet.CreateRoundRectRgn.nHeightEllipse">
<short>The extent of the ellipse, used for the rounded corners.</short>
</element>

<element name="TWidgetSet.DeleteCriticalSection">
<short>Deletes an un-owned critical section.</short>
<descr/>
<errors>
Results are unpredictable when the section is owned, i.e. has been entered 
but not yet left.
</errors>
<seealso>
<link id="TWidgetSet.InitializeCriticalSection"/>
</seealso>
</element>
<element name="TWidgetSet.DeleteCriticalSection.CritSection">
<short>The critical section object.</short>
</element>

<element name="TWidgetSet.DeleteDC">
<short>Deletes a Device Context created using CreateDC.</short>
<descr/>
<seealso>
<link id="TWidgetSet.ReleaseDC"/>
</seealso>
</element>
<element name="TWidgetSet.DeleteDC.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DeleteDC.hDC">
<short/>
</element>

<element name="TWidgetSet.DeleteObject">
<short>
Deletes a graphic object, freeing all system resources associated with the 
object.
</short>
<descr/>
<errors>The function fails when the Handle has been selected into a DC.
</errors>
<seealso/>
</element>
<element name="TWidgetSet.DeleteObject.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DeleteObject.GDIObject">
<short/>
</element>

<element name="TWidgetSet.DestroyCaret">
<short>Destroys the caret but doesn't free the bitmap.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DestroyCaret.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DestroyCaret.Handle">
<short>Handle of the window with the caret.</short>
</element>

<element name="TWidgetSet.DestroyCursor">
<short>Destroys a mouse cursor.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DestroyCursor.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DestroyCursor.Handle">
<short>The cursor Handle.</short>
</element>

<element name="TWidgetSet.DestroyIcon">
<short>Destroys an icon.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DestroyIcon.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DestroyIcon.Handle">
<short/>
</element>

<element name="TWidgetSet.DPtoLP">
<short>
Converts an array of Device Points (coordinates) into Logical Points.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DPtoLP.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DPtoLP.DC">
<short>
The device context, containing the coordinate mapping information.
</short>
</element>
<element name="TWidgetSet.DPtoLP.Points">
<short>An array of points.</short>
</element>
<element name="TWidgetSet.DPtoLP.Count">
<short>The number of points to convert.</short>
</element>

<element name="TWidgetSet.DrawFrameControl">
<short>Draws a window frame control, of the specified type and style.</short>
<descr>
<p>
A window frame includes these components (uType):
</p>
<ul>
<li>title bar (DFC_CAPTION)</li>
<li>menu bar (DFC_MENU)</li>
<li>popup menus (DFC_POPUPMENU)</li>
<li>scrollbars (DFC_SCROLL)</li>
</ul>
<p>
Window managers do not normally allow the user to paint the components for a 
window frame, and do not supply a DC for that purpose.
</p>
<p>
The available features depend on the window manager for the platform, and the 
capabilities for the widgetset.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.DrawFrameControl.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DrawFrameControl.DC">
<short>The window frame device context.</short>
</element>
<element name="TWidgetSet.DrawFrameControl.Rect">
<short/>
</element>
<element name="TWidgetSet.DrawFrameControl.uType">
<short>The control type, e.g. DFC_CAPTION.</short>
</element>
<element name="TWidgetSet.DrawFrameControl.uState">
<short>The control state, e.g. DFCS_CAPTIONCLOSE (close button).</short>
</element>

<element name="TWidgetSet.DrawFocusRect">
<short>Shows or hides a focus rectangle.</short>
<descr>
<p>
This function is intended to <b>temporarily</b> outline part of a canvas, 
e.g. a rectangular selection following mouse moves (rubber banding box, 
DockRect).
</p>
<p>
A second call of the function, with the same parameters, removes the 
rectangle (XOR painting). Due to this behavior the frame should be removed 
before it might be overwritten by any other painting operation.
</p>
<remark>
Not all platforms allow for painting outside WM_PAINT events.
</remark>
<remark>
Child windows may be excluded (clipped), i.e. the rectangle is not 
necessarily fully shown.
</remark>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.DrawFocusRect.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DrawFocusRect.DC">
<short>Almost a screen DC.</short>
</element>
<element name="TWidgetSet.DrawFocusRect.Rect">
<short/>
</element>

<element name="TWidgetSet.DrawEdge">
<short>Draws one or more edges of a rectangle.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DrawEdge.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.DrawEdge.DC">
<short>Device context for the drawing operation.</short>
</element>
<element name="TWidgetSet.DrawEdge.Rect">
<short>Rectangle with the bounds for the drawing operation.</short>
</element>
<element name="TWidgetSet.DrawEdge.edge">
<short>A combination of edge styles (inner/outer, raised/sunken).</short>
</element>
<element name="TWidgetSet.DrawEdge.grfFlags">
<short>Indicates e.g. the edges to paint (BF_LEFT).</short>
</element>

<element name="TWidgetSet.DrawText">
<short>Draws formatted text within a rectangle.</short>
<descr>
<p>
Several formatting options are available for use in the Flags argument. The 
value correspond to the DrawText constants defined in the 
<file>lcltype.pp</file> unit.
</p>
<p>
DT_CALCRECT suppresses all painting, and calculates the extent for the 
formatted text returned in the Rect parameter.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.DrawText.Result">
<short>
The height for the rendered text, calculated from values in Rect. Zero on 
failure.
</short>
</element>
<element name="TWidgetSet.DrawText.DC">
<short>Device context for the text rendering operation.</short>
</element>
<element name="TWidgetSet.DrawText.Str">
<short>The text (should be zero terminated).</short>
</element>
<element name="TWidgetSet.DrawText.Count">
<short>The number of (Wide)Chars in the text.</short>
</element>
<element name="TWidgetSet.DrawText.Rect">
<short>The bounding (clipping) rectangle.</short>
</element>
<element name="TWidgetSet.DrawText.Flags">
<short>Formatting flags applied in the method.</short>
</element>

<element name="TWidgetSet.EnableScrollBar">
<short>
Enables or disables the arrows in a scrollbar control, or the scrollbars in a 
window.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.EnableScrollBar.Result">
<short><b>False</b> when nothing was changed.</short>
</element>
<element name="TWidgetSet.EnableScrollBar.Wnd">
<short>The window or control handle.</short>
</element>
<element name="TWidgetSet.EnableScrollBar.wSBflags">
<short>The scrollbar type (SB_CTL, SB_HORZ...).</short>
</element>
<element name="TWidgetSet.EnableScrollBar.wArrows">
<short>The affected buttons.</short>
</element>

<element name="TWidgetSet.EnableWindow">
<short>
Enables or disables mouse and keyboard input to the specified window or 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.EnableWindow.Result">
<short><b>True</b> when the window was disabled before.</short>
</element>
<element name="TWidgetSet.EnableWindow.hWnd">
<short>Handle for the window.</short>
</element>
<element name="TWidgetSet.EnableWindow.bEnable">
<short>
<b>True</b> to enable the window, <b>False</b> to disable the window.
</short>
</element>

<element name="TWidgetSet.EndPaint">
<short>Ends a paint operation in a window, started with BeginPaint.</short>
<descr/>
<seealso>
<link id="TWidgetSet.BeginPaint"/>
</seealso>
</element>
<element name="TWidgetSet.EndPaint.Result">
<short>Almost nonzero.</short>
</element>
<element name="TWidgetSet.EndPaint.Handle">
<short>The window to paint.</short>
</element>
<element name="TWidgetSet.EndPaint.PS">
<short>Painting information.</short>
</element>

<element name="TWidgetSet.EnterCriticalSection">
<short>Enters a critical section.</short>
<descr>
The call returns only when the calling thread has obtained ownership of the 
critical
section. See TryEnterCriticalSection for testing the ownership of the 
critical section.
</descr>
<seealso>
<link id="TWidgetSet.InitializeCriticalSection"/>
</seealso>
</element>
<element name="TWidgetSet.EnterCriticalSection.CritSection">
<short>The critical section object.</short>
</element>

<element name="TWidgetSet.EnumDisplayMonitors">
<short>Calls a callback function for every available display monitor.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.EnumDisplayMonitors.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.EnumDisplayMonitors.hdc">
<short/>
</element>
<element name="TWidgetSet.EnumDisplayMonitors.lprcClip">
<short/>
</element>
<element name="TWidgetSet.EnumDisplayMonitors.lpfnEnum">
<short>The callback function.</short>
</element>
<element name="TWidgetSet.EnumDisplayMonitors.dwData">
<short>Data passed to the callback function.</short>
</element>

<element name="TWidgetSet.EnumFontFamilies">
<short>
Invokes a callback function for every font available on a specified device.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.EnumFontFamiliesEx"/>
</seealso>
</element>
<element name="TWidgetSet.EnumFontFamilies.Result">
<short>The last value returned by the callback function.</short>
</element>
<element name="TWidgetSet.EnumFontFamilies.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.EnumFontFamilies.Family">
<short>The font family name, empty for all families.</short>
</element>
<element name="TWidgetSet.EnumFontFamilies.EnumFontFamProc">
<short>The callback function.</short>
</element>
<element name="TWidgetSet.EnumFontFamilies.LParam">
<short>Data passed to the callback function.</short>
</element>

<element name="TWidgetSet.EnumFontFamiliesEx">
<short>
Invokes a callback function for every available font that matches certain 
criteria.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.EnumFontFamiliesEx.Result">
<short>The last value returned by the callback function.</short>
</element>
<element name="TWidgetSet.EnumFontFamiliesEx.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.EnumFontFamiliesEx.lpLogFont">
<short>Description of the desired fonts.</short>
</element>
<element name="TWidgetSet.EnumFontFamiliesEx.Callback">
<short>The callback function.</short>
</element>
<element name="TWidgetSet.EnumFontFamiliesEx.Lparam">
<short>Data passed to the callback function.</short>
</element>
<element name="TWidgetSet.EnumFontFamiliesEx.Flags">
<short/>
</element>

<element name="TWidgetSet.Ellipse">
<short>Draws a filled circle or ellipse, bounded by a rectangle.</short>
<descr>
The ellipse is outlined with the current pen, and filled with the current 
brush.
</descr>
<seealso>
<link id="TWidgetSet.Arc"/>
</seealso>
</element>
<element name="TWidgetSet.Ellipse.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.Ellipse.DC">
<short/>
</element>
<element name="TWidgetSet.Ellipse.x1">
<short/>
</element>
<element name="TWidgetSet.Ellipse.y1">
<short/>
</element>
<element name="TWidgetSet.Ellipse.x2">
<short/>
</element>
<element name="TWidgetSet.Ellipse.y2">
<short/>
</element>

<element name="TWidgetSet.ExcludeClipRect">
<short>
Excludes a rectangle from the clipping region, i.e. prevents painting within 
the rectangle.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ExcludeClipRect.Result">
<short>The type of the new clipping region, Error (0) on failure.</short>
</element>
<element name="TWidgetSet.ExcludeClipRect.dc">
<short/>
</element>
<element name="TWidgetSet.ExcludeClipRect.Left">
<short/>
</element>
<element name="TWidgetSet.ExcludeClipRect.Top">
<short/>
</element>
<element name="TWidgetSet.ExcludeClipRect.Right">
<short/>
</element>
<element name="TWidgetSet.ExcludeClipRect.Bottom">
<short/>
</element>

<element name="TWidgetSet.ExtCreatePen">
<short>Creates a logical pen, selectable into any DC.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ExtCreatePen.Result">
<short>The pen handle, zero on failure.</short>
</element>
<element name="TWidgetSet.ExtCreatePen.dwPenStyle">
<short>A collection of style options.</short>
</element>
<element name="TWidgetSet.ExtCreatePen.dwWidth">
<short>The pen width.</short>
</element>
<element name="TWidgetSet.ExtCreatePen.lplb">
<short>The brush description.</short>
</element>
<element name="TWidgetSet.ExtCreatePen.dwStyleCount">
<short>The number of sections for a dashed pen.</short>
</element>
<element name="TWidgetSet.ExtCreatePen.lpStyle">
<short>Array of the section lengths in a dashed pen.</short>
</element>

<element name="TWidgetSet.ExtTextOut">
<short>Draws a string without formatting (single line).</short>
<descr>
<p>
The string is drawn with the current font and colors. The following Options 
are supported:
</p>
<dl>
<dt>ETO_CLIPPED</dt>
<dd>The text is clipped to the given rectangle.</dd>
<dt>ETO_OPAQUE</dt>
<dd>The rectangle is filled with the background color.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.ExtTextOut.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.ExtTextOut.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.ExtTextOut.X">
<short>The reference point, used to position the text.</short>
</element>
<element name="TWidgetSet.ExtTextOut.Y">
<short>The reference point, used to position the text.</short>
</element>
<element name="TWidgetSet.ExtTextOut.Options">
<short>Output options.</short>
</element>
<element name="TWidgetSet.ExtTextOut.Rect">
<short>The bounding rectangle.</short>
</element>
<element name="TWidgetSet.ExtTextOut.Str">
<short>The text.</short>
</element>
<element name="TWidgetSet.ExtTextOut.Count">
<short>The number of (Wide)Chars in the string.</short>
</element>
<element name="TWidgetSet.ExtTextOut.Dx">
<short>
Pointer to an array of inter-character spacing values, can be Nil.
</short>
</element>

<element name="TWidgetSet.ExtSelectClipRGN">
<short>Combines the passed Region with the current clipping region.</short>
<descr>
<p>The Mode can be one of:</p>

<dl>
<dt>RGN_AND</dt>
<dd>All points which are in both regions.</dd>
<dt>RGN_COPY</dt>
<dd>An exact copy of the source region, same as SelectClipRGN.</dd>
<dt>RGN_DIFF</dt>
<dd>
All points which are in the Clipping Region but but not in the Source. (Clip 
- RGN).
</dd>
<dt>RGN_OR</dt>
<dd>
All points which are in either the Clip Region or in the Source. (Clip + RGN).
</dd>
<dt>RGN_XOR</dt>
<dd>
All points which are in either the Clip Region or in the Source, but not in 
both.
</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.ExtSelectClipRGN.Result">
<short>The type of the resulting clipping region.</short>
</element>
<element name="TWidgetSet.ExtSelectClipRGN.dc">
<short/>
</element>
<element name="TWidgetSet.ExtSelectClipRGN.rgn">
<short>The region to combine with.</short>
</element>
<element name="TWidgetSet.ExtSelectClipRGN.Mode">
<short>How the regions are combined.</short>
</element>

<element name="TWidgetSet.FillRect">
<short>Fills a rectangle using the specified brush.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.FillRect.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.FillRect.DC">
<short/>
</element>
<element name="TWidgetSet.FillRect.Rect">
<short/>
</element>
<element name="TWidgetSet.FillRect.Brush">
<short/>
</element>

<element name="TWidgetSet.FillRgn">
<short>Fills a region using the specified brush.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.FillRgn.Result">
<short/>
</element>
<element name="TWidgetSet.FillRgn.DC">
<short/>
</element>
<element name="TWidgetSet.FillRgn.RegionHnd">
<short/>
</element>
<element name="TWidgetSet.FillRgn.hbr">
<short/>
</element>

<element name="TWidgetSet.FloodFill">
<short>Fills an area of the display surface with the current brush.</short>
<descr>
<p>
FillStyle specifies the area:
</p>
<ul>
<li>
When FillStyle is <var>fsBorder</var>, the area is <b>bounded</b> by a 
certain Color, the boundary must not have gaps in it.
</li>
<li>
When FillStyle is <var>fsSurface</var>, the area <b>has</b> the specified 
Color, and all adjacent pixels of this color are replaced.
</li>
</ul>
<p>
Filling starts at a given point, which resides somewhere inside the area.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.FloodFill.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.FloodFill.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.FloodFill.X">
<short>The starting point.</short>
</element>
<element name="TWidgetSet.FloodFill.Y">
<short>The starting point.</short>
</element>
<element name="TWidgetSet.FloodFill.Color">
<short>The area or boundary color, depending on FillStyle.</short>
</element>
<element name="TWidgetSet.FloodFill.FillStyle">
<short>fsBorder or fsSurface.</short>
</element>
<element name="TWidgetSet.FloodFill.Brush">
<short>The brush used to fill the area.</short>
</element>

<element name="TWidgetSet.FrameRect">
<short>Draws a border around a rectangle.</short>
<descr>
The boundary is one logical unit wide, painted using the given brush.
</descr>
<seealso/>
</element>
<element name="TWidgetSet.FrameRect.Result">
<short>Zero on failure.</short>
</element>
<element name="TWidgetSet.FrameRect.DC">
<short/>
</element>
<element name="TWidgetSet.FrameRect.ARect">
<short>The rectangle to outline.</short>
</element>
<element name="TWidgetSet.FrameRect.hBr">
<short>The brush for drawing the border.</short>
</element>

<element name="TWidgetSet.GetActiveWindow">
<short>Returns the Handle of the active window of the calling thread.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetActiveWindow.Result">
<short>The window handle, zero on failure.</short>
</element>

<element name="TWidgetSet.GetBitmapBits">
<short>Fills a buffer with the bitmap bits.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetBitmapBits.Result">
<short>The number of bytes copied, zero on failure.</short>
</element>
<element name="TWidgetSet.GetBitmapBits.Bitmap">
<short>The (device dependent) bitmap handle.</short>
</element>
<element name="TWidgetSet.GetBitmapBits.Count">
<short>The byte size of the buffer.</short>
</element>
<element name="TWidgetSet.GetBitmapBits.Bits">
<short>Pointer to the output buffer.</short>
</element>

<element name="TWidgetSet.GetBkColor">
<short>Returns the background color of a device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetBkColor.Result">
<short>The background color, CLR_INVALID on failure.</short>
</element>
<element name="TWidgetSet.GetBkColor.DC">
<short/>
</element>

<element name="TWidgetSet.GetCapture">
<short>Returns the window that captures mouse messages.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetCapture.Result">
<short>
The window handle, zero if no window of the thread captures mouse messages.
</short>
</element>

<element name="TWidgetSet.GetCaretPos">
<short>Returns the caret position, in client coordinates.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetCaretPos.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetCaretPos.lpPoint">
<short>Receives the coordinates.</short>
</element>

<element name="TWidgetSet.GetClientRect">
<short>Returns the client rectangle of a window.</short>
<descr>
<p>
The client rectangle is the size of the inner area of a control, where e.g. 
the child controls are visible. Left and Top are always 0.
</p>
<p>
A child control with Align=alClient will completely fill the client rectangle.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetClientRect.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetClientRect.handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.GetClientRect.Rect">
<short>Receives the client coordinates.</short>
</element>

<element name="TWidgetSet.GetClipBox">
<short>
Returns the smallest rectangle which includes the entire clipping region of a 
device context.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetClipBox.Result">
<short>The region kind.</short>
</element>
<element name="TWidgetSet.GetClipBox.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetClipBox.lpRect">
<short>Receives the coordinates.</short>
</element>

<element name="TWidgetSet.GetClipRGN">
<short>Returns the clipping region of a device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetClipRGN.Result">
<short>Zero on failure.</short>
</element>
<element name="TWidgetSet.GetClipRGN.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetClipRGN.RGN">
<short>The handle of the clipping region.</short>
</element>

<element name="TWidgetSet.GetCurrentObject">
<short>Returns the currently selected object in a device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetCurrentObject.Result">
<short>The object handle, zero on failure.</short>
</element>
<element name="TWidgetSet.GetCurrentObject.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetCurrentObject.uObjectType">
<short>The type of the selected object, e.g. OBJ_BRUSH.</short>
</element>

<element name="TWidgetSet.GetCursorPos">
<short>Gets the mouse cursor position, in screen coordinates.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetCursorPos.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetCursorPos.lpPoint">
<short>Receives the mouse coordinates.</short>
</element>

<element name="TWidgetSet.GetCharABCWidths">
<short>Returns the ABC widths of a range of character codes.</short>
<descr/>
<seealso>
<link id="#lcl.lcltype._ABC">_ABC</link>
</seealso>
</element>
<element name="TWidgetSet.GetCharABCWidths.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetCharABCWidths.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetCharABCWidths.p2">
<short>The first character code.</short>
</element>
<element name="TWidgetSet.GetCharABCWidths.p3">
<short>The last character code.</short>
</element>
<element name="TWidgetSet.GetCharABCWidths.ABCStructs">
<short>Array of ABC records, receiving the information.</short>
</element>

<element name="TWidgetSet.GetDC">
<short>
Returns the handle for the Device Context (DC) in the client area of a window.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetDC.Result">
<short>The DC handle, zero on failure.</short>
</element>
<element name="TWidgetSet.GetDC.hWnd">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.GetDeviceCaps">
<short>Returns various device specific information.</short>
<descr>
<p>
The following information can be retrieved:
</p>
<dl>
<dt>HORZSIZE</dt>
<dd> Horizontal size in millimeters.</dd>
<dt>VERTSIZE</dt>
<dd>Vertical size in millimeters.</dd>
<dt>HORZRES</dt>
<dd>Horizontal width in pixels.</dd>
<dt>VERTRES</dt>
<dd>Vertical height in pixels.</dd>
<dt>BITSPIXEL</dt>
<dd>Number of bits per pixel.</dd>
<dt>PLANES</dt>
<dd>Number of color planes.</dd>
<dt>LOGPIXELSX</dt>
<dd>The number of pixels per logical inch, in X (horizontal) direction.</dd>
<dt>LOGPIXELSY</dt>
<dd>The number of pixels per logical inch, in Y (vertical) direction.</dd>
<dt>SIZEPALETTE</dt>
<dd>Number of entries in the color palette.</dd>
<dt>NUMRESERVED</dt>
<dd>Number of reserved entries in the color palette.</dd>
</dl>
</descr>
<seealso>
<link id="#lcl.lcltype.HORZRES">HORZRES</link>
</seealso>
</element>
<element name="TWidgetSet.GetDeviceCaps.Result">
<short>The requested value.</short>
</element>
<element name="TWidgetSet.GetDeviceCaps.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetDeviceCaps.Index">
<short>The value type, e.g. HORZRES.</short>
</element>

<element name="TWidgetSet.GetDIBits">
<short>Fills a buffer with bitmap color bits.</short>
<descr>
<p>
The bitmap must be a compatible (device dependent) bitmap, for the given 
device context. It should not be selected into any DC.
</p>
<p>
The color bits are copied into the Bits array in Device Independent Bitmap 
(DIB) format.
</p>
<p>
When Bits is Nil, the BitInfo record receives the bitmap information, from 
which the required size of the Bits array can be determined.
</p>
<p></p>
</descr>
<seealso>
<link id="#lcl.lcltype.DIB_RGB_COLORS">DIB_RGB_COLORS</link>
</seealso>
</element>
<element name="TWidgetSet.GetDIBits.Result">
<short>The number of returned scanlines, zero on failure.</short>
</element>
<element name="TWidgetSet.GetDIBits.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetDIBits.Bitmap">
<short>The bitmap handle.</short>
</element>
<element name="TWidgetSet.GetDIBits.StartScan">
<short>The first scanline to retrieve.</short>
</element>
<element name="TWidgetSet.GetDIBits.NumScans">
<short>The number of scanlines to retrieve.</short>
</element>
<element name="TWidgetSet.GetDIBits.Bits">
<short>Pointer to the color bits array, or Nil to get the BitmapInfo.</short>
</element>
<element name="TWidgetSet.GetDIBits.BitInfo">
<short>Contains or receives the BitmapInfo.</short>
</element>
<element name="TWidgetSet.GetDIBits.Usage">
<short>The color format, e.g. DIB_RGB_COLORS.</short>
</element>

<element name="TWidgetSet.GetDoubleClickTime">
<short>Returns the double-click time, in milliseconds.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetDoubleClickTime.Result">
<short/>
</element>

<element name="TWidgetSet.GetFocus">
<short>
Returns the handle of the window that has the focus in the current thread.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetFocus.Result">
<short>The window handle, zero if no window has the focus.</short>
</element>

<element name="TWidgetSet.GetFontLanguageInfo">
<short>Returns language information about the currently selected font.</short>
<descr>
<p>The following flags are supported:</p>
<dl>
<dt>GCP_DBCS</dt>
<dd>the character set is double-byte (DBCS).</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetFontLanguageInfo.Result">
<short>Font flags, zero for Latin font families.</short>
</element>
<element name="TWidgetSet.GetFontLanguageInfo.DC">
<short/>
</element>

<element name="TWidgetSet.GetForegroundWindow">
<short>
Returns the window that the user is currently working with, session wide.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetForegroundWindow.Result">
<short>The window handle, zero when no such window exists.</short>
</element>

<element name="TWidgetSet.GetIconInfo">
<short>Returns information about an Icon or Cursor.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetIconInfo.Result">
<short/>
</element>
<element name="TWidgetSet.GetIconInfo.AIcon">
<short>The item handle.</short>
</element>
<element name="TWidgetSet.GetIconInfo.AIconInfo">
<short>Receives the information.</short>
</element>

<element name="TWidgetSet.GetKeyState">
<short>The status of a virtual key.</short>
<descr>
<p>
The result reflects the message processing state, at the time of the last 
seen key message.
</p>
<p>
A key can be up, down or toggled.
</p>
<p>
The high order bit of the result is the up/down state, 1 for down.
</p>
<p>
The low order bit of the result is the toggled state, applicable to e.g. the 
caps-lock key. The bit is set if the key is toggled (active).
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetKeyState.Result">
<short>The key state flags.</short>
</element>
<element name="TWidgetSet.GetKeyState.nVirtKey">
<short>The virtual key code.</short>
</element>

<element name="TWidgetSet.GetMapMode">
<short>Returns the mapping mode of a device context.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetMapMode"/>
</seealso>
</element>
<element name="TWidgetSet.GetMapMode.Result">
<short>The
<link id="TWidgetSet.SetMapMode">mapping mode</link>, zero on failure.</short>
</element>
<element name="TWidgetSet.GetMapMode.DC">
<short>The device context.</short>
</element>

<element name="TWidgetSet.GetMonitorInfo">
<short>Returns information about a display monitor.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetMonitorInfo.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetMonitorInfo.hMonitor">
<short>The monitor handle.</short>
</element>
<element name="TWidgetSet.GetMonitorInfo.lpmi">
<short>Receives the information.</short>
</element>

<element name="TWidgetSet.GetObject">
<short>Returns information about a graphics object.</short>
<descr>The returned information depends on the object type
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetObject.Result">
<short>The number of bytes written into the buffer.</short>
</element>
<element name="TWidgetSet.GetObject.GDIObject">
<short>The Handle of the object.</short>
</element>
<element name="TWidgetSet.GetObject.BufSize">
<short>The byte count of the buffer.</short>
</element>
<element name="TWidgetSet.GetObject.Buf">
<short>
Receives the information. Nil means to return the required buffer size.
</short>
</element>

<element name="TWidgetSet.GetPaletteEntries">
<short>Retrieves a range of color entries from a logical palette.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetPaletteEntries.Result">
<short>The number of entries copied.</short>
</element>
<element name="TWidgetSet.GetPaletteEntries.Palette">
<short>The palette handle.</short>
</element>
<element name="TWidgetSet.GetPaletteEntries.StartIndex">
<short>The first entry.</short>
</element>
<element name="TWidgetSet.GetPaletteEntries.NumEntries">
<short>The number of entries to retrieve.</short>
</element>
<element name="TWidgetSet.GetPaletteEntries.PaletteEntries">
<short>Array of PALETTEENTRY records, receiving the information.</short>
</element>

<element name="TWidgetSet.GetParent">
<short>Returns the parent window of a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetParent.Result">
<short>The parent window handle, zero on failure.</short>
</element>
<element name="TWidgetSet.GetParent.Handle">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.GetProp">
<short>Retrieves a property value for a window.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetProp"/>
</seealso>
</element>
<element name="TWidgetSet.GetProp.Result">
<short>Nil on failure.</short>
</element>
<element name="TWidgetSet.GetProp.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.GetProp.Str">
<short>The property name.</short>
</element>

<element name="TWidgetSet.GetRgnBox">
<short>Returns the bounding rectangle of a region, containing the entire 
region.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetRgnBox.Result">
<short>The region kind.</short>
</element>
<element name="TWidgetSet.GetRgnBox.RGN">
<short>The region handle.</short>
</element>
<element name="TWidgetSet.GetRgnBox.lpRect">
<short>Receives the coordinates.</short>
</element>

<element name="TWidgetSet.GetROP2">
<short>The current Foreground Mixing Mode in a device context.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetROP2"/>
<link id="#lcl.lcltype.R2_COPYPEN">R2_COPYPEN</link>
</seealso>
</element>
<element name="TWidgetSet.GetROP2.Result">
<short>The mode, zero on failure.</short>
</element>
<element name="TWidgetSet.GetROP2.DC">
<short>The device context.</short>
</element>

<element name="TWidgetSet.GetScrollInfo">
<short>Returns all or selected information about a ScrollBar.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetScrollInfo"/>
</seealso>
</element>
<element name="TWidgetSet.GetScrollInfo.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetScrollInfo.Handle">
<short>
The handle of a ScrollBar, or of a window containing scrollbars.
</short>
</element>
<element name="TWidgetSet.GetScrollInfo.SBStyle">
<short>The ScrollBar kind.</short>
</element>
<element name="TWidgetSet.GetScrollInfo.ScrollInfo">
<short>Receives the values indicated in fMask.</short>
</element>

<element name="TWidgetSet.GetStockObject">
<short>Retrieves a handle to one of the predefined graphic objects.</short>
<descr>
<p>These are the predefined (Windows) stock objects:
</p>
<ul>
<li>BLACK_BRUSH</li>
<li>DKGRAY_BRUSH</li>
<li>DC_BRUSH</li>
<li>GRAY_BRUSH</li>
<li>HOLLOW_BRUSH</li>
<li>LTGRAY_BRUSH</li>
<li>NULL_BRUSH</li>
<li>WHITE_BRUSH</li>
<li>BLACK_PEN</li>
<li>DC_PEN</li>
<li>WHITE_PEN</li>
<li>ANSI_FIXED_FONT</li>
<li>ANSI_VAR_FONT</li>
<li>DEVICE_DEFAULT_FONT</li>
<li>DEFAULT_GUI_FONT</li>
<li>OEM_FIXED_FONT</li>
<li>SYSTEM_FONT</li>
<li>SYSTEM_FIXED_FONT</li>
<li>DEFAULT_PALETTE</li>
</ul>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetStockObject.Result">
<short>The handle, zero on failure.</short>
</element>
<element name="TWidgetSet.GetStockObject.Value">
<short>The object kind.</short>
</element>

<element name="TWidgetSet.GetSysColor">
<short>Retrieves the system color for standard display elements.</short>
<descr>
<p>These are the available display elements:
</p>
<ul>
<li>COLOR_3DDKSHADOW</li>
<li>COLOR_3DFACE, COLOR_BTNFACE</li>
<li>COLOR_3DHIGHLIGHT, COLOR_3DHILIGHT, COLOR_BTNHILIGHT, 
COLOR_BTNHIGHLIGHT</li>
<li>COLOR_3DLIGHT</li>
<li>COLOR_3DSHADOW, COLOR_BTNSHADOW</li>
<li>COLOR_ACTIVEBORDER</li>
<li>COLOR_ACTIVECAPTION</li>
<li>COLOR_APPWORKSPACE</li>
<li>COLOR_BACKGROUND, COLOR_DESKTOP</li>
<li>COLOR_BTNTEXT</li>
<li>COLOR_CAPTIONTEXT</li>
<li>COLOR_GRADIENTACTIVECAPTION</li>
<li>COLOR_GRADIENTINACTIVECAPTION</li>
<li>COLOR_GRAYTEXT</li>
<li>COLOR_HIGHLIGHT</li>
<li>COLOR_HIGHLIGHTTEXT</li>
<li>COLOR_HOTLIGHT</li>
<li>COLOR_INACTIVEBORDER</li>
<li>COLOR_INACTIVECAPTION</li>
<li>COLOR_INACTIVECAPTIONTEXT</li>
<li>COLOR_INFOBK</li>
<li>COLOR_INFOTEXT</li>
<li>COLOR_MENU</li>
<li>COLOR_MENUHILIGHT</li>
<li>COLOR_MENUBAR</li>
<li>COLOR_MENUTEXT</li>
<li>COLOR_SCROLLBAR</li>
<li>COLOR_WINDOW</li>
<li>COLOR_WINDOWFRAME</li>
<li>COLOR_WINDOWTEXT</li>
</ul>
<p>
Since all returned values are valid colors, errors cannot be detected. 
GetSysColorBrush instead returns a zero handle on failure.
</p>
</descr>
<seealso>
<link id="TWidgetSet.GetSysColorBrush"/>
</seealso>
</element>
<element name="TWidgetSet.GetSysColor.Result">
<short>The RGB color.</short>
</element>
<element name="TWidgetSet.GetSysColor.nIndex">
<short>The system color type.</short>
</element>

<element name="TWidgetSet.GetSysColorBrush">
<short>Retrieves a system brush for standard display elements.</short>
<descr/>
<seealso>
<link id="TWidgetSet.GetSysColor"/>
</seealso>
</element>
<element name="TWidgetSet.GetSysColorBrush.Result">
<short>The brush handle, zero on failure.</short>
</element>
<element name="TWidgetSet.GetSysColorBrush.nIndex">
<short>The system color type.</short>
</element>

<element name="TWidgetSet.GetSystemPaletteEntries">
<short>
Retrieves a range of color entries from the system palette for a device.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.GetPaletteEntries"/>
</seealso>
</element>
<element name="TWidgetSet.GetSystemPaletteEntries.Result">
<short>The number of entries copied, zero on failure.</short>
</element>
<element name="TWidgetSet.GetSystemPaletteEntries.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetSystemPaletteEntries.StartIndex">
<short>The first entry to retrieve.</short>
</element>
<element name="TWidgetSet.GetSystemPaletteEntries.NumEntries">
<short>The number of requested entries.</short>
</element>
<element name="TWidgetSet.GetSystemPaletteEntries.PaletteEntries">
<short>
Receives the color information. When Nil, the total number of palette entries 
is returned.
</short>
</element>

<element name="TWidgetSet.GetSystemMetrics">
<short>Retrieves various system metrics.</short>
<descr>
<p>
All dimensions are measured in pixels.
</p>
<p>
These are the available system metrics parameters:
</p>
<ul>
<li>SM_ARRANGE</li>
<li>SM_CLEANBOOT</li>
<li>SM_CMONITORS</li>
<li>SM_CMOUSEBUTTONS</li>
<li>SM_CXBORDER</li>
<li>SM_CYBORDER</li>
<li>SM_CXCURSOR</li>
<li>SM_CXCURSOR</li>
<li>SM_CXDLGFRAME</li>
<li>SM_CYDLGFRAME</li>
<li>SM_CXDOUBLECLK</li>
<li>SM_CXDOUBLECLK</li>
<li>SM_CXDRAG</li>
<li>SM_CXDRAG</li>
<li>SM_CXEDGE</li>
<li>SM_CXEDGE</li>
<li>SM_CXFIXEDFRAME</li>
<li>SM_CYFIXEDFRAME</li>
<li>SM_CXFOCUSBORDER</li>
<li>SM_CXFRAME</li>
<li>SM_CYFRAME</li>
<li>SM_CXFULLSCREEN</li>
<li>SM_CYFULLSCREEN</li>
<li>SM_CXHSCROLL</li>
<li>SM_CYHSCROLL</li>
<li>SM_CXHTHUMB</li>
<li>SM_CXICON</li>
<li>SM_CYICON</li>
<li>SM_CXICONSPACING</li>
<li>SM_CYICONSPACING</li>
<li>SM_CYMAXIMIZED</li>
<li>SM_CYMAXIMIZED</li>
<li>SM_CXMAXTRACK</li>
<li>SM_CYMAXTRACK</li>
<li>SM_CXMENUCHECK</li>
<li>SM_CYMENUCHECK</li>
<li>SM_CXMENUSIZE</li>
<li>SM_CYMENUSIZE</li>
<li>SM_CXMIN</li>
<li>SM_CYMIN</li>
<li>SM_CXMINIMIZED</li>
<li>SM_CYMINIMIZED</li>
<li>SM_CXMINSPACING</li>
<li>SM_CYMINSPACING</li>
<li>SM_CXMINTRACK</li>
<li>SM_CYMINTRACK</li>
<li>SM_CXSCREEN</li>
<li>SM_CYSCREEN</li>
<li>SM_CXSIZE</li>
<li>SM_CYSIZE</li>
<li>SM_CXSIZEFRAME</li>
<li>SM_CYSIZEFRAME</li>
<li>SM_CXSMICON</li>
<li>SM_CYSMICON</li>
<li>SM_CXSMSIZE</li>
<li>SM_CYSMSIZE</li>
<li>SM_CXVIRTUALSCREEN</li>
<li>SM_CYVIRTUALSCREEN</li>
<li>SM_CXVSCROLL</li>
<li>SM_CYVSCROLL</li>
<li>SM_CYCAPTION</li>
<li>SM_CYKANJIWINDOW</li>
<li>SM_CYMENU</li>
<li>SM_CYSMCAPTION</li>
<li>SM_CYVTHUMB</li>
<li>SM_DBCSENABLED</li>
<li>SM_DEBUG</li>
<li>SM_IMEENABLED</li>
<li>SM_MEDIACENTER</li>
<li>SM_MENUDROPALIGNMENT</li>
<li>SM_MIDEASTENABLED</li>
<li>SM_MOUSEPRESENT</li>
<li>SM_MOUSEWHEELPRESENT</li>
<li>SM_NETWORK</li>
<li>SM_PENWINDOWS</li>
<li>SM_REMOTECONTROL</li>
<li>SM_REMOTESESSION</li>
<li>SM_SECURE</li>
<li>SM_SAMEDISPLAYFORMAT</li>
<li>SM_SHOWSOUNDS</li>
<li>SM_SHUTTINGDOWN</li>
<li>SM_SLOWMACHINE</li>
<li>SM_SWAPBUTTON</li>
<li>SM_TABLETPC</li>
<li>SM_XVIRTUALSCREEN</li>
<li>SM_YVIRTUALSCREEN</li>
</ul>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetSystemMetrics.Result">
<short>Depends on the requested item.</short>
</element>
<element name="TWidgetSet.GetSystemMetrics.nIndex">
<short>The requested item.</short>
</element>

<element name="TWidgetSet.GetTextColor">
<short>The current text color in a device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetTextColor.Result">
<short>The RGB color.</short>
</element>
<element name="TWidgetSet.GetTextColor.DC">
<short>The device context.</short>
</element>

<element name="TWidgetSet.GetTextExtentExPoint">
<short>
Calculates the number of characters, that fit into some horizontal space.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.Str">
<short>The string containing the characters.</short>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.Count">
<short>The number of
<b>bytes</b>
in Str, -1 for automatic detection.</short>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.MaxWidth">
<short>The maximum display width, in logical units.</short>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.MaxCount">
<short>
Receives the number of <b>logical</b> (UTF) characters that can be displayed. 
When Nil, MaxWidth is ignored.
</short>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.PartialWidths">
<short>
Receives the widths for every partial sequence of characters. Can be Nil.
</short>
</element>
<element name="TWidgetSet.GetTextExtentExPoint.Size">
<short>Receives the total width and height of the display area.</short>
</element>

<element name="TWidgetSet.GetTextExtentPoint">
<short>Computes the display width and height of a string.</short>
<descr/>
<errors>May not work properly without Unicode support.
</errors>
<seealso>
<link id="TWidgetSet.GetTextExtentExPoint"/>
</seealso>
</element>
<element name="TWidgetSet.GetTextExtentPoint.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetTextExtentPoint.DC">
<short>The display DC.</short>
</element>
<element name="TWidgetSet.GetTextExtentPoint.Str">
<short>The text.</short>
</element>
<element name="TWidgetSet.GetTextExtentPoint.Count">
<short>
The number of <b>bytes</b> in Str, -1 for automatic detection.
</short>
</element>
<element name="TWidgetSet.GetTextExtentPoint.Size">
<short>
Receives the total width and height of the required display area.
</short>
</element>

<element name="TWidgetSet.GetTextExtentPoint32">
<short>Computes the display width and height for a string.</short>
<descr/>
<seealso>
<link id="TWidgetSet.GetTextExtentPoint"/>
<link id="TWidgetSet.GetTextExtentExPoint"/>
</seealso>
</element>
<element name="TWidgetSet.GetTextExtentPoint32.Result">
<short/>
</element>
<element name="TWidgetSet.GetTextExtentPoint32.DC">
<short/>
</element>
<element name="TWidgetSet.GetTextExtentPoint32.Str">
<short/>
</element>
<element name="TWidgetSet.GetTextExtentPoint32.Count">
<short/>
</element>
<element name="TWidgetSet.GetTextExtentPoint32.Size">
<short/>
</element>

<element name="TWidgetSet.GetTextMetrics">
<short>Retrieves the metrics for the currently selected font.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetTextMetrics.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetTextMetrics.DC">
<short>The device context, where the font is selected.</short>
</element>
<element name="TWidgetSet.GetTextMetrics.TM">
<short>Receives the information.</short>
</element>

<element name="TWidgetSet.GetViewPortExtEx">
<short>Returns the size of the viewport for a device context.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetViewPortExtEx"/>
<link id="TWidgetSet.GetViewPortOrgEx"/>
</seealso>
</element>
<element name="TWidgetSet.GetViewPortExtEx.Result">
<short><b>False</b> (zero) on failure.</short>
</element>
<element name="TWidgetSet.GetViewPortExtEx.DC">
<short/>
</element>
<element name="TWidgetSet.GetViewPortExtEx.Size">
<short>Receives the viewport size.</short>
</element>

<element name="TWidgetSet.GetViewPortOrgEx">
<short>Returns the origin of the viewport for a device context.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetViewPortOrgEx"/>
<link id="TWidgetSet.GetViewPortExtEx"/>
</seealso>
</element>
<element name="TWidgetSet.GetViewPortOrgEx.Result">
<short><b>False</b> (zero) on failure.</short>
</element>
<element name="TWidgetSet.GetViewPortOrgEx.DC">
<short/>
</element>
<element name="TWidgetSet.GetViewPortOrgEx.P">
<short>Receives the viewport origin.</short>
</element>

<element name="TWidgetSet.GetWindowExtEx">
<short>Returns the extent of a window, in logical units.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetWindowExtEx.Result">
<short><b>False</b> (zero) on failure.</short>
</element>
<element name="TWidgetSet.GetWindowExtEx.DC">
<short/>
</element>
<element name="TWidgetSet.GetWindowExtEx.Size">
<short>Receives the window extent.</short>
</element>

<element name="TWidgetSet.GetWindowLong">
<short>Returns the attributes of a window.</short>
<descr>
<p>The following attributes are defined:
</p>
<dl>
<dt>GWL_EXSTYLE</dt>
<dd>extended window style flags. See CreateWindowEx.</dd>
<dt>GWL_STYLE</dt>
<dd>window style flags.</dd>
<dt>GWL_WNDPROC</dt>
<dd>the window procedure (address or handle). See CallWindowProc.</dd>
<dt>GWL_HINSTANCE</dt>
<dd>handle of the application instance.</dd>
<dt>GWL_HWNDPARENT</dt>
<dd>handle of the parent window.</dd>
<dt>GWL_ID</dt>
<dd>the identifier of the window.</dd>
<dt>GWL_USERDATA</dt>
<dd>user data associated with the window.</dd>
</dl>
<p>
The following attributes are also available when the window is a dialog box:
</p>
<dl>
<dt>DWL_DLGPROC</dt>
<dd>the dialog box procedure (address or handle).</dd>
<dt>DWL_MSGRESULT</dt>
<dd>the return value of a message processed in the dialog box procedure.</dd>
<dt>DWL_USER</dt>
<dd>extra application information.</dd>
</dl>
<p>
GWL_USERDATA and DWL_USER are the base offsets of user added attributes. The 
second user attribute can be access with an additional offset of 4, and so on.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetWindowLong.Result">
<short>The attribute.</short>
</element>
<element name="TWidgetSet.GetWindowLong.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.GetWindowLong.int">
<short>Offset of the attribute.</short>
</element>

<element name="TWidgetSet.GetWindowRect">
<short>
Retrieves the bounding rectangle of a window, in screen coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetWindowRect.Result">
<short>Zero on failure.</short>
</element>
<element name="TWidgetSet.GetWindowRect.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.GetWindowRect.Rect">
<short>Receives the window bounds.</short>
</element>

<element name="TWidgetSet.GetWindowSize">
<short>Returns the Width and Height of the window.</short>
<descr>
<p>
The size value is the client width and height for forms, or the total 
combined size for sub-controls.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.GetWindowSize.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetWindowSize.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.GetWindowSize.Width">
<short>The width.</short>
</element>
<element name="TWidgetSet.GetWindowSize.Height">
<short>The height.</short>
</element>

<element name="TWidgetSet.GetWindowOrgEx">
<short>
Retrieves the window origin for a device context in logical units.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetWindowOrgEx"/>
<link id="TWidgetSet.GetViewPortOrgEx"/>
</seealso>
</element>
<element name="TWidgetSet.GetWindowOrgEx.Result">
<short>Zero on failure.</short>
</element>
<element name="TWidgetSet.GetWindowOrgEx.dc">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GetWindowOrgEx.P">
<short>Receives the origin.</short>
</element>

<element name="TWidgetSet.GradientFill">
<short>Fills rectangle or triangle areas with gradient colors.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GradientFill.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GradientFill.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.GradientFill.Vertices">
<short/>
</element>
<element name="TWidgetSet.GradientFill.NumVertices">
<short/>
</element>
<element name="TWidgetSet.GradientFill.Meshes">
<short/>
</element>
<element name="TWidgetSet.GradientFill.NumMeshes">
<short/>
</element>
<element name="TWidgetSet.GradientFill.Mode">
<short>E.g. GRADIENT_FILL_RECT_H.</short>
</element>

<element name="TWidgetSet.HideCaret">
<short>Removes the caret from the screen.</short>
<descr>
<p>
Calls are cumulative; for every HideCaret a call to ShowCaret is required to 
undo the action.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.HideCaret.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.HideCaret.hWnd">
<short>The window handle, can be zero.</short>
</element>

<element name="TWidgetSet.InitializeCriticalSection">
<short>Initializes a Critical Section object.</short>
<descr>
<p>
Critical sections are thread synchronization elements, typically used to 
prevent concurrent access to a shared resource.
</p>
<p>
Only one thread can own a critical section at the same time, other requests 
(to enter the same critical section) are delayed until the owner has left the 
critical section.
</p>
<p>
The TCriticalSection type is platform specific. It is treated like a Handle.
</p>
</descr>
<seealso>
<link id="TWidgetSet.EnterCriticalSection"/>
<link id="TWidgetSet.LeaveCriticalSection"/>
<link id="TWidgetSet.DeleteCriticalSection"/>
</seealso>
</element>
<element name="TWidgetSet.InitializeCriticalSection.CritSection">
<short>The critical section object.</short>
</element>

<element name="TWidgetSet.IntersectClipRect">
<short>
Shrinks the clipping region of an Device Context to a rectangular boundary, 
e.g. a text area.
</short>
<descr>
<p>
Use this method before painting into a rectangle in an DC, to clip everything 
outside the rectangle <b>and</b> outside the current clipping region of the 
DC.
</p>
<p>
The result can be one of the following constants:<br/> Error NullRegion 
SimpleRegion ComplexRegion Region_Error.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.IntersectClipRect.Result">
<short>The region type, zero on failure.</short>
</element>
<element name="TWidgetSet.IntersectClipRect.dc">
<short/>
</element>
<element name="TWidgetSet.IntersectClipRect.Left">
<short/>
</element>
<element name="TWidgetSet.IntersectClipRect.Top">
<short/>
</element>
<element name="TWidgetSet.IntersectClipRect.Right">
<short/>
</element>
<element name="TWidgetSet.IntersectClipRect.Bottom">
<short/>
</element>

<element name="TWidgetSet.InvalidateRect">
<short>Marks a display area for repaint.</short>
<descr/>
<seealso>
<link id="TWidgetSet.InvalidateRgn"/>
</seealso>
</element>
<element name="TWidgetSet.InvalidateRect.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.InvalidateRect.aHandle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.InvalidateRect.ARect">
<short>The client coordinates of the area.</short>
</element>
<element name="TWidgetSet.InvalidateRect.bErase">
<short>
<b>True</b> forces a repaint of the background, before further painting.
</short>
</element>

<element name="TWidgetSet.InvalidateRgn">
<short>Marks a display area for repaint.</short>
<descr/>
<seealso>
<link id="TWidgetSet.InvalidateRect"/>
</seealso>
</element>
<element name="TWidgetSet.InvalidateRgn.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.InvalidateRgn.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.InvalidateRgn.Rgn">
<short>The region to repaint.</short>
</element>
<element name="TWidgetSet.InvalidateRgn.Erase">
<short>
<b>True</b> forces a repaint of the background, before further painting.
</short>
</element>

<element name="TWidgetSet.IsDBCSLeadByte">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsDBCSLeadByte.Result">
<short>
<b>True</b> when the character code is the first of a double-byte character 
sequence.
</short>
</element>
<element name="TWidgetSet.IsDBCSLeadByte.TestChar">
<short>The character code to test.</short>
</element>

<element name="TWidgetSet.IsIconic">
<short><b>True</b> when the window is minimized.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsIconic.Result">
<short><b>True</b> when the window is minimized.</short>
</element>
<element name="TWidgetSet.IsIconic.handle">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.IsWindow">
<short>Checks whether a handle refers to a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsWindow.Result">
<short><b>True</b> when handle is a valid window handle.</short>
</element>
<element name="TWidgetSet.IsWindow.handle">
<short>The handle to test.</short>
</element>

<element name="TWidgetSet.IsWindowEnabled">
<short>
Determines whether a window can receive mouse and keyboard input.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsWindowEnabled.Result">
<short><b>True</b> when the window is enabled (and visible).</short>
</element>
<element name="TWidgetSet.IsWindowEnabled.handle">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.IsWindowVisible">
<short>The definite Visible state of a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsWindowVisible.Result">
<short><b>True</b> when the window and all its parents are visible.</short>
</element>
<element name="TWidgetSet.IsWindowVisible.handle">
<short/>
</element>

<element name="TWidgetSet.IsZoomed">
<short><b>True</b> when the window is maximized.</short>
<descr/>
<seealso>
<link id="TWidgetSet.IsIconic"/>
</seealso>
</element>
<element name="TWidgetSet.IsZoomed.Result">
<short><b>True</b> when the window is maximized.</short>
</element>
<element name="TWidgetSet.IsZoomed.handle">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.LeaveCriticalSection">
<short>Releases a critical section, and allows use by other threads.</short>
<descr/>
<seealso>
<link id="TWidgetSet.InitializeCriticalSection"/>
</seealso>
</element>
<element name="TWidgetSet.LeaveCriticalSection.CritSection">
<short>The critical section object.</short>
</element>

<element name="TWidgetSet.LineTo">
<short>
Draws a line from the current position up to, but not including, the 
specified point.
</short>
<descr>
The current position is set to the given endpoint.
</descr>
<seealso/>
</element>
<element name="TWidgetSet.LineTo.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.LineTo.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.LineTo.X">
<short>The endpoint in logical units.</short>
</element>
<element name="TWidgetSet.LineTo.Y">
<short>The endpoint in logical units.</short>
</element>

<element name="TWidgetSet.LPtoDP">
<short>Converts logical coordinates into device coordinates.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.LPtoDP.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.LPtoDP.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.LPtoDP.Points">
<short>Holds and receives the transformed coordinates.</short>
</element>
<element name="TWidgetSet.LPtoDP.Count">
<short>The number of points in Points.</short>
</element>

<element name="TWidgetSet.MaskBlt">
<short>
Copies part of a source DC into an destination DC, using the specified 
foreground and
background raster operations.
</short>
<descr>
<p>
MaskBlt behaves like BitBlt when no mask bitmap is specified. It does a 
SRCOPY operation when also no Rop is specified. See BitBlt for general 
information about raster operations.
</p>
<p>
Rop contains both a foreground and a background raster operation (see 
MakeROP4). When a (monochrome) mask bitmap is present, its bits select either 
the foreground (1) or background (0) raster operation.
</p>
</descr>
<seealso>
<link id="TWidgetSet.BitBlt"/>
<link id="TWidgetSet.StretchBlt"/>
<link id="#lcl.lclintf.MakeROP4">MakeROP4</link>
</seealso>
</element>
<element name="TWidgetSet.MaskBlt.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.MaskBlt.DestDC">
<short>The destination device context.</short>
</element>
<element name="TWidgetSet.MaskBlt.X">
<short>The origin of the destination rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.Y">
<short>The origin of the destination rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.Width">
<short>The size of the destination rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.Height">
<short>The size of the destination rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.SrcDC">
<short>The source device context.</short>
</element>
<element name="TWidgetSet.MaskBlt.XSrc">
<short>The origin of the source rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.YSrc">
<short>The origin of the source rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.Mask">
<short>The monochrome mask bitmap handle, can be zero.</short>
</element>
<element name="TWidgetSet.MaskBlt.XMask">
<short>The origin of the mask rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.YMask">
<short>The origin of the mask rectangle.</short>
</element>
<element name="TWidgetSet.MaskBlt.Rop">
<short>The raster operations (optional).</short>
</element>

<element name="TWidgetSet.MessageBox">
<short>Displays a modal dialog message box.</short>
<descr>
<p>
The <var>MessageBox</var> function displays a modal dialog with the given 
text, caption, icon and buttons.
</p>
<p>
<var>uType</var> is a combination of flags from the following lists.
</p>
<p>
The shown buttons are selected by one of:
</p>
<dl>
<dt>MB_ABORTRETRYIGNORE</dt>
<dd> Abort, Retry, and Ignore.</dd>
<dt>MB_CANCELTRYCONTINUE</dt>
<dd>
Cancel, Try Again, Continue. Use this message box type instead of 
MB_ABORTRETRYIGNORE.
</dd>
<dt>MB_OK</dt>
<dd>OK.</dd>
<dt>MB_OKCANCEL</dt>
<dd>OK and Cancel.</dd>
<dt>MB_RETRYCANCEL</dt>
<dd>Retry and Cancel.</dd>
<dt>MB_YESNO</dt>
<dd>Yes and No.</dd>
<dt>MB_YESNOCANCEL</dt>
<dd>Yes, No, and Cancel.</dd>
</dl>
<p>
Add MB_HELP for an Help button. When the user clicks the Help button or 
presses F1, the owner window receives a WM_HELP message.
</p>
<p>
An icon can be added by one of:
</p>
<dl>
<dt>MB_ICONEXCLAMATION, MB_ICONWARNING</dt>
<dd>Exclamation point icon</dd>
<dt>MB_ICONINFORMATION, MB_ICONASTERISK</dt>
<dd>The letter "i" in a circle</dd>
<dt>MB_ICONQUESTION</dt>
<dd>Question mark icon</dd>
<dt>MB_ICONSTOP, MB_ICONERROR, MB_ICONHAND</dt>
<dd>Stop sign icon</dd>
</dl>
<p>
The default button number, activated when the user presses Enter, can be 
indicated by one of:
</p>
<ul>
<li>MB_DEFBUTTON1</li>
<li>MB_DEFBUTTON2</li>
<li>MB_DEFBUTTON3</li>
<li>MB_DEFBUTTON4</li>
</ul>
<p>
Other Windows MessageBox-specific options are not (yet) implemented on other 
platforms.
</p>
<p>
The function result corresponds to the button pressed:
</p>
<ul>
<li>IDABORT</li>
<li>IDCANCEL</li>
<li>IDCONTINUE</li>
<li>IDIGNOE</li>
<li>IDNO</li>
<li>IDOK</li>
<li>IDRETRY</li>
<li>IDTRYAGAIN</li>
<li>IDYES</li>
</ul>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.MessageBox.Result">
<short>The pressed button, or zero on failure.</short>
</element>
<element name="TWidgetSet.MessageBox.hWnd">
<short>The handle of the window that owns the MessageBox.</short>
</element>
<element name="TWidgetSet.MessageBox.lpText">
<short>The text displayed in the MessageBox.</short>
</element>
<element name="TWidgetSet.MessageBox.lpCaption">
<short>The caption of the MessageBox.</short>
</element>
<element name="TWidgetSet.MessageBox.uType">
<short>Style flags specifying the shown buttons etc.</short>
</element>

<element name="TWidgetSet.MonitorFromPoint">
<short>Finds a monitor from the screen coordinates.</short>
<descr>
<p>
The return value contains the handle for the monitor, or a value determined 
using Flags when a monitor does not apply.
</p>
<dl>
<dt>MONITOR_DEFAULTTONEAREST</dt>
<dd>The nearest monitor.</dd>
<dt>MONITOR_DEFAULTTONULL</dt>
<dd>Zero.</dd>
<dt>MONITOR_DEFAULTTOPRIMARY</dt>
<dd>The primary monitor.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.MonitorFromPoint.Result">
<short>Gets the monitor handle, or a value derived from Flags.</short>
</element>
<element name="TWidgetSet.MonitorFromPoint.ptScreenCoords">
<short>The point in screen coordinates.</short>
</element>
<element name="TWidgetSet.MonitorFromPoint.dwFlags">
<short>
How coordinates outside any monitor are handled, see
<link id="TWidgetSet.MonitorFromPoint">MonitorFromPoint</link>.
</short>
</element>

<element name="TWidgetSet.MonitorFromRect">
<short>Finds the monitor covering most of a rectangle.</short>
<descr/>
<seealso>
<link id="TWidgetSet.MonitorFromPoint"/>
</seealso>
</element>
<element name="TWidgetSet.MonitorFromRect.Result">
<short>The monitor handle; see <link 
id="TWidgetSet.MonitorFromPoint">dwFlags</link>.
</short>
</element>
<element name="TWidgetSet.MonitorFromRect.lprcScreenCoords">
<short>The logical screen coordinates.</short>
</element>
<element name="TWidgetSet.MonitorFromRect.dwFlags">
<short>How coordinates outside any monitor are handled; see
<link id="TWidgetSet.MonitorFromPoint">MonitorFromPoint.Result</link>.
</short>
</element>

<element name="TWidgetSet.MonitorFromWindow">
<short>Finds the monitor covering most of a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.MonitorFromWindow.Result">
<short>The monitor handle, see
<link id="TWidgetSet.MonitorFromPoint">MonitorFromPoint.Result</link>.
</short>
</element>
<element name="TWidgetSet.MonitorFromWindow.hWnd">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.MonitorFromWindow.dwFlags">
<short>How coordinates outside any monitor are handled, see
<link id="TWidgetSet.MonitorFromPoint">MonitorFromPoint.Result</link>.
</short>
</element>

<element name="TWidgetSet.MoveToEx">
<short>Moves the current position to the specified point.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.MoveToEx.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.MoveToEx.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.MoveToEx.X">
<short>The new logical position.</short>
</element>
<element name="TWidgetSet.MoveToEx.Y">
<short>The new logical position.</short>
</element>
<element name="TWidgetSet.MoveToEx.OldPoint">
<short>Receives the old position, can be Nil if not required.</short>
</element>

<element name="TWidgetSet.OffsetRgn">
<short>Moves a region relative.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.OffsetRgn.Result">
<short>The new region kind, zero on failure.</short>
</element>
<element name="TWidgetSet.OffsetRgn.RGN">
<short>The Region to move.</short>
</element>
<element name="TWidgetSet.OffsetRgn.nXOffset">
<short>The relative distance to move.</short>
</element>
<element name="TWidgetSet.OffsetRgn.nYOffset">
<short>The relative distance to move.</short>
</element>

<element name="TWidgetSet.PeekMessage">
<short>Checks the thread's message queue for a message.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.PeekMessage.Result">
<short/>
</element>
<element name="TWidgetSet.PeekMessage.lpMsg">
<short>Receives the message.</short>
</element>
<element name="TWidgetSet.PeekMessage.Handle">
<short>
The target window handle of the message. Zero for any window, 
INVALID_HANDLE_VALUE for thread messages.
</short>
</element>
<element name="TWidgetSet.PeekMessage.wMsgFilterMin">
<short>The lowest message ID to retrieve.</short>
</element>
<element name="TWidgetSet.PeekMessage.wMsgFilterMax">
<short>The highest message ID to retrieve, zero for all messages.</short>
</element>
<element name="TWidgetSet.PeekMessage.wRemoveMsg">
<short>PM_REMOVE will remove the message from the queue.</short>
</element>

<element name="TWidgetSet.Pie">
<short>
Draws a filled pie-shaped wedge, from an ellipse and two radials.
</short>
<descr>
<p>
The ellipse is bounded by a rectangle x1..y2.
</p>
<p>
Each radial is defined by the center of the rectangle an point, which must 
not necessarily reside on the ellipse. The bounding arc goes 
counter-clockwise from the Start to the End radial. The pie is outlined with 
the current pen and filled with the current brush.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.Pie.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.Pie.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.Pie.x1">
<short>The bounding rectangle.</short>
</element>
<element name="TWidgetSet.Pie.y1">
<short/>
</element>
<element name="TWidgetSet.Pie.x2">
<short/>
</element>
<element name="TWidgetSet.Pie.y2">
<short/>
</element>
<element name="TWidgetSet.Pie.sx">
<short>The starting radial.</short>
</element>
<element name="TWidgetSet.Pie.sy">
<short/>
</element>
<element name="TWidgetSet.Pie.ex">
<short>The ending radial.</short>
</element>
<element name="TWidgetSet.Pie.ey">
<short/>
</element>

<element name="TWidgetSet.PolyBezier">
<short>Draws Bezier curves.</short>
<descr>
<p>
Use PolyBezier to draw cubic Bézier curves.
</p>
<p>
The first curve is drawn from the first point to the fourth point with the 
second and third points being the control points.
</p>
<p>
If the <var>Continuous</var> flag is <b>True</b> then each subsequent curve 
requires three more points, using the end-point of the previous Curve as its 
starting point.
</p>
<p>
If the <var>Continuous</var> flag is set to <b>False</b>, then each 
subsequent curve requires 4 additional points, which are used exactly as in 
the first curve.
</p>
<p>
If the <var>Filled</var> flag is set to <b>True</b> then a straight line is 
drawn from the last connected point to the starting point, and the entire 
curve is filled with the current brush.
</p>
<p>
Any additional points which do not add up to a full Bezier (4 for Continuous, 
3 otherwise) are ignored. There must be at least 4 points to be connected.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.PolyBezier.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.PolyBezier.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.PolyBezier.Points">
<short>The array of points.</short>
</element>
<element name="TWidgetSet.PolyBezier.NumPts">
<short>The number of points in Points.</short>
</element>
<element name="TWidgetSet.PolyBezier.Filled">
<short><b>True</b> draws a Polygon.</short>
</element>
<element name="TWidgetSet.PolyBezier.Continuous">
<short>
<b>True</b> uses the end-point as the starting point of the next segment.
</short>
</element>

<element name="TWidgetSet.Polygon">
<short>Draws a filled Polygon.</short>
<descr>
<p>
Use Polygon to draw a closed, many-sided shape on the canvas, outlined with 
the current Pen and filled with the current Brush.
</p>
<p>
The Points parameter is an array of the vertices of the polygon.
</p>
<p>
Winding determines how the polygon is filled. When Winding is <b>True</b>, 
Polygon fills the shape using the Winding fill algorithm. When Winding is 
<b>False</b>, Polygon uses the even-odd (alternative) fill algorithm.
</p>
<p>
The first point is always connected to the last point.
</p>
<p>
To draw an unfilled polygon use the Polyline method, specifying the first 
point a second time at the end.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.Polygon.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.Polygon.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.Polygon.Points">
<short>The array of vertices.</short>
</element>
<element name="TWidgetSet.Polygon.NumPts">
<short>The number of vertices.</short>
</element>
<element name="TWidgetSet.Polygon.Winding">
<short>Selects the fill algorithm.</short>
</element>

<element name="TWidgetSet.Polyline">
<short>Draws a sequence of lines.</short>
<descr>
<p>
Use Polyline to connect a set of points on the canvas.
</p>
<p>
The Points parameter is an array of points to be connected. If you specify 
only two points, Polyline draws a single line.
</p>
<p>
Calling the MoveTo function with the value of the first point, and then 
repeatedly calling LineTo with all subsequent points will draw the same image 
on the canvas. Unlike LineTo, Polyline does not change the value of PenPos.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.Polyline.Result">
<short/>
</element>
<element name="TWidgetSet.Polyline.DC">
<short/>
</element>
<element name="TWidgetSet.Polyline.Points">
<short/>
</element>
<element name="TWidgetSet.Polyline.NumPts">
<short/>
</element>

<element name="TWidgetSet.PostMessage">
<short>
Sends a message to a window, without waiting for the message result.
</short>
<descr>
<remark>
This section was copied from LCLIntf, and may not apply to all platforms.
</remark>
<p>
This method is a thread-safe solution to send messages to windows. Those 
messages will be handled in the message loop of the application and therefore 
can be sent from any thread. They are not immediate, but they will awake the 
main thread if it is waiting for messages.
</p>
<p>
These messages can be handled by procedures with the keyword message in the 
class of a form for example. One would then use the handle of this form as 
the Handle parameter of this routine.
</p>
<p>
Custom messages should always have an identification number (represented by 
the parameter Msg) larger then the constant LM_USER.
</p>
<p>
The two parameters WParam and LParam will be passed along to the window 
together with the Msg identification number.
</p>
<p>
The difference between SendMessage and PostMessage is the way that they 
return control to the calling thread. With SendMessage control is not 
returned until the window that the message was sent to has completed 
processing the sent message, however with PostMessage control is returned 
immediately.
</p>
</descr>
<seealso>
<link id="TWidgetSet.SendMessage"/>
</seealso>
</element>
<element name="TWidgetSet.PostMessage.Result">
<short>Zero on failure.</short>
</element>
<element name="TWidgetSet.PostMessage.Handle">
<short>The target window handle.</short>
</element>
<element name="TWidgetSet.PostMessage.Msg">
<short>The message ID.</short>
</element>
<element name="TWidgetSet.PostMessage.WParam">
<short/>
</element>
<element name="TWidgetSet.PostMessage.LParam">
<short/>
</element>

<element name="TWidgetSet.PtInRegion">
<short>Tests whether a point lies in a region.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.PtInRegion.Result">
<short><b>True</b> when the point lies in the region.</short>
</element>
<element name="TWidgetSet.PtInRegion.RGN">
<short>The region.</short>
</element>
<element name="TWidgetSet.PtInRegion.X">
<short>The point coordinate.</short>
</element>
<element name="TWidgetSet.PtInRegion.Y">
<short>The point coordinate.</short>
</element>

<element name="TWidgetSet.RealizePalette">
<short>
Maps palette entries from the current logical palette to the system palette.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RealizePalette.Result">
<short>The number of mapped entries.</short>
</element>
<element name="TWidgetSet.RealizePalette.DC">
<short>The device context.</short>
</element>

<element name="TWidgetSet.Rectangle">
<short>Draws a filled rectangle.</short>
<p>
The rectangle is outlined with the current Pen, and filled with the current 
Brush. The bottom and right edges are <b>not</b> part of the rectangle.
</p>
<seealso/>
</element>
<element name="TWidgetSet.Rectangle.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.Rectangle.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.Rectangle.X1">
<short/>
</element>
<element name="TWidgetSet.Rectangle.Y1">
<short/>
</element>
<element name="TWidgetSet.Rectangle.X2">
<short/>
</element>
<element name="TWidgetSet.Rectangle.Y2">
<short/>
</element>

<element name="TWidgetSet.RectVisible">
<short>
Checks whether the clipping region contains (part of) a rectangle.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RectVisible.Result">
<short><b>True</b> when (part of) the rectangle is visible.</short>
</element>
<element name="TWidgetSet.RectVisible.dc">
<short>The device context.</short>
</element>
<element name="TWidgetSet.RectVisible.ARect">
<short>The rectangle.</short>
</element>

<element name="TWidgetSet.RedrawWindow">
<short>Redraws (part of) a window.</short>
<descr>
<p>
All invalidated parts of a window, which deserve an update, are collected in 
the update region. When this region is not empty, WM_ERASEBKGND, WM_PAINT and 
WM_NCPAINT messages are sent to the window, as soon as the application is 
(almost) idle. RedrawWindow can be used to force an immediate redraw instead.
</p>
<p>
WM_ERASEBKGND is optional, erases the background before painting. WM_NCPAINT 
paints the non-client areas (borders, caption...), without assistance by user 
code.
</p>
<p>
When neither lprcUpdate nor hrgnUpdate are specified, the whole client area 
of the window is affected. Otherwise the region takes precedence over the 
rectangle.
</p>
<p>
Flags specify how the window is invalidated or validated, and when repainting 
occurs. Flags other than RDW_ERASE may not be supported by all platforms.
</p>
<p>
To invalidate specify RDW_INVALIDATE, and optionally one of:
</p>
<dl>
<dt>RDW_ERASE</dt>
<dd>Forces a WM_ERASEBKGND message before painting.</dd>
<dt>RDW_FRAME</dt>
<dd>Also redraws the window frame, as covered by the update region.</dd>
<dt>RDW_INTERNALPAINT</dt>
<dd>Force WM_PAINT even if the update region is empty.</dd>
</dl>
<p>
Validation is not implemented for all platforms. To validate, specify 
RDW_VALIDATE and optionally one of the following:
</p>
<dl>
<dt>RDW_NOERASE</dt>
<dd>Suppress all pending WM_ERASEBKGND messages.</dd>
<dt>RDW_NOFRAME</dt>
<dd>Suppress all pending WM_NCPAINT messages.</dd>
<dt>RDW_NOINTERNALPAINT</dt>
<dd>Suppress all pending internal WM_PAINT messages.</dd>
</dl>
<p>
These flags specify <b>when</b> repainting will occur:
</p>
<dl>
<dt>RDW_ERASENOW</dt>
<dd>Send WM_ERASEBKGND messages before returning.</dd>
<dt>RDW_UPDATENOW</dt>
<dd>Send WM_PAINT messages before returning.</dd>
</dl>
<p>
The handling of child windows normally depends on the WS_CLIPCHILDREN window 
style flag. Clipped child windows are not normally affected by RedrawWindow. 
These flags override:
</p>
<dl>
<dt>RDW_ALLCHILDREN</dt>
<dd>Include all child windows.</dd>
<dt>RDW_NOCHILDREN</dt>
<dd>Exclude all child windows.</dd>
</dl>
</descr>
<seealso>
<link id="TWidgetSet.InvalidateRect"/>
<link id="TWidgetSet.InvalidateRgn"/>
</seealso>
</element>
<element name="TWidgetSet.RedrawWindow.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.RedrawWindow.Wnd">
<short>The window to redraw.</short>
</element>
<element name="TWidgetSet.RedrawWindow.lprcUpdate">
<short>The rectangle to redraw, ignored when a region is given.</short>
</element>
<element name="TWidgetSet.RedrawWindow.hrgnUpdate">
<short>The region to redraw, can be zero.</short>
</element>
<element name="TWidgetSet.RedrawWindow.flags">
<short>How the redraw works.</short>
</element>

<element name="TWidgetSet.ReleaseCapture">
<short>Restores normal mouse input processing, after
<link id="TWidgetSet.SetCapture">SetCapture</link>.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ReleaseCapture.Result">
<short><b>False</b> on failure.</short>
</element>

<element name="TWidgetSet.ReleaseDC">
<short>Releases an Device Context obtained by GetDC.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ReleaseDC.Result">
<short>Zero on failure.</short>
</element>
<element name="TWidgetSet.ReleaseDC.hWnd">
<short>The handle of the window, whose DC is released.</short>
</element>
<element name="TWidgetSet.ReleaseDC.DC">
<short>The device context to release.</short>
</element>

<element name="TWidgetSet.RemoveProp">
<short>Removes a named property from a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RemoveProp.Result">
<short>The handle of the removed data, zero on failure.</short>
</element>
<element name="TWidgetSet.RemoveProp.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.RemoveProp.Str">
<short>The name of the property to remove.</short>
</element>

<element name="TWidgetSet.RestoreDC">
<short>Restores an Device Context (DC) to an previously
<link id="TWidgetSet.SaveDC">saved</link>
state.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SaveDC"/>
</seealso>
</element>
<element name="TWidgetSet.RestoreDC.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.RestoreDC.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.RestoreDC.SavedDC">
<short>
The index returned by SaveDC, or -1 for the most recently saved state.
</short>
</element>

<element name="TWidgetSet.RoundRect">
<short>Draws a filled rectangle with rounded corners.</short>
<descr>
<p>
The rectangle is outlined with the current Pen, and filled with the current 
Brush.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.RoundRect.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.RoundRect.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.RoundRect.X1">
<short>The rectangle coordinates.</short>
</element>
<element name="TWidgetSet.RoundRect.Y1">
<short/>
</element>
<element name="TWidgetSet.RoundRect.X2">
<short/>
</element>
<element name="TWidgetSet.RoundRect.Y2">
<short/>
</element>
<element name="TWidgetSet.RoundRect.RX">
<short>The extent of the ellipse, used for the rounded corners.</short>
</element>
<element name="TWidgetSet.RoundRect.RY">
<short>The extent of the ellipse, used for the rounded corners.</short>
</element>

<element name="TWidgetSet.SaveDC">
<short>Saves the state of an Device Context in the context stack.</short>
<descr/>
<seealso>
<link id="TWidgetSet.RestoreDC"/>
</seealso>
</element>
<element name="TWidgetSet.SaveDC.Result">
<short>The index of the saved DC, zero on failure.</short>
</element>
<element name="TWidgetSet.SaveDC.DC">
<short>The device context to save.</short>
</element>

<element name="TWidgetSet.ScreenToClient">
<short>
Converts absolute Screen coordinates into Client relative coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ScreenToClient.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.ScreenToClient.Handle">
<short>The handle of the window with the client area.</short>
</element>
<element name="TWidgetSet.ScreenToClient.P">
<short>The point to convert.</short>
</element>

<element name="TWidgetSet.ScrollWindowEx">
<short>Scrolls the content of a window, by a number of pixels.</short>
<descr>
<p>
The following flags values are defined:
</p>
<dl>
<dt>SW_ERASE</dt>
<dd>
When used with SW_INVALIDATE, sends WM_ERASEBKGND messages for the 
invalidated parts of the window.
</dd>
<dt>SW_INVALIDATE</dt>
<dd>Invalidates the resulting hrgnUpdate region.</dd>
<dt>SW_SCROLLCHILDREN</dt>
<dd>
Also scrolls child windows within the scroll rect. Beware: also scrolls 
<b>parts</b> of the child windows!
</dd>
<dt>SW_SMOOTHSCROLL</dt>
<dd>set HIWORD of <var>flags</var> to the time for the scrolling 
operation.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.ScrollWindowEx.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.hWnd">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.dx">
<short>Horizontal distance (positive to scroll right).</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.dy">
<short>Vertical distance (positive to scroll down).</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.prcScroll">
<short>The part of the window, that is to be scrolled. Nil means the entire 
client area.
</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.prcClip">
<short>
Pixels falling outside this rectangle are lost. Nil means the entire client 
area.
</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.hrgnUpdate">
<short>
The invalidated parts of the window are added to this region (can be zero).
</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.prcUpdate">
<short>
Receives the boundary of the invalidated part of the window (can be Nil).
</short>
</element>
<element name="TWidgetSet.ScrollWindowEx.flags">
<short>Control flags.</short>
</element>

<element name="TWidgetSet.SelectClipRGN">
<short>Sets the ClipRegion of an DeviceContext.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SelectClipRGN.Result">
<short>The region kind.</short>
</element>
<element name="TWidgetSet.SelectClipRGN.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SelectClipRGN.RGN">
<short>The region to copy, zero for an empty region.</short>
</element>

<element name="TWidgetSet.SelectObject">
<short>Selects an object into an device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SelectObject.Result">
<short>
The previously selected object, for a region the new region type.
</short>
</element>
<element name="TWidgetSet.SelectObject.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SelectObject.GDIObj">
<short>The object to select.</short>
</element>

<element name="TWidgetSet.SelectPalette">
<short>Selects a logical palette into an device context.</short>
<descr>
<p>
A foreground palette becomes the palette for the device when the application 
is in the foreground. A background palette instead is mapped to the closest 
colors in the palette for the physical device.
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.SelectPalette.Result">
<short>The handle of the previously selected palette.</short>
</element>
<element name="TWidgetSet.SelectPalette.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SelectPalette.Palette">
<short>The palette to select.</short>
</element>
<element name="TWidgetSet.SelectPalette.ForceBackground">
<short><b>True</b> to select the background palette.</short>
</element>

<element name="TWidgetSet.SendMessage">
<short>Sends a message to a window.</short>
<descr>
<remark>
This section was copied from LCLIntf, and may not apply to all platforms.
</remark>
<p>
This method is a thread-safe solution to send messages to windows.
</p>
<p>
The messages will be handled in the message loop of the application and 
therefore can be sent from any thread. They are not immediate, but they will 
awake the main thread if it is waiting for messages.
</p>
<p>
Custom messages should always have an ID higher than the constant LM_USER.
</p>
<p>
The two parameters WParam and LParam will be passed to the message handler, 
together with the message ID.
</p>
<p>
The difference between SendMessage and PostMessage is the way that they 
return control to the calling thread. With SendMessage control is not 
returned until the window that the message was sent to has completed 
processing the sent message, however with PostMessage control is returned 
immediately.
</p>
</descr>
<seealso>
<link id="TWidgetSet.PostMessage"/>
</seealso>
</element>
<element name="TWidgetSet.SendMessage.Result">
<short>The result depends on the message type.</short>
</element>
<element name="TWidgetSet.SendMessage.HandleWnd">
<short>The handle of the target window.</short>
</element>
<element name="TWidgetSet.SendMessage.Msg">
<short>The message ID.</short>
</element>
<element name="TWidgetSet.SendMessage.WParam">
<short>Message parameter.</short>
</element>
<element name="TWidgetSet.SendMessage.LParam">
<short>Message parameter.</short>
</element>

<element name="TWidgetSet.SetActiveWindow">
<short>
Sets focus to the specified window, if the application is on top.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetActiveWindow.Result">
<short>The handle of the window that lost the focus, zero on failure.</short>
</element>
<element name="TWidgetSet.SetActiveWindow.Handle">
<short>The window handle to activate.</short>
</element>

<element name="TWidgetSet.SetBkColor">
<short>Sets the current background color of an device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetBkColor.Result">
<short>The old background color, CLR_INVALID on failure.</short>
</element>
<element name="TWidgetSet.SetBkColor.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SetBkColor.Color">
<short>The new background color.</short>
</element>

<element name="TWidgetSet.SetBkMode">
<short>
Sets the background mix mode (transparency) of an device context.
</short>
<descr>
<p>
The background mode specifies the handling of non-solid painting objects, 
like text, hatched brushes or dotted pens.
</p>
<ul>
<li>
OPAQUE mode fills the affected painting area with the background color before 
painting the foreground.
</li>
<li>
TRANSPARENT mode leaves the background unchanged.
</li>
</ul>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.SetBkMode.Result">
<short>The previous background mode, zero on failure.</short>
</element>
<element name="TWidgetSet.SetBkMode.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SetBkMode.bkMode">
<short>The new background mode.</short>
</element>

<element name="TWidgetSet.SetCapture">
<short>Sets the mouse capture to the specified window.</short>
<descr>The window will receive all mouse messages, until capture is released 
again.
</descr>
<seealso>
<link id="TWidgetSet.ReleaseCapture"/>
</seealso>
</element>
<element name="TWidgetSet.SetCapture.Result">
<short>The handle of the previous capture window, zero if none.</short>
</element>
<element name="TWidgetSet.SetCapture.AHandle">
<short>The handle of the capturing window.</short>
</element>

<element name="TWidgetSet.SetCaretPos">
<short>Moves the Caret to the specified coordinates.</short>
<descr/>
<seealso>
<link id="TWidgetSet.CreateCaret"/>
</seealso>
</element>
<element name="TWidgetSet.SetCaretPos.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetCaretPos.X">
<short>The new caret position.</short>
</element>
<element name="TWidgetSet.SetCaretPos.Y">
<short>The new caret position.</short>
</element>

<element name="TWidgetSet.SetCaretPosEx">
<short>Moves the Caret into a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetCaretPosEx.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetCaretPosEx.handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.SetCaretPosEx.X">
<short>The new caret position.</short>
</element>
<element name="TWidgetSet.SetCaretPosEx.Y">
<short>The new caret position.</short>
</element>

<element name="TWidgetSet.SetCursor">
<short>Changes the shape of the mouse cursor.</short>
<descr/>
<seealso>
<link id="TWidgetSet.CreateStandardCursor"/>
<link id="#lcl.controls.TCursor">TCursor</link>
</seealso>
</element>
<element name="TWidgetSet.SetCursor.Result">
<short>The handle of the previous cursor, zero if none.</short>
</element>
<element name="TWidgetSet.SetCursor.hCursor">
<short>The new cursor handle.</short>
</element>

<element name="TWidgetSet.SetCursorPos">
<short>Changes the position of the mouse cursor.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetCursorPos.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetCursorPos.X">
<short>The new screen coordinates.</short>
</element>
<element name="TWidgetSet.SetCursorPos.Y">
<short>The new screen coordinates.</short>
</element>

<element name="TWidgetSet.SetFocus">
<short>Sets the keyboard input focus to the specified window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetFocus.Result">
<short>The handle of the previously focused window, zero if none.</short>
</element>
<element name="TWidgetSet.SetFocus.hWnd">
<short>The handle of the window receiving the focus.</short>
</element>

<element name="TWidgetSet.SetForegroundWindow">
<short>
Moves a window in front of all other windows, and activates it.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetForegroundWindow.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetForegroundWindow.hWnd">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.SetMapMode">
<short>Sets the mapping mode of an device context.</short>
<descr>
<p>
The mapping mode specifies the correspondence between logical and physical 
units. Supported modes are:
</p>
<dl>
<dt>MM_ANISOTROPIC</dt>
<dd>Arbitrary mapping</dd>
<dt>MM_HIENGLISH</dt>
<dd>0.001 inch</dd>
<dt>MM_HIMETRIC</dt>
<dd>0.01 mm</dd>
<dt>MM_ISOTROPIC</dt>
<dd>Arbitrary mapping, same for X and Y axis</dd>
<dt>MM_LOENGLISH</dt>
<dd>0.01 inch</dd>
<dt>MM_LOMETRIC</dt>
<dd>0.1 mm</dd>
<dt>MM_TEXT</dt>
<dd>1 device pixel</dd>
<dt>MM_TWIPS</dt>
<dd>1/20th point (twip, 1/1440 inch)</dd>
</dl>
<p>
Positive X is right, except for (an)isotropic mappings. Positive Y is up, 
except for (an)isotropic and MM_TEXT mappings.
</p>
</descr>
<seealso>
<link id="TWidgetSet.GetMapMode"/>
</seealso>
</element>
<element name="TWidgetSet.SetMapMode.Result">
<short>The old mapping mode.</short>
</element>
<element name="TWidgetSet.SetMapMode.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SetMapMode.fnMapMode">
<short>The new mapping mode.</short>
</element>

<element name="TWidgetSet.SetMenu">
<short>Assigns a menu to a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetMenu.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetMenu.AWindowHandle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.SetMenu.AMenuHandle">
<short>The menu handle.</short>
</element>

<element name="TWidgetSet.SetParent">
<short>Changes the parent of a window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetParent.Result">
<short>
The handle of the previous parent window, zero if none or failure.
</short>
</element>
<element name="TWidgetSet.SetParent.hWndChild">
<short>The handle of the child window.</short>
</element>
<element name="TWidgetSet.SetParent.hWndParent">
<short>
The handle of the new parent window, zero for the desktop window.
</short>
</element>

<element name="TWidgetSet.SetProp">
<short>Adds a property to a window.</short>
<descr/>
<seealso>
<link id="TWidgetSet.GetProp"/>
</seealso>
</element>
<element name="TWidgetSet.SetProp.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetProp.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.SetProp.Str">
<short>The property name.</short>
</element>
<element name="TWidgetSet.SetProp.Data">
<short>Pointer to the property data.</short>
</element>

<element name="TWidgetSet.SetROP2">
<short>Sets the Foreground Mixing Mode in a device context.</short>
<descr>
<p>
The raster operation specifies how foreground painting (Brush, Pen) is 
combined with the current pixels in the DC. The operation combines bitwise 
the distinct red, green and blue values in pixel colors.
</p>
<p>
There are 16 raster operations using the possible combinations of two 
(boolean) values:
</p>
<dl>
<dt>R2_BLACK</dt>
<dd>All black (0).
</dd>
<dt>R2_COPYPEN</dt>
<dd>Pen color.
</dd>
<dt>R2_MASKNOTPEN</dt>
<dd>Dst and not Pen.
</dd>
<dt>R2_MASKPEN</dt>
<dd>Dst and Pen.
</dd>
<dt>R2_MASKPENNOT</dt>
<dd>(Not Dst) and Pen.
</dd>
<dt>R2_MERGENOTPEN</dt>
<dd>Dst or not Pen.
</dd>
<dt>R2_MERGEPEN</dt>
<dd>Dst or Pen.
</dd>
<dt>R2_MERGEPENNOT</dt>
<dd>(Not Dst) or Pen.
</dd>
<dt>R2_NOP</dt>
<dd>Dst (unchanged).
</dd>
<dt>R2_NOT</dt>
<dd>Not Dst.
</dd>
<dt>R2_NOTCOPYPEN</dt>
<dd>Not Pen.
</dd>
<dt>R2_NOTMASKPEN</dt>
<dd>Not (Dst and Pen).
</dd>
<dt>R2_NOTMERGEPEN</dt>
<dd>Not (Dst or Pen).
</dd>
<dt>R2_NOTXORPEN</dt>
<dd>Not (Dst xor Pen).
</dd>
<dt>R2_WHITE</dt>
<dd>All white.
</dd>
<dt>R2_XORPEN</dt>
<dd>Dst xor Pen.
</dd>
</dl>
</descr>
<seealso>
<link id="TWidgetSet.GetROP2"/>
<link id="#lcl.lcltype.R2_COPYPEN">R2_COPYPEN</link>
</seealso>
</element>
<element name="TWidgetSet.SetROP2.Result">
<short>The old mode, zero on failure.</short>
</element>
<element name="TWidgetSet.SetROP2.DC">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SetROP2.Mode">
<short>The new mode.</short>
</element>

<element name="TWidgetSet.SetScrollInfo">
<short>Sets (selected) parameters of a scroll bar.</short>
<descr/>
<seealso>
<link id="TWidgetSet.GetScrollInfo"/>
</seealso>
</element>
<element name="TWidgetSet.SetScrollInfo.Result">
<short>The (new) slider position.</short>
</element>
<element name="TWidgetSet.SetScrollInfo.Handle">
<short>
The handle of a ScrollBar, or of a window containing scrollbars.
</short>
</element>
<element name="TWidgetSet.SetScrollInfo.SBStyle">
<short>The ScrollBar kind.</short>
</element>
<element name="TWidgetSet.SetScrollInfo.ScrollInfo">
<short>Contains the new values.</short>
</element>
<element name="TWidgetSet.SetScrollInfo.Redraw">
<short><b>True</b> forces a repaint of the ScrollBar.</short>
</element>

<element name="TWidgetSet.SetStretchBltMode">
<short>Sets the StrechBlt mode for an device context.</short>
<descr>
<p>
The following modes are defined:
</p>
<ul>
<li>
BLACKONWHITE - preserves black pixels in a monochrome bitmap.
</li>
<li>
COLORONCOLOR
</li>
<li>
HALFTONE, STRETCH_HALFTONE
</li>
<li>
WHITEONBLACK - preserves white pixels in a monochrome bitmap.
</li>
</ul>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.SetStretchBltMode.Result">
<short>The previous mode, zero on failure.</short>
</element>
<element name="TWidgetSet.SetStretchBltMode.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.SetStretchBltMode.StretchMode">
<short>The new mode.</short>
</element>

<element name="TWidgetSet.SetSysColors">
<short>
Sets the colors for one or more display elements of window borders and 
desktop.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.GetSysColor">GetSysColor</link>
</seealso>
</element>
<element name="TWidgetSet.SetSysColors.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetSysColors.cElements">
<short>The number of colors to change, size of the arrays.</short>
</element>
<element name="TWidgetSet.SetSysColors.lpaElements">
<short>Array of element identifiers.</short>
</element>
<element name="TWidgetSet.SetSysColors.lpaRgbValues">
<short>Array of RGB colors.</short>
</element>

<element name="TWidgetSet.SetTextCharacterExtra">
<short>Sets extra inter-character spacing in text output.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetTextCharacterExtra.Result">
<short>The previous spacing, $80000000 on failure.</short>
</element>
<element name="TWidgetSet.SetTextCharacterExtra._hdc">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SetTextCharacterExtra.nCharExtra">
<short>The additional spacing, in logical units.</short>
</element>

<element name="TWidgetSet.SetTextColor">
<short>Sets the text color in a device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetTextColor.Result">
<short>The previous color, CLR_INVALID on failure.</short>
</element>
<element name="TWidgetSet.SetTextColor.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.SetTextColor.Color">
<short>The new text color.</short>
</element>

<element name="TWidgetSet.SetViewPortExtEx">
<short>Sets the extent of the viewport for a device context.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetViewPortOrgEx"/>
<link id="TWidgetSet.SetWindowExtEx"/>
</seealso>
</element>
<element name="TWidgetSet.SetViewPortExtEx.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetViewPortExtEx.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.SetViewPortExtEx.XExtent">
<short>The extent in device units.</short>
</element>
<element name="TWidgetSet.SetViewPortExtEx.YExtent">
<short>The extent in device units.</short>
</element>
<element name="TWidgetSet.SetViewPortExtEx.OldSize">
<short>Receives the previous extent, if not Nil.</short>
</element>

<element name="TWidgetSet.SetViewPortOrgEx">
<short>
Sets the device origin corresponding to the window origin (0,0) in a device 
context.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetViewPortExtEx"/>
<link id="TWidgetSet.SetWindowOrgEx"/>
</seealso>
</element>
<element name="TWidgetSet.SetViewPortOrgEx.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetViewPortOrgEx.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.SetViewPortOrgEx.NewX">
<short>The coordinates in device units.</short>
</element>
<element name="TWidgetSet.SetViewPortOrgEx.NewY">
<short>The coordinates in device units.</short>
</element>
<element name="TWidgetSet.SetViewPortOrgEx.OldPoint">
<short>Receives the previous origin, if not Nil.</short>
</element>

<element name="TWidgetSet.SetWindowExtEx">
<short>Sets the extent of the window for an device context.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetViewPortExtEx"/>
<link id="TWidgetSet.SetWindowOrgEx"/>
</seealso>
</element>
<element name="TWidgetSet.SetWindowExtEx.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetWindowExtEx.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.SetWindowExtEx.XExtent">
<short>The extent in logical units.</short>
</element>
<element name="TWidgetSet.SetWindowExtEx.YExtent">
<short>The extent in logical units.</short>
</element>
<element name="TWidgetSet.SetWindowExtEx.OldSize">
<short>Receives the previous extent, if not Nil.</short>
</element>

<element name="TWidgetSet.SetWindowLong">
<short>Sets an attribute of a window.</short>
<descr/>
<seealso>
<link id="TWidgetSet.GetWindowLong"/>
</seealso>
</element>
<element name="TWidgetSet.SetWindowLong.Result">
<short>The previous value, zero on failure.</short>
</element>
<element name="TWidgetSet.SetWindowLong.Handle">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.SetWindowLong.Idx">
<short>The attribute offset.</short>
</element>
<element name="TWidgetSet.SetWindowLong.NewLong">
<short>The new value.</short>
</element>

<element name="TWidgetSet.SetWindowOrgEx">
<short>Specifies which window point maps to the viewport origin (0,0).</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetWindowOrgEx.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetWindowOrgEx.dc">
<short>The device context.</short>
</element>
<element name="TWidgetSet.SetWindowOrgEx.NewX">
<short>The origin in logical units.</short>
</element>
<element name="TWidgetSet.SetWindowOrgEx.NewY">
<short>The origin in logical units.</short>
</element>
<element name="TWidgetSet.SetWindowOrgEx.OldPoint">
<short>Receives the previous origin, if not Nil.</short>
</element>

<element name="TWidgetSet.SetWindowPos">
<short>Changes the size, position, and Z order of a window.</short>
<descr>
<p>
The Z order can be changed to just behind another window, or:
</p>
<dl>
<dt>HWND_BOTTOM</dt>
<dd>Behind all other windows.</dd>
<dt>HWND_NOTOPMOST</dt>
<dd>Behind all topmost windows.</dd>
<dt>HWND_TOP</dt>
<dd>Above all other windows.</dd>
<dt>HWND_TOPMOST</dt>
<dd>Above all other non-topmost windows.</dd>
</dl>
<p>
The general placement can be a combination of:
</p>
<dl>
<dt>SWP_ASYNCWINDOWPOS</dt>
<dd>
Don't block the calling thread when the window is owned by a different thread.
</dd>
<dt>SWP_DEFERERASE</dt>
<dd>Suppress WM_SYNCPAINT message.</dd>
<dt>SWP_DRAWFRAME</dt>
<dd>Draw the window frame.</dd>
<dt>SWP_FRAMECHANGED</dt>
<dd>Apply new frame style.</dd>
<dt>SWP_HIDEWINDOW</dt>
<dd>Hides the window.</dd>
<dt>SWP_NOACTIVATE</dt>
<dd>Don't activate the window.</dd>
<dt>SWP_NOCOPYBITS</dt>
<dd>
Invalidate the entire client area. If not set, the window content moves 
together with the window.
</dd>
<dt>SWP_NOMOVE</dt>
<dd>The position is not changed (ignores X, Y).</dd>
<dt>SWP_NOREPOSITION, SWP_NOOWNERZORDER</dt>
<dd>The Z order of the owner window is unchanged.</dd>
<dt>SWP_NOREDRAW</dt>
<dd>Nothing is redrawn automatically, not even uncovered parts of the 
window.</dd>
<dt>SWP_NOSENDCHANGING</dt>
<dd>No WM_WINDOWPOSCHANGING message.</dd>
<dt>SWP_NOSIZE</dt>
<dd>The size is unchanged (ignores cx, cy).</dd>
<dt>SWP_NOZORDER</dt>
<dd>The Z order is unchanged (ignores hWndInsertAfter)</dd>
<dt>SWP_SHOWWINDOW</dt>
<dd>Unhide the window.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.SetWindowPos.Result">
<short>Zero on failure.</short>
</element>
<element name="TWidgetSet.SetWindowPos.hWnd">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.SetWindowPos.hWndInsertAfter">
<short>The window handle or Z order position.</short>
</element>
<element name="TWidgetSet.SetWindowPos.X">
<short>The window origin.</short>
</element>
<element name="TWidgetSet.SetWindowPos.Y">
<short>The window origin.</short>
</element>
<element name="TWidgetSet.SetWindowPos.cx">
<short>The window extent.</short>
</element>
<element name="TWidgetSet.SetWindowPos.cy">
<short>The window extent.</short>
</element>
<element name="TWidgetSet.SetWindowPos.uFlags">
<short>General placement flags.</short>
</element>

<element name="TWidgetSet.SetWindowRgn">
<short>Restricts the visible part of the entire window.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetWindowRgn.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SetWindowRgn.hWnd">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.SetWindowRgn.hRgn">
<short>The window region handle.</short>
</element>
<element name="TWidgetSet.SetWindowRgn.bRedraw">
<short><b>True</b> forces a repaint of the window.</short>
</element>

<element name="TWidgetSet.ShowCaret">
<short>Shows the Caret (text cursor).</short>
<descr>
<p>
<var>ShowCaret</var> is a <var>Boolean</var> function used to display the 
caret or text cursor for the window handle specified in <var>hWnd</var>. The 
return value is <b>True</b> if the caret was successfully displayed in the 
method.
</p>
<p>
ShowCaret is a virtual method, and should be overridden in a descendent class 
to use the platform-specific mechanism(s) for the widgetset. The return value 
is always <b>False</b> in <var>TWidgetSet</var>.
</p>
<p>
Use <var>HideCaret</var> to remove the caret from the screen.
</p>
<p>
Use <var>CreateCaret</var> to create a new caret shape width the required 
size.
</p>
</descr>
<seealso>
<link id="TWidgetSet.HideCaret"/>
</seealso>
</element>
<element name="TWidgetSet.ShowCaret.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.ShowCaret.hWnd">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.ShowScrollBar">
<short>Shows or hides a ScrollBar.</short>
<descr/>
<seealso>
<link id="TWidgetSet.EnableScrollBar"/>
</seealso>
</element>
<element name="TWidgetSet.ShowScrollBar.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.ShowScrollBar.Handle">
<short>The window or ScrollBar handle.</short>
</element>
<element name="TWidgetSet.ShowScrollBar.wBar">
<short>The scrollbar type (SB_CTL, SB_HORZ...).</short>
</element>
<element name="TWidgetSet.ShowScrollBar.bShow">
<short><b>True</b> shows, <b>False</b> hides the ScrollBar.</short>
</element>

<element name="TWidgetSet.ShowWindow">
<short>Shows a window in an specific state.</short>
<descr>
<p>
These are the available options in <var>nCmdShow</var>:
</p>
<dl>
<dt>SW_FORCEMINIMIZE</dt>
<dd>Forces the window into its minimized state.</dd>
<dt>SW_HIDE</dt>
<dd>Hides the window.</dd>
<dt>SW_MAXIMIZE</dt>
<dd>Maximizes the window.</dd>
<dt>SW_MINIMIZE</dt>
<dd>Minimizes the window.</dd>
<dt>SW_RESTORE</dt>
<dd>Activates and restores from minimized/maximized to normal state.</dd>
<dt>SW_SHOW</dt>
<dd>Activates and shows the window.</dd>
<dt>SW_SHOWMAXIMIZED</dt>
<dd>Activates and maximizes the window.</dd>
<dt>SW_SHOWMINIMIZED</dt>
<dd>Activates and minimizes the window.</dd>
<dt>SW_SHOWMINNOACTIVE</dt>
<dd>Minimizes the window.</dd>
<dt>SW_SHOWNA</dt>
<dd>Shows the window.</dd>
<dt>SW_SHOWNOACTIVATE</dt>
<dd>Shows the window as designed.</dd>
<dt>SW_SHOWNORMAL</dt>
<dd>Activates and shows the window as designed.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.ShowWindow.Result">
<short><b>True</b> when the window was already visible.</short>
</element>
<element name="TWidgetSet.ShowWindow.hWnd">
<short>The window handle.</short>
</element>
<element name="TWidgetSet.ShowWindow.nCmdShow">
<short/>
</element>

<element name="TWidgetSet.StretchBlt">
<short>
Copies a rectangular region to a device context, shrinking or stretching it 
as needed.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.StretchMaskBlt"/>
<link id="TWidgetSet.SetStretchBltMode"/>
<link id="TWidgetSet.BitBlt"/>
</seealso>
</element>
<element name="TWidgetSet.StretchBlt.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.StretchBlt.DestDC">
<short>The destination device context.</short>
</element>
<element name="TWidgetSet.StretchBlt.X">
<short>The destination origin.</short>
</element>
<element name="TWidgetSet.StretchBlt.Y">
<short>The destination origin.</short>
</element>
<element name="TWidgetSet.StretchBlt.Width">
<short>The destination extent.</short>
</element>
<element name="TWidgetSet.StretchBlt.Height">
<short>The destination extent.</short>
</element>
<element name="TWidgetSet.StretchBlt.SrcDC">
<short>The source device context.</short>
</element>
<element name="TWidgetSet.StretchBlt.XSrc">
<short>The source origin.</short>
</element>
<element name="TWidgetSet.StretchBlt.YSrc">
<short>The source origin.</short>
</element>
<element name="TWidgetSet.StretchBlt.SrcWidth">
<short>The source extent.</short>
</element>
<element name="TWidgetSet.StretchBlt.SrcHeight">
<short>The source extent.</short>
</element>
<element name="TWidgetSet.StretchBlt.Rop">
<short>The raster opcode (see BitBlt).</short>
</element>

<element name="TWidgetSet.StretchDIBits">
<short>
Copies a rectangular region from a DIB into an device context, shrinking or 
stretching it as required.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.StretchMaskBlt"/>
<link id="TWidgetSet.StretchBlt"/>
<link id="TWidgetSet.StretchMaskBlt"/>
</seealso>
</element>
<element name="TWidgetSet.StretchDIBits.Result">
<short/>
</element>
<element name="TWidgetSet.StretchDIBits.DC">
<short>The destination Device Context.</short>
</element>
<element name="TWidgetSet.StretchDIBits.DestX">
<short>The destination origin.</short>
</element>
<element name="TWidgetSet.StretchDIBits.DestY">
<short>The destination origin.</short>
</element>
<element name="TWidgetSet.StretchDIBits.DestWidth">
<short>The destination extent.</short>
</element>
<element name="TWidgetSet.StretchDIBits.DestHeight">
<short>The destination extent.</short>
</element>
<element name="TWidgetSet.StretchDIBits.SrcX">
<short>The source origin.</short>
</element>
<element name="TWidgetSet.StretchDIBits.SrcY">
<short>The source origin.</short>
</element>
<element name="TWidgetSet.StretchDIBits.SrcWidth">
<short>The source extent.</short>
</element>
<element name="TWidgetSet.StretchDIBits.SrcHeight">
<short>The source extent.</short>
</element>
<element name="TWidgetSet.StretchDIBits.Bits">
<short>The device independent bitmap bits.</short>
</element>
<element name="TWidgetSet.StretchDIBits.BitsInfo">
<short>The bitmap info structure.</short>
</element>
<element name="TWidgetSet.StretchDIBits.Usage">
<short>The color mode.</short>
</element>
<element name="TWidgetSet.StretchDIBits.Rop">
<short>The raster operation.</short>
</element>

<element name="TWidgetSet.SystemParametersInfo">
<short>Retrieves or sets one of the system-wide parameters.</short>
<descr>
<p>
Most of the parameters are Windows platform specific.
</p>
<ul>
<li>SPI_GETACCESSTIMEOUT</li>
<li>SPI_GETFILTERKEYS</li>
<li>SPI_GETFOCUSBORDERHEIGHT</li>
<li>SPI_GETFOCUSBORDERWIDTH</li>
<li>SPI_GETHIGHCONTRAST</li>
<li>SPI_GETMOUSECLICKLOCK</li>
<li>SPI_GETMOUSECLICKLOCKTIME</li>
<li>SPI_GETMOUSEKEYS</li>
<li>SPI_GETMOUSESONAR</li>
<li>SPI_GETMOUSEVANISH</li>
<li>SPI_GETSCREENREADER</li>
<li>SPI_GETSERIALKEYS</li>
<li>SPI_GETSHOWSOUNDS</li>
<li>SPI_GETSOUNDSENTRY</li>
<li>SPI_GETSTICKYKEYS</li>
<li>SPI_GETTOGGLEKEYS</li>
<li>SPI_SETACCESSTIMEOUT</li>
<li>SPI_SETFILTERKEYS</li>
<li>SPI_SETFOCUSBORDERHEIGHT</li>
<li>SPI_SETFOCUSBORDERWIDTH</li>
<li>SPI_SETHIGHCONTRAST</li>
<li>SPI_SETMOUSECLICKLOCK</li>
<li>SPI_SETMOUSECLICKLOCKTIME</li>
<li>SPI_SETMOUSEKEYS</li>
<li>SPI_SETMOUSESONAR</li>
<li>SPI_SETMOUSEVANISH</li>
<li>SPI_SETSCREENREADER</li>
<li>SPI_SETSERIALKEYS</li>
<li>SPI_SETSHOWSOUNDS</li>
<li>SPI_SETSOUNDSENTRY</li>
<li>SPI_SETSTICKYKEYS</li>
<li>SPI_SETTOGGLEKEYS</li>
<li>SPI_GETDESKWALLPAPER</li>
<li>SPI_GETDROPSHADOW</li>
<li>SPI_GETFLATMENU</li>
<li>SPI_GETFONTSMOOTHING</li>
<li>SPI_GETFONTSMOOTHINGCONTRAST</li>
<li>SPI_GETFONTSMOOTHINGTYPE</li>
<li>SPI_GETWORKAREA</li>
<li>SPI_SETCURSORS</li>
<li>SPI_SETDESKPATTERN</li>
<li>SPI_SETDESKWALLPAPER</li>
<li>SPI_SETDROPSHADOW</li>
<li>SPI_SETFLATMENU</li>
<li>SPI_SETFONTSMOOTHING</li>
<li>SPI_SETFONTSMOOTHINGCONTRAST</li>
<li>SPI_SETFONTSMOOTHINGTYPE</li>
<li>SPI_SETWORKAREA</li>
<li>SPI_GETICONMETRICS</li>
<li>SPI_GETICONTITLELOGFONT</li>
<li>SPI_GETICONTITLEWRAP</li>
<li>SPI_ICONHORIZONTALSPACING</li>
<li>SPI_ICONVERTICALSPACING</li>
<li>SPI_SETICONMETRICS</li>
<li>SPI_SETICONS</li>
<li>SPI_SETICONTITLELOGFONT</li>
<li>SPI_SETICONTITLEWRAP</li>
<li>SPI_GETBEEP</li>
<li>SPI_GETBLOCKSENDINPUTRESETS</li>
<li>SPI_GETDEFAULTINPUTLANG</li>
<li>SPI_GETKEYBOARDCUES</li>
<li>SPI_GETKEYBOARDDELAY</li>
<li>SPI_GETKEYBOARDPREF</li>
<li>SPI_GETKEYBOARDSPEED</li>
<li>SPI_GETMOUSE</li>
<li>SPI_GETMOUSEHOVERHEIGHT</li>
<li>SPI_GETMOUSEHOVERTIME</li>
<li>SPI_GETMOUSEHOVERWIDTH</li>
<li>SPI_GETMOUSESPEED</li>
<li>SPI_GETMOUSETRAILS</li>
<li>SPI_GETSNAPTODEFBUTTON</li>
<li>SPI_GETWHEELSCROLLLINES</li>
<li>SPI_SETBEEP</li>
<li>SPI_SETBLOCKSENDINPUTRESETS</li>
<li>SPI_SETDEFAULTINPUTLANG</li>
<li>SPI_SETDOUBLECLICKTIME</li>
<li>SPI_SETDOUBLECLKHEIGHT</li>
<li>SPI_SETDOUBLECLKWIDTH</li>
<li>SPI_SETKEYBOARDCUES</li>
<li>SPI_SETKEYBOARDDELAY</li>
<li>SPI_SETKEYBOARDPREF</li>
<li>SPI_SETKEYBOARDSPEED</li>
<li>SPI_SETLANGTOGGLE</li>
<li>SPI_SETMOUSE</li>
<li>SPI_SETMOUSEBUTTONSWAP</li>
<li>SPI_SETMOUSEHOVERHEIGHT</li>
<li>SPI_SETMOUSEHOVERTIME</li>
<li>SPI_SETMOUSEHOVERWIDTH</li>
<li>SPI_SETMOUSESPEED</li>
<li>SPI_SETMOUSETRAILS</li>
<li>SPI_SETSNAPTODEFBUTTON</li>
<li>SPI_SETWHEELSCROLLLINES</li>
<li>SPI_GETMENUDROPALIGNMENT</li>
<li>SPI_GETMENUFADE</li>
<li>SPI_GETMENUSHOWDELAY</li>
<li>SPI_SETMENUDROPALIGNMENT</li>
<li>SPI_SETMENUFADE</li>
<li>SPI_SETMENUSHOWDELAY</li>
<li>SPI_GETLOWPOWERACTIVE</li>
<li>SPI_GETLOWPOWERTIMEOUT</li>
<li>SPI_GETPOWEROFFACTIVE</li>
<li>SPI_GETPOWEROFFTIMEOUT</li>
<li>SPI_SETLOWPOWERACTIVE</li>
<li>SPI_SETLOWPOWERTIMEOUT</li>
<li>SPI_SETPOWEROFFACTIVE</li>
<li>SPI_SETPOWEROFFTIMEOUT</li>
<li>SPI_GETSCREENSAVEACTIVE</li>
<li>SPI_GETSCREENSAVERRUNNING</li>
<li>SPI_GETSCREENSAVETIMEOUT</li>
<li>SPI_SETSCREENSAVEACTIVE</li>
<li>SPI_SETSCREENSAVERRUNNING</li>
<li>SPI_SETSCREENSAVETIMEOUT</li>
<li>SPI_GETCOMBOBOXANIMATION</li>
<li>SPI_GETCURSORSHADOW</li>
<li>SPI_GETGRADIENTCAPTIONS</li>
<li>SPI_GETHOTTRACKING</li>
<li>SPI_GETLISTBOXSMOOTHSCROLLING</li>
<li>SPI_GETMENUANIMATION</li>
<li>SPI_GETMENUUNDERLINES</li>
<li>SPI_GETSELECTIONFADE</li>
<li>SPI_GETTOOLTIPANIMATION</li>
<li>SPI_GETTOOLTIPFADE</li>
<li>SPI_GETUIEFFECTS</li>
<li>SPI_SETCOMBOBOXANIMATION</li>
<li>SPI_SETCURSORSHADOW</li>
<li>SPI_SETGRADIENTCAPTIONS</li>
<li>SPI_SETHOTTRACKING</li>
<li>SPI_SETLISTBOXSMOOTHSCROLLING</li>
<li>SPI_SETMENUANIMATION</li>
<li>SPI_SETMENUUNDERLINES</li>
<li>SPI_SETSELECTIONFADE</li>
<li>SPI_SETTOOLTIPANIMATION</li>
<li>SPI_SETTOOLTIPFADE</li>
<li>SPI_SETUIEFFECTS</li>
<li>SPI_GETACTIVEWINDOWTRACKING</li>
<li>SPI_GETACTIVEWNDTRKZORDER</li>
<li>SPI_GETACTIVEWNDTRKTIMEOUT</li>
<li>SPI_GETANIMATION</li>
<li>SPI_GETBORDER</li>
<li>SPI_GETCARETWIDTH</li>
<li>SPI_GETDRAGFULLWINDOWS</li>
<li>SPI_GETFOREGROUNDFLASHCOUNT</li>
<li>SPI_GETFOREGROUNDLOCKTIMEOUT</li>
<li>SPI_GETMINIMIZEDMETRICS</li>
<li>SPI_GETNONCLIENTMETRICS</li>
<li>SPI_GETSHOWIMEUI</li>
<li>SPI_SETACTIVEWINDOWTRACKING</li>
<li>SPI_SETACTIVEWNDTRKZORDER</li>
<li>SPI_SETACTIVEWNDTRKTIMEOUT</li>
<li>SPI_SETANIMATION</li>
<li>SPI_SETBORDER</li>
<li>SPI_SETCARETWIDTH</li>
<li>SPI_SETDRAGFULLWINDOWS</li>
<li>SPI_SETDRAGWIDTH</li>
<li>SPI_SETDRAGWIDTH</li>
<li>SPI_SETFOREGROUNDFLASHCOUNT</li>
<li>SPI_SETFOREGROUNDLOCKTIMEOUT</li>
<li>SPI_SETMINIMIZEDMETRICS</li>
<li>SPI_SETNONCLIENTMETRICS</li>
<li>SPI_SETSHOWIMEUI</li>
<li>SPI_GETWINDOWSEXTENSION</li>
<li>SPI_SETPENWINDOWS</li>
</ul>
<p>
Additional actions (zero for none):
</p>
<ul>
<li>SPIF_UPDATEINIFILE</li>
<li>SPIF_SENDCHANGE</li>
<li>SPIF_SENDWINDOWINICHANGE</li>
</ul>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.SystemParametersInfo.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.SystemParametersInfo.uiAction">
<short>The parameter and action.</short>
</element>
<element name="TWidgetSet.SystemParametersInfo.uiParam">
<short>Depends on uiAction.</short>
</element>
<element name="TWidgetSet.SystemParametersInfo.pvParam">
<short>Depends on uiAction.</short>
</element>
<element name="TWidgetSet.SystemParametersInfo.fWinIni">
<short>Additional actions.</short>
</element>

<element name="TWidgetSet.TextOut">
<short>Draws an string without formatting (single line).</short>
<descr/>
<seealso>
<link id="TWidgetSet.ExtTextOut"/>
</seealso>
</element>
<element name="TWidgetSet.TextOut.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.TextOut.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.TextOut.X">
<short>The text origin in logical coordinates.</short>
</element>
<element name="TWidgetSet.TextOut.Y">
<short>The text origin in logical coordinates.</short>
</element>
<element name="TWidgetSet.TextOut.Str">
<short>The text.</short>
</element>
<element name="TWidgetSet.TextOut.Count">
<short>The number of (Wide)Chars in the string.</short>
</element>

<element name="TWidgetSet.UpdateWindow">
<short>Forces an immediate repaint of a window, if required.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.UpdateWindow.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.UpdateWindow.Handle">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.WindowFromPoint">
<short>Finds the window containing the specified point.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.WindowFromPoint.Result">
<short>The window handle, zero on failure.</short>
</element>
<element name="TWidgetSet.WindowFromPoint.Point">
<short>The screen coordinates.</short>
</element>

<!-- lclintfh includes -->
<element name="TWidgetSet.AddEventHandler">
<short>Adds an event handler routine for the specified handle.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.AddEventHandler.Result">
<short>
Pointer to the event handler structure created in the widgetset class.
</short>
</element>
<element name="TWidgetSet.AddEventHandler.AHandle">
<short/>
</element>
<element name="TWidgetSet.AddEventHandler.AFlags">
<short/>
</element>
<element name="TWidgetSet.AddEventHandler.AEventHandler">
<short/>
</element>
<element name="TWidgetSet.AddEventHandler.AData">
<short/>
</element>

<element name="TWidgetSet.AddProcessEventHandler">
<short>Adds a process handler routine for the specified handle.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.AddProcessEventHandler.Result">
<short/>
</element>
<element name="TWidgetSet.AddProcessEventHandler.AHandle">
<short/>
</element>
<element name="TWidgetSet.AddProcessEventHandler.AEventHandler">
<short/>
</element>
<element name="TWidgetSet.AddProcessEventHandler.AData">
<short/>
</element>

<element name="TWidgetSet.AddPipeEventHandler">
<short>Adds a pipe handler routine for the specified handle.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.AddPipeEventHandler.Result">
<short/>
</element>
<element name="TWidgetSet.AddPipeEventHandler.AHandle">
<short/>
</element>
<element name="TWidgetSet.AddPipeEventHandler.AEventHandler">
<short/>
</element>
<element name="TWidgetSet.AddPipeEventHandler.AData">
<short/>
</element>

<element name="TWidgetSet.AllocateHWnd">
<short>
Allocates an invisible window that can be used to receive messages.
</short>
<descr/>
<seealso>
<link id="TWidgetSet.DeallocateHWnd"/>
</seealso>
</element>
<element name="TWidgetSet.AllocateHWnd.Result">
<short>The window handle, zero on failure.</short>
</element>
<element name="TWidgetSet.AllocateHWnd.Method">
<short>The callback method for the window. Can be Nil.</short>
</element>

<element name="TWidgetSet.AskUser">
<short>
Displays a dialog box with the specified values, and returns the modal result.
</short>
<descr>
<p>
AskUser uses the native facilities provided by the platform or operating 
system to display a dialog, and captures the modal result value. This method 
is overridden in descendent class to implement the platform-specific dialog.
</p>
<p>
The implementation in <var>TWidgetSet</var> is used as a fallback when no 
other mechanism is available. It uses the routine assigned to 
<var>QuestionDialogFunction</var> to execute the dialog and capture the modal 
result value. No default actions are peformed when QuestionDialogFunction has 
not been assigned (contains <b>Nil</b>).
</p>
</descr>
<seealso/>
</element>
<element name="TWidgetSet.AskUser.Result">
<short>Modal result value for the dialog as a LongInt type.</short>
</element>
<element name="TWidgetSet.AskUser.DialogCaption">
<short>Caption for the dialog.</short>
</element>
<element name="TWidgetSet.AskUser.DialogMessage">
<short>Message text for the dialog.</short>
</element>
<element name="TWidgetSet.AskUser.DialogType">
<short>Dialog type used to get an icon and flags used the dialog.</short>
</element>
<element name="TWidgetSet.AskUser.Buttons">
<short>Collection with buttons for the dialog.</short>
</element>
<element name="TWidgetSet.AskUser.HelpCtx">
<short>Help context used when F1 is pressed in the dialog.</short>
</element>

<element name="TWidgetSet.CallDefaultWndHandler">
<short>
Calls the default window handler to process a message from a control.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CallDefaultWndHandler.Sender">
<short>The control posting the message.</short>
</element>
<element name="TWidgetSet.CallDefaultWndHandler.Message">
<short>Message structure with the command and parameters.</short>
</element>

<element name="TWidgetSet.ClipboardFormatToMimeType">
<short>Gets the MIME type for the specified clipboard format.</short>
<descr/>
<seealso>
<link id="#lcl.lcltype.TClipboardFormat">TClipboardFormat</link>
</seealso>
</element>
<element name="TWidgetSet.ClipboardFormatToMimeType.Result">
<short>MIME type for the clipboard format identifier.</short>
</element>
<element name="TWidgetSet.ClipboardFormatToMimeType.FormatID">
<short>Identifier for the registered clipboard format.</short>
</element>

<element name="TWidgetSet.ClipboardGetData">
<short>
Gets clipboard data for a given format and saves it to the specified stream.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ClipboardGetData.Result">
<short>
<b>True</b> if clipboard data was successfully retrieved and stored in the 
method.
</short>
</element>
<element name="TWidgetSet.ClipboardGetData.ClipboardType">
<short>The clipboard operation type.</short>
</element>
<element name="TWidgetSet.ClipboardGetData.FormatID">
<short>Identifier for the registered clipboard format.</short>
</element>
<element name="TWidgetSet.ClipboardGetData.Stream">
<short>Stream where the clipboard data is appended.</short>
</element>

<element name="TWidgetSet.ClipboardGetFormats">
<short>Gets a list of available registered clipboard formats.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ClipboardGetFormats.Result">
<short><b>True</b> on success.</short>
</element>
<element name="TWidgetSet.ClipboardGetFormats.ClipboardType">
<short>The clipboard operation type.</short>
</element>
<element name="TWidgetSet.ClipboardGetFormats.Count">
<short>Number of clipboard formats returned in the list.</short>
</element>
<element name="TWidgetSet.ClipboardGetFormats.List">
<short>Pointer to the list of available registered clipboard formats.</short>
</element>

<element name="TWidgetSet.ClipboardGetOwnerShip">
<short>
Sets the requested formats and requests ownership of the clipboard.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ClipboardGetOwnerShip.Result">
<short><b>True</b> on success.</short>
</element>
<element name="TWidgetSet.ClipboardGetOwnerShip.ClipboardType">
<short>Type of clipboard type for the request.</short>
</element>
<element name="TWidgetSet.ClipboardGetOwnerShip.OnRequestProc">
<short>
Event signalled to get data for the clipboard, or Nil when ownership is lost.
</short>
</element>
<element name="TWidgetSet.ClipboardGetOwnerShip.FormatCount">
<short>Number of clipboard formats in the list.</short>
</element>
<element name="TWidgetSet.ClipboardGetOwnerShip.Formats">
<short>Pointer to the list of registered clipboard formats requested.</short>
</element>

<element name="TWidgetSet.ClipboardRegisterFormat">
<short>Registers a clipboard format for the specified MIME type.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ClipboardRegisterFormat.Result">
<short>Pointer to the unsigned Integer value for the clipboard format.</short>
</element>
<element name="TWidgetSet.ClipboardRegisterFormat.AMimeType">
<short>MIME type for the clipboard data.</short>
</element>

<element name="TWidgetSet.ClipboardFormatNeedsNullByte">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ClipboardFormatNeedsNullByte.Result">
<short/>
</element>
<element name="TWidgetSet.ClipboardFormatNeedsNullByte.AFormat">
<short/>
</element>

<element name="TWidgetSet.CreateEmptyRegion">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateEmptyRegion.Result">
<short/>
</element>

<element name="TWidgetSet.CreatePixmapIndirect">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreatePixmapIndirect.Result">
<short/>
</element>
<element name="TWidgetSet.CreatePixmapIndirect.Data">
<short/>
</element>
<element name="TWidgetSet.CreatePixmapIndirect.TransColor">
<short/>
</element>

<element name="TWidgetSet.CreateRegionCopy">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateRegionCopy.Result">
<short/>
</element>
<element name="TWidgetSet.CreateRegionCopy.SrcRGN">
<short/>
</element>

<element name="TWidgetSet.CreateRubberBand">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.CreateRubberBand.Result">
<short/>
</element>
<element name="TWidgetSet.CreateRubberBand.ARect">
<short/>
</element>
<element name="TWidgetSet.CreateRubberBand.ABrush">
<short/>
</element>

<element name="TWidgetSet.CreateStandardCursor">
<short>Creates one of the standard cursors.</short>
<descr/>
<seealso>
<link id="TWidgetSet.SetCursor"/>
<link id="#lcl.controls.TCursor">TCursor</link>
</seealso>
</element>
<element name="TWidgetSet.CreateStandardCursor.Result">
<short>The cursor handle, zero on failure.</short>
</element>
<element name="TWidgetSet.CreateStandardCursor.ACursor">
<short>The cursor shape.</short>
</element>

<element name="TWidgetSet.DCClipRegionValid">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DCClipRegionValid.Result">
<short/>
</element>
<element name="TWidgetSet.DCClipRegionValid.DC">
<short/>
</element>

<element name="TWidgetSet.DeallocateHWnd">
<short>Deletes a window created with AllocateHWnd.</short>
<descr/>
<seealso>
<link id="TWidgetSet.AllocateHWnd"/>
</seealso>
</element>
<element name="TWidgetSet.DeallocateHWnd.Wnd">
<short>The window handle.</short>
</element>

<element name="TWidgetSet.DestroyRubberBand">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DestroyRubberBand.ARubberBand">
<short/>
</element>

<element name="TWidgetSet.DrawDefaultDockImage">
<short>Draws the DockRect during drag-dock operations.</short>
<descr/>
<errors>
The Windows implementation doesn't cooperate with the DragManager. See Mantis 
0018525.
</errors>
<seealso/>
</element>
<element name="TWidgetSet.DrawDefaultDockImage.AOldRect">
<short>The old DockRect.</short>
</element>
<element name="TWidgetSet.DrawDefaultDockImage.ANewRect">
<short>The new DockRect.</short>
</element>
<element name="TWidgetSet.DrawDefaultDockImage.AOperation">
<short/>
</element>

<element name="TWidgetSet.DrawGrid">
<short>
Draws a grid lines inside a rectangle with the specified spacing.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.DrawGrid.DC">
<short/>
</element>
<element name="TWidgetSet.DrawGrid.R">
<short/>
</element>
<element name="TWidgetSet.DrawGrid.DX">
<short/>
</element>
<element name="TWidgetSet.DrawGrid.DY">
<short/>
</element>

<element name="TWidgetSet.ExtUTF8Out">
<short>Draws an UTF-8 string without formatting (single line).</short>
<descr>
<p>
The inter-character spacing array (Dx) must have one element for every Char 
(byte) in the UTF-8 text. For multi-byte character codes the values of all Dx 
elements are summed up.
</p>
</descr>
<seealso>
<link id="TWidgetSet.ExtTextOut"/>
</seealso>
</element>
<element name="TWidgetSet.ExtUTF8Out.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.DC">
<short>The Device Context.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.X">
<short>The reference point, used to position the text.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.Y">
<short>The reference point, used to position the text.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.Options">
<short>Output options.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.Rect">
<short>The bounding rectangle.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.Str">
<short>The text.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.Count">
<short>The number of Chars in the string.</short>
</element>
<element name="TWidgetSet.ExtUTF8Out.Dx">
<short>
Pointer to an array of inter-character spacing values, can be Nil.
</short>
</element>

<element name="TWidgetSet.FontIsMonoSpace">
<short>
Determines if the typeface in the specified font handle is a mono-spaced font.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.FontIsMonoSpace.Result">
<short/>
</element>
<element name="TWidgetSet.FontIsMonoSpace.Font">
<short>Font handle examined in the method.</short>
</element>

<element name="TWidgetSet.Frame3d">
<short>
Draws a 3D frame for a rectangle on a device context using the specified 
style.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.Frame3d.Result">
<short/>
</element>
<element name="TWidgetSet.Frame3d.DC">
<short/>
</element>
<element name="TWidgetSet.Frame3d.ARect">
<short/>
</element>
<element name="TWidgetSet.Frame3d.FrameWidth">
<short/>
</element>
<element name="TWidgetSet.Frame3d.Style">
<short/>
</element>

<element name="TWidgetSet.GetAcceleratorString">
<short>
Gets a string representing the specified key and shift modifier.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetAcceleratorString.Result">
<short/>
</element>
<element name="TWidgetSet.GetAcceleratorString.AVKey">
<short/>
</element>
<element name="TWidgetSet.GetAcceleratorString.AShiftState">
<short/>
</element>

<element name="TWidgetSet.GetAvailableNativeCanvasTypes">
<short/>
<descr/>
<seealso>
<link id="#lcl.lcltype.TNativeCanvasType">TNativeCanvasType</link>
<link id="#lcl.lcltype.TNativeCanvasTypes">TNativeCanvasTypes</link>
</seealso>
</element>
<element name="TWidgetSet.GetAvailableNativeCanvasTypes.Result">
<short/>
</element>
<element name="TWidgetSet.GetAvailableNativeCanvasTypes.DC">
<short/>
</element>
<element name="TWidgetSet.GetAvailableNativeCanvasTypes.AAllowFallbackToParent">
<short/>
</element>

<element name="TWidgetSet.GetAvailableNativeHandleTypes">
<short/>
<descr/>
<seealso>
<link id="#lcl.lcltype.TNativeHandleType">TNativeHandleType</link>
<link id="#lcl.lcltype.TNativeHandleTypes">TNativeHandleTypes</link>
</seealso>
</element>
<element name="TWidgetSet.GetAvailableNativeHandleTypes.Result">
<short/>
</element>
<element name="TWidgetSet.GetAvailableNativeHandleTypes.Handle">
<short/>
</element>
<element name="TWidgetSet.GetAvailableNativeHandleTypes.AAllowFallbackToParent">
<short/>
</element>

<element name="TWidgetSet.GetCaretRespondToFocus">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetCaretRespondToFocus.Result">
<short/>
</element>
<element name="TWidgetSet.GetCaretRespondToFocus.handle">
<short/>
</element>
<element name="TWidgetSet.GetCaretRespondToFocus.ShowHideOnFocus">
<short/>
</element>

<element name="TWidgetSet.GetClientBounds">
<short>
Gets the coordinates for the client area in the specified window handle.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetClientBounds.Result">
<short/>
</element>
<element name="TWidgetSet.GetClientBounds.handle">
<short/>
</element>
<element name="TWidgetSet.GetClientBounds.ARect">
<short/>
</element>

<element name="TWidgetSet.GetCmdLineParamDescForInterface">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetCmdLineParamDescForInterface.Result">
<short/>
</element>

<element name="TWidgetSet.GetControlConstraints">
<short>
Updates the constraints object (e.g. TSizeConstraints) with interface 
specific bounds.
</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetControlConstraints.Result">
<short><b>False</b> on failure.</short>
</element>
<element name="TWidgetSet.GetControlConstraints.Constraints">
<short>Should be a TSizeConstraints.</short>
</element>

<element name="TWidgetSet.GetDCOriginRelativeToWindow">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetDCOriginRelativeToWindow.Result">
<short/>
</element>
<element name="TWidgetSet.GetDCOriginRelativeToWindow.PaintDC">
<short/>
</element>
<element name="TWidgetSet.GetDCOriginRelativeToWindow.WindowHandle">
<short/>
</element>
<element name="TWidgetSet.GetDCOriginRelativeToWindow.OriginDiff">
<short/>
</element>

<element name="TWidgetSet.GetDesignerDC">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetDesignerDC.Result">
<short/>
</element>
<element name="TWidgetSet.GetDesignerDC.WindowHandle">
<short/>
</element>

<element name="TWidgetSet.GetDeviceSize">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetDeviceSize.Result">
<short/>
</element>
<element name="TWidgetSet.GetDeviceSize.DC">
<short/>
</element>
<element name="TWidgetSet.GetDeviceSize.p">
<short/>
</element>

<element name="TWidgetSet.GetLCLOwnerObject">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetLCLOwnerObject.Result">
<short/>
</element>
<element name="TWidgetSet.GetLCLOwnerObject.Handle">
<short/>
</element>

<element name="TWidgetSet.GetNativeCanvas">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetNativeCanvas.Result">
<short/>
</element>
<element name="TWidgetSet.GetNativeCanvas.DC">
<short/>
</element>
<element name="TWidgetSet.GetNativeCanvas.AHandleType">
<short/>
</element>
<element name="TWidgetSet.GetNativeCanvas.AAllowFallbackToParent">
<short/>
</element>

<element name="TWidgetSet.GetNativeHandle">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetNativeHandle.Result">
<short/>
</element>
<element name="TWidgetSet.GetNativeHandle.Handle">
<short/>
</element>
<element name="TWidgetSet.GetNativeHandle.AHandleType">
<short/>
</element>
<element name="TWidgetSet.GetNativeHandle.AAllowFallbackToParent">
<short/>
<descr/>
<seealso/>
</element>

<element name="TWidgetSet.GetScrollBarSize">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetScrollBarSize.Result">
<short/>
</element>
<element name="TWidgetSet.GetScrollBarSize.Handle">
<short/>
</element>
<element name="TWidgetSet.GetScrollBarSize.SBStyle">
<short/>
</element>

<element name="TWidgetSet.GetScrollbarVisible">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetScrollbarVisible.Result">
<short/>
</element>
<element name="TWidgetSet.GetScrollbarVisible.Handle">
<short/>
</element>
<element name="TWidgetSet.GetScrollbarVisible.SBStyle">
<short/>
</element>

<element name="TWidgetSet.GetWindowRelativePosition">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.GetWindowRelativePosition.Result">
<short/>
</element>
<element name="TWidgetSet.GetWindowRelativePosition.Handle">
<short/>
</element>
<element name="TWidgetSet.GetWindowRelativePosition.Left">
<short/>
</element>
<element name="TWidgetSet.GetWindowRelativePosition.Top">
<short/>
</element>

<element name="TWidgetSet.InvalidateFrame">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.InvalidateFrame.Result">
<short/>
</element>
<element name="TWidgetSet.InvalidateFrame.aHandle">
<short/>
</element>
<element name="TWidgetSet.InvalidateFrame.ARect">
<short/>
</element>
<element name="TWidgetSet.InvalidateFrame.bErase">
<short/>
</element>
<element name="TWidgetSet.InvalidateFrame.BorderWidth">
<short/>
</element>

<element name="TWidgetSet.IsDesignerDC">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsDesignerDC.Result">
<short/>
</element>
<element name="TWidgetSet.IsDesignerDC.WindowHandle">
<short/>
</element>
<element name="TWidgetSet.IsDesignerDC.DC">
<short/>
</element>

<element name="TWidgetSet.IsMobilePlatform">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsMobilePlatform.Result">
<short/>
</element>

<element name="TWidgetSet.IsCDIntfControl">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.IsCDIntfControl.Result">
<short/>
</element>
<element name="TWidgetSet.IsCDIntfControl.AWinControl">
<short/>
</element>

<element name="TWidgetSet.MoveWindowOrgEx">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.MoveWindowOrgEx.Result">
<short/>
</element>
<element name="TWidgetSet.MoveWindowOrgEx.dc">
<short/>
</element>
<element name="TWidgetSet.MoveWindowOrgEx.dX">
<short/>
</element>
<element name="TWidgetSet.MoveWindowOrgEx.dY">
<short/>
</element>

<element name="TWidgetSet.PromptUser">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.PromptUser.Result">
<short/>
</element>
<element name="TWidgetSet.PromptUser.DialogCaption">
<short/>
</element>
<element name="TWidgetSet.PromptUser.DialogMessage">
<short/>
</element>
<element name="TWidgetSet.PromptUser.DialogType">
<short/>
</element>
<element name="TWidgetSet.PromptUser.Buttons">
<short/>
</element>
<element name="TWidgetSet.PromptUser.ButtonCount">
<short/>
</element>
<element name="TWidgetSet.PromptUser.DefaultIndex">
<short/>
</element>
<element name="TWidgetSet.PromptUser.EscapeResult">
<short/>
</element>

<element name="TWidgetSet.PromptUserAtXY">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.PromptUserAtXY.Result">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.DialogCaption">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.DialogMessage">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.DialogType">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.Buttons">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.ButtonCount">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.DefaultIndex">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.EscapeResult">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.X">
<short/>
</element>
<element name="TWidgetSet.PromptUserAtXY.Y">
<short/>
</element>

<element name="TWidgetSet.RadialArc">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RadialArc.Result">
<short/>
</element>
<element name="TWidgetSet.RadialArc.DC">
<short/>
</element>
<element name="TWidgetSet.RadialArc.left">
<short/>
</element>
<element name="TWidgetSet.RadialArc.top">
<short/>
</element>
<element name="TWidgetSet.RadialArc.right">
<short/>
</element>
<element name="TWidgetSet.RadialArc.bottom">
<short/>
</element>
<element name="TWidgetSet.RadialArc.sx">
<short/>
</element>
<element name="TWidgetSet.RadialArc.sy">
<short/>
</element>
<element name="TWidgetSet.RadialArc.ex">
<short/>
</element>
<element name="TWidgetSet.RadialArc.ey">
<short/>
</element>

<element name="TWidgetSet.RadialChord">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RadialChord.Result">
<short/>
</element>
<element name="TWidgetSet.RadialChord.DC">
<short/>
</element>
<element name="TWidgetSet.RadialChord.x1">
<short/>
</element>
<element name="TWidgetSet.RadialChord.y1">
<short/>
</element>
<element name="TWidgetSet.RadialChord.x2">
<short/>
</element>
<element name="TWidgetSet.RadialChord.y2">
<short/>
</element>
<element name="TWidgetSet.RadialChord.sx">
<short/>
</element>
<element name="TWidgetSet.RadialChord.sy">
<short/>
</element>
<element name="TWidgetSet.RadialChord.ex">
<short/>
</element>
<element name="TWidgetSet.RadialChord.ey">
<short/>
</element>

<element name="TWidgetSet.RadialPie">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RadialPie.Result">
<short/>
</element>
<element name="TWidgetSet.RadialPie.DC">
<short/>
</element>
<element name="TWidgetSet.RadialPie.x1">
<short/>
</element>
<element name="TWidgetSet.RadialPie.y1">
<short/>
</element>
<element name="TWidgetSet.RadialPie.x2">
<short/>
</element>
<element name="TWidgetSet.RadialPie.y2">
<short/>
</element>
<element name="TWidgetSet.RadialPie.Angle1">
<short/>
</element>
<element name="TWidgetSet.RadialPie.Angle2">
<short/>
</element>

<element name="TWidgetSet.RawImage_CreateBitmaps">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RawImage_CreateBitmaps.Result">
<short/>
</element>
<element name="TWidgetSet.RawImage_CreateBitmaps.ARawImage">
<short/>
</element>
<element name="TWidgetSet.RawImage_CreateBitmaps.ABitmap">
<short/>
</element>
<element name="TWidgetSet.RawImage_CreateBitmaps.AMask">
<short/>
</element>
<element name="TWidgetSet.RawImage_CreateBitmaps.ASkipMask">
<short/>
</element>

<element name="TWidgetSet.RawImage_DescriptionFromBitmap">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RawImage_DescriptionFromBitmap.Result">
<short/>
</element>
<element name="TWidgetSet.RawImage_DescriptionFromBitmap.ABitmap">
<short/>
</element>
<element name="TWidgetSet.RawImage_DescriptionFromBitmap.ADesc">
<short/>
</element>

<element name="TWidgetSet.RawImage_DescriptionFromDevice">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RawImage_DescriptionFromDevice.Result">
<short/>
</element>
<element name="TWidgetSet.RawImage_DescriptionFromDevice.ADC">
<short/>
</element>
<element name="TWidgetSet.RawImage_DescriptionFromDevice.ADesc">
<short/>
</element>

<element name="TWidgetSet.RawImage_FromBitmap">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RawImage_FromBitmap.Result">
<short/>
</element>
<element name="TWidgetSet.RawImage_FromBitmap.ARawImage">
<short/>
</element>
<element name="TWidgetSet.RawImage_FromBitmap.ABitmap">
<short/>
</element>
<element name="TWidgetSet.RawImage_FromBitmap.AMask">
<short/>
</element>
<element name="TWidgetSet.RawImage_FromBitmap.ARect">
<short/>
</element>

<element name="TWidgetSet.RawImage_FromDevice">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RawImage_FromDevice.Result">
<short/>
</element>
<element name="TWidgetSet.RawImage_FromDevice.ARawImage">
<short/>
</element>
<element name="TWidgetSet.RawImage_FromDevice.ADC">
<short/>
</element>
<element name="TWidgetSet.RawImage_FromDevice.ARect">
<short/>
</element>

<element name="TWidgetSet.RawImage_QueryDescription">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RawImage_QueryDescription.Result">
<short/>
</element>
<element name="TWidgetSet.RawImage_QueryDescription.AFlags">
<short/>
</element>
<element name="TWidgetSet.RawImage_QueryDescription.ADesc">
<short/>
</element>

<element name="TWidgetSet.RegroupMenuItem">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RegroupMenuItem.Result">
<short/>
</element>
<element name="TWidgetSet.RegroupMenuItem.hndMenu">
<short/>
</element>
<element name="TWidgetSet.RegroupMenuItem.GroupIndex">
<short/>
</element>

<element name="TWidgetSet.ReleaseDesignerDC">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ReleaseDesignerDC.Result">
<short/>
</element>
<element name="TWidgetSet.ReleaseDesignerDC.hWnd">
<short/>
</element>
<element name="TWidgetSet.ReleaseDesignerDC.DC">
<short/>
</element>

<element name="TWidgetSet.RemoveEventHandler">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RemoveEventHandler.AHandler">
<short/>
</element>
<element name="TWidgetSet.RemoveProcessEventHandler">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RemoveProcessEventHandler.AHandler">
<short/>
</element>

<element name="TWidgetSet.RemovePipeEventHandler">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RemovePipeEventHandler.AHandler">
<short/>
</element>

<element name="TWidgetSet.RequestInput">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.RequestInput.Result">
<short/>
</element>
<element name="TWidgetSet.RequestInput.InputCaption">
<short/>
</element>
<element name="TWidgetSet.RequestInput.InputPrompt">
<short/>
</element>
<element name="TWidgetSet.RequestInput.MaskInput">
<short/>
</element>
<element name="TWidgetSet.RequestInput.Value">
<short/>
</element>

<element name="TWidgetSet.SendCachedLCLMessages">
<short/>
<descr/>
<seealso/>
</element>

<element name="TWidgetSet.SetCaretRespondToFocus">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetCaretRespondToFocus.Result">
<short/>
</element>
<element name="TWidgetSet.SetCaretRespondToFocus.handle">
<short/>
</element>
<element name="TWidgetSet.SetCaretRespondToFocus.ShowHideOnFocus">
<short/>
</element>

<element name="TWidgetSet.SetComboMinDropDownSize">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetComboMinDropDownSize.Result">
<short/>
</element>
<element name="TWidgetSet.SetComboMinDropDownSize.Handle">
<short/>
</element>
<element name="TWidgetSet.SetComboMinDropDownSize.MinItemsWidth">
<short/>
</element>
<element name="TWidgetSet.SetComboMinDropDownSize.MinItemsHeight">
<short/>
</element>
<element name="TWidgetSet.SetComboMinDropDownSize.MinItemCount">
<short/>
</element>

<element name="TWidgetSet.SetEventHandlerFlags">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetEventHandlerFlags.AHandler">
<short/>
</element>
<element name="TWidgetSet.SetEventHandlerFlags.NewFlags">
<short/>
</element>

<element name="TWidgetSet.SetRubberBandRect">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.SetRubberBandRect.ARubberBand">
<short/>
</element>
<element name="TWidgetSet.SetRubberBandRect.ARect">
<short/>
</element>

<element name="TWidgetSet.ShowSelectItemDialog">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.ShowSelectItemDialog.Result">
<short/>
</element>
<element name="TWidgetSet.ShowSelectItemDialog.AItems">
<short/>
</element>
<element name="TWidgetSet.ShowSelectItemDialog.APos">
<short/>
</element>

<element name="TWidgetSet.StretchMaskBlt">
<short/>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.StretchMaskBlt.Result">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.DestDC">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.X">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.Y">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.Width">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.Height">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.SrcDC">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.XSrc">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.YSrc">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.SrcWidth">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.SrcHeight">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.Mask">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.XMask">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.YMask">
<short/>
</element>
<element name="TWidgetSet.StretchMaskBlt.Rop">
<short/>
</element>

<element name="TWidgetSet.TextUTF8Out">
<short>Writes UTF-8-encoded text to the specified device context.</short>
<descr/>
<seealso/>
</element>
<element name="TWidgetSet.TextUTF8Out.Result">
<short/>
</element>
<element name="TWidgetSet.TextUTF8Out.DC">
<short/>
</element>
<element name="TWidgetSet.TextUTF8Out.X">
<short/>
</element>
<element name="TWidgetSet.TextUTF8Out.Y">
<short/>
</element>
<element name="TWidgetSet.TextUTF8Out.Str">
<short/>
</element>
<element name="TWidgetSet.TextUTF8Out.Count">
<short/>
</element>

<element name="TWidgetSet.ThemeServices">
<short>Theme services class instance for the widgetset.</short>
<descr>
<p>
<var>ThemeServices</var> is a read-only property which provides access to the 
<var>TThemeServices</var> class instance for the platform. The value for the 
property is assigned in the <var>CreateThemeServices</var> method.
</p>
</descr>
<seealso>
<link id="TWidgetSet.CreateThemeServices"/>
<link id="#lcl.themes.TThemeServices">TThemeServices</link>
</seealso>
</element>

<element name="TWidgetSetClass">
<short>
Class reference used to create new instance of the TWidgetSet class.
</short>
<descr/>
<seealso>
<link id="TWidgetSet"/>
</seealso>
</element>

<element name="GetDefaultLCLWidgetType">
<short>
Gets the enumeration value representing the LCL platform for the current 
widgetset.
</short>
<descr>
<p>
The return value is the LCLPlatform property in the WidgetSet variable when 
assigned and not using the NoGui widgetset. Otherwise, the value from the 
BuildLCLWidgetType variable is used in the return value.
</p>
</descr>
<seealso>
<link id="#lcl.lclplatformdef.TLCLPlatform">TLCLPlatform</link>
<link id="#lcl.lclplatformdef.BuildLCLWidgetType">BuildLCLWidgetType</link>
</seealso>
</element>
<element name="GetDefaultLCLWidgetType.Result">
<short>TLCLPlatform enumeration value for the widgetset.</short>
</element>

<element name="GetLCLWidgetTypeName">
<short>
Gets the directory name for the LCL platform enumeration value used for the 
widgetset.
</short>
<descr/>
<seealso>
<link id="GetDefaultLCLWidgetType"/>
<link id="#lcl.lclplatformdef.TLCLPlatform">TLCLPlatform</link>
<link id="#lcl.lclplatformdef.LCLPlatformDirNames">LCLPlatformDirNames</link>
<link id="#lcl.lclplatformdef.LCLPlatformDisplayNames">LCLPlatformDisplayNames</link>
</seealso>
</element>
<element name="GetLCLWidgetTypeName.Result">
<short>Name for the LCL platform enumeration value.</short>
</element>

<element name="MemSizeLessThan">
<short>
Determines if the specified non-zero memory size is smaller than a given 
value.
</short>
<descr>
<p>
Used in the implementation of widgetset classes.
</p>
</descr>
<seealso/>
</element>
<element name="MemSizeLessThan.Result">
<short>
Returns <b>True</b> when AMemSize has been assigned and is smaller than 
AThen. Returns <b>False</b> when AMemSize is zero (0).
</short>
</element>
<element name="MemSizeLessThan.AMemSize">
<short>Memory size examined in the method.</short>
</element>
<element name="MemSizeLessThan.AThen">
<short>Value to which the memory size is compared.</short>
</element>

<element name="LCL_CAPABILITY_NO">
<short>Constant used in TWidgetSet.GetLCLCapability.</short>
<descr/>
<seealso/>
</element>

<element name="LCL_CAPABILITY_YES">
<short>Constant used in TWidgetSet.GetLCLCapability.</short>
<descr/>
<seealso/>
</element>

<element name="EInterfaceException">
<short>Base class for exceptions raised in the LCL interface.</short>
<descr/>
<seealso/>
</element>

<element name="EInterfaceError">
<short>Exception raised in the LCL interface.</short>
<descr/>
<seealso/>
</element>

<element name="EInterfaceCritical">
<short>Exception raised in the LCL interface.</short>
<descr/>
<seealso/>
</element>

<element name="EInterfaceWarning">
<short>Exception raised in the LCL interface.</short>
<descr/>
<seealso/>
</element>

<element name="TInputDialogFunction">
<short/>
<descr/>
<seealso/>
</element>
<element name="TInputDialogFunction.Result">
<short/>
</element>
<element name="TInputDialogFunction.InputCaption">
<short/>
</element>
<element name="TInputDialogFunction.InputPrompt">
<short/>
</element>
<element name="TInputDialogFunction.MaskInput">
<short/>
</element>
<element name="TInputDialogFunction.Value">
<short/>
</element>

<element name="TPromptDialogFunction">
<short/>
<descr/>
<seealso/>
</element>
<element name="TPromptDialogFunction.Result">
<short/>
</element>
<element name="TPromptDialogFunction.DialogCaption">
<short/>
</element>
<element name="TPromptDialogFunction.DialogMessage">
<short/>
</element>
<element name="TPromptDialogFunction.DialogType">
<short/>
</element>
<element name="TPromptDialogFunction.Buttons">
<short/>
</element>
<element name="TPromptDialogFunction.ButtonCount">
<short/>
</element>
<element name="TPromptDialogFunction.DefaultIndex">
<short/>
</element>
<element name="TPromptDialogFunction.EscapeResult">
<short/>
</element>
<element name="TPromptDialogFunction.UseDefaultPos">
<short/>
</element>
<element name="TPromptDialogFunction.X">
<short/>
</element>
<element name="TPromptDialogFunction.Y">
<short/>
</element>

<element name="TQuestionDialogFunction">
<short/>
<descr/>
<seealso/>
</element>
<element name="TQuestionDialogFunction.Result">
<short/>
</element>
<element name="TQuestionDialogFunction.aCaption">
<short/>
</element>
<element name="TQuestionDialogFunction.aMsg">
<short/>
</element>
<element name="TQuestionDialogFunction.DlgType">
<short/>
</element>
<element name="TQuestionDialogFunction.Buttons">
<short/>
</element>
<element name="TQuestionDialogFunction.HelpCtx">
<short/>
</element>

<element name="TLoadBitmapFunction">
<short/>
<descr/>
<seealso/>
</element>
<element name="TLoadBitmapFunction.Result">
<short/>
</element>
<element name="TLoadBitmapFunction.hInstance">
<short/>
</element>
<element name="TLoadBitmapFunction.lpBitmapName">
<short/>
</element>

<element name="TLoadCursorFunction">
<short/>
<descr/>
<seealso/>
</element>
<element name="TLoadCursorFunction.Result">
<short/>
</element>
<element name="TLoadCursorFunction.hInstance">
<short/>
</element>
<element name="TLoadCursorFunction.lpCursorName">
<short/>
</element>

<element name="TLoadIconFunction">
<short/>
<descr/>
<seealso/>
</element>
<element name="TLoadIconFunction.Result">
<short/>
</element>
<element name="TLoadIconFunction.hInstance">
<short/>
</element>
<element name="TLoadIconFunction.lpIconName">
<short/>
</element>

<element name="InputDialogFunction">
<short/>
<descr/>
<seealso/>
</element>

<element name="PromptDialogFunction">
<short/>
<descr/>
<seealso/>
</element>

<element name="QuestionDialogFunction">
<short/>
<descr/>
<seealso/>
</element>

<element name="LoadBitmapFunction">
<short/>
<descr/>
<seealso/>
</element>

<element name="LoadIconFunction">
<short/>
<descr/>
<seealso/>
</element>

<element name="WidgetSet">
<short>
Provides access to the widgetset class instance for the platform.
</short>
<descr>
<p>
<var>WidgetSet</var> is a unit global <var>TWidgetSet</var> variable with the 
singleton used to access the widgetset class instance for the platform. 
WidgetSet contains a TWidgetSet descendant which implements the properties, 
methods, and events for a specific platform.
</p>
</descr>
<seealso>
<link id="TWidgetSet"/>
</seealso>
</element>

</module>
<!-- InterfaceBase -->
</package>
</fpdoc-descriptions>
