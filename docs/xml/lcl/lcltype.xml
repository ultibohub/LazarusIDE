<?xml version="1.0" encoding="UTF-8"?>
<!--

Documentation for LCL (Lazarus Component Library) and LazUtils (Lazarus 
Utilities) are published under the Creative Commons Attribution-ShareAlike 4.0 
International public license.

https://creativecommons.org/licenses/by-sa/4.0/legalcode.txt
https://gitlab.com/freepascal.org/lazarus/lazarus/-/blob/main/docs/cc-by-sa-4-0.txt

Copyright (c) 1997-2024, by the Lazarus Development Team.

-->
<fpdoc-descriptions>
<package name="lcl">
<!--
====================================================================
LCLType
====================================================================
-->
<module name="LCLType">
<short>Provides compatibility with the Delphi Windows unit.</short>
<descr>
<p>
<file>lcltype.pp</file> was created specifically for compatibility with 
Delphi. It should only be used for constants and type definitions that are 
included in the Delphi Windows unit. This is done only for compatibility.
</p>
</descr>

<!-- unresolved external references -->
<element name="UTF8Bidi"/>
<element name="Windows"/>
<element name="System.UITypes"/>
<element name="Classes"/>
<element name="SysUtils"/>

<element name="TUTF8Char">
<short>A type that can hold an UTF-8 encoded character.</short>
</element>

<element name="UINT">
<short>A 32-bit unsigned integer.</short>
</element>

<element name="UINT_PTR">
<short>Unsigned integer type with same size as Pointer.</short>
</element>

<element name="TTranslateString">
<short>Alias for the String type.</short>
<descr>
<p>
<var>TTranslateString</var> is the type used to represent string values that 
can be translated using the localization facilities found in the LCL and the 
Lazarus IDE. Properties, constants, variables, and parameter values defined 
using this type can be localized using translation classes found in the 
<file>lcltranslator</file> unit.
</p>
</descr>
<seealso>
<link id="#lcl.lcltranslator.TUpdateTranslator">TUpdateTranslator</link>
<link id="#lcl.lcltranslator.TDefaultTranslator">TDefaultTranslator</link>
</seealso>
</element>

<element name="TCriticalSection">
<short>Alias for the PtrUInt type.</short>
<descr>
<p>
<var>TCriticalSection</var> is the type used to protect access to resources 
in a multi-threaded application. Please note that the type is different than 
the <var>TRTLCriticalSection</var> type and the class by the same name 
implemented in the <file>syncobjs</file> unit in the FPC RTL (Run-Time 
Library).
</p>
</descr>
</element>

<element link="#lcl.lcltype.TCriticalSection" name="PCriticalSection"/>

<element name="TDockImageOperation">
<short>Actions occurring while dragging an image.</short>
</element>
<element name="TDockImageOperation.disShow">
<short>Show the image.</short>
</element>
<element name="TDockImageOperation.disMove">
<short>Move the already visible image.</short>
</element>
<element name="TDockImageOperation.disHide">
<short>Hide the image.</short>
</element>

<element name="THandle">
<short>
Deprecated. Alias to the PtrUInt type.
</short>
<descr>
<p>
Defined for platforms other than Windows. Needed because THandle in the RTL 
SysUtils unit is defined as longint.
</p>
</descr>
<version>
THandle has been deprecated in LCL version 4.0 (July 2023). Use the TLCLHandle 
type instead.
</version>
</element>

<element name="HKEY">
<short>Handle to a registry key.</short>
</element>

<element name="HDC">
<short>The type for a Device Context Handle.</short>
</element>

<element name="HHOOK">
<short>Handle for a callback routine.</short>
</element>

<element name="HFONT">
<short>The type of a Font Handle.</short>
</element>

<element name="HGDIOBJ">
<short>The type of a general GraphicsDeviceInterface Object Handle.</short>
<descr>
GDI objects are e.g. fonts or brushes, used in GDI drawing operations.
</descr>
</element>

<element name="HPEN">
<short>The type of a line drawing Pen Handle.</short>
</element>

<element name="HRGN">
<short>The type of a display Region Handle.</short>
<descr>
<p>A region can be as simple as a rectangle, or can be composed of multiple 
shapes.
</p>
<p>Regions are almost used to restrict painting to certain areas of the 
screen (clipping).
</p>
</descr>
</element>

<element name="HINST">
<short>The type of a (process) Instance Handle.</short>
</element>

<element name="HICON">
<short>The type of an Icon Handle.</short>
</element>

<element name="HIMAGELIST">
<short>The type of an Image List Handle.</short>
<descr>
<p>
Image lists are frequently used with controls, whose display items (list 
entries...) can also show an image. Then every item refers to its image by an 
index into the shared image list, instead of holding a copy of the image.
</p>
</descr>
</element>

<element name="HCURSOR">
<short>The type for a mouse Cursor Handle.</short>
</element>

<element name="HGLOBAL">
<short>The type for a Global memory block Handle.</short>
<descr>
Global memory blocks are managed by the platform, used e.g. for data shared 
across multiple processes.
</descr>
</element>

<element name="HWND">
<short>The type of a Window Handle. </short>
<descr>
<p>
Windows are managed by the platform's window manager.
A window can be stand-alone (TForm) or embedded (TWinControl).
</p>
</descr>
</element>

<element name="HMENU">
<short>The type of a Menu Handle.</short>
</element>

<element name="HBITMAP">
<short>The type of a Bitmap Handle.</short>
</element>

<element name="HPALETTE">
<short>The type of a color Palette Handle.</short>
<descr>
A color palette is frequently used in compressed bitmaps,
which contain short (1..8 bit) palette indices instead of RGB colors,
for every pixel.
</descr>
</element>

<element name="HBRUSH">
<short>The type of a
painting Brush
Handle.
</short>
<descr>A brush is used to fill image areas.
Typical brush properties are color, pattern and fill style.
</descr>
</element>

<element name="HMONITOR">
<short>The type of a
display Monitor (CRT...)
Handle.
</short>
</element>

<element name="Bool">
<short>A LongBool type, distinct from the Boolean type.</short>
</element>

<element name="Short">
<short>A SmallInt type.</short>
</element>

<element name="PRect">
<short>A pointer to TRect.</short>
</element>

<element name="WPARAM">
<short>Type of the first message argument (pointer-sized).</short>
</element>

<element name="LPARAM">
<short>Type of the second message argument (pointer-sized).</short>
</element>

<element name="LRESULT">
<short>Type of a message result (pointer-sized).</short>
</element>

<element name="ULONG_PTR">
<short>Alias for the PtrUInt type.</short>
</element>

<element name="TLCLIntfHandle">
<short>Deprecated. Alias for the TLCLHandle type.</short>
<descr>
<p>
<var>TLCLIntfHandle</var> is the type returned from the CreateHandle method in 
widgetset classes.
</p>
</descr>
<version>
TLCLIntfHandle has been deprecated in LCL version 4.0. Use the TLCLHandle type 
instead.
</version>
<seealso>
<link id="#lcl.wsreferences.TLCLHandle">TLCLHandle</link>
</seealso>
</element>

<element link="HKEY" name="PHKEY"/>

<element name="INVALID_HANDLE_VALUE">
<short>Value representing an invalid (unassigned) Handle.</short>
</element>

<element name="MaxByte">
<short>Maximum value for the WinAPI BYTE type ($FF).
</short>
</element>

<element name="MAXWORD">
<short>Maximum value for the WinAPI WORD type ($FFFF).
</short>
</element>

<element name="MAXDWORD">
<short>Maximum value for the WinAPI DWORD type ($FFFF FFFF).
</short>
</element>

<element name="MINCHAR">
<short>Minimum value for the WinAPI CHAR type ($80).
</short>
</element>

<element name="MAXCHAR">
<short>Maximum value for the WinAPI CHAR type ($7F).
</short>
</element>

<element name="MINSHORT">
<short>Minimum value for the WinAPI SHORT type ($8000).
</short>
</element>

<element name="MAXSHORT">
<short>Maximum value for the WinAPI SHORT type ($7FFF).
</short>
</element>

<element name="MINLONG">
<short>Minimum value for the WinAPI LONG type ($8000 0000).
</short>
</element>

<element name="MAXLONG">
<short>Maximum value for the WinAPI LONG type ($7FFF FFFF).
</short>
</element>

<element name="R2_BLACK">
<short>Binary raster operation (Dst op Pen): all black.</short>
</element>

<element name="R2_NOTMERGEPEN">
<short>Binary raster operation (Dst op Pen): not (Dst or Pen).</short>
</element>

<element name="R2_MASKNOTPEN">
<short>Binary raster operation (Dst op Pen): Dst and not Pen.</short>
</element>

<element name="R2_NOTCOPYPEN">
<short>Binary raster operation (Dst op Pen):
not Pen.
</short>
</element>

<element name="R2_MASKPENNOT">
<short>Binary raster operation (Dst op Pen): (not Dst) and Pen.</short>
</element>

<element name="R2_NOT">
<short>Binary raster operation (Dst op Pen): not Dst.</short>
</element>

<element name="R2_XORPEN">
<short>Binary raster operation (Dst op Pen): Dst xor Pen.</short>
</element>

<element name="R2_NOTMASKPEN">
<short>Binary raster operation (Dst op Pen): not (Dst and Pen).</short>
</element>

<element name="R2_MASKPEN">
<short>Binary raster operation (Dst op Pen): Dst and Pen.</short>
</element>

<element name="R2_NOTXORPEN">
<short>Binary raster operation (Dst op Pen): not (Dst xor Pen).</short>
</element>

<element name="R2_NOP">
<short>Binary raster operation (Dst op Pen): Dst.</short>
</element>

<element name="R2_MERGENOTPEN">
<short>Binary raster operation (Dst op Pen): Dst or not Pen.</short>
</element>

<element name="R2_COPYPEN">
<short>Binary raster operation (Dst op Pen): Pen.</short>
</element>

<element name="R2_MERGEPENNOT">
<short>Binary raster operation (Dst op Pen): (not Dst) or Pen.</short>
</element>

<element name="R2_MERGEPEN">
<short>Binary raster operation (Dst op Pen): Dst or Pen.</short>
</element>

<element name="R2_WHITE">
<short>Binary raster operation (Dst op Pen): all white.</short>
</element>

<element link="R2_WHITE" name="R2_LAST">
<short>Highest binary raster operation code.</short>
</element>

<element name="SRCCOPY">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with Src.
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
<link id="#lcl.graphics.cmSrcCopy">cmSrcCopy</link>
</seealso>
</element>

<element name="SRCPAINT">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Dst or Src).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="SRCAND">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Dst and Src).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="SRCINVERT">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Dst xor Src).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="SRCERASE">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with ((not Dst) and Src).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="NOTSRCCOPY">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (not Src).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="NOTSRCERASE">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (not (Dst or Src)).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="MERGECOPY">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Src and Pattern).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="MERGEPAINT">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Dst or not Src).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="PATCOPY">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Pattern).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="PATPAINT">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Dst or (not Src) or Pattern).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="PATINVERT">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (Dst xor Pattern).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="DSTINVERT">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with (not Dst).
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="BLACKNESS">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with all black.
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="WHITENESS">
<short>Ternary raster operation (Dst op Src op Pattern):
Fills the destination area with all white.
</short>
<seealso>
<link id="#lcl.lclintf.BitBlt">BitBlt</link>
</seealso>
</element>

<element name="TKeyBoardState">
<short>State array of 256 possible (virtual) keys.</short>
</element>

<element link="_ABC" name="PABC"/>

<element name="_ABC">
<short>Record describing the width of a TrueType character.</short>
<descr>
<p>
The effective display width for a single character is A+B+C.
</p>
<p>
The width of multiple characters should exclude the first A and last C value.
</p>
<p>
Negative A and C values allow for underhangs or overhangs, e.g. italics.
</p>
</descr>
</element>
<element name="_ABC.abcA">
<short>
The (possibly negative) distance to add to the current position before drawing 
the character glyph.
</short>
</element>
<element name="_ABC.abcB">
<short>The width of the character glyph.</short>
</element>
<element name="_ABC.abcC">
<short>
The (possibly negative) distance to add to the current position after drawing 
the character glyph.
</short>
</element>
<element link="_ABC" name="TABC"/>

<element name="ETO_OPAQUE">
<short>
Opaque <var>ExtTextOut</var> mode, filling the rectangle with the background 
Color before painting the text.
</short>
<seealso>
<link id="#lcl.lclintf.ExtTextOut">ExtTextOut</link>
</seealso>
</element>

<element name="ETO_CLIPPED">
<short>
Clipped <var>ExtTextOut</var> mode, clipping the text at the rectangle 
boundaries.
</short>
<seealso>
<link id="#lcl.lclintf.ExtTextOut">ExtTextOut</link>
</seealso>
</element>

<element name="CS_VREDRAW">
<short>
Class style constant used to redraw the entire window when the height for the 
client area has been changed.
</short>
</element>

<element name="CS_HREDRAW">
<short>
Class style constant used to redraw the entire window when the width for the 
client area has been changed.
</short>
</element>

<element name="RGN_AND">
<short>
<var>CombineRgn</var> mode: intersection (r1 AND r2).
</short>
</element>

<element name="RGN_OR">
<short>
<var>CombineRgn</var> mode: union (r1 OR r2).
</short>
</element>

<element name="RGN_XOR">
<short>
<var>CombineRgn</var> mode: logical difference (r1 XOR r2).
</short>
</element>

<element name="RGN_DIFF">
<short>
<var>CombineRgn</var> mode: arithmetic difference (r1 - r2).
</short>
</element>

<element name="RGN_COPY">
<short>
<var>CombineRgn</var> mode: copy of r1.
</short>
</element>

<element name="DT_TOP">
<short>
<var>DrawText</var> formatting: text justified to the top of the rectangle.
</short>
</element>

<element name="DT_LEFT">
<short>
<var>DrawText</var> formatting: text justified to the left of the rectangle.
</short>
</element>

<element name="DT_CENTER">
<short>
<var>DrawText</var> formatting: text centered horizontally within the 
rectangle.
</short>
</element>

<element name="DT_RIGHT">
<short>
<var>DrawText</var> formatting: text justified to the right of the rectangle.
</short>
</element>

<element name="DT_VCENTER">
<short>
<var>DrawText</var> formatting: text centered vertically within the rectangle.
</short>
</element>

<element name="DT_BOTTOM">
<short>
<var>DrawText</var> formatting: text justified to the bottom of the rectangle.
</short>
</element>

<element name="DT_WORDBREAK">
<short>
<var>DrawText</var> formatting: text can wrap into multiple lines.
</short>
</element>

<element name="DT_SINGLELINE">
<short>
<var>DrawText</var> formatting: text is drawn in a single line, regardless of 
embedded line endings.
</short>
</element>

<element name="DT_EXPANDTABS">
<short>
<var>DrawText</var> formatting: expand tab characters.
</short>
</element>

<element name="DT_NOCLIP">
<short>
<var>DrawText</var> formatting: text is drawn without clipping.
</short>
</element>

<element name="DT_CALCRECT">
<short>
<var>DrawText</var> formatting: returns the required rectangle, without 
actually drawing.
</short>
</element>

<element name="DT_NOPREFIX">
<short>
<var>DrawText</var> formatting: show embedded '&amp;' characters.
</short>
</element>

<element name="DT_INTERNAL">
<short>
<var>DrawText</var> formatting: uses the system font for calculations.
</short>
</element>

<element name="DT_EDITCONTROL">
<short>
<var>DrawText</var> formatting: emulates the behavior of a multi-line edit 
control.
</short>
</element>

<element name="DT_END_ELLIPSIS">
<short>
<var>DrawText</var> formatting: appends an ellipsis when the text is 
truncated.
</short>
</element>

<element name="DT_MODIFYSTRING">
<short>
<var>DrawText</var> formatting: update the string to match the displayed text 
(possibly truncated).
</short>
</element>

<element name="DT_RTLREADING">
<short>
<var>DrawText</var> formatting:
use right-to-left reading layout for bidirectional text.
</short>
</element>

<element name="DT_HIDEPREFIX">
<short>
DrawText formatting flag: Ignore the accelerator key prefix (&amp;) and hide 
the underline.
</short>
</element>

<element name="DT_PREFIXONLY">
<short>
DrawText formatting flag: Draw only the underlined accelerator key, ignore 
any other text.
</short>
</element>

<element name="DFC_CAPTION">
<short>
<var>DrawFrameControl</var> control type: title bar.
</short>
</element>

<element name="DFC_MENU">
<short>
<var>DrawFrameControl</var> control type: menu bar.
</short>
</element>

<element name="DFC_SCROLL">
<short>
<var>DrawFrameControl</var> control type: scroll bar.
</short>
</element>

<element name="DFC_BUTTON">
<short>
<var>DrawFrameControl</var> control type: button.
</short>
</element>

<element name="DFC_POPUPMENU">
<short>
<var>DrawFrameControl</var> control type: menu item.
</short>
</element>

<element name="DFCS_BUTTONCHECK">
<short>
<var>DrawFrameControl</var> button control style: checkbox.
</short>
</element>

<element name="DFCS_BUTTONRADIOIMAGE">
<short>
<var>DrawFrameControl</var> button control style: radio button image.
</short>
</element>

<element name="DFCS_BUTTONRADIOMASK">
<short>
<var>DrawFrameControl</var> button control style: radio button mask.
</short>
</element>

<element name="DFCS_BUTTONRADIO">
<short>
<var>DrawFrameControl</var> button control style: radio button.
</short>
</element>

<element name="DFCS_BUTTON3STATE">
<short>
<var>DrawFrameControl</var> button control style: three-state button.
</short>
</element>

<element name="DFCS_BUTTONPUSH">
<short>
<var>DrawFrameControl</var> button control style: push button.
</short>
</element>

<element name="DFCS_CAPTIONCLOSE">
<short>
<var>DrawFrameControl</var> caption control style: Close button.
</short>
</element>

<element name="DFCS_CAPTIONMIN">
<short>
<var>DrawFrameControl</var> caption control style: Minimize button.
</short>
</element>

<element name="DFCS_CAPTIONMAX">
<short>
<var>DrawFrameControl</var> caption control style: Maximize button.
</short>
</element>

<element name="DFCS_CAPTIONRESTORE">
<short>
<var>DrawFrameControl</var> caption control style: Restore button.
</short>
</element>

<element name="DFCS_CAPTIONHELP">
<short>
<var>DrawFrameControl</var> caption control style: Help button.
</short>
</element>

<element name="DFCS_MENUARROW">
<short>
<var>DrawFrameControl</var> menubar control style: sub-menu arrow.
</short>
</element>

<element name="DFCS_MENUCHECK">
<short>
<var>DrawFrameControl</var> menubar control style: check mark.
</short>
</element>

<element name="DFCS_MENUBULLET">
<short>
<var>DrawFrameControl</var> menubar control style: bullet.
</short>
</element>

<element name="DFCS_SCROLLDOWN">
<short>
<var>DrawFrameControl</var> scrollbar control style: down arrow.
</short>
</element>

<element name="DFCS_SCROLLLEFT">
<short>
<var>DrawFrameControl</var> scrollbar control style: left arrow.
</short>
</element>

<element name="DFCS_SCROLLRIGHT">
<short>
<var>DrawFrameControl</var> scrollbar control style: right arrow.
</short>
</element>

<element name="DFCS_SCROLLCOMBOBOX">
<short>
<var>DrawFrameControl</var> scrollbar control style: combobox scrollbar.
</short>
</element>

<element name="DFCS_SCROLLSIZEGRIP">
<short>
<var>DrawFrameControl</var> scrollbar control style: size grip in the 
bottom-right window corner.
</short>
</element>

<element name="DFCS_SCROLLUP">
<short>
<var>DrawFrameControl</var> scrollbar control style: up arrow.
</short>
</element>

<element name="DFCS_INACTIVE">
<short>
<var>DrawFrameControl</var> control state: inactive (grayed).
</short>
</element>

<element name="DFCS_PUSHED">
<short>
<var>DrawFrameControl</var> button control state: button pushed.
</short>
</element>

<element name="DFCS_CHECKED">
<short>
<var>DrawFrameControl</var> button control state: button checked.
</short>
</element>

<element name="DFCS_TRANSPARENT">
<short>
<var>DrawFrameControl</var> control style: transparent (title bar...).
</short>
</element>

<element name="DFCS_HOT">
<short>
<var>DrawFrameControl</var> scrollbar control state: button hot-tracked.
</short>
</element>

<element name="DFCS_ADJUSTRECT">
<short>
<var>DrawFrameControl</var> button control style: exclude frame.
</short>
</element>

<element name="DFCS_FLAT">
<short>
<var>DrawFrameControl</var> button control style: flat.
</short>
</element>

<element name="DFCS_MONO">
<short>
<var>DrawFrameControl</var> button control style: monochrome border.
</short>
</element>

<element name="HTERROR">
<short>Hit test error (like HTNOWHERE) which produces a system beep.</short>
</element>

<element name="HTTRANSPARENT">
<short>Hit test: transparent area.</short>
</element>

<element name="HTNOWHERE">
<short>Hit test: outside control.</short>
</element>

<element name="HTCLIENT">
<short>Hit test: client area.</short>
</element>

<element name="HTCAPTION">
<short>Hit test: caption background.</short>
</element>

<element name="MSGF_DIALOGBOX">
<short>
Indicates an input event occurred in a dialog.
</short>
</element>

<element name="MSGF_MESSAGEBOX">
<short>
Indicates an input event occurred in a message box.
</short>
</element>

<element name="MSGF_MENU">
<short>
Indicates an input event occurred in a menu.
</short>
</element>

<element name="MSGF_MOVE">
<short>Not used in the current LCL version.</short>
</element>

<element name="MSGF_SIZE">
<short>Not used in the current LCL version.</short>
</element>

<element name="MSGF_SCROLLBAR">
<short>
Indicates an input event occurred in a scroll bar.
</short>
</element>

<element name="MSGF_NEXTWINDOW">
<short>
Indicates an ALT+TAB input event occurred to activate the next window.
</short>
</element>

<element name="PM_Noremove">
<short>
<var>PeekMessage</var> flag:
don't remove peeked message.
</short>
</element>

<element name="PM_Remove">
<short>
<var>PeekMessage</var> flag:
remove peeked message.
</short>
</element>

<element name="MF_BYCOMMAND">
<short>Find menu item by command ID.</short>
</element>

<element name="MF_BYPOSITION">
<short>Find menu item by position number.</short>
</element>

<element name="MF_BYHANDLE">
<short/>
</element>

<element name="MF_SEPARATOR">
<short>Menu flag to draw a horizontal separator.</short>
</element>

<element name="MF_ENABLED">
<short>
Menu flag to enable a menu item for selection.
</short>
</element>

<element name="MF_GRAYED">
<short>
Menu flag to disable a menu item and prevent its selection.
</short>
</element>

<element name="MF_DISABLED">
<short>
Menu flag to disable a menu item and prevent its selection, but it does not 
gray the menu item.
</short>
</element>

<element name="MF_UNCHECKED">
<short>
Menu to flag to draw the item without a check mark, even when a bitmap is 
supplied for the menu item.
</short>
</element>

<element name="MF_CHECKED">
<short>
Menu flag to draw a check mark for the menu item.
</short>
</element>

<element name="MF_USECHECKBITMAPS">
<short>
Menu flag to enable check mark bitmaps for menu items.
</short>
</element>

<element name="MF_STRING">
<short>
Menu flag which specifies a menu item as a text value.
</short>
</element>

<element name="MF_BITMAP">
<short>
Menu flag which specifies a menu item as a bitmap image.
</short>
</element>

<element name="MF_OWNERDRAW">
<short>
Menu flag which specified the menu item is owner-drawn. Indicates that 
WM_MEASUREITEM and WM_DRAWITEM messages are used when the menu item is 
updated.
</short>
</element>

<element name="MF_POPUP">
<short>
Menu flag which specifies the menu item is a a pop-up, drop-down, or sub-menu.
</short>
</element>

<element name="MF_MENUBARBREAK">
<short>
Menu flag, like MF_MENUBREAK, but used for a menu bar. Causes a menu, 
sub-menu, or short cut to be displayed in a new column with a vertical 
separator.
</short>
</element>

<element name="MF_MENUBREAK">
<short>
Menu flag, like MF_MENUBARBREAK, but used for a menu item. Causes the new 
menu item to appear on a separate line (menu bar) or column (menu, sub-menu, 
or short cut) without a separator line.
</short>
</element>

<element name="MF_UNHILITE">
<short>Menu flag used to remove highlighting from a menu item.</short>
</element>

<element name="MF_HILITE">
<short>
Menu flag used to add highlighting to a menu item. When omitted, the 
MF_UNHILITE menu flag is assumed.
</short>
</element>

<element name="MF_DEFAULT">
<short>
Menu flag used to indicate that an item is the default selection for a menu.
</short>
</element>

<element name="MF_SYSMENU">
<short>
Menu flag which indicates if the menu item appears on the Window menu.
</short>
</element>

<element name="MF_HELP">
<short>
Not used in the current LCL version.
</short>
</element>

<element name="MF_RIGHTJUSTIFY">
<short>
Menu flag which indicates the menu item caption is right aligned.
</short>
</element>

<element name="MF_MOUSESELECT">
<short>
Menu flag which indicates the item has been selected using the mouse.
</short>
</element>

<element name="MF_UNSUPPORTED">
<short>Mask used to filter menu flag values.</short>
</element>

<element name="KF_EXTENDED">
<short>
Focus and activation key flag used to test for extended key values.
</short>
</element>

<element name="KF_DLGMODE">
<short>
Focus and activation key flag which indicates if a dialog is active.
</short>
</element>

<element name="KF_MENUMODE">
<short>
Focus and activation key flag which indicates if a menu is active.
</short>
</element>

<element name="KF_ALTDOWN">
<short>
Focus and activation key flag which indicates if the Alt key is pressed.
</short>
</element>

<element name="KF_REPEAT">
<short>
Focus and activation key flag used to manipulate the previous key state flag.
</short>
</element>

<element name="KF_UP">
<short>
Focus and activation key flag used to manipulate a key state transition flag.
</short>
</element>

<element name="scMeta">
<short>Represents the Meta key in a short cut value.</short>
</element>

<element name="VK_UNKNOWN">
<short>Virtual key code for an unknown key (defined by the LCL).</short>
</element>

<element name="VK_LBUTTON">
<short>Virtual key code (Windows API compatible).</short>
</element>

<element name="VK_RBUTTON">
<short>Virtual key code (Windows API compatible).</short>
</element>

<element name="VK_CANCEL">
<short>Virtual key code (Windows API compatible).</short>
</element>

<element name="VK_MBUTTON">
<short>
Virtual key code for the middle mouse button (Windows API compatible).
</short>
</element>

<element name="VK_XBUTTON1">
<short>
Virtual key code for the first extra mouse button (Windows API compatible).
</short>
</element>

<element name="VK_XBUTTON2">
<short>
Virtual key code for the second extra mouse button (Windows API compatible).
</short>
</element>

<element name="VK_BACK">
<short>
Virtual key code for the Backspace key. Not to be confused with the Android 
BACK navigation key which is mapped to VK_ESCAPE.
</short>
</element>

<element name="VK_TAB">
<short/>
</element>

<element name="VK_CLEAR">
<short/>
</element>

<element name="VK_RETURN">
<short/>
</element>

<element name="VK_SHIFT">
<short/>
</element>

<element name="VK_CONTROL">
<short/>
</element>

<element name="VK_MENU">
<short/>
</element>

<element name="VK_PAUSE">
<short/>
</element>

<element name="VK_CAPITAL">
<short/>
</element>

<element name="VK_KANA">
<short/>
</element>

<element name="VK_HANGUL">
<short/>
</element>

<element name="VK_JUNJA">
<short/>
</element>

<element name="VK_FINAL">
<short/>
</element>

<element name="VK_HANJA">
<short/>
</element>

<element name="VK_KANJI">
<short/>
</element>

<element name="VK_ESCAPE">
<short/>
</element>

<element name="VK_CONVERT">
<short/>
</element>

<element name="VK_NONCONVERT">
<short/>
</element>

<element name="VK_ACCEPT">
<short/>
</element>

<element name="VK_MODECHANGE">
<short/>
</element>

<element name="VK_SPACE">
<short/>
</element>

<element name="VK_PRIOR">
<short/>
</element>

<element name="VK_NEXT">
<short/>
</element>

<element name="VK_END">
<short/>
</element>

<element name="VK_HOME">
<short/>
</element>

<element name="VK_LEFT">
<short/>
</element>

<element name="VK_UP">
<short/>
</element>

<element name="VK_RIGHT">
<short/>
</element>

<element name="VK_DOWN">
<short/>
</element>

<element name="VK_SELECT">
<short/>
</element>

<element name="VK_PRINT">
<short/>
</element>

<element name="VK_EXECUTE">
<short/>
</element>

<element name="VK_SNAPSHOT">
<short/>
</element>

<element name="VK_INSERT">
<short/>
</element>

<element name="VK_DELETE">
<short/>
</element>

<element name="VK_HELP">
<short/>
</element>

<element name="VK_0">
<short/>
</element>

<element name="VK_1">
<short/>
</element>

<element name="VK_2">
<short/>
</element>

<element name="VK_3">
<short/>
</element>

<element name="VK_4">
<short/>
</element>

<element name="VK_5">
<short/>
</element>

<element name="VK_6">
<short/>
</element>

<element name="VK_7">
<short/>
</element>

<element name="VK_8">
<short/>
</element>

<element name="VK_9">
<short/>
</element>

<element name="VK_A">
<short/>
</element>

<element name="VK_B">
<short/>
</element>

<element name="VK_C">
<short/>
</element>

<element name="VK_D">
<short/>
</element>

<element name="VK_E">
<short/>
</element>

<element name="VK_F">
<short/>
</element>

<element name="VK_G">
<short/>
</element>

<element name="VK_H">
<short/>
</element>

<element name="VK_I">
<short/>
</element>

<element name="VK_J">
<short/>
</element>

<element name="VK_K">
<short/>
</element>

<element name="VK_L">
<short/>
</element>

<element name="VK_M">
<short/>
</element>

<element name="VK_N">
<short/>
</element>

<element name="VK_O">
<short/>
</element>

<element name="VK_P">
<short/>
</element>

<element name="VK_Q">
<short/>
</element>

<element name="VK_R">
<short/>
</element>

<element name="VK_S">
<short/>
</element>

<element name="VK_T">
<short/>
</element>

<element name="VK_U">
<short/>
</element>

<element name="VK_V">
<short/>
</element>

<element name="VK_W">
<short/>
</element>

<element name="VK_X">
<short/>
</element>

<element name="VK_Y">
<short/>
</element>

<element name="VK_Z">
<short/>
</element>

<element name="VK_LWIN">
<short/>
</element>

<element name="VK_RWIN">
<short/>
</element>

<element name="VK_APPS">
<short/>
</element>

<element name="VK_SLEEP">
<short/>
</element>

<element name="VK_NUMPAD0">
<short/>
</element>

<element name="VK_NUMPAD1">
<short/>
</element>

<element name="VK_NUMPAD2">
<short/>
</element>

<element name="VK_NUMPAD3">
<short/>
</element>

<element name="VK_NUMPAD4">
<short/>
</element>

<element name="VK_NUMPAD5">
<short/>
</element>

<element name="VK_NUMPAD6">
<short/>
</element>

<element name="VK_NUMPAD7">
<short/>
</element>

<element name="VK_NUMPAD8">
<short/>
</element>

<element name="VK_NUMPAD9">
<short/>
</element>

<element name="VK_MULTIPLY">
<short/>
</element>

<element name="VK_ADD">
<short/>
</element>

<element name="VK_SEPARATOR">
<short/>
</element>

<element name="VK_SUBTRACT">
<short/>
</element>

<element name="VK_DECIMAL">
<short/>
</element>

<element name="VK_DIVIDE">
<short/>
</element>

<element name="VK_F1">
<short/>
</element>

<element name="VK_F2">
<short/>
</element>

<element name="VK_F3">
<short/>
</element>

<element name="VK_F4">
<short/>
</element>

<element name="VK_F5">
<short/>
</element>

<element name="VK_F6">
<short/>
</element>

<element name="VK_F7">
<short/>
</element>

<element name="VK_F8">
<short/>
</element>

<element name="VK_F9">
<short/>
</element>

<element name="VK_F10">
<short/>
</element>

<element name="VK_F11">
<short/>
</element>

<element name="VK_F12">
<short/>
</element>

<element name="VK_F13">
<short/>
</element>

<element name="VK_F14">
<short/>
</element>

<element name="VK_F15">
<short/>
</element>

<element name="VK_F16">
<short/>
</element>

<element name="VK_F17">
<short/>
</element>

<element name="VK_F18">
<short/>
</element>

<element name="VK_F19">
<short/>
</element>

<element name="VK_F20">
<short/>
</element>

<element name="VK_F21">
<short/>
</element>

<element name="VK_F22">
<short/>
</element>

<element name="VK_F23">
<short/>
</element>

<element name="VK_F24">
<short/>
</element>

<element name="VK_NUMLOCK">
<short/>
</element>

<element name="VK_SCROLL">
<short/>
</element>

<element name="VK_LSHIFT">
<short/>
</element>

<element name="VK_RSHIFT">
<short/>
</element>

<element name="VK_LCONTROL">
<short/>
</element>

<element name="VK_RCONTROL">
<short/>
</element>

<element name="VK_LMENU">
<short/>
</element>

<element name="VK_RMENU">
<short/>
</element>

<element name="VK_BROWSER_BACK">
<short/>
</element>

<element name="VK_BROWSER_FORWARD">
<short/>
</element>

<element name="VK_BROWSER_REFRESH">
<short/>
</element>

<element name="VK_BROWSER_STOP">
<short/>
</element>

<element name="VK_BROWSER_SEARCH">
<short/>
</element>

<element name="VK_BROWSER_FAVORITES">
<short/>
</element>

<element name="VK_BROWSER_HOME">
<short/>
</element>

<element name="VK_VOLUME_MUTE">
<short/>
</element>

<element name="VK_VOLUME_DOWN">
<short/>
</element>

<element name="VK_VOLUME_UP">
<short/>
</element>

<element name="VK_MEDIA_NEXT_TRACK">
<short/>
</element>

<element name="VK_MEDIA_PREV_TRACK">
<short/>
</element>

<element name="VK_MEDIA_STOP">
<short/>
</element>

<element name="VK_MEDIA_PLAY_PAUSE">
<short/>
</element>

<element name="VK_LAUNCH_MAIL">
<short/>
</element>

<element name="VK_LAUNCH_MEDIA_SELECT">
<short/>
</element>

<element name="VK_LAUNCH_APP1">
<short/>
</element>

<element name="VK_LAUNCH_APP2">
<short/>
</element>

<element name="VK_OEM_1">
<short/>
</element>

<element name="VK_OEM_PLUS">
<short/>
</element>

<element name="VK_OEM_COMMA">
<short/>
</element>

<element name="VK_OEM_MINUS">
<short/>
</element>

<element name="VK_OEM_PERIOD">
<short/>
</element>

<element name="VK_OEM_2">
<short/>
</element>

<element name="VK_OEM_3">
<short/>
</element>

<element name="VK_OEM_4">
<short/>
</element>

<element name="VK_OEM_5">
<short/>
</element>

<element name="VK_OEM_6">
<short/>
</element>

<element name="VK_OEM_7">
<short/>
</element>

<element name="VK_OEM_8">
<short/>
</element>

<element name="VK_OEM_102">
<short/>
</element>

<element name="VK_PROCESSKEY">
<short/>
</element>

<element name="VK_ATTN">
<short/>
</element>

<element name="VK_CRSEL">
<short/>
</element>

<element name="VK_EXSEL">
<short/>
</element>

<element name="VK_EREOF">
<short/>
</element>

<element name="VK_PLAY">
<short/>
</element>

<element name="VK_ZOOM">
<short/>
</element>

<element name="VK_NONAME">
<short/>
</element>

<element name="VK_PA1">
<short/>
</element>

<element name="VK_OEM_CLEAR">
<short/>
</element>

<element name="VK_HIGHESTVALUE">
<short/>
</element>

<element name="VK_UNDEFINED">
<short/>
</element>

<element name="VK_LCL_EQUAL">
<short/>
</element>
<element name="VK_LCL_COMMA">
<short/>
</element>
<element name="VK_LCL_POINT">
<short/>
</element>
<element name="VK_LCL_SLASH">
<short/>
</element>
<element name="VK_LCL_SEMI_COMMA">
<short/>
</element>
<element name="VK_LCL_MINUS">
<short/>
</element>
<element name="VK_LCL_OPEN_BRAKET">
<short/>
</element>
<element name="VK_LCL_CLOSE_BRAKET">
<short/>
</element>
<element name="VK_LCL_OPEN_BRACKET">
<short/>
</element>
<element name="VK_LCL_CLOSE_BRACKET">
<short/>
</element>
<element name="VK_LCL_BACKSLASH">
<short/>
</element>
<element name="VK_LCL_TILDE">
<short/>
</element>
<element name="VK_LCL_QUOTE">
<short/>
</element>
<element name="VK_LCL_ALT">
<short/>
</element>
<element name="VK_LCL_LALT">
<short/>
</element>
<element name="VK_LCL_RALT">
<short/>
</element>
<element name="VK_LCL_CAPSLOCK">
<short/>
</element>

<element name="VK_LCL_POWER">
<short/>
</element>
<element name="VK_LCL_CALL">
<short/>
</element>
<element name="VK_LCL_ENDCALL">
<short/>
</element>
<element name="VK_LCL_AT">
<short/>
<descr>
<p>
Not equivalent to anything less than $FF. Will only be sent by a primary "@" 
key but not for a @ key as secondary action of a "2" key, for example.
</p>
</descr>
</element>

<element name="BDR_RAISEDOUTER">
<short>Represents a 3-D border style with a raised outer border.</short>
</element>

<element name="BDR_SUNKENOUTER">
<short>Represents a 3-D border style with a sunken outer border.</short>
</element>

<element name="BDR_RAISEDINNER">
<short>Represents a 3-D border style with a raised inner border.</short>
</element>

<element name="BDR_SUNKENINNER">
<short>Represents a 3-D border style with a sunken inner border.</short>
</element>

<element name="BDR_OUTER">
<short>
Indicates whether an outer border (raised or sunken) is in use for a control.
</short>
</element>

<element name="BDR_INNER">
<short>
Indicates whether an inner border (raised or sunken) is in use for a control.
</short>
</element>

<element name="BDR_RAISED">
<short>
Indicates whether a raised border (inner or outer) is in use for a control.
</short>
</element>

<element name="BDR_SUNKEN">
<short>
Indicates whether a sunken border (inner or outer) is in use for a control.
</short>
</element>

<element name="EDGE_BUMP">
<short>Combination of BDR_RAISEDOUTER and BDR_SUNKENINNER.</short>
</element>

<element name="EDGE_ETCHED">
<short>Combination of BDR_SUNKENOUTER and BDR_RAISEDINNER.</short>
</element>

<element name="EDGE_RAISED">
<short>Combination of BDR_RAISEDOUTER and BDR_RAISEDINNER.</short>
</element>

<element name="EDGE_SUNKEN">
<short>Combination of BDR_SUNKENOUTER and BDR_SUNKENINNER.</short>
</element>

<element name="BF_LEFT">
<short>Border flag representing the left side of a border rectangle.</short>
</element>

<element name="BF_TOP">
<short>Border flag representing the top edge of a border rectangle.</short>
</element>

<element name="BF_RIGHT">
<short>Border flag representing the right side of a border rectangle.</short>
</element>

<element name="BF_BOTTOM">
<short>Border flag representing the bottom edge of a border rectangle.</short>
</element>

<element name="BF_TOPLEFT">
<short>
Border flag representing the top and left sides of a border rectangle.
</short>
</element>

<element name="BF_TOPRIGHT">
<short>
Border flag representing the top and right sides of a border rectangle.
</short>
</element>

<element name="BF_BOTTOMLEFT">
<short>
Border flag representing the bottom and left sides of a border rectangle.
</short>
</element>

<element name="BF_BOTTOMRIGHT">
<short>
Border flag representing the bottom and right sides of a border rectangle.
</short>
</element>

<element name="BF_RECT">
<short>
Border flag representing all sides of a border rectangle.
</short>
</element>

<element name="BF_DIAGONAL">
<short>
Border flag representing a diagonal border.
</short>
</element>

<element name="BF_DIAGONAL_ENDTOPRIGHT">
<short>
Border flag representing a diagonal border where the origin is the 
bottom-left corner and the terminus is the top-right corner of the rectangle.
</short>
</element>

<element name="BF_DIAGONAL_ENDTOPLEFT">
<short/>
</element>

<element name="BF_DIAGONAL_ENDBOTTOMLEFT">
<short/>
</element>

<element name="BF_DIAGONAL_ENDBOTTOMRIGHT">
<short/>
</element>

<element name="BF_MIDDLE">
<short/>
</element>

<element name="BF_SOFT">
<short/>
</element>

<element name="BF_ADJUST">
<short/>
</element>

<element name="BF_FLAT">
<short/>
</element>

<element name="BF_MONO">
<short/>
</element>

<element name="DLGC_WANTARROWS">
<short/>
</element>

<element name="DLGC_WANTTAB">
<short/>
</element>

<element name="DLGC_WANTALLKEYS">
<short/>
</element>

<element name="DLGC_WANTCHARS">
<short/>
</element>

<element name="SW_SMOOTHSCROLL">
<short/>
</element>

<element name="SW_ERASE">
<short/>
</element>

<element name="SW_INVALIDATE">
<short/>
</element>

<element name="SW_SCROLLCHILDREN">
<short/>
</element>

<element name="ODT_MENU">
<short/>
</element>

<element name="ODT_LISTBOX">
<short/>
</element>

<element name="ODT_COMBOBOX">
<short/>
</element>

<element name="ODT_BUTTON">
<short/>
</element>

<element name="ODT_STATIC">
<short/>
</element>

<element name="ODT_HEADER">
<short/>
</element>

<element name="ODT_TAB">
<short/>
</element>

<element name="ODT_LISTVIEW">
<short/>
</element>

<element name="ODA_DRAWENTIRE">
<short/>
</element>

<element name="ODA_SELECT">
<short/>
</element>

<element name="ODA_FOCUS">
<short/>
</element>

<element name="ODS_SELECTED">
<short/>
</element>

<element name="ODS_GRAYED">
<short/>
</element>

<element name="ODS_DISABLED">
<short/>
</element>

<element name="ODS_CHECKED">
<short/>
</element>

<element name="ODS_FOCUS">
<short/>
</element>

<element name="ODS_DEFAULT">
<short/>
</element>

<element name="ODS_HOTLIGHT">
<short/>
</element>

<element name="ODS_INACTIVE">
<short/>
</element>

<element name="ODS_NOACCEL">
<short/>
</element>

<element name="ODS_NOFOCUSRECT">
<short/>
</element>

<element name="ODS_COMBOBOXEDIT">
<short/>
</element>

<element name="GWL_WNDPROC">
<short/>
</element>

<element name="GWL_HINSTANCE">
<short/>
</element>

<element name="GWL_HWNDPARENT">
<short/>
</element>

<element name="GWL_STYLE">
<short/>
</element>

<element name="GWL_EXSTYLE">
<short/>
</element>

<element name="GWL_USERDATA">
<short/>
</element>

<element name="GWL_ID">
<short/>
</element>

<element name="MB_OK">
<short>Indicates a message box includes an Ok button.</short>
</element>

<element name="MB_OKCANCEL">
<short>Indicates a message box includes Ok and Cancel buttons.</short>
</element>

<element name="MB_ABORTRETRYIGNORE">
<short>
Indicates a message box includes Abort, Retry, and Ignore buttons.
</short>
</element>

<element name="MB_YESNOCANCEL">
<short>Indicates a message box includes Yes, No, and Cancel buttons.</short>
</element>

<element name="MB_YESNO">
<short>Indicates a message box includes Yes and No buttons.</short>
</element>

<element name="MB_RETRYCANCEL">
<short>Indicates a message box includes Retry and Cancel buttons.</short>
</element>

<element name="MB_CANCELTRYCONTINUE">
<short>
Indicates a message box includes Cancel, Retry, and Continue buttons.
</short>
<descr>
<p>
Not yet supported by MessageDlg.
</p>
</descr>
</element>

<element name="MB_HELP">
<short>Indicates a message box includes a Help button.</short>
<descr>
<p>
Not yet supported by MessageDlg.
</p>
</descr>
</element>

<element name="MB_ICONHAND">
<short>
Indicates that a message box displays a Stop Sign icon.
</short>
</element>

<element name="MB_ICONQUESTION">
<short>Indicates that a message box displays a Question Mark icon.</short>
</element>

<element name="MB_ICONEXCLAMATION">
<short>
Indicates that a message box displays an Exclamation Point icon.
</short>
</element>

<element name="MB_ICONASTERISK">
<short/>
</element>

<element name="MB_ICONWARNING">
<short/>
</element>

<element name="MB_ICONERROR">
<short/>
</element>

<element name="MB_ICONSTOP">
<short/>
</element>

<element name="MB_ICONINFORMATION">
<short/>
</element>

<element name="IDOK">
<short/>
</element>

<element name="ID_OK">
<short/>
</element>

<element name="IDCANCEL">
<short/>
</element>

<element name="ID_CANCEL">
<short/>
</element>

<element name="IDABORT">
<short/>
</element>

<element name="ID_ABORT">
<short/>
</element>

<element name="IDRETRY">
<short/>
</element>

<element name="ID_RETRY">
<short/>
</element>

<element name="IDIGNORE">
<short/>
</element>

<element name="ID_IGNORE">
<short/>
</element>

<element name="IDYES">
<short/>
</element>

<element name="ID_YES">
<short/>
</element>

<element name="IDNO">
<short/>
</element>

<element name="ID_NO">
<short/>
</element>

<element name="IDCLOSE">
<short/>
</element>

<element name="ID_CLOSE">
<short/>
</element>

<element name="IDHELP">
<short/>
</element>

<element name="ID_HELP">
<short/>
</element>

<element name="MB_DEFBUTTON1">
<short/>
</element>

<element name="MB_DEFBUTTON2">
<short/>
</element>

<element name="MB_DEFBUTTON3">
<short/>
</element>

<element name="MB_DEFBUTTON4">
<short/>
</element>

<element name="Error">
<short/>
</element>

<element name="NullRegion">
<short/>
</element>

<element name="SimpleRegion">
<short/>
</element>

<element name="ComplexRegion">
<short/>
</element>

<element name="Region_Error">
<short/>
</element>

<element name="SB_Horz">
<short/>
</element>

<element name="SB_Vert">
<short/>
</element>

<element name="SB_CTL">
<short/>
</element>

<element name="SB_BOTH">
<short/>
</element>

<element name="SB_LINEUP">
<short/>
</element>

<element name="SB_LINELEFT">
<short/>
</element>

<element name="SB_LINEDOWN">
<short/>
</element>

<element name="SB_LINERIGHT">
<short/>
</element>

<element name="SB_PAGEUP">
<short/>
</element>

<element name="SB_PAGELEFT">
<short/>
</element>

<element name="SB_PAGEDOWN">
<short/>
</element>

<element name="SB_PAGERIGHT">
<short/>
</element>

<element name="SB_THUMBPOSITION">
<short/>
</element>

<element name="SB_THUMBTRACK">
<short/>
</element>

<element name="SB_TOP">
<short/>
</element>

<element name="SB_LEFT">
<short/>
</element>

<element name="SB_BOTTOM">
<short/>
</element>

<element name="SB_RIGHT">
<short/>
</element>

<element name="SB_ENDSCROLL">
<short/>
</element>

<element name="SB_POLICY_CONTINUOUS">
<short/>
</element>

<element name="SB_POLICY_DISCONTINUOUS">
<short/>
</element>

<element name="SB_POLICY_DELAYED">
<short/>
</element>

<element name="SBS_HORZ">
<short/>
</element>

<element name="SBS_VERT">
<short/>
</element>

<element name="SBS_TOPALIGN">
<short/>
</element>

<element name="SBS_LEFTALIGN">
<short/>
</element>

<element name="SBS_BOTTOMALIGN">
<short/>
</element>

<element name="SBS_RIGHTALIGN">
<short/>
</element>

<element name="SBS_SIZEBOXTOPLEFTALIGN">
<short/>
</element>

<element name="SBS_SIZEBOXBOTTOMRIGHTALIGN">
<short/>
</element>

<element name="SBS_SIZEBOX">
<short/>
</element>

<element name="SBS_SIZEGRIP">
<short/>
</element>

<element name="SIF_Range">
<short>Request for the scrollbar range.</short>
<seealso>
<link id="tagScrollInfo"/>
</seealso>
</element>
<element name="SIF_PAGE">
<short>Request for the scrollbar page size.</short>
<seealso>
<link id="tagScrollInfo"/>
</seealso>
</element>
<element name="SIF_POS">
<short>Request for the scrollbar position.</short>
<seealso>
<link id="tagScrollInfo"/>
</seealso>
</element>
<element name="SIF_DISABLENOSCROLL">
<short>Disable the scrollbar if not needed.</short>
<seealso>
<link id="tagScrollInfo"/>
</seealso>
</element>
<element name="SIF_TRACKPOS">
<short>Request for the scrollbar tracking position.</short>
<seealso>
<link id="tagScrollInfo"/>
</seealso>
</element>
<element name="SIF_ALL">
<short>Request all scrollbar properties.</short>
<seealso>
<link id="tagScrollInfo"/>
</seealso>
</element>
<element name="SIF_UPDATEPOLICY">
<short/>
<seealso>
<link id="tagScrollInfo"/>
</seealso>
</element>

<element name="SWP_NOSIZE">
<short/>
</element>

<element name="SWP_NOMOVE">
<short/>
</element>

<element name="SWP_NOZORDER">
<short/>
</element>

<element name="SWP_NOREDRAW">
<short/>
</element>

<element name="SWP_NOACTIVATE">
<short/>
</element>

<element name="SWP_DRAWFRAME">
<short/>
</element>

<element name="SWP_FRAMECHANGED">
<short/>
</element>

<element name="SWP_SHOWWINDOW">
<short/>
</element>

<element name="SWP_HIDEWINDOW">
<short/>
</element>

<element name="SWP_NOCOPYBITS">
<short/>
</element>

<element name="SWP_NOOWNERZORDER">
<short/>
</element>

<element name="SWP_NOREPOSITION">
<short/>
</element>

<element name="SWP_NOSENDCHANGING">
<short/>
</element>

<element name="SWP_DEFERERASE">
<short/>
</element>

<element name="SWP_ASYNCWINDOWPOS">
<short/>
</element>

<element name="SWP_STATECHANGED">
<short/>
</element>

<element name="SWP_SourceIsInterface">
<short/>
</element>

<element name="Size_Restored">
<short/>
</element>

<element name="Size_Minimized">
<short/>
</element>

<element name="Size_Maximized">
<short/>
</element>

<element name="Size_MaxShow">
<short/>
</element>

<element name="Size_MaxHide">
<short/>
</element>

<element name="Size_SourceIsInterface">
<short/>
</element>

<element name="SIZENORMAL">
<short/>
</element>

<element name="SIZEICONIC">
<short/>
</element>

<element name="SIZEFULLSCREEN">
<short/>
</element>

<element name="SIZEZOOMSHOW">
<short/>
</element>

<element name="SIZEZOOMHIDE">
<short/>
</element>

<element name="Move_Default">
<short/>
</element>

<element name="Move_SourceIsInterface">
<short/>
</element>

<element name="WS_OVERLAPPED">
<short/>
</element>

<element name="WS_POPUP">
<short/>
</element>

<element name="WS_CHILD">
<short/>
</element>

<element name="WS_MINIMIZE">
<short/>
</element>

<element name="WS_VISIBLE">
<short/>
</element>

<element name="WS_DISABLED">
<short/>
</element>

<element name="WS_CLIPSIBLINGS">
<short/>
</element>

<element name="WS_CLIPCHILDREN">
<short/>
</element>

<element name="WS_MAXIMIZE">
<short/>
</element>

<element name="WS_BORDER">
<short/>
</element>

<element name="WS_DLGFRAME">
<short/>
</element>

<element name="WS_CAPTION">
<short/>
</element>

<element name="WS_VSCROLL">
<short/>
</element>

<element name="WS_HSCROLL">
<short/>
</element>

<element name="WS_SYSMENU">
<short/>
</element>

<element name="WS_THICKFRAME">
<short/>
</element>

<element name="WS_GROUP">
<short/>
</element>

<element name="WS_TABSTOP">
<short/>
</element>

<element name="WS_MINIMIZEBOX">
<short/>
</element>

<element name="WS_MAXIMIZEBOX">
<short/>
</element>

<element name="WS_TILED">
<short/>
</element>

<element name="WS_ICONIC">
<short/>
</element>

<element name="WS_SIZEBOX">
<short/>
</element>

<element name="WS_OVERLAPPEDWINDOW">
<short/>
</element>

<element name="WS_TILEDWINDOW">
<short/>
</element>

<element name="WS_POPUPWINDOW">
<short/>
</element>

<element name="WS_CHILDWINDOW">
<short/>
</element>

<element name="WS_EX_DLGMODALFRAME">
<short/>
</element>

<element name="WS_EX_NOPARENTNOTIFY">
<short/>
</element>

<element name="WS_EX_TOPMOST">
<short/>
</element>

<element name="WS_EX_ACCEPTFILES">
<short/>
</element>

<element name="WS_EX_TRANSPARENT">
<short/>
</element>

<element name="WS_EX_MDICHILD">
<short/>
</element>

<element name="WS_EX_TOOLWINDOW">
<short/>
</element>

<element name="WS_EX_WINDOWEDGE">
<short/>
</element>

<element name="WS_EX_CLIENTEDGE">
<short/>
</element>

<element name="WS_EX_CONTEXTHELP">
<short/>
</element>

<element name="WS_EX_RIGHT">
<short/>
</element>

<element name="WS_EX_LEFT">
<short/>
</element>

<element name="WS_EX_RTLREADING">
<short/>
</element>

<element name="WS_EX_LTRREADING">
<short/>
</element>

<element name="WS_EX_LEFTSCROLLBAR">
<short/>
</element>

<element name="WS_EX_RIGHTSCROLLBAR">
<short/>
</element>

<element name="WS_EX_CONTROLPARENT">
<short/>
</element>

<element name="WS_EX_STATICEDGE">
<short/>
</element>

<element name="WS_EX_APPWINDOW">
<short/>
</element>

<element name="WS_EX_OVERLAPPEDWINDOW">
<short/>
</element>

<element name="WS_EX_PALETTEWINDOW">
<short/>
</element>

<element name="BS_PUSHBUTTON">
<short/>
</element>

<element name="BS_DEFPUSHBUTTON">
<short/>
</element>

<element name="BS_AUTOCHECKBOX">
<short/>
</element>

<element name="BS_RADIOBUTTON">
<short/>
</element>

<element name="BS_3STATE">
<short/>
</element>

<element name="BS_GROUPBOX">
<short/>
</element>

<element name="BS_OWNERDRAW">
<short/>
</element>

<element name="BS_PUSHLIKE">
<short/>
</element>

<element name="ES_LEFT">
<short/>
</element>

<element name="ES_CENTER">
<short/>
</element>

<element name="ES_RIGHT">
<short/>
</element>

<element name="ES_MULTILINE">
<short/>
</element>

<element name="ES_AUTOVSCROLL">
<short/>
</element>

<element name="ES_AUTOHSCROLL">
<short/>
</element>

<element name="ES_NOHIDESEL">
<short/>
</element>

<element name="ES_READONLY">
<short/>
</element>

<element name="ES_WANTRETURN">
<short/>
</element>

<element name="CBS_SIMPLE">
<short/>
</element>

<element name="CBS_DROPDOWN">
<short/>
</element>

<element name="CBS_DROPDOWNLIST">
<short/>
</element>

<element name="CBS_OWNERDRAWFIXED">
<short/>
</element>

<element name="CBS_OWNERDRAWVARIABLE">
<short/>
</element>

<element name="CBS_AUTOHSCROLL">
<short/>
</element>

<element name="CBS_SORT">
<short/>
</element>

<element name="CBS_HASSTRINGS">
<short/>
</element>

<element name="LBS_NOTIFY">
<short/>
</element>

<element name="LBS_SORT">
<short/>
</element>

<element name="LBS_NOREDRAW">
<short/>
</element>

<element name="LBS_MULTIPLESEL">
<short/>
</element>

<element name="LBS_OWNERDRAWFIXED">
<short/>
</element>

<element name="LBS_OWNERDRAWVARIABLE">
<short/>
</element>

<element name="LBS_HASSTRINGS">
<short/>
</element>

<element name="LBS_USETABSTOPS">
<short/>
</element>

<element name="LBS_NOINTEGRALHEIGHT">
<short/>
</element>

<element name="LBS_MULTICOLUMN">
<short/>
</element>

<element name="LBS_WANTKEYBOARDINPUT">
<short/>
</element>

<element name="LBS_EXTENDEDSEL">
<short/>
</element>

<element name="LBS_DISABLENOSCROLL">
<short/>
</element>

<element name="LBS_NODATA">
<short/>
</element>

<element name="LBS_NOSEL">
<short/>
</element>

<element name="LBS_STANDARD">
<short/>
</element>

<element name="HWND_TOP">
<short/>
</element>

<element name="HWND_BOTTOM">
<short/>
</element>

<element name="HWND_TOPMOST">
<short/>
</element>

<element name="HWND_NOTOPMOST">
<short/>
</element>

<element name="SW_HIDE">
<short/>
</element>

<element name="SW_SHOWNORMAL">
<short/>
</element>

<element name="SW_NORMAL">
<short/>
</element>

<element name="SW_SHOWMINIMIZED">
<short/>
</element>

<element name="SW_SHOWMAXIMIZED">
<short/>
</element>

<element name="SW_MAXIMIZE">
<short/>
</element>

<element name="SW_SHOWNOACTIVATE">
<short/>
</element>

<element name="SW_SHOW">
<short/>
</element>

<element name="SW_MINIMIZE">
<short/>
</element>

<element name="SW_SHOWMINNOACTIVE">
<short/>
</element>

<element name="SW_SHOWNA">
<short/>
</element>

<element name="SW_RESTORE">
<short/>
</element>

<element name="SW_SHOWDEFAULT">
<short/>
</element>

<element name="SW_MAX">
<short/>
</element>

<element name="SW_SHOWFULLSCREEN">
<short/>
<descr>
<p>
Defined for the LCL.
</p>
</descr>
</element>

<element name="RDW_INVALIDATE">
<short/>
</element>

<element name="RDW_INTERNALPAINT">
<short/>
</element>

<element name="RDW_ERASE">
<short/>
</element>

<element name="RDW_VALIDATE">
<short/>
</element>

<element name="RDW_NOINTERNALPAINT">
<short/>
</element>

<element name="RDW_NOERASE">
<short/>
</element>

<element name="RDW_NOCHILDREN">
<short/>
</element>

<element name="RDW_ALLCHILDREN">
<short/>
</element>

<element name="RDW_UPDATENOW">
<short/>
</element>

<element name="RDW_ERASENOW">
<short/>
</element>

<element name="RDW_FRAME">
<short/>
</element>

<element name="RDW_NOFRAME">
<short/>
</element>

<element name="DIB_RGB_COLORS">
<short/>
</element>

<element name="DIB_PAL_COLORS">
<short/>
</element>

<element name="GRADIENT_FILL_RECT_H">
<short/>
</element>

<element name="GRADIENT_FILL_RECT_V">
<short/>
</element>

<element name="GRADIENT_FILL_TRIANGLE">
<short/>
</element>

<element name="PNMHdr">
<short/>
</element>

<element name="tagNMHDR">
<short/>
</element>

<element name="tagNMHDR.hwndFrom">
<short/>
</element>

<element name="tagNMHDR.idFrom">
<short/>
</element>

<element name="tagNMHDR.code">
<short/>
</element>

<element name="TNMHdr">
<short/>
</element>

<element name="NMHDR">
<short/>
</element>

<element name="PScreenInfo">
<short/>
</element>

<element name="TScreenInfo">
<short/>
</element>

<element name="TScreenInfo.PixelsPerInchX">
<short/>
</element>

<element name="TScreenInfo.PixelsPerInchY">
<short/>
</element>

<element name="TScreenInfo.ColorDepth">
<short/>
</element>

<element name="TScreenInfo.Initialized">
<short/>
</element>

<element name="MONITOR_UNIMPL">
<short/>
</element>

<element name="MONITOR_DEFAULTTONULL">
<short/>
</element>

<element name="MONITOR_DEFAULTTOPRIMARY">
<short/>
</element>

<element name="MONITOR_DEFAULTTONEAREST">
<short/>
</element>

<element name="MONITORINFOF_PRIMARY">
<short/>
</element>

<element name="CCHDEVICENAME">
<short/>
</element>

<element name="tagMonitorInfo">
<short/>
</element>

<element name="tagMonitorInfo.cbSize">
<short/>
</element>

<element name="tagMonitorInfo.rcMonitor">
<short/>
</element>

<element name="tagMonitorInfo.rcWork">
<short/>
</element>

<element name="tagMonitorInfo.dwFlags">
<short/>
</element>

<element name="PMonitorInfo">
<short/>
</element>

<element name="TMonitorInfo">
<short/>
</element>

<element name="tagMonitorInfoEx">
<short/>
</element>

<element name="tagMonitorInfoEx.cbSize">
<short/>
</element>

<element name="tagMonitorInfoEx.rcMonitor">
<short/>
</element>

<element name="tagMonitorInfoEx.rcWork">
<short/>
</element>

<element name="tagMonitorInfoEx.dwFlags">
<short/>
</element>

<element name="tagMonitorInfoEx.szDevice">
<short/>
</element>

<element name="PMonitorInfoEx">
<short/>
</element>

<element name="TMonitorInfoEx">
<short/>
</element>

<element name="tagMonitorInfoExW">
<short/>
</element>

<element name="tagMonitorInfoExW.cbSize">
<short/>
</element>

<element name="tagMonitorInfoExW.rcMonitor">
<short/>
</element>

<element name="tagMonitorInfoExW.rcWork">
<short/>
</element>

<element name="tagMonitorInfoExW.dwFlags">
<short/>
</element>

<element name="tagMonitorInfoExW.szDevice">
<short/>
</element>

<element name="PMonitorInfoExW">
<short/>
</element>

<element name="TMonitorInfoExW">
<short/>
</element>

<element name="PDrawItemStruct">
<short/>
</element>

<element name="tagDrawItemStruct">
<short/>
</element>

<element name="tagDrawItemStruct.ctlType">
<short/>
</element>

<element name="tagDrawItemStruct.ctlID">
<short/>
</element>

<element name="tagDrawItemStruct.itemID">
<short/>
</element>

<element name="tagDrawItemStruct.itemAction">
<short/>
</element>

<element name="tagDrawItemStruct.itemState">
<short/>
</element>

<element name="tagDrawItemStruct.hwndItem">
<short/>
</element>

<element name="tagDrawItemStruct._hDC">
<short/>
</element>

<element name="tagDrawItemStruct.rcItem">
<short/>
</element>

<element name="tagDrawItemStruct.itemData">
<short/>
</element>

<element name="TDrawItemStruct">
<short>Alias to the tagDrawItemStruct type.</short>
</element>

<element name="DrawItemStruct">
<short>Alias to the tagDrawItemStruct type.</short>
</element>

<element name="TOwnerDrawStateType">
<short>
Defines values for owner-drawn states.
</short>
</element>

<element name="TOwnerDrawStateType.odSelected">
<short>Draw using the selected state.</short>
</element>

<element name="TOwnerDrawStateType.odGrayed">
<short>Draw using the grayed (indeterminate) state.</short>
</element>

<element name="TOwnerDrawStateType.odDisabled">
<short>Draw using the disabled state.</short>
</element>

<element name="TOwnerDrawStateType.odChecked">
<short>Draw using the checked state.</short>
</element>

<element name="TOwnerDrawStateType.odFocused">
<short>Draw using the focused state.</short>
</element>

<element name="TOwnerDrawStateType.odDefault">
<short>Draw using the default state.</short>
</element>

<element name="TOwnerDrawStateType.odHotLight">
<short>Draw using the hot-lighted (hot tracking) state.</short>
</element>

<element name="TOwnerDrawStateType.odInactive">
<short>Draw using the inactive state.</short>
</element>

<element name="TOwnerDrawStateType.odNoAccel">
<short>Draw without a defined accelerator key.</short>
</element>

<element name="TOwnerDrawStateType.odNoFocusRect">
<short>Draw without a focus rectangle.</short>
</element>

<element name="TOwnerDrawStateType.odReserved1">
<short>Reserved for use in widgetsets or 3rd party controls.</short>
</element>

<element name="TOwnerDrawStateType.odReserved2">
<short>Reserved for use in widgetsets or 3rd party controls.</short>
</element>

<element name="TOwnerDrawStateType.odComboBoxEdit">
<short>Draw using the style for the edit box on a comb-box control.</short>
</element>

<element name="TOwnerDrawStateType.odBackgroundPainted">
<short>
Indicates the background for a control has already been painted.
</short>
</element>

<element name="TOwnerDrawState">
<short>
Set type used for TOwnerDrawStateType values.
</short>
</element>

<element name="PDrawListItemStruct">
<short>
Pointer to the TDrawListItemStruct type.
</short>
</element>

<element name="TDrawListItemStruct">
<short/>
</element>

<element name="TDrawListItemStruct.ItemID">
<short/>
</element>

<element name="TDrawListItemStruct.Area">
<short/>
</element>

<element name="TDrawListItemStruct.DC">
<short/>
</element>

<element name="TDrawListItemStruct.ItemState">
<short/>
</element>

<element name="PMeasureItemStruct">
<short/>
</element>

<element name="TMeasureItemStruct">
<short/>
</element>

<element name="TMeasureItemStruct.CtlType">
<short/>
</element>

<element name="TMeasureItemStruct.CtlID">
<short/>
</element>

<element name="TMeasureItemStruct.itemID">
<short/>
</element>

<element name="TMeasureItemStruct.itemWidth">
<short/>
</element>

<element name="TMeasureItemStruct.itemHeight">
<short/>
</element>

<element name="TMeasureItemStruct.itemData">
<short/>
</element>

<element name="PPaintStruct">
<short/>
</element>

<element name="tagPAINTSTRUCT">
<short/>
</element>

<element name="tagPAINTSTRUCT.hdc">
<short/>
</element>

<element name="tagPAINTSTRUCT.fErase">
<short/>
</element>

<element name="tagPAINTSTRUCT.rcPaint">
<short/>
</element>

<element name="tagPAINTSTRUCT.fRestore">
<short/>
</element>

<element name="tagPAINTSTRUCT.fIncUpdate">
<short/>
</element>

<element name="tagPAINTSTRUCT.rgbReserved">
<short/>
</element>

<element name="TPaintStruct">
<short/>
</element>

<element name="PAINTSTRUCT">
<short/>
</element>

<element name="PWindowPos">
<short/>
</element>

<element name="tagWindowPos">
<short/>
</element>

<element name="tagWindowPos._hwnd">
<short/>
</element>

<element name="tagWindowPos.hwndInsertAfter">
<short/>
</element>

<element name="tagWindowPos.x">
<short/>
</element>

<element name="tagWindowPos.y">
<short/>
</element>

<element name="tagWindowPos.cx">
<short/>
</element>

<element name="tagWindowPos.cy">
<short/>
</element>

<element name="tagWindowPos.flags">
<short/>
</element>

<element name="TWindowPos">
<short>
Alias to the tagWindowPos type.
</short>
</element>

<element name="WindowPos">
<short>
Alias to the tagWindowPos type.
</short>
</element>

<element name="tagScrollInfo">
<short>The Scrollbar properties parameter record.</short>
<descr>
<p>This record is used with the GetScrollInfo and SetScrollInfo procedures.
before every call fMask must be initialized with the flags for the desired 
values:
</p>
<ul>
<li>SIF_DISABLENOSCROLL: when the new parameters make the scrollbar 
unnecessary,
the scrollbar is only disabled, not removed. (write only)
</li>
<li>SIF_PAGE: nPage contains the page size.
</li>
<li>SIF_POS: nPos contains the slider position.
</li>
<li>SIF_RANGE: nMin and nMax contain the scroll limits.
</li>
<li>SIF_TRACKPOS: nTrackPos contains the current slider position,
while the user is dragging the slider. (read only)
</li>
</ul>
<p/>
</descr>
<seealso>
<link id="#lcl.lclintf.GetScrollInfo">GetScrollInfo</link>
<link id="#lcl.lclintf.SetScrollInfo">SetScrollInfo</link>
</seealso>
</element>
<element name="tagScrollInfo.cbSize">
<short>Must be initialized to sizeof(TScrollInfo).</short>
</element>
<element name="tagScrollInfo.fMask">
<short>Contains the flags for the desired values.</short>
</element>
<element name="tagScrollInfo.nMin">
<short>The minimum Position value.</short>
</element>
<element name="tagScrollInfo.nMax">
<short>The maximum Position value.</short>
</element>
<element name="tagScrollInfo.nPage">
<short>The page size, equivalent to the slider size.</short>
</element>
<element name="tagScrollInfo.nPos">
<short>The slider position.</short>
</element>
<element name="tagScrollInfo.nTrackPos">
<short>The current position while the user is dragging the slider.</short>
</element>
<element link="#lcl.lcltype.tagScrollInfo" name="PScrollInfo"/>
<element link="#lcl.lcltype.tagScrollInfo" name="TScrollInfo"/>

<element link="#lcl.lcltype.tagPaletteEntry" name="PPaletteEntry"/>

<element name="tagPALETTEENTRY">
<short/>
</element>

<element name="tagPALETTEENTRY.peRed">
<short/>
</element>

<element name="tagPALETTEENTRY.peGreen">
<short/>
</element>

<element name="tagPALETTEENTRY.peBlue">
<short/>
</element>

<element name="tagPALETTEENTRY.peFlags">
<short/>
</element>

<element name="TPaletteEntry">
<short/>
</element>

<element name="PALETTEENTRY">
<short/>
</element>

<element name="PLogPalette">
<short/>
</element>

<element name="tagLOGPALETTE">
<short/>
</element>

<element name="tagLOGPALETTE.palVersion">
<short/>
</element>

<element name="tagLOGPALETTE.palNumEntries">
<short/>
</element>

<element name="tagLOGPALETTE.palPalEntry">
<short/>
</element>

<element name="LOGPALETTE">
<short/>
</element>

<element name="TLOGPALETTE">
<short/>
</element>

<element name="PTriVertex">
<short/>
</element>

<element name="tagTRIVERTEX">
<short/>
</element>

<element name="tagTRIVERTEX.x">
<short/>
</element>

<element name="tagTRIVERTEX.y">
<short/>
</element>

<element name="tagTRIVERTEX.Red">
<short/>
</element>

<element name="tagTRIVERTEX.Green">
<short/>
</element>

<element name="tagTRIVERTEX.Blue">
<short/>
</element>

<element name="tagTRIVERTEX.Alpha">
<short/>
</element>

<element name="TRIVERTEX">
<short>Alias to the tagTRIVERTEX type.</short>
</element>

<element name="TTriVertex">
<short>Alias to the TRIVERTEX type.</short>
</element>

<element name="PGradientTriangle">
<short>Pointer to the tagGradientTriangle type.</short>
</element>

<element name="tagGRADIENTTRIANGLE">
<short/>
</element>

<element name="tagGRADIENTTRIANGLE.Vertex1">
<short/>
</element>

<element name="tagGRADIENTTRIANGLE.Vertex2">
<short/>
</element>

<element name="tagGRADIENTTRIANGLE.Vertex3">
<short/>
</element>

<element name="GRADIENTTRIANGLE">
<short>Alias to the tagGRADIENTTRIANGLE type.</short>
</element>

<element name="TGradientTriangle">
<short>Alias to the GRADIENTTRIANGLE type.</short>
</element>

<element name="PGradientRect">
<short>Pointer to the tagGradientRect type.</short>
</element>

<element name="tagGRADIENTRECT">
<short/>
</element>

<element name="tagGRADIENTRECT.UpperLeft">
<short/>
</element>

<element name="tagGRADIENTRECT.LowerRight">
<short/>
</element>

<element name="GRADIENTRECT">
<short>Alias to the tagGRADIENTRECT type.</short>
</element>

<element name="TGradientRect">
<short>Alias to the GRADIENTRECT type.</short>
</element>

<element name="PBitmap">
<short>Pointer to the TagBitmap type.</short>
</element>

<element name="tagBITMAP">
<short/>
</element>

<element name="tagBITMAP.bmType">
<short/>
</element>

<element name="tagBITMAP.bmWidth">
<short/>
</element>

<element name="tagBITMAP.bmHeight">
<short/>
</element>

<element name="tagBITMAP.bmWidthBytes">
<short/>
</element>

<element name="tagBITMAP.bmPlanes">
<short/>
</element>

<element name="tagBITMAP.bmBitsPixel">
<short/>
</element>

<element name="tagBITMAP.bmBits">
<short/>
</element>

<element name="BITMAP">
<short>Alias to the tagBITMAP type.</short>
</element>

<element name="PBitmapCoreHeader">
<short>Pointer to the TBitmapCoreHeader type.</short>
</element>

<element name="tagBITMAPCOREHEADER">
<short/>
</element>

<element name="tagBITMAPCOREHEADER.bcSize">
<short/>
</element>

<element name="tagBITMAPCOREHEADER.bcWidth">
<short/>
</element>

<element name="tagBITMAPCOREHEADER.bcHeight">
<short/>
</element>

<element name="tagBITMAPCOREHEADER.bcPlanes">
<short/>
</element>

<element name="tagBITMAPCOREHEADER.bcBitCount">
<short/>
</element>

<element name="TBitmapCoreHeader">
<short>Alias to the tagBITMAPCOREHEADER type.</short>
</element>

<element name="BITMAPCOREHEADER">
<short>Alias to the tagBITMAPCOREHEADER type.</short>
</element>

<element name="PBitmapInfoHeader">
<short>Pointer to the TBitmapInfoHeader type.</short>
</element>

<element name="tagBITMAPINFOHEADER">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biSize">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biWidth">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biHeight">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biPlanes">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biBitCount">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biCompression">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biSizeImage">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biXPelsPerMeter">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biYPelsPerMeter">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biClrUsed">
<short/>
</element>

<element name="tagBITMAPINFOHEADER.biClrImportant">
<short/>
</element>

<element name="TBitmapInfoHeader">
<short/>
</element>

<element name="BITMAPINFOHEADER">
<short/>
</element>

<element name="PRGBTriple">
<short/>
</element>

<element name="tagRGBTRIPLE">
<short/>
</element>

<element name="tagRGBTRIPLE.rgbtBlue">
<short/>
</element>

<element name="tagRGBTRIPLE.rgbtGreen">
<short/>
</element>

<element name="tagRGBTRIPLE.rgbtRed">
<short/>
</element>

<element name="TRGBTriple">
<short/>
</element>

<element name="RGBTRIPLE">
<short/>
</element>

<element name="PRGBQUAD">
<short/>
</element>

<element name="tagRGBQUAD">
<short/>
</element>

<element name="tagRGBQUAD.rgbBlue">
<short/>
</element>

<element name="tagRGBQUAD.rgbGreen">
<short/>
</element>

<element name="tagRGBQUAD.rgbRed">
<short/>
</element>

<element name="tagRGBQUAD.rgbReserved">
<short/>
</element>

<element name="TRGBQuad">
<short/>
</element>

<element name="RGBQUAD">
<short/>
</element>

<element name="TRGBAQuad">
<short/>
</element>

<element name="TRGBAQuad.Blue">
<short/>
</element>

<element name="TRGBAQuad.Green">
<short/>
</element>

<element name="TRGBAQuad.Red">
<short/>
</element>

<element name="TRGBAQuad.Alpha">
<short/>
</element>

<element name="PRGBAQuad">
<short/>
</element>

<element name="PBitmapInfo">
<short/>
</element>

<element name="tagBITMAPINFO">
<short/>
</element>

<element name="tagBITMAPINFO.bmiHeader">
<short/>
</element>

<element name="tagBITMAPINFO.bmiColors">
<short/>
</element>

<element name="TBitmapInfo">
<short/>
</element>

<element name="BITMAPINFO">
<short/>
</element>

<element name="PBitmapCoreInfo">
<short/>
</element>

<element name="tagBITMAPCOREINFO">
<short/>
</element>

<element name="tagBITMAPCOREINFO.bmciHeader">
<short/>
</element>

<element name="tagBITMAPCOREINFO.bmciColors">
<short/>
</element>

<element name="tagBITMAPCOREINFO.Reserved">
<short/>
</element>

<element name="TBitmapCoreInfo">
<short/>
</element>

<element name="BITMAPCOREINFO">
<short/>
</element>

<element name="PBitmapFileHeader">
<short/>
</element>

<element name="tagBITMAPFILEHEADER">
<short/>
</element>

<element name="tagBITMAPFILEHEADER.bfType">
<short/>
</element>

<element name="tagBITMAPFILEHEADER.bfSize">
<short/>
</element>

<element name="tagBITMAPFILEHEADER.bfReserved1">
<short/>
</element>

<element name="tagBITMAPFILEHEADER.bfReserved2">
<short/>
</element>

<element name="tagBITMAPFILEHEADER.bfOffBits">
<short/>
</element>

<element name="TBitmapFileHeader">
<short/>
</element>

<element name="BITMAPFILEHEADER">
<short/>
</element>

<element name="PDIBSection">
<short/>
</element>

<element name="tagDIBSECTION">
<short/>
</element>

<element name="tagDIBSECTION.dsBm">
<short/>
</element>

<element name="tagDIBSECTION.dsBmih">
<short/>
</element>

<element name="tagDIBSECTION.dsBitfields">
<short/>
</element>

<element name="tagDIBSECTION.dshSection">
<short/>
</element>

<element name="tagDIBSECTION.dsOffset">
<short/>
</element>

<element name="TDIBSection">
<short/>
</element>

<element name="DIBSECTION">
<short/>
</element>

<element name="tagHELPINFO">
<short/>
</element>

<element name="tagHELPINFO.cbSize">
<short/>
</element>

<element name="tagHELPINFO.iContextType">
<short/>
</element>

<element name="tagHELPINFO.iCtrlId">
<short/>
</element>

<element name="tagHELPINFO.hItemHandle">
<short/>
</element>

<element name="tagHELPINFO.dwContextId">
<short/>
</element>

<element name="tagHELPINFO.MousePos">
<short/>
</element>

<element name="THelpInfo">
<short/>
</element>

<element name="PHelpInfo">
<short/>
</element>

<element name="RASTER_FONTTYPE">
<short/>
</element>

<element name="DEVICE_FONTTYPE">
<short/>
</element>

<element name="TRUETYPE_FONTTYPE">
<short/>
</element>

<element name="GCP_DBCS">
<short/>
</element>

<element name="HELPINFO_WINDOW">
<short/>
</element>

<element name="HELPINFO_MENUITEM">
<short/>
</element>

<element name="HELP_CONTEXT">
<short/>
</element>

<element name="HELP_COMMAND">
<short/>
</element>

<element name="TRANSPARENT">
<short/>
</element>

<element name="OPAQUE">
<short/>
</element>

<element name="BKMODE_LAST">
<short/>
</element>

<element name="LF_FULLFACESIZE">
<short/>
</element>

<element name="LF_FACESIZE">
<short/>
</element>

<element name="OUT_DEFAULT_PRECIS">
<short/>
</element>

<element name="OUT_STRING_PRECIS">
<short/>
</element>

<element name="OUT_CHARACTER_PRECIS">
<short/>
</element>

<element name="OUT_STROKE_PRECIS">
<short/>
</element>

<element name="OUT_TT_PRECIS">
<short/>
</element>

<element name="OUT_DEVICE_PRECIS">
<short/>
</element>

<element name="OUT_RASTER_PRECIS">
<short/>
</element>

<element name="OUT_TT_ONLY_PRECIS">
<short/>
</element>

<element name="OUT_OUTLINE_PRECIS">
<short/>
</element>

<element name="OUT_SCREEN_OUTLINE_PRECIS">
<short/>
</element>

<element name="CLIP_DEFAULT_PRECIS">
<short/>
</element>

<element name="CLIP_CHARACTER_PRECIS">
<short/>
</element>

<element name="CLIP_STROKE_PRECIS">
<short/>
</element>

<element name="CLIP_MASK">
<short/>
</element>

<element name="CLIP_LH_ANGLES">
<short/>
</element>

<element name="CLIP_TT_ALWAYS">
<short/>
</element>

<element name="CLIP_EMBEDDED">
<short/>
</element>

<element name="DEFAULT_QUALITY">
<short/>
</element>

<element name="DRAFT_QUALITY">
<short/>
</element>

<element name="PROOF_QUALITY">
<short/>
</element>

<element name="NONANTIALIASED_QUALITY">
<short/>
</element>

<element name="ANTIALIASED_QUALITY">
<short/>
</element>

<element name="CLEARTYPE_QUALITY">
<short/>
</element>

<element name="CLEARTYPE_NATURAL_QUALITY">
<short/>
</element>

<element name="DEFAULT_PITCH">
<short/>
</element>

<element name="FIXED_PITCH">
<short/>
</element>

<element name="VARIABLE_PITCH">
<short/>
</element>

<element name="MONO_FONT">
<short/>
</element>

<element name="ANSI_CHARSET">
<short/>
</element>

<element name="DEFAULT_CHARSET">
<short/>
</element>

<element name="SYMBOL_CHARSET">
<short/>
</element>

<element name="FCS_ISO_10646_1">
<short/>
</element>

<element name="FCS_ISO_8859_1">
<short/>
</element>

<element name="FCS_ISO_8859_2">
<short/>
</element>

<element name="FCS_ISO_8859_3">
<short/>
</element>

<element name="FCS_ISO_8859_4">
<short/>
</element>

<element name="FCS_ISO_8859_5">
<short/>
</element>

<element name="FCS_ISO_8859_6">
<short/>
</element>

<element name="FCS_ISO_8859_7">
<short/>
</element>

<element name="FCS_ISO_8859_8">
<short/>
</element>

<element name="FCS_ISO_8859_9">
<short/>
</element>

<element name="FCS_ISO_8859_10">
<short/>
</element>

<element name="FCS_ISO_8859_15">
<short/>
</element>

<element name="MAC_CHARSET">
<short/>
</element>

<element name="SHIFTJIS_CHARSET">
<short/>
</element>

<element name="HANGEUL_CHARSET">
<short/>
</element>

<element name="JOHAB_CHARSET">
<short/>
</element>

<element name="GB2312_CHARSET">
<short/>
</element>

<element name="CHINESEBIG5_CHARSET">
<short/>
</element>

<element name="GREEK_CHARSET">
<short/>
</element>

<element name="TURKISH_CHARSET">
<short/>
</element>

<element name="VIETNAMESE_CHARSET">
<short/>
</element>

<element name="HEBREW_CHARSET">
<short/>
</element>

<element name="ARABIC_CHARSET">
<short/>
</element>

<element name="BALTIC_CHARSET">
<short/>
</element>

<element name="RUSSIAN_CHARSET">
<short/>
</element>

<element name="THAI_CHARSET">
<short/>
</element>

<element name="EASTEUROPE_CHARSET">
<short/>
</element>

<element name="OEM_CHARSET">
<short/>
</element>

<element name="FS_LATIN1">
<short/>
</element>

<element name="FS_LATIN2">
<short/>
</element>

<element name="FS_CYRILLIC">
<short/>
</element>

<element name="FS_GREEK">
<short/>
</element>

<element name="FS_TURKISH">
<short/>
</element>

<element name="FS_HEBREW">
<short/>
</element>

<element name="FS_ARABIC">
<short/>
</element>

<element name="FS_BALTIC">
<short/>
</element>

<element name="FS_VIETNAMESE">
<short/>
</element>

<element name="FS_THAI">
<short/>
</element>

<element name="FS_JISJAPAN">
<short/>
</element>

<element name="FS_CHINESESIMP">
<short/>
</element>

<element name="FS_WANSUNG">
<short/>
</element>

<element name="FS_CHINESETRAD">
<short/>
</element>

<element name="FS_JOHAB">
<short/>
</element>

<element name="FS_SYMBOL">
<short/>
</element>

<element name="FF_DONTCARE">
<short/>
</element>

<element name="FF_ROMAN">
<short/>
</element>

<element name="FF_SWISS">
<short/>
</element>

<element name="FF_MODERN">
<short/>
</element>

<element name="FF_SCRIPT">
<short/>
</element>

<element name="FF_DECORATIVE">
<short/>
</element>

<!-- font weight constants -->
<element name="FW_DONTCARE">
<short>Font weight is 0.</short>
</element>

<element name="FW_THIN">
<short>Font weight is 100.</short>
</element>

<element name="FW_EXTRALIGHT">
<short>Font weight is 200.</short>
</element>

<element name="FW_ULTRALIGHT">
<short>Font weight is 200.</short>
</element>

<element name="FW_LIGHT">
<short>Font weight is 300.</short>
</element>

<element name="FW_NORMAL">
<short>Font weight is 400.</short>
</element>

<element name="FW_REGULAR">
<short>Font weight is 400.</short>
</element>

<element name="FW_MEDIUM">
<short>Font weight is 500.</short>
</element>

<element name="FW_SEMIBOLD">
<short>Font weight is 600.</short>
</element>

<element name="FW_DEMIBOLD">
<short>Font weight is 600.</short>
</element>

<element name="FW_BOLD">
<short>Font weight is 700.</short>
</element>

<element name="FW_EXTRABOLD">
<short>Font weight is 800.</short>
</element>

<element name="FW_ULTRABOLD">
<short>Font weight is 800.</short>
</element>

<element name="FW_HEAVY">
<short>Font weight is 900.</short>
</element>

<element name="FW_BLACK">
<short>Font weight is 900.</short>
</element>

<element name="FOUNDRYCHAR_OPEN">
<short>
Character used to denote the start of a Foundry name in a font family.
</short>
</element>

<element name="FOUNDRYCHAR_CLOSE">
<short>
Character used to denote the end of a Foundry name in a font family.
</short>
</element>

<!-- X logical font description (XLFD) constants -->
<element name="XLFD_FONTNAME_REG">
<short>Represents a registered XLFD font name.</short>
</element>

<element name="XLFD_FOUNDRY">
<short>
Represents the foundry name segment in an XLFD font descriptor.
</short>
</element>

<element name="XLFD_FAMILY">
<short>
Represents the font family name segment in an XLFD font descriptor.
</short>
</element>

<element name="XLFD_WEIGHTNAME">
<short>
Represents the font weight name segment (like medium, bold, or light) in an 
XLFD font descriptor.
</short>
</element>

<element name="XLFD_SLANT">
<short>
Represents the slant name segment (like upright, italic, oblique, reverse 
italic, reverse oblique, or "other" - with a value often abbreviated to a 
single character) in an XLFD font descriptor.
</short>
</element>

<element name="XLFD_WIDTHNAME">
<short>
Represents the proportional width name segment (like normal, condensed, 
narrow, expanded/double-wide) in an XLFD font descriptor.
</short>
</element>

<element name="XLFD_STYLENAME">
<short>
Represents the style name segment (like sans, sans serif, informal or 
decorated) in an XLFD font descriptor.
</short>
</element>

<element name="XLFD_PIXELSIZE">
<short>
Size for the characters in the font (in pixels), or 0 for a scalable font.
</short>
</element>

<element name="XLFD_POINTSIZE">
<short>
Size for the characters in the font (in tenths of a point).
</short>
</element>

<element name="XLFD_RESX">
<short>
Horizontal resolution in dots per inch (DPI) for which the font was designed.
</short>
</element>

<element name="XLFD_RESY">
<short>
Vertical resolution in dots per inch (DPI) for which the font was designed.
</short>
</element>

<element name="XLFD_SPACING">
<short>
Represents the spacing segment (like monospaced, proportional, or "character 
cell") in an XLFD font descriptor.
</short>
</element>

<element name="XLFD_AVG_WIDTH">
<short>
Average width for the characters in the font, or 0 for a scalable font.
</short>
</element>

<element name="XLFD_CHARSET_REG">
<short>
Represents the registry name segment (like ISO8859) in an XLFD font descriptor.
</short>
</element>

<element name="XLFD_CHARSET_COD">
<short>
Represents the character set encoding segment for the registry in an XLFD font 
descriptor.
</short>
</element>

<!-- brush style constants -->
<element name="BS_SOLID">
<short/>
</element>

<element name="BS_NULL">
<short/>
</element>

<element name="BS_HOLLOW">
<short/>
</element>

<element name="BS_HATCHED">
<short/>
</element>

<element name="BS_PATTERN">
<short/>
</element>

<element name="BS_INDEXED">
<short/>
</element>

<element name="BS_DIBPATTERN">
<short/>
</element>

<element name="BS_DIBPATTERNPT">
<short/>
</element>

<element name="BS_PATTERN8X8">
<short/>
</element>

<element name="BS_DIBPATTERN8X8">
<short/>
</element>

<element name="BS_MONOPATTERN">
<short/>
</element>

<element name="HS_HORIZONTAL">
<short/>
</element>

<element name="HS_VERTICAL">
<short/>
</element>

<element name="HS_FDIAGONAL">
<short/>
</element>

<element name="HS_BDIAGONAL">
<short/>
</element>

<element name="HS_CROSS">
<short/>
</element>

<element name="HS_DIAGCROSS">
<short/>
</element>

<element name="PS_SOLID">
<short/>
</element>

<element name="PS_DASH">
<short/>
</element>

<element name="PS_DOT">
<short/>
</element>

<element name="PS_DASHDOT">
<short/>
</element>

<element name="PS_DASHDOTDOT">
<short/>
</element>

<element name="PS_NULL">
<short/>
</element>

<element name="PS_INSIDEFRAME">
<short/>
</element>

<element name="PS_USERSTYLE">
<short/>
</element>

<element name="PS_ALTERNATE">
<short/>
</element>

<element name="PS_STYLE_MASK">
<short/>
</element>

<element name="PS_ENDCAP_ROUND">
<short/>
</element>

<element name="PS_ENDCAP_SQUARE">
<short/>
</element>

<element name="PS_ENDCAP_FLAT">
<short/>
</element>

<element name="PS_ENDCAP_MASK">
<short/>
</element>

<element name="PS_JOIN_ROUND">
<short/>
</element>

<element name="PS_JOIN_BEVEL">
<short/>
</element>

<element name="PS_JOIN_MITER">
<short/>
</element>

<element name="PS_JOIN_MASK">
<short/>
</element>

<element name="PS_COSMETIC">
<short/>
</element>

<element name="PS_GEOMETRIC">
<short/>
</element>

<element name="PS_TYPE_MASK">
<short/>
</element>

<element name="MM_TEXT">
<short/>
</element>

<element name="MM_LOMETRIC">
<short/>
</element>

<element name="MM_HIMETRIC">
<short/>
</element>

<element name="MM_LOENGLISH">
<short/>
</element>

<element name="MM_HIENGLISH">
<short/>
</element>

<element name="MM_TWIPS">
<short/>
</element>

<element name="MM_ISOTROPIC">
<short/>
</element>

<element name="MM_ANISOTROPIC">
<short/>
</element>

<element name="COLORREF">
<short>Represents color constants in the LCL.</short>
<descr>
<p>
COLORREF is the type used for color constants defined in the LCL. It is 
interchangeable with the TColorRef type; COLORREF is an alias for TColorRef in 
the RTL System.UITypes unit.
</p>
<p>
The base type used for the definition is dependent on the compiler version 
used to build the LCL. Starting in FPC version 3.2.3, the base type is the 
TColorRef type defined in the System.UITypes namespace in the FPC run-time 
library (RTL).
</p>
<p>
Values in COLORREF (and TColorRef) are normally OR-ed with the value 
$80000000 to prevent interference with other MS color enumeration values.
</p>
</descr>
<seealso>
<link id="TColorRef"/>
<!-- TODO: Uncomment when rtl.system.uitypes is available. -->
<!-- link id="#rtl.system.uitypes.TColorRef"/ -->
</seealso>
</element>

<element name="TColorRef">
<short>Represents color constants in the LCL.</short>
<descr>
<p>
TColorRef is an alias for the COLORREF type, and is used for color constants 
defined in the LCL.
</p>
<p>
Values from 0..$FFFFFF are BGR colors. The lowest 8 bit are the blue 
component, the middle 8 bit the green component and the highest 8 bit the red 
component. Use the functions Red, Green, Blue to extract the components, 
RedGreenBlue to extract all three components and RGBToColor to convert the 
three colors to a TColor.
</p>
<p>
Values with highest bit set are system colors or themed colors. For example 
clNone, clBackground, clButton, clWindowText. Their actual value depend on 
the context (i.e. the used Canvas) and they are not valid in all contexts. 
For example clWindowText might only work for Font.Color, not for Brush.Color 
or Pen.Color. clBackground might be a color, gradient, pattern or image, 
depending on theme and control type.
</p>
<p>
A system color can change during run-time, so do not store them. Use system 
colors only on LCL control Canvas. They probably are not defined for printer 
canvas and some are not defined on bitmap canvas.
</p>
</descr>
<seealso>
<link id="COLORREF"/>
</seealso>
</element>

<element name="CLR_NONE">
<short>Cardinal color value used for no color.</short>
</element>

<element name="CLR_DEFAULT">
<short>Mask used to check for the default color value.</short>
</element>

<element name="CLR_INVALID">
<short>Same as CLR_NONE</short>
</element>

<element name="COLOR_SCROLLBAR">
<short>Offset into the system color map for the scroll bar color.</short>
</element>

<element name="COLOR_BACKGROUND">
<short>Offset into the system color map for the background color.</short>
</element>

<element name="COLOR_ACTIVECAPTION">
<short>Offset into the system color map for the active caption color.</short>
</element>

<element name="COLOR_INACTIVECAPTION">
<short>
Offset into the system color map for the inactive caption color.
</short>
</element>

<element name="COLOR_MENU">
<short>Offset into the system color map for the menu color.</short>
</element>

<element name="COLOR_WINDOW">
<short>Offset into the system color map for the window color.</short>
</element>

<element name="COLOR_WINDOWFRAME">
<short>
Offset into the system color map for the window frame or border color.
</short>
</element>

<element name="COLOR_MENUTEXT">
<short>Offset into the system color map for the menu text color.</short>
</element>

<element name="COLOR_WINDOWTEXT">
<short>Offset into the system color map for the window text color.</short>
</element>

<element name="COLOR_CAPTIONTEXT">
<short>Offset into the system color map for the caption text color.</short>
</element>

<element name="COLOR_ACTIVEBORDER">
<short/>
</element>

<element name="COLOR_INACTIVEBORDER">
<short>Offset into the system color map for the inactive border color.</short>
</element>

<element name="COLOR_APPWORKSPACE">
<short>Offset into the system color map for the workspace color.</short>
</element>

<element name="COLOR_HIGHLIGHT">
<short>Offset into the system color map for the highlight color.</short>
</element>

<element name="COLOR_HIGHLIGHTTEXT">
<short>
Offset into the system color map for the highlighted text color.
</short>
</element>

<element name="COLOR_BTNFACE">
<short>Offset into the system color map for the button face color.</short>
</element>

<element name="COLOR_BTNSHADOW">
<short>Offset into the system color map for the button shadow color.</short>
</element>

<element name="COLOR_GRAYTEXT">
<short>
Offset into the system color map for the grayed or inactive text color.
</short>
</element>

<element name="COLOR_BTNTEXT">
<short>Offset into the system color map for the button text color.</short>
</element>

<element name="COLOR_INACTIVECAPTIONTEXT">
<short/>
</element>

<element name="COLOR_BTNHIGHLIGHT">
<short/>
</element>

<element name="COLOR_3DDKSHADOW">
<short/>
</element>

<element name="COLOR_3DLIGHT">
<short/>
</element>

<element name="COLOR_INFOTEXT">
<short/>
</element>

<element name="COLOR_INFOBK">
<short/>
</element>

<element name="COLOR_HOTLIGHT">
<short/>
</element>

<element name="COLOR_GRADIENTACTIVECAPTION">
<short/>
</element>

<element name="COLOR_GRADIENTINACTIVECAPTION">
<short/>
</element>

<element name="COLOR_MENUHILIGHT">
<short/>
</element>

<element name="COLOR_MENUBAR">
<short/>
</element>

<element name="COLOR_FORM">
<short/>
</element>

<element name="COLOR_clForeground">
<short/>
</element>

<element name="COLOR_clButton">
<short/>
</element>

<element name="COLOR_clLight">
<short/>
</element>

<element name="COLOR_clMidlight">
<short/>
</element>

<element name="COLOR_clDark">
<short/>
</element>

<element name="COLOR_clMid">
<short/>
</element>

<element name="COLOR_clText">
<short/>
</element>

<element name="COLOR_clBrightText">
<short/>
</element>

<element name="COLOR_clButtonText">
<short/>
</element>

<element name="COLOR_clBase">
<short/>
</element>

<element name="COLOR_clShadow">
<short/>
</element>

<element name="COLOR_clHighlightedText">
<short/>
</element>

<element name="COLOR_clNormalForeground">
<short/>
</element>

<element name="COLOR_clNormalButton">
<short/>
</element>

<element name="COLOR_clNormalLight">
<short/>
</element>

<element name="COLOR_clNormalMidlight">
<short/>
</element>

<element name="COLOR_clNormalDark">
<short/>
</element>

<element name="COLOR_clNormalMid">
<short/>
</element>

<element name="COLOR_clNormalText">
<short/>
</element>

<element name="COLOR_clNormalBrightText">
<short/>
</element>

<element name="COLOR_clNormalButtonText">
<short/>
</element>

<element name="COLOR_clNormalBase">
<short/>
</element>

<element name="COLOR_clNormalBackground">
<short/>
</element>

<element name="COLOR_clNormalShadow">
<short/>
</element>

<element name="COLOR_clNormalHighlight">
<short/>
</element>

<element name="COLOR_clNormalHighlightedText">
<short/>
</element>

<element name="COLOR_clDisabledForeground">
<short/>
</element>

<element name="COLOR_clDisabledButton">
<short/>
</element>

<element name="COLOR_clDisabledLight">
<short/>
</element>

<element name="COLOR_clDisabledMidlight">
<short/>
</element>

<element name="COLOR_clDisabledDark">
<short/>
</element>

<element name="COLOR_clDisabledMid">
<short/>
</element>

<element name="COLOR_clDisabledText">
<short/>
</element>

<element name="COLOR_clDisabledBrightText">
<short/>
</element>

<element name="COLOR_clDisabledButtonText">
<short/>
</element>

<element name="COLOR_clDisabledBase">
<short/>
</element>

<element name="COLOR_clDisabledBackground">
<short/>
</element>

<element name="COLOR_clDisabledShadow">
<short/>
</element>

<element name="COLOR_clDisabledHighlight">
<short/>
</element>

<element name="COLOR_clDisabledHighlightedText">
<short/>
</element>

<element name="COLOR_clActiveForeground">
<short/>
</element>

<element name="COLOR_clActiveButton">
<short/>
</element>

<element name="COLOR_clActiveLight">
<short/>
</element>

<element name="COLOR_clActiveMidlight">
<short/>
</element>

<element name="COLOR_clActiveDark">
<short/>
</element>

<element name="COLOR_clActiveMid">
<short/>
</element>

<element name="COLOR_clActiveText">
<short/>
</element>

<element name="COLOR_clActiveBrightText">
<short/>
</element>

<element name="COLOR_clActiveButtonText">
<short/>
</element>

<element name="COLOR_clActiveBase">
<short/>
</element>

<element name="COLOR_clActiveBackground">
<short/>
</element>

<element name="COLOR_clActiveShadow">
<short/>
</element>

<element name="COLOR_clActiveHighlight">
<short/>
</element>

<element name="COLOR_clActiveHighlightedText">
<short/>
</element>

<element name="COLOR_ENDCOLORS">
<short/>
</element>

<element name="COLOR_DESKTOP">
<short/>
</element>

<element name="COLOR_3DFACE">
<short/>
</element>

<element name="COLOR_3DSHADOW">
<short/>
</element>

<element name="COLOR_3DHIGHLIGHT">
<short/>
</element>

<element name="COLOR_3DHILIGHT">
<short/>
</element>

<element name="COLOR_BTNHILIGHT">
<short/>
</element>

<element name="MAX_SYS_COLORS">
<short>Maximum number of system colors.</short>
<descr>
<p>
Same as COLOR_ENDCOLORS.
</p>
</descr>
</element>

<element name="SYS_COLOR_BASE">
<short/>
</element>

<element name="WHITE_BRUSH">
<short>Represents the stock object for a white brush.</short>
</element>

<element name="LTGRAY_BRUSH">
<short>Represents the stock object for a light gray brush.</short>
</element>

<element name="GRAY_BRUSH">
<short>Represents the stock object for a gray brush.</short>
</element>

<element name="DKGRAY_BRUSH">
<short>Represents the stock object for a dark gray brush.</short>
</element>

<element name="BLACK_BRUSH">
<short>Represents the stock object for a black brush.</short>
</element>

<element name="NULL_BRUSH">
<short>Represents the stock object for an undefined brush.</short>
</element>

<element name="HOLLOW_BRUSH">
<short>Same as NULL_BRUSH.</short>
</element>

<element name="WHITE_PEN">
<short>Represents the stock object for a white pen.</short>
</element>

<element name="BLACK_PEN">
<short>Represents the stock object for a black pen.</short>
</element>

<element name="NULL_PEN">
<short>Represents an undefined pen.</short>
</element>

<element name="OEM_FIXED_FONT">
<short>Represents the stock object for an OEM fixed-pitch font.</short>
</element>

<element name="ANSI_FIXED_FONT">
<short>Represents the stock object for an ANSI fixed-pitch font.</short>
</element>

<element name="ANSI_VAR_FONT">
<short>Represents the stock object for an ANSI variable-pitch font.</short>
</element>

<element name="SYSTEM_FONT">
<short>Represents the stock object for the system font.</short>
</element>

<element name="DEVICE_DEFAULT_FONT">
<short>Represents the stock object for a default device font.</short>
</element>

<element name="DEFAULT_PALETTE">
<short>
Represents the stock object for the default system color palette.
</short>
</element>

<element name="SYSTEM_FIXED_FONT">
<short>Represents the stock object for the fixed-pitch system font.</short>
</element>

<element name="DEFAULT_GUI_FONT">
<short>Represents the stock object for the default GUI font.</short>
</element>

<element name="DC_BRUSH">
<short>Represents the stock object with a device context for a brush.</short>
</element>

<element name="DC_PEN">
<short>Represents the stock object with a device context for a pen.</short>
</element>

<element name="STOCK_LAST">
<short>Upper limit for stock object index definitions.</short>
</element>

<element name="idButtonBase">
<short>Lower limit for the stock pixmap type indexes.</short>
</element>

<element name="idButtonOk">
<short>Identifier for the stock image used on an OK button.</short>
</element>

<element name="idButtonCancel">
<short>Identifier for the stock image used on a Cancel button.</short>
</element>

<element name="idButtonHelp">
<short>Identifier for the stock image used on a Help button.</short>
</element>

<element name="idButtonYes">
<short>Identifier for the stock image used on a Yes button.</short>
</element>

<element name="idButtonNo">
<short>Identifier for the stock image used on a No button.</short>
</element>

<element name="idButtonClose">
<short>Identifier for the stock image used on a Close button.</short>
</element>

<element name="idButtonAbort">
<short>Identifier for the stock image used on a Abort button.</short>
</element>

<element name="idButtonRetry">
<short>Identifier for the stock image used on a Retry button.</short>
</element>

<element name="idButtonIgnore">
<short>Identifier for the stock image used on an Ignore button.</short>
</element>

<element name="idButtonAll">
<short>Identifier for the stock image used on an All button.</short>
</element>

<element name="idButtonYesToAll">
<short>
Identifier for the stock image used on a "Yes to All" button.
</short>
</element>

<element name="idButtonNoToAll">
<short>
Identifier for the stock image used on a "No to All" button.
</short>
</element>

<element name="idButtonOpen">
<short>Identifier for the stock image used on an Open button.</short>
</element>

<element name="idButtonSave">
<short>Identifier for the stock image used on a Save button.</short>
</element>

<element name="idButtonShield">
<short>
Identifier for the stock image used on a button with a Shield glyph.
</short>
</element>

<element name="idButtonContinue">
<short>Identifier for the stock image used on a Continue button.</short>
<version>
Added in LCL 4.0.
</version>
</element>

<element name="idButtonTryAgain">
<short>
Identifier for the stock image used on a "Try Again" button.
</short>
<version>
Added in LCL 4.0.
</version>
</element>

<element name="idDialogBase">
<short>Lower limit for identifier used as dialog glyphs.</short>
</element>

<element name="idDialogWarning">
<short>Identifier for the stock image used on a Warning dialog.</short>
</element>

<element name="idDialogError">
<short>Identifier for the stock image used on an Error dialog.</short>
</element>

<element name="idDialogInfo">
<short>Identifier for the stock image used on an Information dialog.</short>
</element>

<element name="idDialogConfirm">
<short>Identifier for the stock image used on a Confirm dialog.</short>
</element>

<element name="idDialogShield">
<short>Identifier for the stock image used on a Shield dialog.</short>
</element>

<!-- device context (DC) object types -->
<element name="OBJ_PEN">
<short>Device context object type for a pen.</short>
</element>

<element name="OBJ_BRUSH">
<short>Device context object type for a brush.</short>
</element>

<element name="OBJ_DC">
<short>Device context object type for a device handle.</short>
</element>

<element name="OBJ_METADC">
<short>Device context object type for a device handle with metadata.</short>
</element>

<element name="OBJ_PAL">
<short>Device context object type for a palette.</short>
</element>

<element name="OBJ_FONT">
<short>Device context object type for a font.</short>
</element>

<element name="OBJ_BITMAP">
<short>Device context object type for a bitmap image.</short>
</element>

<element name="OBJ_REGION">
<short>Device context object type for a region.</short>
</element>

<element name="OBJ_METAFILE">
<short>Device context object type for a metafile (.wmf).</short>
</element>

<element name="OBJ_MEMDC">
<short>Device context object type for a Memory DC.</short>
</element>

<element name="OBJ_EXTPEN">
<short>Device context object type for an Extended Pen DC.</short>
</element>

<element name="OBJ_ENHMETADC">
<short>Device context object type for an Enhanced Metafile DC.</short>
</element>

<element name="OBJ_ENHMETAFILE">
<short>Device context object type for an Enhanced Metafile (.emf).</short>
</element>

<element name="OBJ_COLORSPACE">
<short>
Device context object type for a ColorSpace structure (tagEMRCREATECOLORSPACE).
</short>
</element>

<element name="SM_CXSCREEN">
<short>
System metric index used to get the width in pixels of the screen for the 
primary display monitor.
</short>
</element>

<element name="SM_CYSCREEN">
<short>
System metric index used to get the height in pixels of the screen for the 
primary display monitor.
</short>
</element>

<element name="SM_CXVSCROLL">
<short>
System metric index used to get the width of a vertical scroll bar in pixels.
</short>
</element>

<element name="SM_CYHSCROLL">
<short>
System metric index used to get the height of a horizontal scroll bar in 
pixels.
</short>
</element>

<element name="SM_CYCAPTION">
<short>
System metric index used to get the height of the caption area in pixels.
</short>
</element>

<element name="SM_CXBORDER">
<short>
System metric index used to get the width of the window border in pixels. 
Same as SM_CXEDGE when the windows uses 3-D borders.
</short>
</element>

<element name="SM_CYBORDER">
<short>
System metric index used to get the height of the window border in pixels. 
Same as SM_CYEDGE when the windows uses 3-D borders.
</short>
</element>

<element name="SM_CXDLGFRAME">
<short>Same as SM_CXFIXEDFRAME.</short>
</element>

<element name="SM_CYDLGFRAME">
<short>Same as SM_CYFIXEDFRAME.</short>
</element>

<element name="SM_CYVTHUMB">
<short>
System metric index used to get the height for the thumb box (in pixels) in a 
vertical scroll bar.
</short>
</element>

<element name="SM_CXHTHUMB">
<short>
System metric index used to get the width for the thumb box (in pixels) in a 
horizontal scroll bar.
</short>
</element>

<element name="SM_CXICON">
<short>
System metric index used to get the width (in pixels) for a large icon. 
</short>
</element>

<element name="SM_CYICON">
<short>
System metric index used to get the height (in pixels) for a large icon. 
</short>
</element>

<element name="SM_CXCURSOR">
<short>
System metric index used to get the width (in pixels) for a cursor shape. 
</short>
</element>

<element name="SM_CYCURSOR">
<short>
System metric index used to get the height (in pixels) for a cursor shape. 
</short>
</element>

<element name="SM_CYMENU">
<short>
System metric index used to get the height (in pixels) for a single-line menu 
bar. 
</short>
</element>

<element name="SM_CXFULLSCREEN">
<short>
System metric index used to get the width (in pixels) for the client area in a 
full-screen window on the primary display.
</short>
</element>

<element name="SM_CYFULLSCREEN">
<short>
System metric index used to get the height (in pixels) for the client area in a 
full-screen window on the primary display.
</short>
</element>

<element name="SM_CYKANJIWINDOW">
<short>
System metric index used to get the height for the Kanji window at the bottom 
of the screen on DBCS input systems.
</short>
</element>

<element name="SM_MOUSEPRESENT">
<short>
System metric index used to determine whether a mouse (physical or virtual) is 
present on the system.
</short>
</element>

<element name="SM_CYVSCROLL">
<short>
System metric index used to get the height (in pixels) for the arrow drawn on a 
vertical scroll bar.
</short>
</element>

<element name="SM_CXHSCROLL">
<short>
System metric index used to get the height (in pixels) for the arrow drawn on a 
horizontal scroll bar.
</short>
</element>

<element name="SM_DEBUG">
<short>
System metric index used to determine whether a debug version of User.exe is 
installed on the system.
</short>
</element>

<element name="SM_SWAPBUTTON">
<short>
System metric index used to determine whether the actions for the left and 
right mouse buttons have been swapped.
</short>
</element>

<element name="SM_RESERVED1">
<short>Not used in the current LCL version.</short>
</element>

<element name="SM_RESERVED2">
<short>Not used in the current LCL version.</short>
</element>

<element name="SM_RESERVED3">
<short>Not used in the current LCL version.</short>
</element>

<element name="SM_RESERVED4">
<short>Not used in the current LCL version.</short>
</element>

<element name="SM_CXMIN">
<short>
System metric index used to get the minimum width (in pixels) for a window.
</short>
</element>

<element name="SM_CYMIN">
<short>
System metric index used to get the minimum height (in pixels) for a window.
</short>
</element>

<element name="SM_CXSIZE">
<short>
System metric index used to get the width (in pixels) for a button displayed on 
a window caption or title bar.
</short>
</element>

<element name="SM_CYSIZE">
<short>
System metric index used to get the height (in pixels) for a button displayed 
on a window caption or title bar.
</short>
</element>

<element name="SM_CXFRAME">
<short>Same as SM_CXSIZEFRAME.</short>
<seealso>
<link id="SM_CXSIZEFRAME"/>
</seealso>
</element>

<element name="SM_CYFRAME">
<short>Same as SM_CYSIZEFRAME.</short>
<seealso>
<link id="SM_CYSIZEFRAME"/>
</seealso>
</element>

<element name="SM_CXMINTRACK">
<short>
System metric index used to get the minimum tracking width (in pixels) allowed 
when a window frame is resized.
</short>
</element>

<element name="SM_CYMINTRACK">
<short>
System metric index used to get the minimum tracking height (in pixels) allowed 
when a window frame is resized.
</short>
</element>

<element name="SM_CXDOUBLECLK">
<short>
System metric index used to get the width (in pixels) for the rectangle around 
the first mouse click in a double-click sequence. The second mouse click must 
be within the rectangle to be handled as a double-click event.
</short>
</element>

<element name="SM_CYDOUBLECLK">
<short>
System metric index used to get the height (in pixels) for the rectangle around 
the first mouse click in a double-click sequence. The second mouse click must 
be within the rectangle to be handled as a double-click event.
</short>
</element>

<element name="SM_CXICONSPACING">
<short>
System metric index used to get the width (in pixels) for an item displayed 
using the large icon view. SM_CXICON gets the minimum width.
</short>
</element>

<element name="SM_CYICONSPACING">
<short>
System metric index used to get the height (in pixels) for an item displayed 
using the large icon view. SM_CYICON gets the minimum height.
</short>
</element>

<element name="SM_MENUDROPALIGNMENT">
<short>
System metric index used to determine whether drop-down menu are aligned to the 
right on a menu bar. Returns 0 when left-aligned. Non-zero is right-aligned.
</short>
</element>

<element name="SM_PENWINDOWS">
<short>
System metric index used to determine whether Pen computing extensions have 
been installed for the Windows platform.
</short>
</element>

<element name="SM_DBCSENABLED">
<short>
System metric index used to determine whether DBCS input is supported on a 
Windows platform. Non-zero indicates that DBCS is supported.
</short>
</element>

<element name="SM_CMOUSEBUTTONS">
<short>
System metric index used to get the number buttons available on the mouse. 
Returns 0 if a mouse is not installed.
</short>
</element>

<element name="SM_CXFIXEDFRAME">
<short>Same as SM_CXFIXEDFRAME.</short>
</element>

<element name="SM_CYFIXEDFRAME">
<short>Same as SM_CYFIXEDFRAME.</short>
</element>

<element name="SM_CXSIZEFRAME">
<short>Same as SM_CXSIZEFRAME.</short>
</element>

<element name="SM_CYSIZEFRAME">
<short>
System metric index used to get the thickness (in pixels) for the vertical 
border on a resizable window. Use SM_CXSIZEFRAME for the horizontal border. Has 
the same value as SM_CYFRAME.
</short>
</element>

<element name="SM_SECURE">
<short>Ignored. Do not use.</short>
</element>

<element name="SM_CXEDGE">
<short>
System metric index used to get the width (in pixels) for the border on a 
window. Returns the same value as SM_CXEDGE.
</short>
</element>

<element name="SM_CYEDGE">
<short>
System metric index used to get the height (in pixels) for the border on a 
window. Returns the same value as SM_CXEDGE.
</short>
</element>

<element name="SM_CXMINSPACING">
<short>
System metric index used to get the width (in pixels) for the rectangle around 
a minimized window. The value is used when minimized windows are arranged. 
SM_CXMINIMIZED gets the minimum width for a minimized window.
</short>
</element>

<element name="SM_CYMINSPACING">
<short>
System metric index used to get the height (in pixels) for the rectangle around 
a minimized window. The value is used when minimized windows are arranged. 
SM_CYMINIMIZED gets the minimum height for a minimized window.
</short>
</element>

<element name="SM_CXSMICON">
<short>
System metric index used to get the width (in pixels) for a small icon used on 
a window caption/title bar or in small icon view on a list view.
</short>
</element>

<element name="SM_CYSMICON">
<short>
System metric index used to get the height (in pixels) for a small icon used on 
a window caption/title bar or in small icon view on a list view.
</short>
</element>

<element name="SM_CYSMCAPTION">
<short>
System metric index used to get the height (in pixels) for a small caption.
</short>
</element>

<element name="SM_CXSMSIZE">
<short>
System metric index used to get the width (in pixels) for a small caption 
button.
</short>
</element>

<element name="SM_CYSMSIZE">
<short>
System metric index used to get the height (in pixels) for a small caption 
button.
</short>
</element>

<element name="SM_CXMENUSIZE">
<short>
System metric index used to get the width (in pixels) for a menu bar button.
</short>
</element>

<element name="SM_CYMENUSIZE">
<short>
System metric index used to get the height (in pixels) for a menu bar button.
</short>
</element>

<element name="SM_ARRANGE">
<short>
System metric index used to determine how minimized windows are arranged. The 
return value contains OR'd values which indicate the starting position and 
direction.
</short>
</element>

<element name="SM_CXMINIMIZED">
<short>
System metric index used to get the width (in pixels) for a minimized window.
</short>
</element>

<element name="SM_CYMINIMIZED">
<short>
System metric index used to get the height (in pixels) for a minimized window.
</short>
</element>

<element name="SM_CXMAXTRACK">
<short>
System metric index used to get the default maximum width (in pixels) for a 
window that has a caption and sizing borders. The return value refers to the 
width for the desktop.
</short>
</element>

<element name="SM_CYMAXTRACK">
<short>
System metric index used to get the default maximum height (in pixels) for a 
window that has a caption and sizing borders. The return value refers to the 
height for the desktop.
</short>
</element>

<element name="SM_CXMAXIMIZED">
<short>
System metric index used to get the width (in pixels) for a maximized top-level 
window on the primary display.
</short>
</element>

<element name="SM_CYMAXIMIZED">
<short>
System metric index used to get the height (in pixels) for a maximized 
top-level window on the primary display.
</short>
</element>

<element name="SM_NETWORK">
<short>
System metric index used to determine whether a network is present. Only the 
least significant bit in the return value is used; other bits are reserved. 
When set, a network is present.
</short>
</element>

<element name="SM_CLEANBOOT">
<short>
System metric index used to determine whether a fail-safe boot mode was used to 
start the Windows system. 0 is Normal boot. 1 is Fail-Safe. 2 is Fail-Safe with 
Network.
</short>
</element>

<element name="SM_CXDRAG">
<short>
System metric index used to get the number of horizontal pixels used as the 
threshold for starting a drag operation.
</short>
</element>

<element name="SM_CYDRAG">
<short>
System metric index used to get the number of vertical pixels used as the 
threshold for starting a drag operation.
</short>
</element>

<element name="SM_SHOWSOUNDS">
<short>
System metric index used to determine whether an application displays a visual 
indicator when it generates a sound. Returns a non-zero value when enabled.
</short>
</element>

<element name="SM_CXMENUCHECK">
<short>
System metric index used to get the default width (in pixels) for the check 
mark bitmap drawn on a menu.
</short>
</element>

<element name="SM_CYMENUCHECK">
<short>
System metric index used to get the default height (in pixels) for the check 
mark bitmap drawn on a menu.
</short>
</element>

<element name="SM_SLOWMACHINE">
<short>
System metric index used to determine whether the system is quipped with a 
low-end (slow) processor. Returns a non-zero value when enabled.
</short>
</element>

<element name="SM_MIDEASTENABLED">
<short>
System metric index used to determine whether the system uses Arabic or Hebrew 
languages. Returns a non-zero value when enabled.
</short>
</element>

<element name="SM_MOUSEWHEELPRESENT">
<short>
System metric index used to determine whether a mouse with a vertical scroll 
wheel is installed. Returns a non-zero value when present.
</short>
</element>

<element name="SM_CMETRICS">
<short>Not used in the current LCL version.</short>
<descr>
<p>
As an aside, the value is also defined in FPC units. Source comments indicate:
</p>
<ul>
<li>The correct value for SM_CMETRICS for NT 3.5 is 75.</li>
<li>For Windows 95 and NT 4.0, it is 76.</li>
<li>The meaning is undocumented, anyhow.</li>
</ul>
</descr>
</element>

<element name="SM_XVIRTUALSCREEN">
<short>
System metric index used to get the left edge of the virtual screen represented 
by all of the display monitors on the system. SM_CXVIRTUALSCREEN gets the width 
for the virtual screen.
</short>
</element>

<element name="SM_YVIRTUALSCREEN">
<short>
System metric index used to get the top edge of the virtual screen represented 
by all of the display monitors on the system. SM_CYVIRTUALSCREEN gets the 
height for the virtual screen.
</short>
</element>

<element name="SM_CXVIRTUALSCREEN">
<short>
System metric index used to get the width (in pixels) for the virtual screen 
represented by all of the display monitors on the system. SM_XVIRTUALSCREEN 
gets the coordinate for the left edge on the virtual screen.
</short>
</element>

<element name="SM_CYVIRTUALSCREEN">
<short>
System metric index used to get the height (in pixels) for the virtual screen 
represented by all of the display monitors on the system. SM_YVIRTUALSCREEN 
gets the coordinate for the top edge on the virtual screen.
</short>
</element>

<element name="SM_CMONITORS">
<short>
System metric index used to get the numbers of visible displays attached to the 
system. It excludes pseudo-monitors associated with devices used for remote 
drawing or mirrored displays.
</short>
</element>

<element name="SM_SAMEDISPLAYFORMAT">
<short>
System metric index used to determine whether all of the display monitors share 
the same color format (RGB pixel order and number of bits). A non-zero return 
value indicates the color format is shared on all monitors.
</short>
</element>

<element name="SM_SWSCROLLBARSPACING">
<short>
Defined in the LCL to get the spacing used between a scroll bar and the content 
area for a control. Used in GTK and QT widgetsets.
</short>
</element>

<element name="SM_LCLMAXIMIZEDWIDTH">
<short>Defined to get accurate maximized window width under X11.</short>
</element>
<element name="SM_LCLMAXIMIZEDHEIGHT">
<short>Defined to get accurate maximized height under X11.</short>
</element>
<element name="SM_LCLHasFormAlphaBlend">
<short>Indicates if a form uses Alpha channel transparency.</short>
</element>
<element name="SM_REMOTESESSION">
<short>
System metric index used to determine if the calling process is a terminal 
services client session (non-zero return value) or a console session (zero 
return value). A console session does not have to be the physical console.
</short>
</element>

<!-- SystemParametersInfo constants -->
<element name="SPI_GETBEEP">
<short>
Gets the state for warning beeps from system parameter information.
</short>
</element>

<element name="SPI_SETBEEP">
<short>
Sets warning beeps on or off using system parameter information.
</short>
</element>

<element name="SPI_GETMOUSE">
<short>
Gets mouse threshold and acceleration values from system parameter 
information.
</short>
</element>

<element name="SPI_SETMOUSE">
<short>
Used to set the threshold and acceleration values for the mouse.
</short>
</element>

<element name="SPI_GETBORDER">
<short>
Used to get a factor applied to sizing borders for a window.
</short>
</element>

<element name="SPI_SETBORDER">
<short>
Used to set the factor applied to sizing borders for a window.
</short>
</element>

<element name="SPI_GETKEYBOARDSPEED">
<short>
Used to get the keyboard repeat rate setting in the range 0 (approximately 2.5 
repetitions per second) to 31 (approximately 30 repetitions per second).
</short>
</element>

<element name="SPI_SETKEYBOARDSPEED">
<short>
Used to set the keyboard repeat rate. The value must be in the range 0 
(approximately 2.5 repetitions per second) to 31 (approximately 30 repetitions 
per second).
</short>
</element>

<element name="SPI_LANGDRIVER">
<short>Not used in the current LCL version.</short>
</element>

<element name="SPI_ICONHORIZONTALSPACING">
<short>
Used to get or set the width (in pixels) for an icon displayed in the large 
icon view. SM_CXICON gets the minimum width for an icon.
</short>
</element>

<element name="SPI_GETSCREENSAVETIMEOUT">
<short>
Used to get the time-out value (in seconds) for a screen saver.
</short>
</element>

<element name="SPI_SETSCREENSAVETIMEOUT">
<short>
Used to set the time-out value (in seconds) for a screen saver. 
</short>
</element>

<element name="SPI_GETSCREENSAVEACTIVE">
<short>
Used to determine whether a screen saver is enabled. Return value is 
version-dependent. TRUE is normally enabled - except on Windows 7, Windows 
Server 2008, and Windows 2000 where TRUE is disabled.
</short>
</element>

<element name="SPI_SETSCREENSAVEACTIVE">
<short>
Used to set the state for the screen saver. Parameter value TRUE activates the 
screen saver, and FALSE deactivates it.
</short>
</element>

<element name="SPI_GETGRIDGRANULARITY">
<short>Not used in the current LCL version.</short>
</element>

<element name="SPI_SETGRIDGRANULARITY">
<short>Not used in the current LCL version.</short>
</element>

<element name="SPI_SETDESKWALLPAPER">
<short>
Used to indicate that the system wallpaper has been changed. The return value 
is TRUE unless an error was detected.
</short>
</element>

<element name="SPI_SETDESKPATTERN">
<short>
Used to set the desktop pattern using the value read from the WIN.INI file.
</short>
</element>

<element name="SPI_GETKEYBOARDDELAY">
<short>
Used to get the repeat-delay setting for the keyboard. The return value is in 
the range 0 (approximately 250 ms delay) to 3 (approximately 1 second delay). 
The actual delay rate is hardware-dependent.
</short>
</element>

<element name="SPI_SETKEYBOARDDELAY">
<short>
Used to set the repeat-delay for the keyboard. The new value must be in the 
range 0 (approximately 250 ms delay) to 3 (approximately 1 second delay). The 
actual delay rate is hardware-dependent.
</short>
</element>

<element name="SPI_ICONVERTICALSPACING">
<short>
Used to get or set the height (in pixels) for the cell where an icon is 
displayed. SM_CYICON gets the minimum icon height.
</short>
</element>

<element name="SPI_GETICONTITLEWRAP">
<short>
Used to determine whether word wrapping for the caption text on an icon is 
enabled. Parameter value TRUE indicates word wrapping is enabled.
</short>
</element>

<element name="SPI_SETICONTITLEWRAP">
<short>
Used set to enable or disable word wrapping of the caption text for an icon. 
Parameter value TRUE is enabled.
</short>
</element>

<element name="SPI_GETMENUDROPALIGNMENT">
<short>
Used to determine whether a pop-up menu is left-aligned or right-aligned to its 
menu bar item. TRUE is right-aligned.
</short>
</element>

<element name="SPI_SETMENUDROPALIGNMENT">
<short>
Used to set the alignment for a pop-up menu relative to its menu bar item. 
FALSE is left-aligned. TRUE is right-aligned.
</short>
</element>

<element name="SPI_SETDOUBLECLKWIDTH">
<short>
Used to set the width (in pixels) for the rectangle around the first mouse 
click in a double-click sequence. The second mouse click must be within the 
rectangle to be handled as a double-click event.
</short>
</element>

<element name="SPI_SETDOUBLECLKHEIGHT">
<short>
Used to set the height (in pixels) for the rectangle around the first mouse 
click in a double-click sequence. The second mouse click must be within the 
rectangle to be handled as a double-click event.
</short>
</element>

<element name="SPI_GETICONTITLELOGFONT">
<short>
Used to get the logical font information for icon caption text. Used in the 
TWin32WidgetSet widgetset class.
</short>
</element>

<element name="SPI_SETDOUBLECLICKTIME">
<short>
Used to set the mouse double-click time threshold. The parameter value contains 
the maximum number of milliseconds between mouse clicks treated as a 
double-click event. The maximum value for the setting is 5000 milliseconds 
(5 seconds).
</short>
</element>

<element name="SPI_SETMOUSEBUTTONSWAP">
<short>
Used to swap or restore the actions performed for the left and right mouse 
buttons. The parameter value TRUE swaps the actions performed for the buttons. 
FALSE restores the original behavior.
</short>
</element>

<element name="SPI_SETICONTITLELOGFONT">
<short>
Used to set the font used for icon caption text.
</short>
</element>

<element name="SPI_GETFASTTASKSWITCH">
<short>Not used in the current LCL version.</short>
</element>

<element name="SPI_SETFASTTASKSWITCH">
<short>Not used in the current LCL version.</short>
</element>

<element name="SPI_SETDRAGFULLWINDOWS">
<short>
Used to enable or disable full window dragging. The parameter value TRUE 
enables full window dragging.
</short>
</element>

<element name="SPI_GETDRAGFULLWINDOWS">
<short>
Used to get the enabled state for full window dragging. The return value TRUE 
indicates full window dragging is enabled.
</short>
</element>

<element name="SPI_GETNONCLIENTMETRICS">
<short>
Used to get metrics for the non-client area on a visible window. The return 
value contains size and font information for the window, menu bar, status bar, 
borders, and fonts used on the window elements.
</short>
</element>

<element name="SPI_SETNONCLIENTMETRICS">
<short>
Used to set metrics for the non-client area on a visible window. The parameter 
value contains size and font information for the window, menu bar, status bar, 
borders, and fonts applied to the window elements.
</short>
</element>

<element name="SPI_GETMINIMIZEDMETRICS">
<short>
Used to get metrics for a minimized window. The return value includes 
information about the width of the minimized window and the arrange order, 
direction, and gaps between adjacent minimized windows.
</short>
</element>

<element name="SPI_SETMINIMIZEDMETRICS">
<short>
Used to set metrics for a minimized window. The parameter value includes 
information about the width of the minimized window and the arrange order, 
direction, and gaps between adjacent minimized windows.
</short>
</element>

<element name="SPI_GETICONMETRICS">
<short>
Used to get metrics for icons. The return value has information about 
horizontal and vertical icon spacing, word wrapping status and logical font 
information for caption text.
</short>
</element>

<element name="SPI_SETICONMETRICS">
<short>
Used to set metrics for icons. The parameter value contains information about horizontal and vertical icon spacing, as well as word wrapping status and 
logical font information for caption text.
</short>
</element>

<element name="SPI_SETWORKAREA">
<short>
Used to set the work area not obscured by the taskbar or desktop toolbars. The 
parameter value contains the display rectangle in virtual screen coordinates.
</short>
</element>

<element name="SPI_GETWORKAREA">
<short>
Used to get the work area on the primary display not obscured by the taskbar or 
desktop toolbars. The return value contains the display rectangle in virtual 
screen coordinates.
</short>
</element>

<element name="SPI_SETPENWINDOWS">
<short>Not used in the current LCL version.</short>
</element>

<element name="SPI_GETFILTERKEYS">
<short>
Used to get information about the FilterKeys 
accessibility feature.
</short>
</element>

<element name="SPI_SETFILTERKEYS">
<short>
Used to apply settings for the FilterKeys accessibility feature.
</short>
</element>

<element name="SPI_GETTOGGLEKEYS">
<short>
Used to get information about the ToggleKeys accessibility feature.
</short>
</element>

<element name="SPI_SETTOGGLEKEYS">
<short>
Used to apply settings for the ToggleKeys accessibility feature.
</short>
</element>

<element name="SPI_GETMOUSEKEYS">
<short>
Used get information about the MouseKeys accessibility feature.
</short>
</element>

<element name="SPI_SETMOUSEKEYS">
<short>
Used to apply settings for the MouseKeys accessibility feature.
</short>
</element>

<element name="SPI_GETSHOWSOUNDS">
<short>
Used to determine whether Show Sounds accessibility flag is enabled. TRUE is 
enabled.
</short>
</element>

<element name="SPI_SETSHOWSOUNDS">
<short>
Used to enabled or disable the Show Sounds Accessibility flag. TRUE is enabled.
</short>
</element>

<element name="SPI_GETSTICKYKEYS">
<short>
Used to get information about the StickyKeys accessibility feature. The return 
value contains a set of bit-flags with the settings for the feature. Please 
note that numeric constants for these bit-flag values are <b>not</b> defined in 
the current LCL version.
</short>
</element>

<element name="SPI_SETSTICKYKEYS">
<short>
Used to apply settings for the StickyKeys accessibility feature. The parameter 
value contains a set of bit-flags with the settings for the feature. Please 
note that numeric constants for these bit-flag values are <b>not</b> defined in 
the current LCL version.
</short>
</element>

<element name="SPI_GETACCESSTIMEOUT">
<short>
Used to get information about the time-out period for accessibility features. 
The return value contains the time-out period (in milliseconds), and bit-flags 
for the enabled state and the audible notification setting.
</short>
</element>

<element name="SPI_SETACCESSTIMEOUT">
<short>
Used to apply settings for the time-out period for accessibility features. The 
parameter value contains the time-out period (in milliseconds), and bit-flags 
to enable or disable the accessibility time-out feature and an audible 
notification for the condition.
</short>
</element>

<element name="SPI_GETSERIALKEYS">
<short>
This parameter index is no longer supported in Windows. The feature can be 
controlled using the Control Panel.
</short>
</element>

<element name="SPI_SETSERIALKEYS">
<short>
This parameter index is no longer supported in Windows. The feature can be 
controlled using the Control Panel.
</short>
</element>

<element name="SPI_GETSOUNDSENTRY">
<short>
Used to get information about the SoundSentry accessibility feature. When 
enabled, a visual indication is displayed when a sound is generated.
</short>
</element>

<element name="SPI_SETSOUNDSENTRY">
<short>
Used to apply settings for the SoundSentry accessibility feature. When enabled, 
a visual indication is displayed when a sound is generated.
</short>
</element>

<element name="SPI_GETHIGHCONTRAST">
<short>
Used to get settings for the HighContrast accessibility feature. When enabled, 
the display theme is adjusted for maximum visibility for a visually-impaired 
user.
</short>
</element>

<element name="SPI_SETHIGHCONTRAST">
<short>
Used to apply settings for the HighContrast accessibility feature. When 
enabled, the display theme is adjusted for maximum visibility for a 
visually-impaired user.
</short>
</element>

<element name="SPI_GETKEYBOARDPREF">
<short>
Used to determine whether keyboard input and interfaces are used in place of 
mouse counterparts. TRUE when keyboard input is used.
</short>
</element>

<element name="SPI_SETKEYBOARDPREF">
<short>
Used to apply settings for keyboard preference. TRUE indicates that keyboard 
input and interfaces are preferred to the mouse-based equivalents.
</short>
</element>

<element name="SPI_GETSCREENREADER">
<short>
Used to determine whether a screen reader is active. The return value is TRUE 
if the screen reviewer is running.
</short>
</element>

<element name="SPI_SETSCREENREADER">
<short>
Used to apply the flag which indicates whether a screen reader is active. TRUE 
indicates the screen reviewer is running.
</short>
</element>

<element name="SPI_GETANIMATION">
<short>
Used to get the animation effects enabled for user actions, like minimize and 
restore animations.
</short>
</element>

<element name="SPI_SETANIMATION">
<short>
Used to apply settings for the animation effects enabled for user actions, like 
minimize and restore animations.
</short>
</element>

<element name="SPI_GETFONTSMOOTHING">
<short>
Used to determine whether font smoothing is enabled for the system. Font 
smoothing uses antialiasing to smooth curves using pixels with different shades 
of gray. TRUE is enabled.
</short>
</element>

<element name="SPI_SETFONTSMOOTHING">
<short>
Used to apply the font smoothing setting for the system. Font smoothing uses 
antialiasing to smooth curves using pixels with different shades of gray. TRUE 
is enabled.
</short>
</element>

<element name="SPI_SETDRAGWIDTH">
<short>
Used to set the width (in pixels) for the rectangle used to detect the start of 
a drag operation. The value is the number of horizontal pixels used as the 
threshold for the drag operation. The SM_CXDRAG system metric gets the existing 
drag width value.
</short>
</element>

<element name="SPI_SETDRAGHEIGHT">
<short>
Used to set the height (in pixels) for the rectangle used to detect the start 
of a drag operation. The value is the number of vertical pixels used as the 
threshold for the drag operation. The SM_CYDRAG system metric gets the existing 
drag height value.
</short>
</element>

<element name="SPI_SETHANDHELD">
<short>Not used in the current LCL version.</short>
</element>

<element name="SPI_GETLOWPOWERTIMEOUT">
<short>
Used to get the time-out value the low-power condition in a screen saver. 
Supported for 32-bit applications on Windows Server 2003 and Windows XP/2000.
</short>
</element>

<element name="SPI_GETPOWEROFFTIMEOUT">
<short>
Used to get the time-out value the power-off condition in a screen saver. 
Supported for 32-bit applications on Windows Server 2003 and Windows XP/2000.
</short>
</element>

<element name="SPI_SETLOWPOWERTIMEOUT">
<short>
Used to set the time-out value (in seconds) for the low-power condition in a 
screen saver. Supported for 32-bit applications on Windows Server 2003 and 
Windows XP/2000.
</short>
</element>

<element name="SPI_SETPOWEROFFTIMEOUT">
<short>
Used to set the time-out value (in seconds) for the power-off condition in a 
screen saver. Supported for 32-bit applications on Windows Server 2003 and 
Windows XP/2000.
</short>
</element>

<element name="SPI_GETLOWPOWERACTIVE">
<short>
Used to determine whether the low-power condition is enabled for a screen 
saver. Supported for 32-bit applications on Windows Server 2003 and Windows 
XP/2000.
</short>
</element>

<element name="SPI_GETPOWEROFFACTIVE">
<short>
Used to determine whether the power-off condition is enabled for a screen 
saver. Supported for 32-bit applications on Windows Server 2003 and Windows 
XP/2000.
</short>
</element>

<element name="SPI_SETLOWPOWERACTIVE">
<short>
Used to enable or disable the low-power state for a screen saver. 1 to 
activate, or 0 to deactivate. Supported for 32-bit applications on Windows 
Server 2003 and Windows XP/2000.
</short>
</element>

<element name="SPI_SETPOWEROFFACTIVE">
<short>
Used to enable or disable the power-off state for a screen saver. 1 to 
activate, or 0 to deactivate. Supported for 32-bit applications on Windows 
Server 2003 and Windows XP/2000.
</short>
</element>

<element name="SPI_SETCURSORS">
<short>
Used to reload the system cursors.
</short>
</element>

<element name="SPI_SETICONS">
<short>
Used to reload the system icons.
</short>
</element>

<element name="SPI_GETDEFAULTINPUTLANG">
<short>
Used to get the default input language for the system.
</short>
</element>

<element name="SPI_SETDEFAULTINPUTLANG">
<short>
Used to set the default input language for the system.
</short>
</element>

<element name="SPI_SETLANGTOGGLE">
<short>
Used to set the hot keys which switch between input 
languages for the system.
</short>
</element>

<element name="SPI_GETWINDOWSEXTENSION">
<short>Not available in the SystemParametersInfo() API.</short>
</element>

<element name="SPI_SETMOUSETRAILS">
<short>
Used to enable or disable the Mouse Trails feature. Set the uiParam parameter 
to 0 or 1 to disable the feature. Use a value larger than 1 to enable the 
feature (a higher value results in a longer trail). Not supported on Windows 
2000.
</short>
</element>

<element name="SPI_GETMOUSETRAILS">
<short>
Used to determine whether the Mouse Trails feature is enabled. The pvParam 
parameter returns the state and length for the mouse trail. 0 or 1 is disabled. 
a value larger than 1 is the relative length for an enabled mouse trail 
(a higher value indicates a longer trail). Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETSNAPTODEFBUTTON">
<short>
Used to determine whether the "Snap to Default Button" feature is enabled. The 
pvParam argument returns TRUE when enabled.
</short>
</element>

<element name="SPI_SETSNAPTODEFBUTTON">
<short>
Used to enable or disable the "Snap to Default Button" feature. Set uiParam to 
TRUE to enable.
</short>
</element>

<element name="SPI_SCREENSAVERRUNNING">
<short>No longer available in SystemParametersInfo() API.</short>
</element>

<element name="SPI_SETSCREENSAVERRUNNING">
<short>No longer available in SystemParametersInfo() API.</short>
</element>

<element name="SPI_GETMOUSEHOVERWIDTH">
<short>
Used to get the width (in pixels) for the rectangle with the bounds for a mouse 
hover event. pvParam returns the rectangle width.
</short>
</element>

<element name="SPI_SETMOUSEHOVERWIDTH">
<short>
Used to set the width (in pixels) for the rectangle with the bounds for a mouse 
hover event. Use uiParam to set the width for the rectangle.
</short>
</element>

<element name="SPI_GETMOUSEHOVERHEIGHT">
<short>
Used to get the height (in pixels) for the rectangle with the bounds for a 
mouse hover event. pvParam returns the rectangle height.
</short>
</element>

<element name="SPI_SETMOUSEHOVERHEIGHT">
<short>
Used to set the height (in pixels) for the rectangle with the bounds for a 
mouse hover event. Use uiParam to set the height for the rectangle.
</short>
</element>

<element name="SPI_GETMOUSEHOVERTIME">
<short>
Used to get the elapsed time (in milliseconds) within a hover rectangle before 
a mouse hover event is generated. pvParam contains the number of milliseconds 
for the hover time value.
</short>
</element>

<element name="SPI_SETMOUSEHOVERTIME">
<short>
Used to set the elapsed time (in milliseconds) within a hover rectangle before 
a mouse hover event is generated. uiParam contains the number of milliseconds 
for the hover time value. Used when HOVER_DEFAULT is passed to TrackMouseEvent.
</short>
</element>

<element name="SPI_GETWHEELSCROLLLINES">
<short>
Used to get the number of lines scrolled when the mouse wheel is moved. pvParam 
returns the unsigned Integer with the number of lines.
</short>
</element>

<element name="SPI_SETWHEELSCROLLLINES">
<short>
Used to set the number of lines scrolled when the mouse wheel is moved. uiParam 
is the unsigned Integer with the suggested number of lines when modifier keys 
are not used. 0 prevents scrolling with the mouse
wheel.
</short>
</element>

<element name="SPI_GETMENUSHOWDELAY">
<short>
Used to get the delay time (in milliseconds) before the shortcut menu is 
displayed for a hovered menu item. pvParam returns the DWORD value for the 
delay time.
</short>
</element>

<element name="SPI_SETMENUSHOWDELAY">
<short>
Used to set the delay time (in milliseconds) before the shortcut menu is 
displayed for a hovered menu item. Set uiParam to the DWORD value for the delay 
time.
</short>
</element>

<element name="SPI_GETSHOWIMEUI">
<short>
Used to determine whether the IME status window is visible. pvParam returns 
TRUE when the IME window is visible.
</short>
</element>

<element name="SPI_SETSHOWIMEUI">
<short>
Used to set the visibility for the IME status window. Set uiParam to TRUE to 
display the IME window.
</short>
</element>

<element name="SPI_GETMOUSESPEED">
<short>
Used to get the relative pointer acceleration applied when the mouse is moved. 
pvParam contains the Integer value in the range 1 (slowest) to 20 (fastest).
</short>
</element>

<element name="SPI_SETMOUSESPEED">
<short>
Used to set the relative pointer acceleration applied when the mouse is moved. 
uiParam is the Integer value for the mouse speed and must be in the range 
1 (slowest) to 20 (fastest).
</short>
</element>

<element name="SPI_GETSCREENSAVERRUNNING">
<short>
Used to determine whether the screen saver is running for a desktop session. 
pvParam is TRUE if a screen saver is running.
</short>
</element>

<element name="SPI_GETDESKWALLPAPER">
<short>
Used to get the fully-qualified path to the image used as the desktop 
wallpaper. pvParam points to the buffer with the null-terminated path value, or 
an empty string if a desktop wallpaper is not used. Use uiParam to specify the 
size for the buffer in pvParam.
</short>
</element>

<element name="SPI_GETACTIVEWINDOWTRACKING">
<short>
Used to determine whether active window tracking (focus follows mouse) is 
enabled or disabled. pvParam returns TRUE when enabled.
</short>
</element>

<element name="SPI_SETACTIVEWINDOWTRACKING">
<short>
Used to enable or disable active window tracking (focus follows mouse). Set 
uiParam to TRUE to enable the feature.
</short>
</element>

<element name="SPI_GETMENUANIMATION">
<short>
Used to determine whether the menu animation feature is enabled. pvParam is 
TRUE if menu animation is enabled. SPI_GETMENUFADE indicates if menus use fade 
or slide animations.
</short>
</element>

<element name="SPI_SETMENUANIMATION">
<short>
Used to enable or disable the menu animation feature. Set pvParam to TRUE to 
enable menu animation. Use SPI_GETMENUFADE to control whether fade or slide 
animations are used.
</short>
</element>

<element name="SPI_GETCOMBOBOXANIMATION">
<short>
Used to determine whether the slide-open animation effect is enabled for a 
combo-box. pvParam returns TRUE when the animation effect is enabled.
</short>
</element>

<element name="SPI_SETCOMBOBOXANIMATION">
<short>
Used to enable or disable the slide-open animation effect for a combo-box. Set 
pvParam parameter to TRUE to enable the animation effect.
</short>
</element>

<element name="SPI_GETLISTBOXSMOOTHSCROLLING">
<short>
Used to determine whether smooth scroll is enabled or disabled in list box 
controls. pvParam returns TRUE when smooth scroll is enabled.
</short>
</element>

<element name="SPI_SETLISTBOXSMOOTHSCROLLING">
<short>
Used to enable or disable smooth scroll in list box controls. Set pvParam to 
TRUE to enable smooth scroll.
</short>
</element>

<element name="SPI_GETGRADIENTCAPTIONS">
<short>
Used to determine whether a gradient is drawn in window title bars. pvParam 
returns TRUE if the gradient effect is enabled.
</short>
</element>

<element name="SPI_SETGRADIENTCAPTIONS">
<short>
Used to enable or disable the gradient effect in window title bars. Set pvParam 
to TRUE to enabled the gradient effect on displays with a color depth larger 
than 256 colors.
</short>
</element>

<element name="SPI_GETKEYBOARDCUES">
<short>
Used to determine whether menu access keys are drawn as accelerator keys 
(underlined). pvParam returns TRUE when menu access keys are underlined, and 
FALSE if the underline appears after the menu has been activated.
</short>
</element>

<element name="SPI_SETKEYBOARDCUES">
<short>
Used to enable or disable drawing of menu access keys as accelerator keys 
(underlined). Set pvParam to TRUE when menu access keys are always underlined, 
and FALSE if the underline appears after the menu has been activated using the 
keyboard.
</short>
</element>

<element name="SPI_GETMENUUNDERLINES">
<short>Same as SPI_GETKEYBOARDCUES.</short>
</element>

<element name="SPI_SETMENUUNDERLINES">
<short>Same as Same as SPI_SETKEYBOARDCUES.</short>
</element>

<element name="SPI_GETACTIVEWNDTRKZORDER">
<short>
Used to determine whether windows activated by window tracking are brought to 
the top of the display order (Z-axis). pvParam returns TRUE when enabled.
</short>
</element>

<element name="SPI_SETACTIVEWNDTRKZORDER">
<short>
Used to enable or disable changes to the Z-order for windows activated using 
window tracking. Set pvParam to TRUE to bring a tracking activated window to 
the top of the display order (Z-axis).
</short>
</element>

<element name="SPI_GETHOTTRACKING">
<short>
Used to determine whether hot-tracking (or hot-lighting) is enabled for UI 
elements. pvParam returns TRUE if hot-tracking is enabled.
</short>
</element>

<element name="SPI_SETHOTTRACKING">
<short>
Used to enable or disable hot-tracking (or hot-lighting) for UI elements. Set 
pvParam to TRUE to enable hot-tracking.
</short>
</element>

<element name="SPI_GETMENUFADE">
<short>
Used to determine whether the menu fade animation effect is enabled. pvParam 
returns TRUE if the animation effect is enabled. When set to FALSE, the menu 
slide animation effect is used instead. Neither animation effect is displayed 
when SPI_SETMENUANIMATION is disabled.
</short>
</element>

<element name="SPI_SETMENUFADE">
<short>
Used to enable or disable the menu fade animation effect on displays using 
a color depth higher than 256. Set pvParam to TRUE to enable the menu fade 
animation effect. Set pvParam to FALSE to enable the menu slide animation 
effect instead. Use SPI_SETMENUANIMATION to enable or disable all animation 
effects.
</short>
</element>

<element name="SPI_GETSELECTIONFADE">
<short>
Used to determine whether the selection fade effect is enabled. pvParam returns 
TRUE if the animation effect is enabled.
</short>
</element>

<element name="SPI_SETSELECTIONFADE">
<short>
Used to enable or disable the selection fade effect for menu items on displays 
with a color depth higher than 256 colors. Set pvParam to TRUE to enable the 
selection fade effect.
</short>
</element>

<element name="SPI_GETTOOLTIPANIMATION">
<short>
Used to determine whether ToolTip animation is enabled. pvParam returns TRUE if 
the animation effect is enabled. Use SPI_GETTOOLTIPFADE to control whether 
fade or slide animation effects are used for ToolTip animations.
</short>
</element>

<element name="SPI_SETTOOLTIPANIMATION">
<short>
Used to enable or disable ToolTip animation effects. Set pvParam to TRUE to 
enable ToolTip animations. Use SPI_SETTOOLTIPFADE to specify whether the fade 
or slide animation effect is used.
</short>
</element>

<element name="SPI_GETTOOLTIPFADE">
<short>
Used to determine whether a ToolTip animation uses a fade effect or a slide 
effect. pvParam return TRUE for the fade effect, or FALSE for the slide effect. 
Use SPI_SETTOOLTIPANIMATION to enable or disable ToolTip animation effects.
</short>
</element>

<element name="SPI_SETTOOLTIPFADE">
<short>
Used to indicate whether a ToolTip animation uses a fade effect or a slide 
effect. Set pvParam to TRUE to use the fade animation or FALSE to use the slide 
animation. Use SPI_SETTOOLTIPANIMATION to enable or disable ToolTip animation 
effects.
</short>
</element>

<element name="SPI_GETCURSORSHADOW">
<short>
Used to determine whether the cursor is displayed with a shadow. pvParam 
returns TRUE if the shadow is enabled. Shown on displays with a color depth 
larger than 256 colors.
</short>
</element>

<element name="SPI_SETCURSORSHADOW">
<short>
Used to enable or disable a shadow for the cursor. Set pvParam to TRUE to 
enable the cursor shadow. Shown on displays with a color depth larger than 256 
colors.
</short>
</element>

<element name="SPI_GETUIEFFECTS">
<short>
Used to determine whether UI effects are enabled or disabled. pvParam returns 
TRUE if UI effects are enabled.
</short>
</element>

<element name="SPI_SETUIEFFECTS">
<short>
Used to enable or disable UI effects. Set pvParam to TRUE to enable UI effects.
</short>
</element>

<element name="SPI_GETFOREGROUNDLOCKTIMEOUT">
<short>
Used to get the time (in milliseconds) before an application can be brought to 
the foreground. pvParam is the DWORD variable with the time value.
</short>
</element>

<element name="SPI_SETFOREGROUNDLOCKTIMEOUT">
<short>
Used to set the time (in milliseconds) before an application can be brought to 
the foreground. Set pvParam to the DWORD value with the time delay.
</short>
</element>

<element name="SPI_GETACTIVEWNDTRKTIMEOUT">
<short>
Used to get the delay time (in milliseconds) before active window tracking is 
engaged. pvParam is the DWORD value for the delay time.
</short>
</element>

<element name="SPI_SETACTIVEWNDTRKTIMEOUT">
<short>
Used to set the delay time (in milliseconds) before active window tracking is 
engaged. pvParam is the DWORD value with the new delay time.
</short>
</element>

<element name="SPI_GETFOREGROUNDFLASHCOUNT">
<short>
Used to get the number of times a task bar button is flashed when a foreground 
switch request is rejected. pvParam returns the DWORD value for the flash count.
</short>
</element>

<element name="SPI_SETFOREGROUNDFLASHCOUNT">
<short>
Used to set the number of times a task bar button is flashed when a foreground 
switch request is rejected. Set pvParam to the DWORD value with the number of 
flashes.
</short>
</element>

<element name="SPI_GETCARETWIDTH">
<short>
Used to get the width (in pixels) for the caret in an edit control. pvParam 
returns the DWORD value with the caret width.
</short>
</element>

<element name="SPI_SETCARETWIDTH">
<short>
Used to set the width (in pixels) for the caret in an edit control. Set pvParam 
to the DWORD value with the caret width. The default value is 1 pixel.
</short>
</element>

<element name="SPI_GETMOUSESONAR">
<short>
Used to determine whether the Mouse Sonar feature is enabled. pvParam returns 
TRUE if the feature is enabled.
</short>
</element>

<element name="SPI_SETMOUSESONAR">
<short>
Used to enable or disable the Mouse Sonar feature. Set pvParam to TRUE to 
enable the feature, or FALSE to disable the feature.
</short>
</element>

<element name="SPI_GETMOUSECLICKLOCK">
<short>
Used to determine whether the Mouse Click Lock feature is enabled. pvParam 
returns TRUE if mouse clicks are locked until the timeout has elapsed, or FALSE 
when unlocked. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_SETMOUSECLICKLOCK">
<short>
Used to enable or disable the Mouse Click Lock feature. Set pvParam to TRUE to 
prevent mouse clicks until the timeout period has elapsed, or FALSE to disable 
the feature. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETMOUSEVANISH">
<short>
Used to determine whether the Mouse Vanish feature is enabled or disabled. 
pvParam returns TRUE if the feature is enabled. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_SETMOUSEVANISH">
<short>
Used to enable or disable the Mouse Vanish feature. Set pvParam to TRUE to 
enable the feature. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETFLATMENU">
<short>
Used to determine whether native User menus have a flat appearance. pvParam 
returns TRUE if menus are displayed using the flat style. Not supported on 
Windows 2000.
</short>
</element>

<element name="SPI_SETFLATMENU">
<short>
Used to enable or disable display of native User menus using a flat appearance. 
Set pvParam to TRUE to enable use of the flat drawing style. Not supported on 
Windows 2000.
</short>
</element>

<element name="SPI_GETDROPSHADOW">
<short>
Used to determine whether the drop shadow effect is enabled or disabled in the 
user interface. pvParam returns TRUE if drop shadows are enabled. Not supported 
on Windows 2000.
</short>
</element>

<element name="SPI_SETDROPSHADOW">
<short>
Used to enable or disable the drop shadow effect in the user interface. Set 
pvParam to TRUE to enable the drop shadow effect. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETBLOCKSENDINPUTRESETS">
<short>
Used determine whether an application can reset the screensaver time. pvParam 
returns TRUE if SendInput cannot be used to send an input request, or FALSE 
when unblocked.
</short>
</element>

<element name="SPI_SETBLOCKSENDINPUTRESETS">
<short>
Used to control whether an application can reset the screensaver time. Set 
uiParam to TRUE to prevent SendInput from deactivating the screensaver, or 
FALSE if the screensaver is deactivated by SendInput.
</short>
</element>

<element name="SPI_GETMOUSECLICKLOCKTIME">
<short>
Used to get the time delay (in milliseconds) before the primary mouse button is 
locked. pvParam returns the DWORD value with the delay time. Enabled when 
SPI_SETMOUSECLICKLOCK is set to TRUE. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_SETMOUSECLICKLOCKTIME">
<short>
Used to set the time delay (in milliseconds) before the primary mouse button is 
locked. Set pvParam to the DWORD value with the delay time. Enabled when 
SPI_SETMOUSECLICKLOCK is set to TRUE. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETFONTSMOOTHINGTYPE">
<short>
Used to get the font smoothing enabled for the system. pvParam returns either 
FE_FONTSMOOTHINGSTANDARD or FE_FONTSMOOTHINGCLEARTYPE in the UINT value. Not 
supported on Windows 2000.
</short>
</element>

<element name="SPI_SETFONTSMOOTHINGTYPE">
<short>
Used to set the font smoothing enabled for the system. Set pvParam to either 
FE_FONTSMOOTHINGSTANDARD or FE_FONTSMOOTHINGCLEARTYPE. Not supported on Windows 
2000.
</short>
</element>

<element name="SPI_GETFONTSMOOTHINGCONTRAST">
<short>
Used to get the contrast value for ClearType font smoothing. pvParam returns a 
UINT value in the range 1000 to 2200. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_SETFONTSMOOTHINGCONTRAST">
<short>
Used to set the contrast value for ClearType font smoothing. Set pvParam to a 
UINT value in the range 1000 to 2200. Used when SPI_SETFONTSMOOTHINGTYPE is set 
to FE_FONTSMOOTHINGCLEARTYPE. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETFOCUSBORDERWIDTH">
<short>
Used to get the width (in pixels) for the top or bottom edges on the focus 
rectangle drawn in DrawFocusRect. pvParam returns the UINT value with the new 
width for the border. Not supported on Windows 2000.
</short>
</element>

<element name="SPI_SETFOCUSBORDERWIDTH">
<short>
Used to set the width (in pixels) for the top or bottom edges on the focus 
rectangle drawn in DrawFocusRect. Set pvParam to the new width for the border. 
Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETFOCUSBORDERHEIGHT">
<short>
Used to get the height (in pixels) for the top or bottom edges on the focus 
rectangle drawn in DrawFocusRect. pvParam returns the height for the border. 
Not supported on Windows 2000.
</short>
</element>

<element name="SPI_SETFOCUSBORDERHEIGHT">
<short>
Used to set the height (in pixels) for the top or bottom edges on the focus 
rectangle drawn in DrawFocusRect. Set pvParam to the new height for the border. 
Not supported on Windows 2000.
</short>
</element>

<element name="SPI_GETFONTSMOOTHINGORIENTATION">
<short>
Used to get the orientation used for font smoothing (RGB or BGR orientation).
</short>
</element>

<element name="SPI_SETFONTSMOOTHINGORIENTATION">
<short>
Used to set the orientation used for font smoothing (RGB or BGR orientation).
</short>
</element>

<!-- GetDeviceCaps constants with compression types for bitmap images -->
<element name="BI_RGB">
<short>
Bit-flag for the uncompressed Red/Green/Blue (RGB) compression format used in 
bitmap images. Indicates the image data is not compressed and does not use 
color masks.
</short>
</element>

<element name="BI_RLE8">
<short>
Bit-flag for the Red/Green/Blue (RGB) color format using 8-bits per pixel 
run-length encoding (RLE) compression format in a bitmap image. Indicates 
that the image data contains a 2-byte RLE format with count and color index 
values.
</short>
</element>

<element name="BI_RLE4">
<short>
Bit-flag for the Red/Green/Blue (RGB) color format using 4-bits per pixel 
run-length encoding (RLE) compression format in a bitmap image. Indicates 
that the image data contains a 2 byte RLE format with a count byte and two 
word-sized color index values.
</short>
</element>

<element name="BI_BITFIELDS">
<short>
Bit-flag for the uncompressed Red/Green/Blue (RGB) color format using three 
DWORD values for the red, green, and blue components (respectively) for each 
pixel in the image data. Valid for both 16-bit and 32-bit per pixel bitmaps.
</short>
</element>

<element name="HORZSIZE">
<short>Horizontal size in millimeters.</short>
</element>

<element name="VERTSIZE">
<short>Vertical size in millimeters.</short>
</element>

<element name="HORZRES">
<short>Horizontal width in pixels for a device context.</short>
</element>

<element name="VERTRES">
<short>Vertical height in pixels for a device context.</short>
</element>

<element name="BITSPIXEL">
<short>Number of bits per pixel.</short>
</element>

<element name="PLANES">
<short>Number of color planes.</short>
</element>

<element name="LOGPIXELSX">
<short>
The number of pixels per logical inch, in X (horizontal) direction.
</short>
</element>

<element name="LOGPIXELSY">
<short>
The number of pixels per logical inch, in Y (vertical) direction.
</short>
</element>

<element name="SIZEPALETTE">
<short>Number of entries in the color palette.</short>
</element>

<element name="NUMRESERVED">
<short>Number of reserved entries in the color palette.</short>
</element>

<!-- Text Alignment Options -->
<element name="TA_NOUPDATECP">
<short>
Suppresses update of the current position after each text output call.
</short>
</element>

<element name="TA_UPDATECP">
<short>
Enables update of the current position after each text output call.
</short>
</element>

<element name="TA_LEFT">
<short>
Enables left alignment of text to the bounds rectangle.
</short>
</element>

<element name="TA_RIGHT">
<short>
Enables right alignment of text to the bounds rectangle.
</short>
</element>

<element name="TA_CENTER">
<short>
Enables horizontal alignment of text to the center of the bounds rectangle.
</short>
</element>

<element name="TA_TOP">
<short>
Enables vertical alignment of text to the top of the bounds rectangle.
</short>
</element>

<element name="TA_BOTTOM">
<short>
Enables vertical alignment of text to the bottom of the bounds rectangle.
</short>
</element>

<element name="TA_BASELINE">
<short>
Places the reference point on the baseline for the text.
</short>
</element>

<element name="TA_RTLREADING">
<short>
Enables right-to-left reading order when the selected font is either Arabic or 
Hebrew.
</short>
</element>

<element name="TA_MASK">
<short>
Not used in the current LCL version.
</short>
</element>

<!-- PolyFill() modes -->
<element name="ALTERNATE">
<short/>
</element>

<element name="WINDING">
<short/>
</element>

<element name="POLYFILL_LAST">
<short/>
</element>

<element name="BLACKONWHITE">
<short/>
</element>

<element name="WHITEONBLACK">
<short/>
</element>

<element name="COLORONCOLOR">
<short/>
</element>

<element name="HALFTONE">
<short/>
</element>

<element name="MAXSTRETCHBLTMODE">
<short/>
</element>

<element name="CBM_INIT">
<short/>
</element>

<!-- Predefined Resource Types -->
<element name="TResourceType">
<short>
Platform-specific alias for resource type identifiers in LCL.
</short>
</element>

<element name="RT_CURSOR">
<short>Identifier for a Cursor resource type.</short>
</element>

<element name="RT_BITMAP">
<short>Identifier for a Bitmap resource type.</short>
</element>

<element name="RT_ICON">
<short>Identifier for an Icon resource type.</short>
</element>

<element name="RT_MENU">
<short>Identifier for a Menu resource type.</short>
</element>

<element name="RT_DIALOG">
<short>Identifier for a Dialog resource type.</short>
</element>

<element name="RT_STRING">
<short>Identifier for a String resource type.</short>
</element>

<element name="RT_FONTDIR">
<short>Identifier for a Font directory resource type.</short>
</element>

<element name="RT_FONT">
<short>Identifier for a Font resource type.</short>
</element>

<element name="RT_ACCELERATOR">
<short>Identifier for an Accelerator resource type.</short>
</element>

<element name="RT_RCDATA">
<short>Identifier for an Application-defined resource type (raw data).</short>
</element>

<element name="RT_MESSAGETABLE">
<short>Identifier for a Message Table resource type.</short>
</element>

<element name="RT_GROUP_CURSOR">
<short>Identifier for a Hardware-independent Cursor resource type.</short>
</element>

<element name="RT_GROUP_ICON">
<short>Identifier for a Hardware-independent Icon resource type.</short>
</element>

<element name="RT_VERSION">
<short>Identifier for a Version resource type.</short>
</element>

<element name="RT_ANICURSOR">
<short>Identifier for an animated Cursor resource type.</short>
</element>

<element name="RT_ANIICON">
<short>Identifier for an animated Icon resource type.</short>
</element>

<element name="RT_HTML">
<short>Identifier for an HTML resource type.</short>
</element>

<element name="RT_MANIFEST">
<short>Identifier for a Side-by-Side Assembly Manifest resource type.</short>
</element>

<!-- image type constants -->
<element name="IMAGE_BITMAP">
<short>Identifies a Bitmap image type.</short>
</element>

<element name="IMAGE_ICON">
<short>Identifies an Icon image type.</short>
</element>

<element name="IMAGE_CURSOR">
<short>Identifies a Cursor image type.</short>
</element>

<element name="IMAGE_ENHMETAFILE">
<short>Identifies an Enhanced Metafile image type.</short>
</element>

<!-- image load flag constants -->
<element name="LR_DEFAULTCOLOR">
<short/>
</element>

<element name="LR_MONOCHROME">
<short/>
</element>

<element name="LR_COLOR">
<short/>
</element>

<element name="LR_COPYRETURNORG">
<short/>
</element>

<element name="LR_COPYDELETEORG">
<short/>
</element>

<element name="LR_LOADFROMFILE">
<short/>
</element>

<element name="LR_LOADTRANSPARENT">
<short/>
</element>

<element name="LR_DEFAULTSIZE">
<short/>
</element>

<element name="LR_VGACOLOR">
<short/>
</element>

<element name="LR_LOADMAP3DCOLORS">
<short/>
</element>

<element name="LR_CREATEDIBSECTION">
<short/>
</element>

<element name="LR_COPYFROMRESOURCE">
<short/>
</element>

<element name="LR_SHARED">
<short/>
</element>

<element name="TFarProc">
<short>
Alias to the Pointer type.
</short>
</element>

<element name="TFNWndProc">
<short>
Alias to the TFarProc type.
</short>
</element>

<element name="PLogFontA">
<short>
Defines a Pointer to the TLogFontA type.
</short>
</element>

<element name="PLogFontW">
<short>
Defines a Pointer to the TLogFontW type.
</short>
</element>

<element name="PLogFont">
<short>
Alias to the PLogFontA type.
</short>
</element>

<element name="LOGFONTA">
<short>
Alias to the Windows.LogFont type. Defined for the Windows platform.
</short>
</element>

<element name="LOGFONTW">
<short>
Alias to the Windows.LogFontW type. Defined for the Windows platform.
</short>
</element>

<element name="LOGFONTA.lfHeight">
<short>
Height (in logical units) for a character in the font.
</short>
</element>

<element name="LOGFONTA.lfWidth">
<short>
Width (in logical units) for a character in the font.
</short>
</element>

<element name="LOGFONTA.lfEscapement">
<short>
The angle (in tenths of a degree) between the escapement vector and the x-axis 
of the device.
</short>
</element>

<element name="LOGFONTA.lfOrientation">
<short>
The angle (in tenths of a degree) between the base line for a character and the 
x-axis of the device.
</short>
</element>

<element name="LOGFONTA.lfWeight">
<short>
The weight for the font in the range 0..1000. 400 is normal and 700 is bold. 0 
causes a default font weight to be used.
</short>
</element>

<element name="LOGFONTA.lfItalic">
<short/>
</element>

<element name="LOGFONTA.lfUnderline">
<short/>
</element>

<element name="LOGFONTA.lfStrikeOut">
<short/>
</element>

<element name="LOGFONTA.lfCharSet">
<short/>
</element>

<element name="LOGFONTA.lfOutPrecision">
<short/>
</element>

<element name="LOGFONTA.lfClipPrecision">
<short/>
</element>

<element name="LOGFONTA.lfQuality">
<short/>
</element>

<element name="LOGFONTA.lfPitchAndFamily">
<short/>
</element>

<element name="LOGFONTA.lfFaceName">
<short/>
</element>

<element name="LOGFONTW.lfHeight">
<short/>
</element>

<element name="LOGFONTW.lfWidth">
<short/>
</element>

<element name="LOGFONTW.lfEscapement">
<short/>
</element>

<element name="LOGFONTW.lfOrientation">
<short/>
</element>

<element name="LOGFONTW.lfWeight">
<short/>
</element>

<element name="LOGFONTW.lfItalic">
<short/>
</element>

<element name="LOGFONTW.lfUnderline">
<short/>
</element>

<element name="LOGFONTW.lfStrikeOut">
<short/>
</element>

<element name="LOGFONTW.lfCharSet">
<short/>
</element>

<element name="LOGFONTW.lfOutPrecision">
<short/>
</element>

<element name="LOGFONTW.lfClipPrecision">
<short/>
</element>

<element name="LOGFONTW.lfQuality">
<short/>
</element>

<element name="LOGFONTW.lfPitchAndFamily">
<short/>
</element>

<element name="LOGFONTW.lfFaceName">
<short/>
</element>

<element name="TLogFontA">
<short/>
</element>

<element name="TLogFontW">
<short/>
</element>

<element name="tagLOGFONT">
<short/>
</element>

<element name="TLogFont">
<short/>
</element>

<element name="LOGFONT">
<short/>
</element>

<element name="LPLOGFONT">
<short/>
</element>

<element name="PLogBrush">
<short>Pointer to the TLogBrush type.</short>
</element>

<element name="tagLOGBRUSH">
<short>Description of a Brush.</short>
<descr>
<p>
A brush has a color and a pattern.
</p>
<p>
The content of lbColor and lbHatch varies, depending on lbStyle.
</p>
<p>
When a drawing function fills an area, using the current brush, a BS_HOLLOW 
brush can be used to suppress filling.
</p>
</descr>
<seealso>
<link id="BS_SOLID"/>
<link id="HS_HORIZONTAL"/>
<link id="#lcl.lclintf.CreateBrushIndirect">CreateBrushIndirect</link>
</seealso>
</element>
<element name="tagLOGBRUSH.lbStyle">
<short>The brush style, e.g. BS_SOLID or BS_HATCHED.</short>
</element>
<element name="tagLOGBRUSH.lbColor">
<short>The brush color, a TColorRef for BS_SOLID or BS_HATCHED.</short>
</element>
<element name="tagLOGBRUSH.lbHatch">
<short>
Polymorphic, depending on lbStyle. With style BS_HATCHED lbHatch is a pattern 
constant, e.g. HS_VERTICAL.
</short>
</element>
<element link="#lcl.lcltype.tagLOGBRUSH" name="TLogBrush"/>
<element link="#lcl.lcltype.tagLOGBRUSH" name="LOGBRUSH"/>

<element name="PMaxLogPalette">
<short/>
</element>

<element name="TMaxLogPalette">
<short/>
</element>

<element name="TMaxLogPalette.palVersion">
<short/>
</element>

<element name="TMaxLogPalette.palNumEntries">
<short/>
</element>

<element name="TMaxLogPalette.palPalEntry">
<short/>
</element>

<element name="PEnumLogFontA">
<short/>
</element>

<element name="PEnumLogFontW">
<short/>
</element>

<element name="PEnumLogFont">
<short/>
</element>

<element name="tagENUMLOGFONTA">
<short/>
</element>

<element name="tagENUMLOGFONTA.elfLogFont">
<short/>
</element>

<element name="tagENUMLOGFONTA.elfFullName">
<short/>
</element>

<element name="tagENUMLOGFONTA.elfStyle">
<short/>
</element>

<element name="tagENUMLOGFONTW">
<short/>
</element>

<element name="tagENUMLOGFONTW.elfLogFont">
<short/>
</element>

<element name="tagENUMLOGFONTW.elfFullName">
<short/>
</element>

<element name="tagENUMLOGFONTW.elfStyle">
<short/>
</element>

<element name="tagENUMLOGFONT">
<short/>
</element>

<element name="TEnumLogFontA">
<short/>
</element>

<element name="TEnumLogFontW">
<short/>
</element>

<element name="TEnumLogFont">
<short/>
</element>

<element name="ENUMLOGFONTA">
<short/>
</element>

<element name="ENUMLOGFONTW">
<short/>
</element>

<element name="ENUMLOGFONT">
<short/>
</element>

<element name="PEnumLogFontExA">
<short/>
</element>

<element name="PEnumLogFontExW">
<short/>
</element>

<element name="PEnumLogFontEx">
<short/>
</element>

<element name="tagENUMLOGFONTEXA">
<short/>
</element>

<element name="tagENUMLOGFONTEXA.elfLogFont">
<short/>
</element>

<element name="tagENUMLOGFONTEXA.elfFullName">
<short/>
</element>

<element name="tagENUMLOGFONTEXA.elfStyle">
<short/>
</element>

<element name="tagENUMLOGFONTEXA.elfScript">
<short/>
</element>

<element name="tagENUMLOGFONTEXW">
<short/>
</element>

<element name="tagENUMLOGFONTEXW.elfLogFont">
<short/>
</element>

<element name="tagENUMLOGFONTEXW.elfFullName">
<short/>
</element>

<element name="tagENUMLOGFONTEXW.elfStyle">
<short/>
</element>

<element name="tagENUMLOGFONTEXW.elfScript">
<short/>
</element>

<element name="tagENUMLOGFONTEX">
<short/>
</element>

<element name="TEnumLogFontExA">
<short/>
</element>

<element name="TEnumLogFontExW">
<short/>
</element>

<element name="TEnumLogFontEx">
<short/>
</element>

<element name="ENUMLOGFONTEXA">
<short/>
</element>

<element name="ENUMLOGFONTEXW">
<short/>
</element>

<element name="ENUMLOGFONTEX">
<short/>
</element>

<element name="PLogPen">
<short/>
</element>

<element name="tagLOGPEN">
<short/>
</element>

<element name="tagLOGPEN.lopnStyle">
<short/>
</element>

<element name="tagLOGPEN.lopnWidth">
<short/>
</element>

<element name="tagLOGPEN.lopnColor">
<short/>
</element>

<element name="TLogPen">
<short/>
</element>

<element name="LOGPEN">
<short/>
</element>

<element name="PExtLogPen">
<short/>
</element>

<element name="tagEXTLOGPEN">
<short/>
</element>

<element name="tagEXTLOGPEN.elpPenStyle">
<short/>
</element>

<element name="tagEXTLOGPEN.elpWidth">
<short/>
</element>

<element name="tagEXTLOGPEN.elpBrushStyle">
<short/>
</element>

<element name="tagEXTLOGPEN.elpColor">
<short/>
</element>

<element name="tagEXTLOGPEN.elpHatch">
<short/>
</element>

<element name="tagEXTLOGPEN.elpNumEntries">
<short/>
</element>

<element name="tagEXTLOGPEN.elpStyleEntry">
<short/>
</element>

<element name="TExtLogPen">
<short/>
</element>

<element name="EXTLOGPEN">
<short/>
</element>

<element name="PTextMetricA">
<short/>
</element>

<element name="PTextMetricW">
<short/>
</element>

<element name="PTextMetric">
<short/>
</element>

<element name="tagTextMetricA">
<short/>
</element>

<element name="tagTextMetricA.tmHeight">
<short/>
</element>

<element name="tagTextMetricA.tmAscent">
<short/>
</element>

<element name="tagTextMetricA.tmDescent">
<short/>
</element>

<element name="tagTextMetricA.tmInternalLeading">
<short/>
</element>

<element name="tagTextMetricA.tmExternalLeading">
<short/>
</element>

<element name="tagTextMetricA.tmAveCharWidth">
<short/>
</element>

<element name="tagTextMetricA.tmMaxCharWidth">
<short/>
</element>

<element name="tagTextMetricA.tmWeight">
<short/>
</element>

<element name="tagTextMetricA.tmOverhang">
<short/>
</element>

<element name="tagTextMetricA.tmDigitizedAspectX">
<short/>
</element>

<element name="tagTextMetricA.tmDigitizedAspectY">
<short/>
</element>

<element name="tagTextMetricA.tmFirstChar">
<short/>
</element>

<element name="tagTextMetricA.tmLastChar">
<short/>
</element>

<element name="tagTextMetricA.tmDefaultChar">
<short/>
</element>

<element name="tagTextMetricA.tmBreakChar">
<short/>
</element>

<element name="tagTextMetricA.tmItalic">
<short/>
</element>

<element name="tagTextMetricA.tmUnderlined">
<short/>
</element>

<element name="tagTextMetricA.tmStruckOut">
<short/>
</element>

<element name="tagTextMetricA.tmPitchAndFamily">
<short/>
</element>

<element name="tagTextMetricA.tmCharSet">
<short/>
</element>

<element name="tagTEXTMETRICW">
<short/>
</element>

<element name="tagTEXTMETRICW.tmHeight">
<short/>
</element>

<element name="tagTEXTMETRICW.tmAscent">
<short/>
</element>

<element name="tagTEXTMETRICW.tmDescent">
<short/>
</element>

<element name="tagTEXTMETRICW.tmInternalLeading">
<short/>
</element>

<element name="tagTEXTMETRICW.tmExternalLeading">
<short/>
</element>

<element name="tagTEXTMETRICW.tmAveCharWidth">
<short/>
</element>

<element name="tagTEXTMETRICW.tmMaxCharWidth">
<short/>
</element>

<element name="tagTEXTMETRICW.tmWeight">
<short/>
</element>

<element name="tagTEXTMETRICW.tmOverhang">
<short/>
</element>

<element name="tagTEXTMETRICW.tmDigitizedAspectX">
<short/>
</element>

<element name="tagTEXTMETRICW.tmDigitizedAspectY">
<short/>
</element>

<element name="tagTEXTMETRICW.tmFirstChar">
<short/>
</element>

<element name="tagTEXTMETRICW.tmLastChar">
<short/>
</element>

<element name="tagTEXTMETRICW.tmDefaultChar">
<short/>
</element>

<element name="tagTEXTMETRICW.tmBreakChar">
<short/>
</element>

<element name="tagTEXTMETRICW.tmItalic">
<short/>
</element>

<element name="tagTEXTMETRICW.tmUnderlined">
<short/>
</element>

<element name="tagTEXTMETRICW.tmStruckOut">
<short/>
</element>

<element name="tagTEXTMETRICW.tmPitchAndFamily">
<short/>
</element>

<element name="tagTEXTMETRICW.tmCharSet">
<short/>
</element>

<element name="tagTEXTMETRIC">
<short/>
</element>

<element name="TTextMetricA">
<short/>
</element>

<element name="TTextMetricW">
<short/>
</element>

<element name="TTextMetric">
<short/>
</element>

<element name="TEXTMETRICA">
<short/>
</element>

<element name="TEXTMETRICW">
<short/>
</element>

<element name="TEXTMETRIC">
<short/>
</element>

<element name="TNewTextMetric">
<short>
Record type used to store text metrics for supported LCL platforms.
</short>
</element>

<element name="TNewTextMetric.tmHeight">
<short/>
</element>

<element name="TNewTextMetric.tmAscent">
<short/>
</element>

<element name="TNewTextMetric.tmDescent">
<short/>
</element>

<element name="TNewTextMetric.tmInternalLeading">
<short/>
</element>

<element name="TNewTextMetric.tmExternalLeading">
<short/>
</element>

<element name="TNewTextMetric.tmAveCharWidth">
<short/>
</element>

<element name="TNewTextMetric.tmMaxCharWidth">
<short/>
</element>

<element name="TNewTextMetric.tmWeight">
<short/>
</element>

<element name="TNewTextMetric.tmOverhang">
<short/>
</element>

<element name="TNewTextMetric.tmDigitizedAspectX">
<short/>
</element>

<element name="TNewTextMetric.tmDigitizedAspectY">
<short/>
</element>

<element name="TNewTextMetric.tmFirstChar">
<short/>
</element>

<element name="TNewTextMetric.tmLastChar">
<short/>
</element>

<element name="TNewTextMetric.tmDefaultChar">
<short/>
</element>

<element name="TNewTextMetric.tmBreakChar">
<short/>
</element>

<element name="TNewTextMetric.tmItalic">
<short/>
</element>

<element name="TNewTextMetric.tmUnderlined">
<short/>
</element>

<element name="TNewTextMetric.tmStruckOut">
<short/>
</element>

<element name="TNewTextMetric.tmPitchAndFamily">
<short/>
</element>

<element name="TNewTextMetric.tmCharSet">
<short/>
</element>

<element name="TNewTextMetric.ntmFlags">
<short/>
</element>

<element name="TNewTextMetric.ntmSizeEM">
<short/>
</element>

<element name="TNewTextMetric.ntmCellHeight">
<short/>
</element>

<element name="TNewTextMetric.ntmAvgWidth">
<short/>
</element>

<element name="TFontSignature">
<short/>
</element>

<element name="TFontSignature.fsUsb">
<short/>
</element>

<element name="TFontSignature.fsCsb">
<short/>
</element>

<element name="TNewTextMetricEx">
<short/>
</element>

<element name="TNewTextMetricEx.ntmentm">
<short/>
</element>

<element name="TNewTextMetricEx.ntmeFontSignature">
<short/>
</element>

<element name="FontEnumProc">
<short/>
</element>

<element name="FontEnumProc.Result">
<short/>
</element>

<element name="FontEnumProc.ELogFont">
<short/>
</element>

<element name="FontEnumProc.Metric">
<short/>
</element>

<element name="FontEnumProc.FontType">
<short/>
</element>

<element name="FontEnumProc.Data">
<short/>
</element>

<element name="FontEnumExProc">
<short/>
</element>

<element name="FontEnumExProc.Result">
<short/>
</element>

<element name="FontEnumExProc.ELogFont">
<short/>
</element>

<element name="FontEnumExProc.Metric">
<short/>
</element>

<element name="FontEnumExProc.FontType">
<short/>
</element>

<element name="FontEnumExProc.Data">
<short/>
</element>

<element name="MonitorEnumProc">
<short/>
</element>

<element name="MonitorEnumProc.Result">
<short/>
</element>

<element name="MonitorEnumProc.hMonitor">
<short/>
</element>

<element name="MonitorEnumProc.hdcMonitor">
<short/>
</element>

<element name="MonitorEnumProc.lprcMonitor">
<short/>
</element>

<element name="MonitorEnumProc.dwData">
<short/>
</element>

<element name="PWndClassExA">
<short>Pointer to the TWndClassExA type.</short>
</element>

<element name="PWndClassExW">
<short>Pointer to the TWndClassExW type.</short>
</element>

<element name="PWndClassEx">
<short>Alias for the PWndClassExA type.</short>
</element>

<element name="tagWNDCLASSEXA">
<short/>
</element>

<element name="tagWNDCLASSEXA.cbSize">
<short/>
</element>

<element name="tagWNDCLASSEXA.style">
<short/>
</element>

<element name="tagWNDCLASSEXA.lpfnWndProc">
<short/>
</element>

<element name="tagWNDCLASSEXA.cbClsExtra">
<short/>
</element>

<element name="tagWNDCLASSEXA.cbWndExtra">
<short/>
</element>

<element name="tagWNDCLASSEXA.hInstance">
<short/>
</element>

<element name="tagWNDCLASSEXA._hIcon">
<short/>
</element>

<element name="tagWNDCLASSEXA.hCursor">
<short/>
</element>

<element name="tagWNDCLASSEXA.hbrBackground">
<short/>
</element>

<element name="tagWNDCLASSEXA.lpszMenuName">
<short/>
</element>

<element name="tagWNDCLASSEXA.lpszClassName">
<short/>
</element>

<element name="tagWNDCLASSEXA.hIconSm">
<short/>
</element>

<element name="tagWNDCLASSEXW">
<short/>
</element>

<element name="tagWNDCLASSEXW.cbSize">
<short/>
</element>

<element name="tagWNDCLASSEXW.style">
<short/>
</element>

<element name="tagWNDCLASSEXW.lpfnWndProc">
<short/>
</element>

<element name="tagWNDCLASSEXW.cbClsExtra">
<short/>
</element>

<element name="tagWNDCLASSEXW.cbWndExtra">
<short/>
</element>

<element name="tagWNDCLASSEXW.hInstance">
<short/>
</element>

<element name="tagWNDCLASSEXW._hIcon">
<short/>
</element>

<element name="tagWNDCLASSEXW.hCursor">
<short/>
</element>

<element name="tagWNDCLASSEXW.hbrBackground">
<short/>
</element>

<element name="tagWNDCLASSEXW.lpszMenuName">
<short/>
</element>

<element name="tagWNDCLASSEXW.lpszClassName">
<short/>
</element>

<element name="tagWNDCLASSEXW.hIconSm">
<short/>
</element>

<element name="tagWNDCLASSEX">
<short/>
</element>

<element name="TWndClassExA">
<short/>
</element>

<element name="TWndClassExW">
<short/>
</element>

<element name="TWndClassEx">
<short/>
</element>

<element name="WNDCLASSEXA">
<short/>
</element>

<element name="WNDCLASSEXW">
<short/>
</element>

<element name="WNDCLASSEX">
<short/>
</element>

<element name="PWndClassA">
<short/>
</element>

<element name="PWndClassW">
<short/>
</element>

<element name="PWndClass">
<short/>
</element>

<element name="tagWNDCLASSA">
<short/>
</element>

<element name="tagWNDCLASSA.style">
<short/>
</element>

<element name="tagWNDCLASSA.lpfnWndProc">
<short/>
</element>

<element name="tagWNDCLASSA.cbClsExtra">
<short/>
</element>

<element name="tagWNDCLASSA.cbWndExtra">
<short/>
</element>

<element name="tagWNDCLASSA.hInstance">
<short/>
</element>

<element name="tagWNDCLASSA.hIcon">
<short/>
</element>

<element name="tagWNDCLASSA.hCursor">
<short/>
</element>

<element name="tagWNDCLASSA.hbrBackground">
<short/>
</element>

<element name="tagWNDCLASSA.lpszMenuName">
<short/>
</element>

<element name="tagWNDCLASSA.lpszClassName">
<short/>
</element>

<element name="tagWNDCLASSW">
<short/>
</element>

<element name="tagWNDCLASSW.style">
<short/>
</element>

<element name="tagWNDCLASSW.lpfnWndProc">
<short/>
</element>

<element name="tagWNDCLASSW.cbClsExtra">
<short/>
</element>

<element name="tagWNDCLASSW.cbWndExtra">
<short/>
</element>

<element name="tagWNDCLASSW.hInstance">
<short/>
</element>

<element name="tagWNDCLASSW.hIcon">
<short/>
</element>

<element name="tagWNDCLASSW.hCursor">
<short/>
</element>

<element name="tagWNDCLASSW.hbrBackground">
<short/>
</element>

<element name="tagWNDCLASSW.lpszMenuName">
<short/>
</element>

<element name="tagWNDCLASSW.lpszClassName">
<short/>
</element>

<element name="tagWNDCLASS">
<short/>
</element>

<element name="TWndClassA">
<short/>
</element>

<element name="TWndClassW">
<short/>
</element>

<element name="TWndClass">
<short/>
</element>

<element name="WNDCLASSA">
<short/>
</element>

<element name="WNDCLASSW">
<short/>
</element>

<element name="WNDCLASS">
<short/>
</element>

<element name="DefaultLogFont">
<short/>
</element>

<element name="PMsg">
<short/>
</element>

<element name="tagMSG">
<short/>
</element>

<element name="tagMSG.hwnd">
<short/>
</element>

<element name="tagMSG.message">
<short/>
</element>

<element name="tagMSG.wParam">
<short/>
</element>

<element name="tagMSG.lParam">
<short/>
</element>

<element name="tagMSG.time">
<short/>
</element>

<element name="tagMSG.pt">
<short/>
</element>

<element name="TMsg">
<short/>
</element>

<element name="_MSG">
<short/>
</element>

<element name="TCreateParams">
<short>Record type used to store window creation parameters.</short>
</element>

<element name="TCreateParams.Caption">
<short/>
</element>

<element name="TCreateParams.Style">
<short/>
</element>

<element name="TCreateParams.ExStyle">
<short/>
</element>

<element name="TCreateParams.X">
<short/>
</element>

<element name="TCreateParams.Y">
<short/>
</element>

<element name="TCreateParams.Width">
<short/>
</element>

<element name="TCreateParams.Height">
<short/>
</element>

<element name="TCreateParams.WndParent">
<short/>
</element>

<element name="TCreateParams.Param">
<short/>
</element>

<element name="TCreateParams.WindowClass">
<short/>
</element>

<element name="TCreateParams.WinClassName">
<short/>
</element>

<element name="TIconInfo">
<short>
Structure used to store the hot spot coordinates, color, and mask for an Icon.
</short>
</element>

<element name="TIconInfo.fIcon">
<short/>
</element>

<element name="TIconInfo.xHotspot">
<short/>
</element>

<element name="TIconInfo.yHotspot">
<short/>
</element>

<element name="TIconInfo.hbmMask">
<short/>
</element>

<element name="TIconInfo.hbmColor">
<short/>
</element>

<element name="PIconInfo">
<short/>
</element>

<element name="TTimerProc">
<short>
Defines a procedure used as a callback to process timer messages.
</short>
</element>
<element name="TTimerProc.hWnd">
<short/>
</element>
<element name="TTimerProc.uMsg">
<short/>
</element>
<element name="TTimerProc.idEvent">
<short/>
</element>
<element name="TTimerProc.dwTime">
<short/>
</element>

<element name="TLMTimer">
<short/>
</element>
<element name="TLMTimer.Msg">
<short/>
</element>
<element name="TLMTimer.TimerID">
<short/>
</element>
<element name="TLMTimer.TimerProc">
<short/>
</element>
<element name="TLMTimer.Result">
<short/>
</element>

<element name="TFNTimerProc">
<short/>
</element>

<element name="TClipboardFormat">
<short>Alias for the PtrUInt type.</short>
<descr>
<p>
<var>TClipboardFormat</var> is the type passed as an argument to 
<var>TClipboardRequestEvent</var> event handlers, and to routines in the 
<file>graphics</file> and <file>clipbrd</file> units.
</p>
</descr>
<seealso>
<link id="TPredefinedClipboardFormat"/>
<link id="PredefinedClipboardMimeTypes"/>
<link id="#lcl.lclintf.PredefinedClipboardFormat">PredefinedClipboardFormat</link>
</seealso>
</element>

<element name="PClipboardFormat">
<short>Pointer to a TClipboardFormat type.</short>
</element>

<element name="TClipboardRequestEvent">
<short>
Specifies an event handler signalled to get a stream instance with the data 
for a given clipboard format.
</short>
<descr>
<p>
<var>TClipboardRequestEvent</var> is the type used to represent an event 
handler procedure for clipboard requests in widgetset classes. It is the type 
used to implement the <var>OnRequest</var> event handler in 
<var>TClipboard</var>.
</p>
</descr>
<seealso>
<link id="#lcl.clipbrd.TClipboard.OnRequest">TClipboard.OnRequest</link>
</seealso>
</element>
<element name="TClipboardRequestEvent.RequestedFormatID">
<short/>
</element>
<element name="TClipboardRequestEvent.Data">
<short/>
</element>

<element name="TClipboardType">
<short>Represents the sources or dispositions for clipboard data.</short>
<descr>
<p>
Used for platforms / window managers / desktop environments that support more 
than one clipboard. It appears to be inherently tied to the ICCCM protocol 
developed by freedesktop.org. Values in the enumeration are used in widgetset 
classes as an index to access the different clipboard storage areas/formats.
</p>
</descr>
</element>
<element name="TClipboardType.ctPrimarySelection">
<short>
The clipboard is the one designated as PRIMARY for the desktop. Implies that 
it is used for commands that accept a single argument. Historically, it is 
used for mouse selections, pasting using the middle mouse button, and 
explicit cut/copy/paste operations initiated from a menu item.
</short>
</element>
<element name="TClipboardType.ctSecondarySelection">
<short>
The clipboard is the one designated as SECONDARY for the desktop. Implies 
that it is used to exchange values for primary and secondary selections.
</short>
</element>
<element name="TClipboardType.ctClipboard">
<short>
This is the clipboard type when the desktop does not support multiple 
clipboards, or when copy/cut and paste operations are performed between 
different clients.
</short>
</element>

<element name="ClipboardTypeName">
<short>
Contains the names associated with the clipboard types accessed using the 
enumeration values.
</short>
</element>

<element name="TPredefinedClipboardFormat">
<short>Represents predefined clipboard formats used in the LCL.</short>
<descr>
<p>
Values in the enumeration indicates the type of content stored on the 
clipboard. Values from the enumeration are passed as an argument to routines 
in the LCL interface, and used in the implementation of widgetset classes.
</p>
</descr>
<seealso>
<link id="PredefinedClipboardMimeTypes"/>
</seealso>
</element>
<element name="TPredefinedClipboardFormat.pcfText">
<short>Clipboard contains plain text.</short>
</element>
<element name="TPredefinedClipboardFormat.pcfBitmap">
<short>Clipboard contains an image using the .BMP or Bitmap format.</short>
</element>
<element name="TPredefinedClipboardFormat.pcfPixmap">
<short>Clipboard contains an image using the PixMap format.</short>
</element>
<element name="TPredefinedClipboardFormat.pcfIcon">
<short>Clipboard contains an image using the .ico or Icon format.</short>
</element>
<element name="TPredefinedClipboardFormat.pcfPicture">
<short>Clipboard contains an image using the TPicture format.</short>
</element>
<element name="TPredefinedClipboardFormat.pcfObject">
<short>Clipboard contains an object (TObject) instance.</short>
</element>
<element name="TPredefinedClipboardFormat.pcfComponent">
<short>Clipboard contains a component (TComponent) instance.</short>
</element>
<element name="TPredefinedClipboardFormat.pcfCustomData">
<short>
Clipboard contains data stored using an application-specific custom format.
</short>
</element>

<element name="PredefinedClipboardMimeTypes">
<short>
Contains MIME types for the values in the TPredefinedClipboardFormat 
enumeration.
</short>
</element>

<element name="TListChangeEvent">
<short>
Specifies an event handler signalled when a value in a TListWithEvent 
instance is modified.
</short>
<descr>
<p>
TListChangeEvent is the type used for the OnChange event handler property in 
TListWithEvent.
</p>
</descr>
<seealso>
<link id="TListWithEvent.OnChange"/>
<link id="TListWithEvent.Notify"/>
<link id="#rtl.classes.TListNotification">TListNotification</link>
</seealso>
</element>
<element name="TListChangeEvent.Ptr">
<short>An untyped Pointer to the modified list item for the event.</short>
</element>
<element name="TListChangeEvent.AnAction">
<short>
Indicates the action performed for the list item that caused the notification 
event.
</short>
</element>

<element name="TListWithEvent">
<short>
Implements a list with an event signalled when values are added or removed.
</short>
<descr>
<p>
<var>TListWithEvent</var> is a <var>TList</var> descendant which implements a 
list with an event handler signalled when values are added to or removed from 
the container. It provides an overridden <var>Notify</var> method which 
signals the event handler (when assigned) for add or delete operations. 
Assign an object procedure using the signature in TListChangeEvent to the 
OnChange event handler to respond to the notification.
</p>
</descr>
<seealso>
<link id="TListWithEvent.OnChange"/>
<link id="TListWithEvent.Notify"/>
<link id="TListChangeEvent"/>
<link id="#rtl.classes.TList">TList</link>
</seealso>
</element>

<element name="TListWithEvent.FOnChange">
<short>Member used for the OnChange event handler.</short>

</element>
<element name="TListWithEvent.Notify">
<short>
Handles the notification when a value is added to or removed from the list.
</short>
<descr>
<p>
<var>Notify</var> is an overridden method in <var>TListWithEvent</var>. It 
calls the inherited method to notify registered observers of the change to 
the list. It signals the <var>OnChange</var> event handler (when assigned) 
using the values in <var>Ptr</var> and <var>AnAction</var> as arguments.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TList.Add">TList.Add</link>
<link id="#rtl.classes.TList.Delete">TList.Delete</link>
<link id="#rtl.classes.TList.Extract">TList.Extract</link>
</seealso>
</element>

<element name="TListWithEvent.Notify.Ptr">
<short>Untyped pointer to the value for the notification.</short>
</element>

<element name="TListWithEvent.Notify.AnAction">
<short>Operation performed for the specified value.</short>
</element>

<element name="TListWithEvent.OnChange">
<short>
Event handler signalled when a value is added to or removed from the list.
</short>
<descr>
<p>
Signalled from the Notify method (when assigned).
</p>
</descr>
<seealso>
<link id="TListWithEvent.Notify"/>
<link id="#rtl.classes.TList.Add">TList.Add</link>
<link id="#rtl.classes.TList.Delete">TList.Delete</link>
<link id="#rtl.classes.TList.Extract">TList.Extract</link>
</seealso>
</element>

<element name="csNone">
<short>Component style identifier.</short>
</element>

<element name="csButton">
<short>Component style identifier.</short>
</element>

<element name="csComboBox">
<short>Component style identifier.</short>
</element>

<element name="csCheckbox">
<short>Component style identifier.</short>
</element>

<element name="csEdit">
<short>Component style identifier.</short>
</element>

<element name="csForm">
<short>Component style identifier.</short>
</element>

<element name="csStaticText">
<short>Component style identifier.</short>
</element>

<element name="csScrollBar">
<short>Component style identifier.</short>
</element>

<element name="csListView">
<short>Component style identifier.</short>
</element>

<element name="csMemo">
<short>Component style identifier.</short>
</element>

<element name="csMainMenu">
<short>Component style identifier.</short>
</element>

<element name="csMenuBar">
<short>Component style identifier.</short>
</element>

<element name="csMenuItem">
<short>Component style identifier.</short>
</element>

<element name="csNotebook">
<short>Component style identifier.</short>
</element>

<element name="csFileDialog">
<short>Component style identifier.</short>
</element>

<element name="csRadioButton">
<short>Component style identifier.</short>
</element>

<element name="csScrolledWindow">
<short>Component style identifier.</short>
</element>

<element name="csSpinedit">
<short>Component style identifier.</short>
</element>

<element name="csStatusBar">
<short>Component style identifier.</short>
</element>

<element name="csToggleBox">
<short>Component style identifier.</short>
</element>

<element name="csGroupBox">
<short>Component style identifier.</short>
</element>

<element name="csPage">
<short>Component style identifier.</short>
</element>

<element name="csColorDialog">
<short>Component style identifier.</short>
</element>

<element name="csListBox">
<short>Component style identifier.</short>
</element>

<element name="csFontDialog">
<short>Component style identifier.</short>
</element>

<element name="csProgressBar">
<short>Component style identifier.</short>
</element>

<element name="csTrackBar">
<short>Component style identifier.</short>
</element>

<element name="csWinControl">
<short>Component style identifier.</short>
</element>

<element name="csFixed">
<short>Component style identifier.</short>
</element>

<element name="csBitBtn">
<short>Component style identifier.</short>
</element>

<element name="csCListBox">
<short>Component style identifier.</short>
</element>

<element name="csPopupMenu">
<short>Component style identifier.</short>
</element>

<element name="csHintWindow">
<short>Component style identifier.</short>
</element>

<element name="csCalendar">
<short>Component style identifier.</short>
</element>

<element name="csArrow">
<short>Component style identifier.</short>
</element>

<element name="csPanel">
<short>Component style identifier.</short>
</element>

<element name="csScrollBox">
<short>Component style identifier.</short>
</element>

<element name="csCheckListBox">
<short>Component style identifier.</short>
</element>

<element name="csPairSplitter">
<short>Component style identifier.</short>
</element>

<element name="csPairSplitterSide">
<short>Component style identifier.</short>
</element>

<element name="csOpenFileDialog">
<short>Component style identifier.</short>
</element>

<element name="csSaveFileDialog">
<short>Component style identifier.</short>
</element>

<element name="csSelectDirectoryDialog">
<short>Component style identifier.</short>
</element>

<element name="csPreviewFileControl">
<short>Component style identifier.</short>
</element>

<element name="csPreviewFileDialog">
<short>Component style identifier.</short>
</element>

<element name="csNonLCL">
<short>
Component style identifier. Used for non-LCL controls that create their own 
handles.
</short>
</element>

<element name="MK_LBUTTON">
<short>
A key state constant to represent the left mouse button, equivalent to ssLeft 
from TShiftState.
</short>
<seealso>
<link id="MK_Shift"/>
<link id="MK_Control"/>
<link id="MK_RButton"/>
<link id="MK_MButton"/>
<link id="MK_XBUTTON1"/>
<link id="MK_XBUTTON2"/>
<link id="#rtl.classes.TShiftState">TShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
<link id="#lcl.forms.KeyDataToShiftState">KeyDataToShiftState</link>
</seealso>
</element>

<element name="MK_RBUTTON">
<short>
A key state constant to represent the right mouse button, equivalent to 
ssRight from TShiftState.
</short>
<seealso>
<link id="MK_Shift"/>
<link id="MK_Control"/>
<link id="MK_LButton"/>
<link id="MK_MButton"/>
<link id="MK_XBUTTON1"/>
<link id="MK_XBUTTON2"/>
<link id="#rtl.classes.TShiftState">TShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
<link id="#lcl.forms.KeyDataToShiftState">KeyDataToShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
</seealso>
</element>

<element name="MK_SHIFT">
<short>
A key state constant to represent the shift key, equivalent to ssShift from 
TShiftState.
</short>
<seealso>
<link id="MK_Control"/>
<link id="MK_LButton"/>
<link id="MK_RButton"/>
<link id="MK_MButton"/>
<link id="MK_XBUTTON1"/>
<link id="MK_XBUTTON2"/>
<link id="#rtl.classes.TShiftState">TShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
<link id="#lcl.forms.KeyDataToShiftState">KeyDataToShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
</seealso>
</element>

<element name="MK_CONTROL">
<short>
A key state constant to represent the control key, equivalent to ssCtrl from 
TShiftState.
</short>
<seealso>
<link id="MK_Shift"/>
<link id="MK_LButton"/>
<link id="MK_RButton"/>
<link id="MK_MButton"/>
<link id="MK_XBUTTON1"/>
<link id="MK_XBUTTON2"/>
<link id="#rtl.classes.TShiftState">TShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
<link id="#lcl.forms.KeyDataToShiftState">KeyDataToShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
</seealso>
</element>

<element name="MK_MBUTTON">
<short>
A key state constant to represent the middle mouse button, equivalent to 
ssMiddle from TShiftState.
</short>
<seealso>
<link id="MK_Shift"/>
<link id="MK_Control"/>
<link id="MK_LButton"/>
<link id="MK_RButton"/>
<link id="MK_XBUTTON1"/>
<link id="MK_XBUTTON2"/>
<link id="#rtl.classes.TShiftState">TShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
<link id="#lcl.forms.KeyDataToShiftState">KeyDataToShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
</seealso>
</element>

<element name="MK_XBUTTON1">
<short>
A key state constant to represent the first extra mouse button, equivalent to 
ssExtra1 from TShiftState.
</short>
<seealso>
<link id="MK_Shift"/>
<link id="MK_Control"/>
<link id="MK_LButton"/>
<link id="MK_RButton"/>
<link id="MK_MButton"/>
<link id="MK_XBUTTON2"/>
<link id="#rtl.classes.TShiftState">TShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
<link id="#lcl.forms.KeyDataToShiftState">KeyDataToShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
</seealso>
</element>

<element name="MK_XBUTTON2">
<short>
A key state constant to represent the second extra mouse button, equivalent 
to ssExtra2 from TShiftState.
</short>
<seealso>
<link id="MK_Shift"/>
<link id="MK_Control"/>
<link id="MK_LButton"/>
<link id="MK_RButton"/>
<link id="MK_MButton"/>
<link id="MK_XBUTTON1"/>
<link id="#rtl.classes.TShiftState">TShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
<link id="#lcl.forms.KeyDataToShiftState">KeyDataToShiftState</link>
<link id="#lcl.forms.ShiftStateToKeys">ShiftStateToKeys</link>
</seealso>
</element>

<!-- notification messages for all controls -->
<element name="NM_FIRST">
<short/>
</element>

<element name="NM_OUTOFMEMORY">
<short/>
</element>

<element name="NM_CLICK">
<short/>
</element>

<element name="NM_DBLCLK">
<short/>
</element>

<element name="NM_RETURN">
<short/>
</element>

<element name="NM_RCLICK">
<short/>
</element>

<element name="NM_RDBLCLK">
<short/>
</element>

<element name="NM_SETFOCUS">
<short/>
</element>

<element name="NM_KILLFOCUS">
<short/>
</element>

<element name="NM_CUSTOMDRAW">
<short/>
</element>

<element name="NM_HOVER">
<short/>
</element>

<element name="NM_NCHITTEST">
<short/>
</element>

<element name="NM_KEYDOWN">
<short/>
</element>

<element name="NM_RELEASEDCAPTURE">
<short/>
</element>

<element name="NM_SETCURSOR">
<short/>
</element>

<element name="NM_CHAR">
<short/>
</element>

<element name="NM_LAST">
<short/>
</element>

<element name="LVN_FIRST">
<short/>
</element>

<element name="LVN_LAST">
<short/>
</element>

<element name="HDN_FIRST">
<short/>
</element>

<element name="HDN_LAST">
<short/>
</element>

<element name="TVN_FIRST">
<short/>
</element>

<element name="TVN_LAST">
<short/>
</element>

<element name="TTN_FIRST">
<short/>
</element>

<element name="TTN_LAST">
<short/>
</element>

<element name="TCN_FIRST">
<short/>
</element>

<element name="TCN_LAST">
<short/>
</element>

<element name="TBN_First">
<short/>
</element>

<element name="TBN_Last">
<short/>
</element>

<element name="CCS_TOP">
<short/>
</element>

<element name="CCS_NOMOVEY">
<short/>
</element>

<element name="CCS_BOTTOM">
<short/>
</element>

<element name="CCS_NORESIZE">
<short/>
</element>

<element name="CCS_NOPARENTALIGN">
<short/>
</element>

<element name="CCS_ADJUSTABLE">
<short/>
</element>

<element name="CCS_NODIVIDER">
<short/>
</element>

<element name="CCS_VERT">
<short/>
</element>

<element name="CCS_LEFT">
<short/>
</element>

<element name="CCS_RIGHT">
<short/>
</element>

<element name="CCS_NOMOVEX">
<short/>
</element>

<!-- list view notification constants -->
<element name="LVN_ITEMCHANGING">
<short>
List View notification message code for a pending change to an item.
</short>
</element>

<element name="LVN_ITEMCHANGED">
<short>
List View notification message code for a completed change to an item.
</short>
</element>

<element name="LVN_INSERTITEM">
<short/>
</element>

<element name="LVN_DELETEITEM">
<short/>
</element>

<element name="LVN_DELETEALLITEMS">
<short/>
</element>

<element name="LVN_COLUMNCLICK">
<short/>
</element>

<element name="LVN_BEGINDRAG">
<short/>
</element>

<element name="LVN_BEGINRDRAG">
<short/>
</element>

<element name="LVIF_TEXT">
<short/>
</element>

<element name="LVIF_IMAGE">
<short/>
</element>

<element name="LVIF_PARAM">
<short/>
</element>

<element name="LVIF_STATE">
<short/>
</element>

<element name="LVIF_INDENT">
<short/>
</element>

<element name="LVIF_NORECOMPUTE">
<short/>
</element>

<element name="LVIS_FOCUSED">
<short/>
</element>

<element name="LVIS_SELECTED">
<short/>
</element>

<element name="LVIS_CUT">
<short/>
</element>

<element name="LVIS_DROPHILITED">
<short/>
</element>

<element name="LVIS_ACTIVATING">
<short/>
</element>

<element name="LVIS_OVERLAYMASK">
<short/>
</element>

<element name="LVIS_STATEIMAGEMASK">
<short/>
</element>

<element name="PNMListView">
<short>Pointer to the TNMListView type.</short>
</element>

<element name="TNMListView">
<short>Record type used for List View change notification messages.</short>
</element>

<element name="TNMListView.hdr">
<short/>
</element>

<element name="TNMListView.iItem">
<short/>
</element>

<element name="TNMListView.iSubItem">
<short/>
</element>

<element name="TNMListView.uNewState">
<short/>
</element>

<element name="TNMListView.uOldState">
<short/>
</element>

<element name="TNMListView.uChanged">
<short/>
</element>

<element name="TNMListView.ptAction">
<short/>
</element>

<element name="TNMListView.lParam">
<short/>
</element>

<element name="_NM_LISTVIEW">
<short>Alias for the TNMListView type.</short>
</element>

<element name="NM_LISTVIEW">
<short>Alias for the TNMListView type.</short>
</element>

<element name="tagNMLISTVIEW">
<short>Alias for the TNMListView type.</short>
</element>

<element name="TStockFont">
<short>Represents stock font types used in InitStockFont.</short>
<descr>
<p>
Values in the enumeration are passed as an argument to the InitStockFont 
routine in the LCL interface, and used when a widgetset class calls its 
InitStockFont method.
</p>
</descr>
</element>
<element name="TStockFont.sfSystem">
<short>Represents the stock system font.</short>
</element>
<element name="TStockFont.sfHint">
<short>Represents the stock hint font.</short>
</element>
<element name="TStockFont.sfIcon">
<short>Represents the stock icon font.</short>
</element>
<element name="TStockFont.sfMenu">
<short>Represents the stock menu font.</short>
</element>

<element name="CS_To_String">
<short>
Converts a component style identifier to a component style name.
</short>
<descr>
<p>
The following values are not supported in the CompStyle argument, and cause 
'Unknown component style' to be returned from the routine:
</p>
<ul>
<li>csAlignment</li>
<li>csBox</li>
<li>csGTKTable</li>
<li>csMainForm</li>
<li>csTable</li>
<li>csVScrollBar</li>
<li>csFrame</li>
<li>csButtonBox</li>
<li>csCanvas</li>
<li>csFont</li>
<li>csPen</li>
<li>csBrush</li>
<li>csTimer</li>
<li>csImage</li>
<li>csToolbar</li>
<li>csToolButton</li>
<li>csSpeedButton</li>
</ul>
<p>
Not used in the current LCL implementation.
</p>
</descr>
</element>
<element name="CS_To_String.Result">
<short>
String representing the component style, or 'Unknown component style' for 
unsupported values.
</short>
</element>
<element name="CS_To_String.CompStyle">
<short>
Integer component style identifier converted to its representation as a 
String.
</short>
</element>

<element name="HiWord">
<short>
Gets the largest value for the specified Integer as a Word type.
</short>
<seealso>
<link id="LoWord"/>
<link id="#rtl.system.Hi">Hi</link>
</seealso>
</element>
<element name="HiWord.Result">
<short>Largest Word value for the specified Integer.</short>
</element>
<element name="HiWord.i">
<short>Integer value examined in the routine.</short>
</element>

<element name="LoWord">
<short>
Gets the smallest value for the specified Integer as a Word type.
</short>
<seealso>
<link id="HiWord"/>
<link id="#rtl.system.Hi">Lo</link>
</seealso>
</element>
<element name="LoWord.Result">
<short>Smallest Word value for the specified Integer.</short>
</element>
<element name="LoWord.i">
<short>Integer value examined in the routine.</short>
</element>

<element name="Char2VK">
<short>Gets the virtual key code for the specified character value.</short>
<descr>
<p>
The return value is 0 (zero) if the character in C is not an alphanumeric 
character in the ranges '0'..'9', 'a'..'z', or 'A'..'Z'.
</p>
</descr>
</element>
<element name="Char2VK.Result">
<short>Virtual key code for the specified value.</short>
</element>
<element name="Char2VK.C">
<short>Character value examined in the routine.</short>
</element>

<element name="VK2Char">
<short>Gets the character value for the specified virtual key code.</short>
</element>
<element name="VK2Char.Result">
<short>Character value for the specified virtual key code.</short>
</element>
<element name="VK2Char.AVK">
<short>Virtual key code converted to a character in the routine.</short>
</element>

<element name="MathRound">
<short>Rounds the specified Real value to an Int64 value.</short>
</element>
<element name="MathRound.Result">
<short>Int64 type with the rounded value.</short>
</element>
<element name="MathRound.AValue">
<short>Real type with the value rounded in the routine.</short>
</element>

<element name="MulDiv">
<short>
Multiples the numerator by the specified Integer value, and divides the 
result by the denominator value.
</short>
<descr>
<p>
Values passed in the arguments to the routine are Integer types. Values in 
nNumber and nNumerator are cast to Int64 values for the multiplication 
operation. MathRound is called to ensure that the result for the division 
operation is rounded for the Int64 type, and is cast to the Integer type used 
in the return value.
</p>
<p>
When nNumerator and nDenominator have the same value, the return value is set 
to nNumber. The return value is -1 if the value in nDenominator is 0 (zero).
</p>
</descr>
</element>
<element name="MulDiv.Result">
<short>Integer result for the multiply and divide operations.</short>
</element>
<element name="MulDiv.nNumber">
<short>Multiplicand for the operation.</short>
</element>
<element name="MulDiv.nNumerator">
<short>Numerator multiplied by the specified value.</short>
</element>
<element name="MulDiv.nDenominator">
<short>Denominator used for the division operation.</short>
</element>

<element name="KeyToShortCut">
<short>
Gets the short cut value for the specified key code and shift modifiers.
</short>
<descr>
<p>
The return value is determined by combining the value in Key with the Shift, 
Ctrl, Alt, or Meta modifiers in Shift. The return value is 0 if any of the 
high-order bits in Key are already set.
</p>
</descr>
</element>
<element name="KeyToShortCut.Result">
<short>TShortCut value for the specified key code and shift modifier.</short>
</element>
<element name="KeyToShortCut.Key">
<short>Key code for the short cut value.</short>
</element>
<element name="KeyToShortCut.Shift">
<short>Shift, Ctrl, Alt, or Meta modifier for the short cut value.</short>
</element>

<element name="CharSetToString">
<short>
Gets a String with the name for the specified character set identifier.
</short>
</element>
<element name="CharSetToString.Result">
<short>Character set name for the specified identifier.</short>
</element>
<element name="CharSetToString.Charset">
<short>Character set identifier converted to a name in the routine.</short>
</element>

<element name="StringToCharset">
<short>
Gets the character set identifier for the specified character set name.
</short>
</element>
<element name="StringToCharset.Result">
<short>
Constant with the character set identifier for the specified character set 
name.
</short>
</element>
<element name="StringToCharset.Charset">
<short>Character set name converted to its identifier constant.</short>
</element>
</module>
<!-- LCLType -->
</package>
</fpdoc-descriptions>
