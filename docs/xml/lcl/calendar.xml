<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
    ====================================================================
      Calendar
    ====================================================================
    -->
    <module name="Calendar">
      <short>
        Classes and types used to implement TCalendar, a graphic control allowing selection of a date from a calendar display.
      </short>
      <descr>
        <p>
          <file>calendar.pp</file> contains classes and types used to implement <var>TCalendar</var>, a graphic control allowing selection of a date from a calendar display. It is part of the Lazarus Component Library (<b>LCL</b>).
        </p>
        <p>
          The following components are added to the Lazarus IDE component palette:
        </p>
        <p>
          <b>Misc</b> Tab
        </p>
        <ul>
          <li>TCalendar</li>
        </ul>
      </descr>

      <!-- unresolved references -->
      <element name="LCLProc"/>
      <element name="Types"/>
      <element name="SysUtils"/>
      <element name="Classes"/>
      <element name="LCLType"/>
      <element name="LCLStrConsts"/>
      <element name="lMessages"/>
      <element name="Controls"/>
      <element name="LResources"/>

      <!-- enumeration type Visibility: default -->
      <element name="TDisplaySetting">
        <short>
          Enumerated type with values that control display settings in TCalendar.
        </short>
        <descr>
          <p>
            <var>TDisplaySetting</var> is an enumerated type with values that control display settings in <var>TCalendar</var>. Values from TDisplaySetting are stored in the <var>TDisplaySettings</var> type.
          </p>
          <remark>
            The value <var>dsStartMonday</var> has been removed in LCL version 2.2 or higher.
          </remark>
        </descr>
        <seealso>
          <link id="DefaultDisplaySettings"/>
          <link id="TCustomCalendar.DisplaySettings"/>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDisplaySetting.dsShowHeadings">
        <short>Displays a month/year heading.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDisplaySetting.dsShowDayNames">
        <short>Displays day names.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDisplaySetting.dsNoMonthChange">
        <short>Prevents changing the current month.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDisplaySetting.dsShowWeekNumbers">
        <short>Displays week numbers.</short>
      </element>

      <!-- set type Visibility: default -->
      <element name="TDisplaySettings">
        <short>Set type for TDisplaySetting values.</short>
        <descr>
          <p>
            <var>TDisplaySettings</var> is a set type used to store enumerations values from TDisplaySetting. It is the type used for the <var>DisplaySettings</var> property in <var>TCustomCalendar</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCalendar.DisplaySettings"/>
          <link id="TDisplaySetting"/>
        </seealso>
      </element>

      <element name="DefaultDisplaySettings">
        <short>
          Default display settings used in TCalendar.
        </short>
        <descr>
          <p>
            <var>DefaultDisplaySettings</var> is a constant with the default display settings used in <var>TCalendar</var>. DefaultDisplaySettings contains the following values:
          </p>
          <dl>
            <dt>dsShowHeadings</dt>
            <dd>Displays the month/year heading</dd>
            <dt>dsShowDayNames</dt>
            <dd>Displays day names</dd>
          </dl>
        </descr>
        <seealso></seealso>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TCalendarPart">
        <short>
           Indicates where a mouse click occurred in a calendar control.
        </short>
        <descr>
          <p>
            TCalendarPart is an enumerated type with values that indicate where a mouse click occurred in a calendar control. TCalendarPart is used to implement the TCustomCalendar.HitTest method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCalendar.HitTest"/>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarPart.cpNoWhere">
        <short>Mouse click cannot be applied to the control; no handle available.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarPart.cpDate">
        <short>Mouse click occurred on a date in the calendar control.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarPart.cpWeekNumber">
        <short>Mouse click occurred on a week number in the calendar control.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarPart.cpTitle">
        <short>Mouse click occurred on a day heading in the calendar control.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarPart.cpTitleBtn">
        <short>Mouse click occurred on a navigation button in a calendar control.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarPart.cpTitleMonth">
        <short>
          Mouse click occurred on the month name heading in the calendar control.
        </short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarPart.cpTitleYear">
        <short>
          Mouse click occurred on the year number heading in the calendar control.
        </short>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TCalendarView">
        <short>
          Defines the view for a calendar.
        </short>
        <descr>
          <p>
            TCalendarView is an enumeration type with values that define the view for a calendar control. TCalendarView makes it possible to set the calendar view introduced in Windows Vista or later. In other widgetsets, as well as in older versions of Windows, a calendar has only a standard "month view" grid with days representing a month. TCalendarView is used to implement the TCustomCalendar.GetCalendarView method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCalendar.GetCalendarView"/>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarView.cvMonth">
        <short>Grid has days for one month.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarView.cvYear">
        <short>Grid has months in one year.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarView.cvDecade">
        <short>Grid has years from one decade.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCalendarView.cvCentury">
        <short>Grid has decades for one century.</short>
      </element>

      <element name="TCalDayOfWeek">
        <short>Represents days of the week used in TCalendar.</short>
        <descr>
          <p>
            <var>TCalDayOfWeek</var> is an enumerated type with values which represent the day used as the first day of the week in <var>TCustomCalendar</var> and descendants.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCalendar.FirstDayOfWeek"/>
        </seealso>
      </element>
      <element name="TCalDayOfWeek.dowMonday">
        <short>Represents Monday.</short>
      </element>
      <element name="TCalDayOfWeek.dowTuesday">
        <short>Represents Tuesday.</short>
      </element>
      <element name="TCalDayOfWeek.dowWednesday">
        <short>Represents Wednesday.</short>
      </element>
      <element name="TCalDayOfWeek.dowThursday">
        <short>Represents Thursday.</short>
      </element>
      <element name="TCalDayOfWeek.dowFriday">
        <short>Represents Friday.</short>
      </element>
      <element name="TCalDayOfWeek.dowSaturday">
        <short>Represents Saturday.</short>
      </element>
      <element name="TCalDayOfWeek.dowSunday">
        <short>Represents Sunday.</short>
      </element>
      <element name="TCalDayOfWeek.dowDefault">
        <short>
          Use the default day of the week setting for the platform for the first day of the week. Not compatible with the value used in Delphi (dowLocaleDefault).
        </short>
      </element>

      <!-- object Visibility: default -->
      <element name="EInvalidDate">
        <short>
          <var>EInvalidDate</var> is an exception raised for an invalid date.
        </short>
        <descr>
          <p>
            <var>EInvalidDate</var> is an exception raised when a invalid date is selected in a calendar control.
          </p>
        </descr>
        <errors/>
        <seealso></seealso>
      </element>

      <!-- object Visibility: default -->
      <element name="TCustomCalendar">
        <short>Base class for <var>TCalendar</var>.</short>
        <descr>
          <p>
            <var>TCustomCalendar</var> is the base class for <var>TCalendar</var>, a graphic control for selecting a date.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl">TWinControl</link>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FDateAsString">
        <short></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FDate">
        <short></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FDisplaySettings">
        <short></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FOnChange">
        <short></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FDayChanged">
        <short></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FMonthChanged">
        <short></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FYearChanged">
        <short></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCalendar.FPropsChanged">
        <short></short>
      </element>

      <!-- function Visibility: private -->
      <element name="TCustomCalendar.GetDateTime">
        <short>Gets the value for the DateTime property.</short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCalendar.GetDateTime.Result">
        <short>Value for the DateTime property.</short>
      </element>

      <!-- procedure Visibility: private -->
      <element name="TCustomCalendar.SetDateTime">
        <short>Sets the value for the DateTime property.</short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.SetDateTime.AValue">
        <short>New value for the DateTime property.</short>
      </element>

      <!-- procedure Visibility: private -->
      <element name="TCustomCalendar.GetProps">
        <short>Gets values for properties in the calendar control.</short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>

      <!-- procedure Visibility: private -->
      <element name="TCustomCalendar.SetProps">
        <short>Sets values for properties in the calendar control.</short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomCalendar.GetDisplaySettings">
        <short>Gets the value for the DisplaySettings property.</short>
        <descr>
          <link id="TCustomCalendar.DisplaySettings"/>
          <link id="TDisplaySettings"/>
          <link id="TDisplaySetting"/>
        </descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCalendar.GetDisplaySettings.Result">
        <short>Value for the DisplaySettings property.</short>
      </element>

      <!-- procedure Visibility: private -->
      <element name="TCustomCalendar.SetDisplaySettings">
        <short>Sets the value for the DisplaySettings property.</short>
        <descr></descr>
        <seealso>
          <link id="TCustomCalendar.DisplaySettings"/>
          <link id="TDisplaySettings"/>
          <link id="TDisplaySetting"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.SetDisplaySettings.AValue">
        <short>New value for the DisplaySettings property.</short>
      </element>

      <!-- function Visibility: private -->
      <element name="TCustomCalendar.GetDate">
        <short>Gets the value for the Date property.</short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCalendar.GetDate.Result">
        <short>Value for the Date property.</short>
      </element>

      <!-- procedure Visibility: private -->
      <element name="TCustomCalendar.SetDate">
        <short>Sets the value for the Date property.</short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.SetDate.AValue">
        <short>New value for the Date property.</short>
      </element>

      <!-- class procedure Visibility: protected -->
      <element
        name="TCustomCalendar.WSRegisterClass"
        link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

        <!-- procedure Visibility: protected -->
      <element name="TCustomCalendar.LMChanged">
        <short>
          Handles the LCL message received when the control is changed.
        </short>
        <descr></descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.LMChanged.Message">
        <short>Message examined in the method.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TCustomCalendar.LMMonthChanged">
        <short>
          Handles the LCL message received when the month has been changed.
        </short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.LMMonthChanged.Message">
        <short>Message examined in the method.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCalendar.LMYearChanged">
        <short>
          Handles the LCL message received when the year has been changed.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.LMYearChanged.Message">
        <short>Message examined in the method.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TCustomCalendar.LMDayChanged">
        <short>
          Handles the LCL message received when the day has been changed.
        </short>
        <descr></descr>
        <errors/>
        <seealso></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.LMDayChanged.Message">
        <short>Message examined in the method.</short>
      </element>

      <!-- class function Visibility: protected -->
      <element
        name="TCustomCalendar.GetControlClassDefaultSize"
        link="#lcl.controls.TControl.GetControlClassDefaultSize"/>
      <element name="TCustomCalendar.Loaded" link="#lcl.controls.TWinControl.Loaded"/>
      <element name="TCustomCalendar.InitializeWnd" link="#lcl.controls.TWinControl.InitializeWnd"/>
      <element name="TCustomCalendar.DestroyWnd" link="#lcl.controls.TWinControl.DestroyWnd"/>

      <!-- constructor Visibility: public -->
      <element name="TCustomCalendar.Create">
        <short>
          Constructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TCustomCalendar</var>. Create calls the inherited <var>Create</var> method, and sets the style, initial bounds, and display settings for the calendar. Create sets the default date / time value to Now.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TCustomCalendar.HitTest">
        <short>
          Indicates where a mouse click occurred in the calendar control.
        </short>
        <descr>
          <p>
            HitTest is a TCalendarPart function that indicates where a mouse click occurred in the calendar control. The return value indicates the part of the control clicked, or cpNoWhere when the handle has not been allocated for the control. HitTest ensures that the widget-set specific HitTest method is called.
          </p>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCalendar.HitTest.APoint">
        <short>Coordinates where the mouse click occurred.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TCustomCalendar.GetCalendarView">
        <short>Gets the current view for the Calendar.</short>
        <descr></descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCalendar.GetCalendarView.Result">
        <short>Current view for the Calendar.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TCustomCalendar.Date">
        <short>
          String representation for the DateTime property.
        </short>
        <descr>
          <p>
            <var>Date</var> is a String property that represents the value in DateTime as a string data type. Reading the value in Date calls the GetProps method to get the current value for DateTime, and converts it to its string representation. Setting the value in Date calls the SetProps method to store the new value for both Date and DateTime.
          </p>
        </descr>
        <errors>
          <p>
            Raises an EInvalidDate exception when Date contains an invalid date value.
          </p>
        </errors>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TCustomCalendar.DateTime">
        <short>
          Native data type used for a date in the calendar control.
        </short>
        <descr>
          <p>
            DateTime is a TDateTime property that contains the native data type used for a date in the calendar control. Reading the value in DateTime calls the GetProps method to get the current values for Date and DateTime. Setting the value in DateTime calls SetProps to update the values in Date and DateTime.
          </p>
          <p>
            For the Windows environment, the CalendarMinDate and CalendarMaxDate member variables are updated to ensure that date values are in an acceptable date/time value range. An EInvalidDate exception is raised if the value is not a valid date/time for the platform.
          </p>
          <remark>
            The calendar control does not use the time portion of the TDateTime data type. The time value is not significant unless a specified value is not valid for the date/time data type.
          </remark>
        </descr>
        <errors>
          <p>
            EInvalidDate exception is raised if the value is not a valid date/time for the platform; raised with the message rsInvalidDateRangeHint.
          </p>
        </errors>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TCustomCalendar.DisplaySettings">
        <short>
          <var>DisplaySettings</var> contains options which control the appearance of the calendar.
        </short>
        <descr>
          <p>
            <var>DisplaySettings</var> contains options which control the appearance of the calendar. DisplaySettings is a set type which contains zero or more TDisplaySetting values, including:
          </p>
          <dl>
            <dt>dsShowHeadings</dt>
            <dd>Displays a Month/Year heading</dd>
            <dt>dsShowDayNames</dt>
            <dd>Displays Day names</dd>
            <dt>dsNoMonthChange</dt>
            <dd>Prevents changing the month</dd>
            <dt>dsShowWeekNumbers</dt>
            <dd>Displays week numbers</dd>
          </dl>
          <remark>
            The value <var>dsStartMonday</var> is no longer available in LCL version 2.2 or higher. It has been replaced by the <var>FirstDayOfWeek</var> property on platforms where the capability is supported (Win32, QT, QT5). This is Delphi compatible, and allows any day of the week to be used as the first day of the week.
          </remark>
        </descr>
        <seealso>
          <link id="TDisplaySettings"/>
          <link id="TDisplaySetting"/>
          <link id="TCustomCalendar.FirstDayOfWeek"/>
        </seealso>
      </element>

      <element name="TCustomCalendar.FirstDayOfWeek">
        <short>
          Indicates the day of the week displayed as the first column in the calendar grid.
        </short>
        <descr>
          <p>
            <var>FirstDayOfWeek</var> is a <var>TCalDayOfWeek</var> property which indicates the day used as the first day of the week. It contains a value from the TCalDayOfWeek enumeration, and determines the order of the cells displayed in the calendar grid. The default value is <var>dowDefault</var>, and indicates the default value provided by the platform or operating system is used.
          </p>
        </descr>
        <seealso/>
      </element>

      <!-- property Visibility: public -->
      <element name="TCustomCalendar.OnChange">
        <short>
          <var>OnChange</var> - event handler for any change in Calendar.
        </short>
        <descr>
          <p>
            OnChange is a TNotifyEvent property that represents the event handler signalled when the date/time value for the control has changed. OnChange is signalled from the LMChanged, LMDayChanged, LMMonthChanged, and LMYearChanged methods. Applications should assign a procedure to the event handle to respond to the message notification.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TCustomCalendar.OnDayChanged">
        <short>
          <var>OnDayChanged</var> - event handler for a change in Day selected.
        </short>
        <descr>
          <p>
            OnDayChanged is a TNotifyEvent property that represents the event handler signalled when the day number in the date/time value for the control has changed. OnDayChanged is signalled from the LMDayChanged method. Applications should assign a procedure to the event handler to respond to the message notification.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TCustomCalendar.OnMonthChanged">
        <short>
          <var>OnMonthChanged</var> - event handler for a change in month selected.
        </short>
        <descr>
          <p>
            OnMonthChanged is a TNotifyEvent property that represents the event handler signalled when the month in the date/time value for the control has changed. OnMonthChanged is signalled from the LMMonthChanged method. Applications should assign a procedure to the event handler to respond to the message notification.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TCustomCalendar.OnYearChanged">
        <short>
          <var>OnYearChanged</var> - event handler for a change in the year selected.
        </short>
        <descr>
          <p>
            OnYearChanged is a TNotifyEvent property that represents the event handler signalled when the year in the date/time value for the control has changed. OnMonthChanged is signalled from the LMYearChanged method. Applications should assign a procedure to the event handler to respond to the message notification.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- object Visibility: default -->
      <element name="TCalendar">
        <short>
          <var>TCalendar</var> allows selection of a date from a calendar display.
        </short>
        <descr>
          <p>
            <var>TCalendar</var> is a graphic control allowing the user to select a date from a calendar display.
          </p>
        </descr>
        <errors/>
        <seealso></seealso>
      </element>

      <!-- property Visibility: published -->
      <element name="TCalendar.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TCalendar.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TCalendar.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
      <element name="TCalendar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TCalendar.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TCalendar.DateTime" link="#LCL.Calendar.TCustomCalendar.DateTime"/>
      <element name="TCalendar.DisplaySettings" link="#LCL.Calendar.TCustomCalendar.DisplaySettings"/>
      <element name="TCalendar.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
      <element name="TCalendar.FirstDayOfWeek" link="#lcl.calendar.TCustomCalendar.FirstDayOfWeek"/>

      <element name="TCalendar.Hint" link="#lcl.controls.TControl.Hint">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnChange" link="#LCL.Calendar.TCustomCalendar.OnChange">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnClick" link="#lcl.controls.TControl.OnClick">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnDayChanged" link="#LCL.Calendar.TCustomCalendar.OnDayChanged">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnDblClick" link="#lcl.controls.TControl.OnDblClick">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnEnter" link="#lcl.controls.TWinControl.OnEnter">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnExit" link="#lcl.controls.TWinControl.OnExit">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnMonthChanged" link="#LCL.Calendar.TCustomCalendar.OnMonthChanged">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp">
        <short></short>
      </element>

      <element name="TCalendar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TCalendar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TCalendar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TCalendar.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TCalendar.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TCalendar.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>

      <element name="TCalendar.OnResize" link="#lcl.controls.TControl.OnResize">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.OnYearChanged" link="#LCL.Calendar.TCustomCalendar.OnYearChanged">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.PopupMenu" link="#lcl.controls.TControl.PopupMenu">
        <short></short>
      </element>
      <element name="TCalendar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <!-- property Visibility: published -->
      <element name="TCalendar.TabOrder" link="#lcl.controls.TWinControl.TabOrder">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.Tabstop" link="#lcl.controls.TWinControl.TabStop">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCalendar.Visible" link="#lcl.controls.TControl.Visible">
        <short></short>
      </element>

      <!-- procedure Visibility: default -->
      <element name="Register">
        <short>Registers components for use in the Lazarus IDE.</short>
        <descr>
          <p>
            Register is the procedure used to register components for use in the Lazarus IDE. The following components are added to the Lazarus IDE component palette:
          </p>
          <p>
            <b>Misc</b> Tab
          </p>
          <ul>
            <li>TCalendar</li>
          </ul>
        </descr>
      </element>
    </module>
    <!-- Calendar -->

  </package>
</fpdoc-descriptions>
