<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
    ====================================================================
      ComCtrls
    ====================================================================
    -->
    <module name="ComCtrls">
      <short>Common controls used in Lazarus forms.</short>
      <descr>
        <p>
          <file>comctrls.pp</file> contains classes and types like those found in the Delphi <file>comctrls</file> unit.
        </p>
        <p>
          The following components are added to the Lazarus IDE:
        </p>
        <p>
          <b>Common Controls</b> Tab
        </p>
        <ul>
          <li>TTrackbar</li>
          <li>TProgressBar</li>
          <li>TTreeView</li>
          <li>TListView</li>
          <li>TStatusBar</li>
          <li>TToolBar</li>
          <li>TCoolBar</li>
          <li>TUpDown</li>
          <li>TPageControl</li>
          <li>TTabControl</li>
          <li>THeaderControl</li>
        </ul>
        <p>
          The following components are added but not displayed on the component palette:
        </p>
        <ul>
          <li>TToolButton</li>
          <li>TTabSheet</li>
        </ul>
        <p>
          This file is part of the <file>LCL</file> package.
        </p>
      </descr>

      <!-- unresolved references -->
      <element name="SysUtils"/>
      <element name="Types"/>
      <element name="Classes"/>
      <element name="Math"/>
      <element name="Laz_AVL_Tree"/>
      <element name="LCLStrConsts"/>
      <element name="LResources"/>
      <element name="LCLIntf"/>
      <element name="LCLType"/>
      <element name="LCLProc"/>
      <element name="LMessages"/>
      <element name="WSLCLClasses"/>
      <element name="WSReferences"/>
      <element name="Graphics"/>
      <element name="ImgList"/>
      <element name="ActnList"/>
      <element name="Themes"/>
      <element name="Menus"/>
      <element name="Controls"/>
      <element name="Forms"/>
      <element name="StdCtrls"/>
      <element name="ExtCtrls"/>
      <element name="ToolWin"/>
      <element name="Buttons"/>
      <element name="GraphType"/>
      <element name="LazUTF8"/>
      <element name="LazLoggerBase"/>
      <element name="LazUtilities"/>

      <element name="THitTest">
        <short>Represents permissible results for a hit test.</short>
        <descr>
          <p>
            <var>THitTest</var> is an enumerated type with values that represent permissible results for a hit test (position of a mouse click etc relative to objects on a form). Values from THitTest are stored in the THitTests set type.
          </p>
        </descr>
        <seealso>
          <link id="THitTests"/>
        </seealso>
      </element>
      <element name="THitTest.htAbove">
        <short>The action was above the coordinates for the control.</short>
      </element>
      <element name="THitTest.htBelow">
        <short>The action was below the coordinates for the control.</short>
      </element>
      <element name="THitTest.htNowhere">
        <short>The action was not near the control checking for the event.</short>
      </element>
      <element name="THitTest.htOnItem">
        <short>The action was on the control checking for the event.</short>
      </element>
      <element name="THitTest.htOnButton">
        <short>The action was on a button in the control.</short>
      </element>
      <element name="THitTest.htOnIcon">
        <short/>
      </element>
      <element name="THitTest.htOnIndent">
        <short/>
      </element>
      <element name="THitTest.htOnLabel">
        <short/>
      </element>
      <element name="THitTest.htOnRight">
        <short/>
      </element>
      <element name="THitTest.htOnStateIcon">
        <short/>
      </element>
      <element name="THitTest.htToLeft">
        <short/>
      </element>
      <element name="THitTest.htToRight">
        <short/>
      </element>

      <element name="THitTests">
        <short>
          <var>THitTests</var> - set of <var>THitTest</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanelStyle">
        <short>Represents the style used for a panel on a status bar.</short>
        <descr>
          <p>
            <var>TStatusPanelStyle</var> is an enumerated type representing the style used for a panel on a status bar. TStatusPanelStyle is the type used to implement the <var>Style</var> property in <var>TStatusPanel</var>, and used in widgetset classes which initialize or update a status bar panel.
          </p>
        </descr>
        <seealso>
          <link id="TStatusPanel.Style"/>
        </seealso>
      </element>
      <element name="TStatusPanelStyle.psText">
        <short>The panel contains Text.</short>
      </element>
      <element name="TStatusPanelStyle.psOwnerDraw">
        <short>
          The panel uses an owner-drawn style (generally implemented in an event handler).
        </short>
      </element>

      <element name="TStatusPanelBevel">
        <short>
          Enumerated type with the bevel styles used on status bar panels.
        </short>
        <descr>
          <p>
            <var>TStatusPanelBevel</var> is an enumerated type with values which represent bevel styles used on status bar panels. TStatusPanelBevel is the type used to implement the <var>Style</var> property in <var>TStatusPanel</var>.
          </p>
        </descr>
        <seealso>
          <link id="TStatusPanel.Style"/>
        </seealso>
      </element>
      <element name="TStatusPanelBevel.pbNone">
        <short>No bevel is drawn on a panel.</short>
      </element>
      <element name="TStatusPanelBevel.pbLowered">
        <short>Drawn using a lowered bevel style.</short>
      </element>
      <element name="TStatusPanelBevel.pbRaised">
        <short>Drawn using a raised bevel style.</short>
      </element>

      <element name="TPanelPart">
        <short>
          Lists the possible parts that make up a status panel.
        </short>
        <descr>
          <p>
            <var>TPanelPart</var> is an enumerated type listing the possible parts that make up  a status panel.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TPanelPart.ppText">
        <short>Panel part contains text with text alignment.</short>
      </element>
      <element name="TPanelPart.ppBorder">
        <short>Panel parts contains a bevel style.</short>
      </element>
      <element name="TPanelPart.ppWidth">
        <short>Panel part contains a width value.</short>
      </element>

      <element name="TPanelParts">
        <short>
          Set type used to store TPanelPart values.
        </short>
        <descr>
          <p>
            <var>TPanelParts</var> is a set type used to store <var>TPanelPart</var> values.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TStatusPanelClass">
        <short>Class reference used to create new instances of TStatusPanel.</short>
        <descr>
          <p>
            <var>TStatusPanelClass</var> is the type returned by the <var>GetPanelClass</var> method in <var>TStatusBar</var>. The class reference is used in the <var>CreatePanel</var> method in TStatusBar to create a new panel for the control.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.GetPanelClass"/>
          <link id="TStatusBar.CreatePanel"/>
        </seealso>
      </element>

      <element name="TStatusPanel">
        <short>Implements a panel displayed in TStatusBar.</short>
        <descr>
          <p>
            <var>TStatusPanel</var> is a TCollectionItem descendant which implements panels used in <var>TStatusBar</var>. Instances of the class are created by and stored in a <var>TStatusPanels</var> collection in a <var>TStatusBar</var> control. Use the properties in the panel to control its appearance, size, and textual content.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.Panels"/>
          <link id="TStatusPanels"/>
        </seealso>
      </element>

      <element name="TStatusPanel.FBiDiMode"/>
      <element name="TStatusPanel.FText"/>
      <element name="TStatusPanel.FWidth"/>
      <element name="TStatusPanel.FAlignment"/>
      <element name="TStatusPanel.FBevel"/>
      <element name="TStatusPanel.FParentBiDiMode"/>
      <element name="TStatusPanel.FStyle"/>

      <element name="TStatusPanel.SetAlignment">
        <short>Gets the value for the Alignment property.</short>
        <descr/>
        <seealso>
          <link id="TStatusPanel.Alignment"/>
        </seealso>
      </element>
      <element name="TStatusPanel.SetAlignment.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusPanel.SetBevel">
        <short>Sets the value for the Bevel property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetBevel.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusPanel.SetStyle">
        <short>Sets the value for the Style property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetStyle.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusPanel.SetText">
        <short>Sets the value for the Text property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetText.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusPanel.SetWidth">
        <short>Sets the value for the Width property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetWidth.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusPanel.FIntfFlag">
        <short>Field used  by Widgetset classes. Do not use it in the LCL.</short>
        <descr>Field used  by Widgetset classes. Do not use it in the LCL.</descr>
        <seealso/>
      </element>

      <element name="TStatusPanel.GetDisplayName">
        <short>
          Gets the value displayed as the name for the collection item.
        </short>
        <descr>
          <p>
            <var>GetDisplayName</var> is an overridden <var>String</var> function which returns the value displayed as the name of the collection item. The value in the <var>Text</var> property is used as the return value when it is not an empty string (<b>''</b>). Otherwise, the inherited GetDisplayName method is called to get the return value.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
        </seealso>
      </element>
      <element name="TStatusPanel.GetDisplayName.Result">
        <short>Value displayed as the name for the collection item.</short>
      </element>

      <element name="TStatusPanel.PanelChanged">
        <short>
          <var>PanelChanged</var> - method for dealing with a status panel, one or more of whose parts has changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.PanelChanged.Parts">
        <short/>
      </element>

      <element name="TStatusPanel.SetIndex">
        <short>
          <var>SetIndex</var> saves the old index value, checks that the supplied value is different and then calls inherited method.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
        </seealso>
      </element>
      <element name="TStatusPanel.SetIndex.Value">
        <short/>
      </element>

      <element name="TStatusPanel.Create">
        <short>
          <var>Create</var> - constructor for <var>TStatusPanel</var>: sets default width, alignment and bevel, calls inherited <var>Create</var> and loads into StatusBar.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="TStatusPanel.Create.aCollection">
        <short>Collection which owns the status panel.</short>
      </element>

      <element name="TStatusPanel.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TStatusPanel</var>: calls inherited <var>Destroy</var> and removes itself from the StatusBar.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
        </seealso>
      </element>

      <element name="TStatusPanel.Assign">
        <short>
          <var>Assign</var> copies text, width, alignment, bevel and style properties from <var>Source</var> if it is of correct type, otherwise calls inherited <var>Assign</var> (which will probably raise an exception).
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TStatusPanel.Assign.Source">
        <short>Class instance with the values stored in the status panel.</short>
      </element>

      <element name="TStatusPanel.StatusBar">
        <short>The <var>StatusBar</var> that contains this <var>StatusPanel</var></short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.StatusBar.Result">
        <short>Status bar where the panel is displayed.</short>
      </element>

      <element name="TStatusPanel.Alignment">
        <short>
          <var>Alignment</var> - whether left- or right-justified or centered.
        </short>
        <descr>Only supported on Windows.</descr>
        <seealso/>
      </element>

      <element name="TStatusPanel.Bevel">
        <short>The type of <var>Bevel</var> for the display.</short>
        <descr>Only supported on Windows.</descr>
        <seealso/>
      </element>

      <element name="TStatusPanel.BiDiMode">
        <short>Introduces BiDiMode support not present in the ancestor class.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.ParentBiDiMode">
        <short>Introduces BiDiMode support not present in the ancestor class.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.Style">
        <short>
          <var>Style</var> - whether text or something drawn by the owner.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.Text">
        <short>
          <var>Text</var> - the string for display in the StatusBar.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.Width">
        <short>The <var>Width</var> of this panel on the StatusBar.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanels">
        <short>
          <var>TStatusPanels</var> - the collection of Status Panels in this StatusBar.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanels.FStatusBar"/>

      <element name="TStatusPanels.GetItem">
        <short>Gets the value for the indexed Items property.</short>
        <descr/>
        <seealso>
          <link id="TStatusPanels.Items"/>
          <link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
        </seealso>
      </element>
      <element name="TStatusPanels.GetItem.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TStatusPanels.GetItem.Index">
        <short>Ordinal position for the requested collection item.</short>
      </element>

      <element name="TStatusPanels.SetItem">
        <short>Sets the value in the indexed Items property.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.SetItem">TCollection.SetItem</link>
        </seealso>
      </element>
      <element name="TStatusPanels.SetItem.Index">
        <short>Ordinal position for the collection item stored in the method.</short>
      </element>
      <element name="TStatusPanels.SetItem.Value">
        <short>New value for the collection item.</short>
      </element>

      <element name="TStatusPanels.GetOwner">
        <short>
          <var>GetOwner</var> returns a Status Bar overriding the inherited method.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TStatusPanels.GetOwner.Result">
        <short>Persistent object that owns the status panel.</short>
      </element>

      <element name="TStatusPanels.Update">
        <short>
          Ensures that observers are notified when he specified collection item has been changed.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection">TCollection</link>
        </seealso>
      </element>
      <element name="TStatusPanels.Update.Item">
        <short>Collection item for the notification.</short>
      </element>

      <element name="TStatusPanels.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <var>Create</var> - constructor for <var>TStatusPanels</var>: calls inherited <var>Create</var> and attaches itself to StatusBar.
        </descr>
        <seealso>
          <link id="#rtl.Classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <element name="TStatusPanels.Create.TheStatusBar">
        <short>The control where the status panel is displayed.</short>
      </element>

      <element name="TStatusPanels.Add">
        <short>Adds a new TStatusPanel instance to the collection.</short>
        <descr>
        </descr>
        <p>
          Calls the inherited Add method and casts the result to <var>TStatusPanel</var> for use as the return value. Calls the <var>UpdateHandleObject</var> method in <var>StatusBar</var> to ensure that an update sequence is started when the handle for the status bar has been allocated.
        </p>
        <seealso>
          <link id="TStatusPanel.StatusBar"/>
          <link id="TStatusBar.UpdateHandleObject"/>
          <link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
        </seealso>
      </element>
      <element name="TStatusPanels.Add.Result">
        <short>Status panel added in the method.</short>
      </element>

      <element name="TStatusPanels.Items">
        <short>Provides indexed access to the TStatusPanel items in the collection.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Items">TCollection.Items</link>
        </seealso>
      </element>
      <element name="TStatusPanels.Items.Index">
        <short>Ordinal position for the collection item.</short>
      </element>

      <element name="TStatusPanels.StatusBar">
        <short>
          The <var>StatusBar</var> to which this collection of Status Panels belongs.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TSBCreatePanelClassEvent">
        <short>
          <var>TSBCreatePanelClassEvent</var> - generic event handling procedure for creating a Status Bar panel class.
        </short>
      </element>

      <element name="TDrawPanelEvent">
        <short>Specified an event handler used to draw a panel in a status bar.</short>
        <descr>
          <p>
            <var>TDrawPanelEvent</var> is the type used to implement the <var>OnDrawPanel</var> property in <var>TStatusBar</var>.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.OnDrawPanel"/>
        </seealso>
      </element>
      <element name="TDrawPanelEvent.StatusBar">
        <short>Status bar for the event notification.</short>
      </element>
      <element name="TDrawPanelEvent.Panel">
        <short>Panel drawn by the event handler.</short>
      </element>
      <element name="TDrawPanelEvent.Rect">
        <short>Drawing area for the event notification.</short>
      </element>

      <element name="TStatusBar">
        <short>
          <var>TStatusBar</var> - a strip along the bottom of a form for displaying information on current status.
        </short>
        <descr>
          <p>
            <var>TStatusBar</var> - a strip along the bottom of a form for displaying information on current status. The bar may consist of a single <var>SimplePanel</var> in which case the displayed text is contained in <var>SimpleText</var>.
          </p>
          <p>
            However if <var>SimplePanel</var> is false, then there can be multiple panels or sub-sections of the status bar whose properties are described in <var>Panels</var>.
          </p>
          <p>
            The property <var>SimpleText</var> can be assigned in code to display the value of some variable, such as the position of the Splitter in the example.
          </p>
        </descr>
        <example file="extctrls/statusbar.pas"/>
      </element>

      <element name="TStatusBar.FAutoHint"/>
      <element name="TStatusBar.FCanvas"/>
      <element name="TStatusBar.FHandlePanelCount"/>
      <element name="TStatusBar.FHandleObjectNeedsUpdate"/>
      <element name="TStatusBar.FHandleUpdatePanelIndex"/>
      <element name="TStatusBar.FOnCreatePanelClass"/>
      <element name="TStatusBar.FSizeGrip"/>
      <element name="TStatusBar.FUpdateLock"/>
      <element name="TStatusBar.FPanels"/>
      <element name="TStatusBar.FSimpleText"/>
      <element name="TStatusBar.FSimplePanel"/>
      <element name="TStatusBar.FOnDrawPanel"/>
      <element name="TStatusBar.FOnHint"/>
      <element name="TStatusBar.FUseSystemFont"/>

      <element name="TStatusBar.SetPanels">
        <short>Sets the value for the Panels property.</short>
        <descr/>
        <seealso>
          <link id="TStatusBar.Panels"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetPanels.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusBar.SetSimpleText">
        <short>Sets the value for the SimpleText property.</short>
        <descr>
          <p>
            Notifies the widgetset class of the value change when a handle has been allocated and SimplePanel is set to <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.SimpleText"/>
          <link id="TStatusBar.SimplePanel"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetSimpleText.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusBar.SetSimplePanel">
        <short>Sets the value for the SimplePanel property.</short>
        <descr/>
        <seealso>
          <link id="TStatusBar.SimplePanel"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetSimplePanel.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusBar.SetSizeGrip">
        <short>Sets the value for the SizeGrip property.</short>
        <descr/>
        <seealso>
          <link id="TStatusBar.SizeGrip"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetSizeGrip.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusBar.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>
      <element name="TStatusBar.BoundsChanged" link="#lcl.controls.TControl.BoundsChanged"/>

      <element name="TStatusBar.CreateWnd">
        <short>
          <var>CreateWnd</var> calls inherited method, then fixes handles if needed.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
        </seealso>
      </element>

      <element name="TStatusBar.DestroyWnd">
        <short>
          <var>DestroyWnd</var> calls inherited method and frees handles.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.DestroyWnd">TWinControl.DestroyWnd</link>
        </seealso>
      </element>

      <element name="TStatusBar.Loaded">
        <short>
          <var>Loaded</var> calls inherited method and fixes handles if needed.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TStatusBar.UpdateHandleObject">
        <short>
          <var>UpdateHandleObject</var> - updates all panel parts that have been changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusBar.UpdateHandleObject.PanelIndex">
        <short/>
      </element>

      <element name="TStatusBar.CalculatePreferredSize">
        <short>
          <var>CalculatePreferredSize</var> calls inherited method then supplies its own values if any are missing.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.CalculatePreferredSize">TControl.CalculatePreferredSize</link>
        </seealso>
      </element>

      <element name="TStatusBar.SetBiDiMode">
        <short>Sets the value in the BiDiMode property.</short>
        <descr>
          <p>
            Ensures that all panels in the status bar update their alignment to match the new value for the property. Calls UpdateHandleObject to ensure that an update sequence is started for the control when its handle has been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.Panels"/>
          <link id="TStatusBar.UpdateHandleObject"/>
          <link id="#lcl.controls.TControl.BiDiMode">TControl.BiDiMode</link>
        </seealso>
      </element>
      <element name="TStatusBar.SetBiDiMode.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TStatusBar.CreatePanel">
        <short>
          <var>CreatePanel</var> - returns a created Status Panel.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusBar.CreatePanel.Result">
        <short>Status panel creates in the method.</short>
      </element>

      <element name="TStatusBar.CreatePanels">
        <short>
          <var>CreatePanels</var> - returns a set of created panels.
        </short>
      </element>
      <element name="TStatusBar.CreatePanels.Result">
        <short>Status panels created in the method.</short>
      </element>

      <element name="TStatusBar.GetPanelClass">
        <short>
          <var>GetPanelClass</var> - returns a class of status panel.
        </short>
      </element>
      <element name="TStatusBar.GetPanelClass.Result">
        <short>Class type used for status panels.</short>
      </element>

      <element name="TStatusBar.DoSetApplicationHint">
        <short>
          <var>DoSetApplicationHint</var> - specifies a hint string and returns True if successful.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.DoHint">
        <short>Displays the hint for the status bar.</short>
        <descr>
          <var>DoHint</var> shows the hint text for the control and returns True when successful. Uses the <var>OnHint</var> event handler.
        </descr>
        <seealso/>
      </element>

      <element name="TStatusBar.DrawPanel">
        <short>
          <var>DrawPanel</var> calls the <var>OnDrawPanel</var> event handler if assigned.
        </short>
      </element>
      <element name="TStatusBar.DrawPanel.Panel">
        <short>Panel to draw in the method.</short>
      </element>
      <element name="TStatusBar.DrawPanel.Rect">
        <short>Display rectangle for the drawing operation.</short>
      </element>

      <element name="TStatusBar.LMDrawItem">
        <short>
          <var>LMDrawItem</var> - LCL message handler for drawing the item on the current canvas.</short>
      </element>
      <element name="TStatusBar.LMDrawItem.Message">
        <short>Message handled in the method.</short>
      </element>

      <element name="TStatusBar.DoAutoAdjustLayout">
        <short>Performs actions needed to apply the layout policy in AMode.</short>
        <descr>
          <p>
            Calls <var>BeginUpdate</var> to reduce the number of refreshes needed when updating panels in the status bar. Adjusts the width of all items in the <var>Panels</var> collection using the factor in <var>AXProportion</var>. The value in <var>AYProportion</var> is ignored in the method. Calls <var>EndUpdate</var> prior to exit from the method.
          </p>
        <remark>
          No actions are performed in the method when <var>AMode</var> contains a <var>TLayoutAdjustmentPolicy</var> value other than <var>lapAutoAdjustWithoutHorizontalScrolling</var> or <var>lapAutoAdjustForDPI</var>.
        </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TStatusBar.DoAutoAdjustLayout.Mode">
        <short>Layout policy applied in the method.</short>
      </element>
      <element name="TStatusBar.DoAutoAdjustLayout.AXProportion">
        <short>Horizontal sizing factor applied to panels in the status bar.</short>
      </element>
      <element name="TStatusBar.DoAutoAdjustLayout.AYProportion">
        <short>Vertical sizing factor applied to panels in the status bar.</short>
      </element>

      <element name="TStatusBar.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TStatusBar</var>. It calls the inherited <var>Create</var> method, and initializes a number of local variables, including:
          </p>
          <ul>
            <li>AutoHint</li>
            <li>Canvas</li>
            <li>ControlStyle</li>
            <li>Color</li>
            <li>Align</li>
            <li>AutoSize</li>
            <li>SimplePanel</li>
          </ul>
        </descr>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TStatusBar.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TStatusBar.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TStatusBar</var>: frees canvas and panels, then calls inherited <var>Destroy</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TStatusBar.InvalidatePanel">
        <short>
          Updates the panel at the specified position in the Panels for the status bar.
        </short>
        <descr>
          <p>
            <var>InvalidatePanel</var> renders the panel with specified index non-valid. Calls <var>UpdateHandleObject</var> to ensure that the widgetset class is notified of the change to the specified panel.
          </p>
          <remark>
            No actions are performed in the method when the PanelParts argument is an empty set (<b>[]</b>).
          </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TStatusBar.InvalidatePanel.PanelIndex">
        <short>Ordinal position for the panel affected in the method.</short>
      </element>
      <element name="TStatusBar.InvalidatePanel.PanelParts">
        <short>Panel parts affected in the method.</short>
      </element>

      <element name="TStatusBar.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - starts the update process.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.EndUpdate">
        <short>
          <var>EndUpdate</var> - finishes the update process.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.ExecuteAction">
        <short>
          <var>ExecuteAction</var>: if required action is a Hint-related, sets the Hint in place, otherwise calls inherited method.
        </short>
        <seealso>
          <link id="#rtl.classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
        </seealso>
      </element>

      <element name="TStatusBar.GetPanelIndexAt">
        <short>
          Gets the ordinal position for the panel at the specified coordinates.
        </short>
        <descr>
          <p>
            <var>GetPanelIndexAt</var> gets the ordinal position for the panel at the specified coordinates. The return value is <b>-1</b> when <var>Panels</var> have not been defined in the status bar. No actions are performed in the method when Panels is empty.
          </p>
          <p>
            GetPanelIndexAt uses the display rectangle for the control to determine in the specified coordinates are within one of the Panels defined for the control. When True, each of the items in the Panels collection are examined to determine if the point is within a specific panel. The ordinal position for the panel is assigned as the return value.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TStatusBar.GetPanelIndexAt.Result">
        <short>
          Ordinal position for the status panel, or -1 when no panel is located at the specified coordinates.
        </short>
      </element>
      <element name="TStatusBar.GetPanelIndexAt.X">
        <short>Horizontal coordinate to locate in the Panels for the status bar.</short>
      </element>
      <element name="TStatusBar.GetPanelIndexAt.Y">
        <short>Vertical  coordinate to locate in the Panels for the status bar.</short>
      </element>

      <element name="TStatusBar.SizeGripEnabled">
        <short>
          <var>SizeGripEnabled</var> - returns True if the size-grip (an area at the bottom of the statusbar where a mouse can grip to change the size) is enabled.
        </short>
      </element>

      <element name="TStatusBar.UpdatingStatusBar">
        <short>
          <var>UpdatingStatusBar</var> - returns True if the status bar is being updated.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusBar.UpdatingStatusBar.Result">
        <short>True if the status bar is being updated.</short>
      </element>

      <element name="TStatusBar.Canvas">
        <short>The <var>Canvas</var> where the Panels for the StatusBar are are Painted.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.Action" link="#lcl.controls.TControl.Action"/>

      <element name="TStatusBar.Align">
        <short>Specifies the placement of the control inside its Parent.</short>
        <descr>
          <p>
            Align is a TAlign property which specifies how the control is aligned to its parent control. The default value for the property is alBottom in TStatusBar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Align">TControl.Align</link>
        </seealso>
      </element>

      <element name="TStatusBar.Anchors" link="#lcl.controls.TControl.Anchors"/>

      <element name="TStatusBar.AutoHint">
        <short>
          Indicates if a hint is automatically shown when the mouse hovers over the status bar.
        </short>
        <descr>
          <p>
            The default value for the property is False.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.AutoSize">
        <short>
          Indicates if the control is automatically resized to fill the area on its aligned edge.
        </short>
        <descr>
          <p>
            The default value for the property is True in TStatusBar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.AutoSize">TControl.AutoSize</link>
        </seealso>
      </element>

      <element name="TStatusBar.BidiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TStatusBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TStatusBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>

      <element name="TStatusBar.Color">
        <short>The background color of the control.</short>
        <descr>
          <p>
            The default value for the property is clDefault or clBtnFace (depending on the UseCLDefault compiler define).If the color is clDefault , the result will need to be passed through GetDefaultColor to resolve clDefault to an actual TColor value.
          </p>
          <p>
            Convenience routines which obtain the color by resolving clDefault and ParentColor are also provided as TControl.GetColorResolvingParent and TControl.GetRGBColorResolvingParent.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Color">TControl.Color</link>
        </seealso>
      </element>

      <element name="TStatusBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TStatusBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TStatusBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TStatusBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TStatusBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TStatusBar.Font" link="#lcl.controls.TControl.Font"/>

      <element name="TStatusBar.Panels">
        <short>Collection with the TStatusPanel instances defined for the control.</short>
        <descr>
          <p>
            <var>Panels</var> is a collection used to store <var>TStatusPanel</var> class instances added to the status bar. Panels are significant when the <var>SimplePanel</var> property is set to <b>False</b>; when SimplePanel contains <b>True</b>, the status bar displays the value in <var>SimpleText</var> across the entire width for the status bar.
          </p>
          <p>
            Use <var>CreatePanel</var> to create a new status panel displayed on the status bar. Or use the editor provided in the Lazarus IDE Object Inspector to maintain the items in the Panels collection at design-time.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.ParentBiDiMode" link="#lcl.controls.TControl.ParentBidiMode"/>
      <element name="TStatusBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TStatusBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TStatusBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>

      <element name="TStatusBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

      <element name="TStatusBar.SimpleText">
        <short>
          <var>SimpleText</var> - a character string containing the information to be displayed in the Status Bar.</short>
        <descr>
          <p>
            <var>SimpleText</var> - a character string containing the information to be displayed in the Status Bar. This is displayed if <var>SimplePanel</var> is true; otherwise the information in Panels is displayed.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.SimplePanel">
        <short>
          Indicates if a single panel is displayed in the status bar with the text in SimpleText.
        </short>
        <descr>
          <p>
            <var>SimplePanel </var> is a Boolean property which indicates if a single panel is displayed in the status bar with the text in SimpleText
          </p>
          <p>
            If <b>True</b>, the value of <var>SimpleText</var> is displayed; if <b>False</b>, the contents of the individual <var>Panels</var> is displayed.
          </p>
          <p>
            Contents can be adjusted with a stringlist editor that pops up when the ellipsis (...) next to <var>Panels</var> is selected and allows insertion of an arbitrary number of sub-panels with their own strings.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.SizeGrip">
        <short>Displays a sizing grip used to resize the parent form.</short>
        <descr>
          <p>
            <var>SizeGrip</var> is a <var>Boolean</var> property which indicates if a sizing grip (or grabber) is visible for the status bar. The sizing grip is a triangular shape displayed at the bottom-right of the status bar, and provides an alternate way to resize the parent form using the mouse. It presents a larger mouse target than a window border.
          </p>
          <p>
            The default value for the property is <b>True</b>, and indicates that the sizing grip is visible.
          </p>
          <p>
            Setting a new value for the property causes the widgetset class to be notified of the change if the handle has been allocated for the control.
          </p>
          <p>
            Use <var>SizeGripEnabled</var> to determine if the sizing grip is enabled in the control.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.SizeGripEnabled"/>
          <link id="#lcl.forms.TCustomForm.BorderStyle">TCustomForm.BorderStyle</link>
          <link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
        </seealso>
      </element>

      <element name="TStatusBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

      <element name="TStatusBar.UseSystemFont">
        <short>Indicates the System font is used for the control.</short>
        <descr>
          This is used to provide VCL-compatibility in widgetset classes.
        </descr>
        <seealso/>
      </element>

      <element name="TStatusBar.Visible">
        <short>Indicates if the control is visible.</short>
        <descr>
          <p>
            Allows the control, and all of its children, to be displayed or hidden. Visible is set to True by Show , or to False by Hide. Calling these methods is equivalent to setting the Visible property.
          </p>
          <p>
            The default value for the property is True in TStatusBar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
        </seealso>
      </element>

      <element name="TStatusBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TStatusBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>

      <element name="TStatusBar.OnCreatePanelClass">
        <short>
          Event handler signalled to get the class used to create new panels in the status bar.
        </short>
        <descr>
          <p>
            <var>OnCreatePanelClass</var> is signalled (when assigned) in the <var>CreatePanel</var> method to get  the class used to create new panels in the status bar. Assign an object procedure using the signature in <var>TSBCreatePanelClassEvent</var> to the property to override the value provided by the <var>GetPanelClass</var> method.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TStatusBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TStatusBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>

      <element name="TStatusBar.OnDrawPanel">
        <short>Event handler signalled to draw a panel in the status bar.</short>
        <descr>
          <p>
            <var>OnDrawPanel</var> is an event handler used to draw the specified panel on the status bar. OnDrawPanel is signalled (when assigned) from the DrawPanel method. Assign an object procedure using the signature in TDrawPanelEvent to render the specified panel to the desired rectangle in the status bar.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TStatusBar.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TStatusBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>

      <element name="TStatusBar.OnHint">
        <short>Event handler for showing a hint when required.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TStatusBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TStatusBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TStatusBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TStatusBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TStatusBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TStatusBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TStatusBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TStatusBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TStatusBar.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TStatusBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

      <element name="TPageFlag">
        <short>
          Contains values which can be assigned to the Flags property in TCustomPage.
        </short>
        <descr>
          Reflects the status or state for the handle used in a custom page control.
        </descr>
        <seealso/>
      </element>
      <element name="TPageFlag.pfAdded">
        <short>Handle for the page has been added to the notebook.</short>
      </element>
      <element name="TPageFlag.pfAdding">
        <short>Handle for the page is being added to the notebook.</short>
      </element>
      <element name="TPageFlag.pfRemoving">
        <short>Removing the page handle from the notebook.</short>
      </element>
      <element name="TPageFlag.pfInserting">
        <short>Inserting the page handle into the notebook.</short>
      </element>

      <element name="TPageFlags">
        <short>Set type used to store TPageFlag enumeration values.</short>
        <descr>
          <p>
            <var>TPageFlags</var> is the type used to implement the <var>Flags</var> property in <var>TCustomPage</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.Flags"/>
        </seealso>
      </element>

      <element name="TCustomPage">
        <short>The base class for TTabSheet.</short>
        <descr>
          <p>
            <var>TCustomPage</var> is a <var>TWinControl</var> descendant which implements the base class for the tabbed pages found in notebooks. TCustomPage provides properties used to maintain the order and visibility of the page, and event handlers signalled when the page is hidden or displayed.
          </p>
        </descr>
        <seealso>
          <link id="TTabSheet"/>
          <link id="TPageControl"/>
          <link id="TCustomTabControl.Page"/>
          <link id="TCustomTabControl.ActivePageComponent"/>
          <link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TCustomPage.FTabVisible"/>
      <element name="TCustomPage.FFlags"/>
      <element name="TCustomPage.FImageIndex"/>
      <element name="TCustomPage.FOnHide"/>
      <element name="TCustomPage.FOnShow"/>

      <element name="TCustomPage.SetImageIndex">
        <short>Sets the value for the ImageIndex property.</short>
        <descr>
          <p>
            Notifies the widgetset class of changes to properties in the custom page.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.ImageIndex"/>
        </seealso>
      </element>
      <element name="TCustomPage.SetImageIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomPage.SetTabVisible">
        <short>Sets the value for the TabVisible property.</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.SetTabVisible"/>
        </seealso>
      </element>
      <element name="TCustomPage.SetTabVisible.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomPage.WSRegisterClass">
        <short>Registers the widgetset class used for the class instance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPage.WMPaint">
        <short>Handles the LM_PAINT message for the control.</short>
        <descr>
          <p>
            <var>WMPaint</var> is an overridden method in <var>TCustomPage</var> which handles the LM_PAINT message for the control. It calls the inherited method to render the control. No actions are performed in the method if the Parent is a TCustomTabControl descendant and the class instance is not the current page in the Parent control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.WMPaint">TWinControl.WMPaint</link>
        </seealso>
      </element>
      <element name="TCustomPage.WMPaint.Msg">
        <short>Message handled in the method.</short>
      </element>

      <element name="TCustomPage.SetParent">
        <short>Sets the Parent control for the custom page.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.SetParent">TControl.SetParent</link>
        </seealso>
      </element>
      <element name="TCustomPage.SetParent.AParent">
        <short>New value for the Parent property.</short>
      </element>

      <element name="TCustomPage.Flags">
        <short>
          Contains flag values that represent the status or state for the handle in the custom page control.
        </short>
        <descr>
          <p>
            Values in <var>Flags</var> are normally added or removed when changes are performed in a control which uses the page control class instance. See <var>TPageFlag</var> for more information about enumeration values and their meanings.
          </p>
        </descr>
        <seealso>
          <link id="TPageFlags"/>
          <link id="TPageFlag"/>
        </seealso>
      </element>

      <element name="TCustomPage.CMHitTest">
        <short>Handles the CM_HITTEST control  message.</short>
        <descr>
          <p>
            CMHitTest checks the type for the Parent control to determine whether the Message is ignored or forwarded to the inherited method. When Parent is a TCustomTabControl descendant, the class instance must be the active page in the parent control. When it is not, the Message result is set to 0 and the message is ignored. Otherwise, the inherited method is called to handle the Message.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.CMHitTest">TControl.CMHitTest</link>
        </seealso>
      </element>
      <element name="TCustomPage.CMHitTest.Message">
        <short>Control message handled in the method.</short>
      </element>

      <element name="TCustomPage.CMVisibleChanged">
        <short>Handles the CM_VISIBLECHANGED message for the control.</short>
        <descr>
          <p>
            Calls the inherited method to handle a focus change and update the control state. If the control is Visible, the DoShow method is called to signal the OnShow event handler (when assigned). Otherwise, DoHide is called to signal the OnHide event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.DoShow"/>
          <link id="TCustomPage.DoHide"/>
          <link id="TCustomPage.OnShow"/>
          <link id="TCustomPage.OnHide"/>
          <link id="#lcl.controls.TWinControl.CMVisibleChanged">TWinControl.CMVisibleChanged</link>
        </seealso>
      </element>
      <element name="TCustomPage.CMVisibleChanged.Message">
        <short>Control message handled in the method.</short>
      </element>

      <element name="TCustomPage.GetPageIndex">
        <short>Gets the value for the PageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.PageIndex"/>
        </seealso>
      </element>
      <element name="TCustomPage.GetPageIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomPage.SetPageIndex">
        <short>Sets the value for the PageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.PageIndex"/>
        </seealso>
      </element>
      <element name="TCustomPage.SetPageIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomPage.GetTabVisible">
        <short>Gets the value for the TabVisible property.</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.GetTabVisible"/>
        </seealso>
      </element>
      <element name="TCustomPage.GetTabVisible.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomPage.DialogChar">
        <short>
          Provides support for a TCustomTabControl parent when handling a dialog accelerator key.
        </short>
        <descr>
          <p>
            Calls the inherited DialogChar method when Parent is not derived from TCustomTabControl.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.DialogChar">TWinControl.DialogChar</link>
        </seealso>
      </element>
      <element name="TCustomPage.DialogChar.Result">
        <short>True if message contains an accelerator key handled in the method.</short>
      </element>
      <element name="TCustomPage.DialogChar.Message">
        <short>Message examined in the method.</short>
      </element>

      <element name="TCustomPage.DoHide">
        <short>Performs actions needed when Visible is changed to False.</short>
        <descr>
          <p>
            <var>DoHide</var> is a method used to perform actions needed when the <var>Visible</var> property is changed to <b>False</b>. DoHide signals the <var>OnHide</var> event handler (when assigned).
          </p>
          <p>
            DoHide is called from the <var>CMVisibleChanged</var> message handler.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.Visible"/>
          <link id="TCustomPage.OnHide"/>
          <link id="TCustomPage.CMVisibleChanged"/>
        </seealso>
      </element>

      <element name="TCustomPage.DoShow">
        <short>Performs actions needed when Visible is changed to True.</short>
        <descr>
          <p>
            <var>DoShow</var> is a method used to perform actions needed when <var>Visible</var> property is changed to <b>True</b>. DoShow signals the OnShow event handler (when assigned).
          </p>
          <p>
            DoShow is called from the CMVisibleChanged message handler.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.Visible"/>
          <link id="TCustomPage.OnShow"/>
          <link id="TCustomPage.CMVisibleChanged"/>
        </seealso>
      </element>

      <element name="TCustomPage.DestroyHandle">
        <short>Updates the Flags property when the Handle for the control is freed.</short>
        <descr>
          <p>
            <var>DestroyHandle</var> is an overridden method used to update the control when its <var>Handle</var> is freed in the widgetset class. DestroyHandle calls the inherited method on entry, and updates the <var>Flags</var> property to exclude the value <var>pfAdded</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.Flags"/>
          <link id="TPageFlags"/>
          <link id="TPageFlag"/>
          <link id="#lcl.controls.TWinControl.Handle">TWinControl.Handle</link>
          <link id="#lcl.controls.TWinControl.DestroyHandle">TWinControl.DestroyHandle</link>
        </seealso>
      </element>

      <element name="TCustomPage.RealSetText">
        <short>Notifies the widgetset to change the text for the control.</short>
        <descr>
          <p>
            RealSetText is overridden in <var>TCustomPage</var> to notify the widgetset class of the value change when the <var>Parent</var> control is assigned and has a valid <var>Handle</var>. RealSetText calls the inherited method to apply the new value. <var>AdjustSize</var> is called if the widgetset class was notified.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.RealSetText">TWinControl.RealSetText</link>
          <link id="#lcl.controls.TWinControl.Handle">TWinControl.Handle</link>
          <link id="#lcl.controls.TControl.AdjustSize">TControl.AdjustSize</link>
        </seealso>
      </element>
      <element name="TCustomPage.RealSetText.AValue">
        <short>Value used for the Text (Caption) in the control.</short>
      </element>

      <element name="TCustomPage.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for <var>TCustomPage</var>, and calls the inherited constructor on entry. Create sets the default values for the style, visibility, alignment and caption in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomPage.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomPage.CanTab">
        <short>
          Indicates if the Tab key can be used to navigate into or out of the control.
        </short>
        <descr>
          <p>
            Always returns <b>False</b> in <var>TCustomPage</var>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.CanTab">TWinControl.CanTab</link>
        </seealso>
      </element>
      <element name="TCustomPage.CanTab.Result">
        <short>Always returns False.</short>
      </element>

      <element name="TCustomPage.IsControlVisible">
        <short>Indicates whether the control is visible.</short>
        <descr>
          <p>
            <var>IsControlVisible</var> is an overridden method in <var>TCustomPage</var> which indicates whether the control is visible.
          </p>
          <p>
            If <var>AutoSizingAll</var> is set to <b>True</b>, no actions are performed in the method and the return values is <b>True</b>. This allows inactive pages to be considered in the GetPreferredSize method in the parent control.
          </p>
          <p>
            IsControlVisible calls the inherited method on entry to determine if the Visible property is set to <b>True</b>, and whether the control is visible at design-time. When the <var>Parent</var> control is <var>TCustomTabControl</var>, the value in the <var>PageIndex</var> property must match the value in the parent control.
          </p>
          <p>
            The return value is <b>True</b> when all of the conditions are satisfied.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.PageIndex"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="#lcl.Controls.TControl.IsControlVisible">TControl.IsControlVisible</link>
        </seealso>
      </element>
      <element name="TCustomPage.IsControlVisible.Result">
        <short>True when the control is visible.</short>
      </element>

      <element name="TCustomPage.HandleObjectShouldBeVisible" link="#lcl.controls.TControl.HandleObjectShouldBeVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPage.HandleObjectShouldBeVisible.Result">
        <short/>
      </element>

      <element name="TCustomPage.VisibleIndex">
        <short>
          Gets the index number for a visible page within all of the visible pages.
        </short>
        <descr>
          <p>
            <var>VisibleIndex</var> is an <var>Integer</var> function used to get the ordinal position for the page instance within the list of visible pages for the Parent control.
          </p>
          <p>
            When Parent is a <var>TCustomTabControl</var> descendant, its TCustomPage instances are examined to find the current class instance. At run-time, only pages with the TabVisible property set to True are considered in the method. At design-time, all pages are examined.
          </p>
          <p>
            The return value is the relative position in the list of visible pages where the current class instance was found. The return value is -1 if the current page was not found in the Parent control, or when none of the pages in the Parent control  are visible.
          </p>
          <p>
            When Parent is not derived from TCustomTabControl, the return value is always <b>-1</b>.
          </p>
        </descr>
      </element>
      <element name="TCustomPage.VisibleIndex.Result">
        <short>
          Ordinal position for the visible page, or -1 when not found or not visible.
        </short>
      </element>

      <element name="TCustomPage.CheckNewParent">
        <short>Ensures that the specified control is derived from TCustomTabControl.</short>
        <descr>
          <p>
            Raises an <var>EInvalidOperation</var> exception when <var>AParent</var> is not derived from <var>TCustomTabControl</var>. Calls the inherited <var>CheckNewParent</var> method when AParent is unassigned or derived from TCustomTabControl.
          </p>
        </descr>
        <errors>
          Raises an EInvalidOperation exception when AParent is not derived from TCustomTabControl.
        </errors>
        <seealso>
          <link id="TCustomPage"/>
          <link id="#lcl.controls.TControl.CheckNewParent">TControl.CheckNewParent</link>
        </seealso>
      </element>
      <element name="TCustomPage.CheckNewParent.AParent">
        <short>Parent control examined in the method.</short>
      </element>

      <element name="TCustomPage.PageIndex">
        <short>Ordinal position for the page in the parent control.</short>
        <descr>
          <p>
            <var>PageIndex</var> is an Integer property which contains the ordinal position for the page control in its <var>Parent</var> control. Setting a new value for the property causes the Parent control to call its <var>MoveTab</var> method to reorder the pages. This action is performed when the Parent control is descended from <var>TCustomTabControl</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl"/>
        </seealso>
      </element>

      <element name="TCustomPage.TabVisible">
        <short>Indicates if the tab in the Parent control is visible.</short>
        <descr>
          <p>
            <var>TabVisible</var> indicates if the Tab in the <var>Parent</var> control is visible.
          </p>
          <p>
            Changing the value in the property cause the Parent control to be updated to reflect the new value. No actions are performed in the method at design-time, or when the property value is not different than the stored value.
          </p>
          <p>
            When the <var>Parent</var> control has been assigned and has a handle allocated, the TCustomTabControl in Parent is updated to reflect the new value for the property. When <b>True</b>, the active page in the Parent control is changed to the current page instance if one has not already been assigned in the Parent. The page and its handle are removed from the Tab control when the property value is <b>False</b>.
          </p>
          <p>
            Use <var>IsControlVisible</var> to determine if the page is currently the active page displayed in the Parent tab control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.ImageIndex">
        <short>Ordinal position for the image associated with the page.</short>
        <descr>
          <p>
            <var>ImageIndex</var> contains the ordinal position in an image list for the image associated with the page instance. The default value for the property is <b>-1</b> and indicates that an image has not been assigned for the page. The image list is a property available in the Parent control.
          </p>
          <p>
            Changing the value for the property causes the widgetset class to be notified using its UpdateTabProperties method.
          </p>
          <p>
            No actions are performed in the method during LCL component streaming, or when the Handle for the control has not been allocated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.Left">
        <short>
          Not stored in LCL component streaming for TCustomPage.
        </short>
        <descr>
          The value for the Left property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Left">TControl.Left</link>
        </seealso>
      </element>

      <element name="TCustomPage.Top">
        <short>
          Not stored in LCL component streaming for TCustomPage.
        </short>
        <descr>
          The value for the Top property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Left">TControl.Left</link>
        </seealso>
      </element>

      <element name="TCustomPage.Width">
        <short>
          Not stored in LCL component streaming for TCustomPage.
        </short>
        <descr>
          The value for the Width property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Width">TControl.Width</link>
        </seealso>
      </element>

      <element name="TCustomPage.Height">
        <short>
          Not stored in LCL component streaming for TCustomPage.
        </short>
        <descr>
          The value for the Height property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Height">TControl.Height</link>
        </seealso>
      </element>

      <element name="TCustomPage.TabOrder">
        <short>
          Not stored in LCL component streaming for TCustomPage.
        </short>
        <descr>
          The value for the TabOrder property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.TabOrder">TWinControl.TabOrder</link>
        </seealso>
      </element>

      <element name="TCustomPage.Visible">
        <short>
          Not stored in LCL component streaming for TCustomPage.
        </short>
        <descr>
          <p>
            The value for the Visible property is not stored in the LCL component streaming mechanism for TCustomPage.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
        </seealso>
      </element>

      <element name="TCustomPage.OnHide">
        <short>Event handler signalled when the page is hidden.</short>
        <descr>
          <p>
            <var>OnHide</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the page is hidden. OnHide is signalled from the <var>DoHide</var> method, and occurs when the value in the <var>Visible</var> property is set to <b>False</b>.
          </p>
          <p>
            Applications can implement and assign a handler routine to respond to the event notification. The <var>Sender</var> argument contains the <var>TCustomPage</var> instance for the event notification.
          </p>
        </descr>
      </element>

      <element name="TCustomPage.OnShow">
        <short>Event handler signalled when the page becomes visible.</short>
        <descr>
          <p>
            <var>OnShow</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the page becomes visible. OnShow is signalled from the <var>DoShow</var> method, and occurs when the value in the <var>Visible</var> property is set to <b>True</b>.
          </p>
          <p>
            Applications can implement and assign a handler routine to respond to the event notification. The <var>Sender</var> argument contains the <var>TCustomPage</var> instance for the event notification.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPageClass">
        <short>Class reference used to create a new TCustomPage instance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBBasePages">
        <short>Ancestor for the TNBPages class.</short>
        <descr>
          <p>
            <var>TNBBasePages</var> specifies the ancestor for TNBPages, and provides virtual abstract methods used to maintain a list of TCustomPage objects associated with a TCustomTabControl (also called a "notebook"). Use the TNBPages descendant which provides concrete method implementations and additional properties and methods for the purpose.
          </p>
        </descr>
        <seealso>
          <link id="TNBPages"/>
        </seealso>
      </element>

      <element name="TNBBasePages.IndexOfPage">
        <short>Gets the ordinal position for the specified page object.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.IndexOfPage.Result">
        <short>Ordinal position for the specified page object, or -1 when not found.</short>
      </element>
      <element name="TNBBasePages.IndexOfPage.AnObject">
        <short>Page object to locate in the list.</short>
      </element>

      <element name="TNBBasePages.InsertPage">
        <short>Inserts the specified page at the given position in the list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.InsertPage.Index">
        <short>Ordinal position where the page is inserted.</short>
      </element>
      <element name="TNBBasePages.InsertPage.APage">
        <short>Page object inserted in the method.</short>
      </element>

      <element name="TNBBasePages.DeletePage">
        <short>Deletes the page at the specified position in the list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.DeletePage.Index">
        <short>Ordinal position for the page deleted in the method.</short>
      </element>

      <element name="TNBBasePages.GetPage">
        <short>Gets the page object stored at the specified position in the list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.GetPage.Result">
        <short>Page object stored at the specified position in the list.</short>
      </element>
      <element name="TNBBasePages.GetPage.Index">
        <short>Ordinal position in the list for the requested page object.</short>
      </element>

      <element name="TNBBasePages.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            Calls the inherited constructor. Please note: The value in theNotebook is ignored in the method. Use the derived TNBPages class which stores the notebook where the page objects are used.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TNBBasePages.Create.theNotebook">
        <short>
          Notebook (or custom tab control) for the page objects; Ignored in the method.
        </short>
      </element>

      <element name="TNBBasePagesClass">
        <short>Class reference used to create new instances of TNBBasePages.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages">
        <short>Implements a list of pages used in TCustomTabControl.</short>
        <descr>
          <p>
            <var>TNBPages</var> is a <var>TNBBasePages</var> descendant which implements a list of pages used in <var>TCustomTabControl</var>.
          </p>
          <p>
            TNBPages extends the ancestor class to include properties for the TCustomTabControl which owns the list of pages (<var>Notebook</var>), and the internal list used to store the <var>TCustomPage</var> instances (<var>PageList</var>). It implements the abstract virtual methods defined in the ancestor, and provides additional methods to maintain the pages in PageList.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage"/>
          <link id="TCustomTabControl"/>
          <link id="TNBBasePages"/>
        </seealso>
      </element>

      <element name="TNBPages.FPageList"/>
      <element name="TNBPages.FNotebook"/>

      <element name="TNBPages.PageListChange">
        <short>Implements the OnChange event handler for the page list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.PageListChange.Ptr">
        <short/>
      </element>
      <element name="TNBPages.PageListChange.AnAction">
        <short/>
      </element>

      <element name="TNBPages.Get">
        <short>Implements read access to values for the Strings property.</short>
        <descr>
          <p>
            Read access is redirected to the <var>PageList</var> property. The return value contains the <var>Caption</var> for the <var>TCustomPage</var> instance stored at the specified position in PageList.
          </p>
        </descr>
        <seealso>
          <link id="TNBPages.PageList"/>
          <link id="#rtl.classes.TStringList">TStringList</link>
        </seealso>
      </element>
      <element name="TNBPages.Get.Result">
        <short>Returns the Caption for the page.</short>
      </element>
      <element name="TNBPages.Get.Index">
        <short>Ordinal position for the requested value.</short>
      </element>

      <element name="TNBPages.GetCount">
        <short/>
        <descr>
          <p>
            GetCount is an overridden method in TNBPages, and returns the number of items stored in <var>PageList</var>.
          </p>
        </descr>
        <seealso>
          <link id="TNBPages.PageList"/>
        </seealso>
      </element>
      <element name="TNBPages.GetCount.Result">
        <short>Gets the number of pages in the class instance.</short>
      </element>

      <element name="TNBPages.GetObject">
        <short/>
        <descr>
          <p>
            <var>GetObject</var> is an overridden method in <var>TNBPages</var>, and redirects indexed object access to the <var>PageList</var> property. The return value is a <var>TObject</var> instance, and must be cast to <var>TCustomPage</var> to access its properties and methods.
          </p>
          <p>
            Use <var>GetPage</var> to get a page in PageList as a TCustomPage instance.
          </p>
        </descr>
        <seealso>
          <link id="TNBPages.GetPage"/>
          <link id="TNBPages.PageList"/>
          <link id="#rtl.classes.TStringList">TStringList</link>
        </seealso>
      </element>
      <element name="TNBPages.GetObject.Result">
        <short>Object stored at the specified position.</short>
      </element>
      <element name="TNBPages.GetObject.Index">
        <short>Ordinal position for the object requested in the method.</short>
      </element>

      <element name="TNBPages.Put" link="#rtl.classes.TStringList.Put">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.Put.Index">
        <short/>
      </element>
      <element name="TNBPages.Put.S">
        <short/>
      </element>

      <element name="TNBPages.IndexOfPage">
        <short>Gets the position in PageList for the specified page.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.IndexOfPage.Result">
        <short>Ordinal position for the page instance, or -1 when not found.</short>
      </element>
      <element name="TNBPages.IndexOfPage.AnObject">
        <short>TCustomPage instance to locate in the list of pages.</short>
      </element>

      <element name="TNBPages.InsertPage">
        <short>Inserts a page instance at the specified position in the page list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.InsertPage.Index">
        <short>Ordinal position in the page list for the inserted value.</short>
      </element>
      <element name="TNBPages.InsertPage.APage">
        <short>Page instance inserted into the page list.</short>
      </element>

      <element name="TNBPages.DeletePage">
        <short>Deletes the page stored at the specified position in the page list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.DeletePage.Index">
        <short>Ordinal position for the page removed from the page list.</short>
      </element>

      <element name="TNBPages.GetPage">
        <short>Gets the page stored at the specified position in PageList.</short>
        <descr>
          <p>
            <var>GetPage</var> implements the abstract method defined in the ancestor, and is used to get a <var>TCustomPage</var> instance stored at the specified position in <var>PageList</var>. GetPage calls the GetObject method to retrieve the page, and casts it to the TCustomPage type used in the return value.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TNBPages.GetPage.Result">
        <short>TCustomPage instance stored at the specified position.</short>
      </element>
      <element name="TNBPages.GetPage.Index">
        <short>Ordinal position in PageList for the requested page.</short>
      </element>

      <element name="TNBPages.PageList">
        <short>List with the TCustomPage instances for the class instance.</short>
        <descr>
          <p>
            <var>PageList</var> is a read-only <var>TListWithEvent</var> property which contains the <var>TCustomPage</var> instances for the class instance.
          </p>
          <p>
            PageList includes an <var>OnChange</var> event handler used to perform notifications when values are added, retrieved, or deleted in the list. The private <var>PageListChange</var> method implements the handler, and ensures that new items in the list are parented to the control in <var>Notebook</var>.
          </p>
          <p>
            Most methods in <var>TNBPages</var> are redirected to PageList to get or set their values.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.lcltype.TListWithEvent">TListWithEvent</link>
          <link id="#rtl.classes.TListNotification">TListNotification</link>
        </seealso>
      </element>

      <element name="TNBPages.Notebook">
        <short>Provides a reference to the control which owns the pages.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TNBPages</var>, and calls the inherited <var>Create</var> method. It sets up the list of pages for the notebook (tab control).
          </p>
        </descr>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TNBPages.Create.theNotebook">
        <short>Control which owns the class instance (and its pages).</short>
      </element>

      <element name="TNBPages.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            Frees and releases resources allocated to PageList.
          </p>
        </descr>
        <seealso>
          <link id="TNBPages.PageList"/>
          <link id="TNBPages.Create"/>
        </seealso>
      </element>

      <element name="TNBPages.Clear">
        <short>Removes all pages stored in the class instance.</short>
        <descr>
          <p>
            Calls <var>Delete</var> until all <var>TCustomPage</var> instances in <var>PageList</var> have been removed.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TStrings.Clear">TStrings.Clear</link>
        </seealso>
      </element>

      <element name="TNBPages.Delete">
        <short>Deletes the page stored at the specified position in the page list.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Delete">TStrings.Delete</link>
        </seealso>
      </element>
      <element name="TNBPages.Delete.Index">
        <short>Ordinal position for the page removed from the list.</short>
      </element>

      <element name="TNBPages.Insert">
        <short>
          Inserts a new page with the given name at the specified position in PageList.
        </short>
        <descr>
          <p>
            <var>Insert</var> calls the <var>GetPageClass</var> method in <var>NoteBook</var> to get the class reference used to create the new page. The owner of the page instance is the NoteBook control (or its owner when assigned). The value in <var>S</var> is assigned as the Caption in the TCustomPage instance. The <var>InsertPage</var> method in NoteBook is called to store the TCustomPage instance at the position in <var>Index</var>.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TStrings.Insert">TStrings.Insert</link>
        </seealso>
      </element>
      <element name="TNBPages.Insert.Index">
        <short>Ordinal position where the new page is stored.</short>
      </element>
      <element name="TNBPages.Insert.S">
        <short>Name (Caption) used for the new page instance.</short>
      </element>

      <element name="TNBPages.Move" link="#rtl.classes.TStrings.Move">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.Move.CurIndex">
        <short/>
      </element>
      <element name="TNBPages.Move.NewIndex">
        <short/>
      </element>

      <element name="TNBNoPages">
        <short>
          Re-implements an empty page container for TCustomTabControl controls.
        </short>
        <descr>
            <p>
              <var>TNBNoPages</var> is a <var>TNBBasePages</var> descendant which re-implements the page container for a TCustomTabControl. As the name implies, it does not actually use TCustomPages instances in the container. It removes the methods used to add and maintain the values in the class instance.
            </p>
        </descr>
        <seealso/>
      </element>

      <element name="TNBNoPages.Get">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.Get.Result">
        <short/>
      </element>
      <element name="TNBNoPages.Get.Index">
        <short/>
      </element>

      <element name="TNBNoPages.GetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.GetCount.Result">
        <short/>
      </element>

      <element name="TNBNoPages.IndexOfPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.IndexOfPage.Result">
        <short/>
      </element>
      <element name="TNBNoPages.IndexOfPage.AnObject">
        <short/>
      </element>

      <element name="TNBNoPages.GetPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.GetPage.Result">
        <short/>
      </element>
      <element name="TNBNoPages.GetPage.Index">
        <short/>
      </element>

      <element name="TTabChangingEvent">
        <short>
          <var>TTabChangingEvent</var> - generic event handling method for a change in a notebook Tab.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabChangingEvent.Sender">
        <short>Notebook for the event notification.</short>
      </element>
      <element name="TTabChangingEvent.AllowChange">
        <short>Indicates if the tab change can be performed.</short>
      </element>

      <element name="TTabPosition">
        <short>
          Represents the position for a tab relative to its page.
        </short>
        <descr>
          <p>
            <var>TTabPosition</var> is an enumerated type with values that represent the position for the tabs in <var>TCustomTabControl</var> relative to its page. TTabPosition is the type used to implement the <var>TabPosition</var> property in TCustomTabControl.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.TabPosition"/>
        </seealso>
      </element>
      <element name="TTabPosition.tpTop">
        <short>Displays tabs along the top edge of the page.</short>
      </element>
      <element name="TTabPosition.tpBottom">
        <short>Displays tabs along the bottom edge of the page.</short>
      </element>
      <element name="TTabPosition.tpLeft">
        <short>Displays tabs vertically along the left edge of the page.</short>
      </element>
      <element name="TTabPosition.tpRight">
        <short>Displays tabs vertically along the right edge of the page.</short>
      </element>

      <element name="TTabStyle">
        <short>
          <var>TTabStyle</var> - enumerated type for tab style: normal, buttons or flat buttons.
        </short>
        <descr>
          <p>
            <var>TTabStyle</var> is an enumerated type with values that define the drawing style used for tabs in <var>TCustomTabControl</var>. TTabStyle is the type used to implement the <var>Style</var> property in TCustomTabControl.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Style"/>
        </seealso>
      </element>
      <element name="TTabStyle.tsTabs">
        <short>Tabs are drawn using the tab style common to manilla file folders.</short>
      </element>
      <element name="TTabStyle.tsButtons">
        <short>Tabs are drawn as buttons.</short>
      </element>
      <element name="TTabStyle.tsFlatButtons">
        <short>Tabs are drawn as buttons using a flat (non-raised) appearance.</short>
      </element>

      <element name="TTabGetImageEvent">
        <short>
          <var>TTabGetImageEvent</var> - generic event handling method for getting an image for a Tab.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabGetImageEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TTabGetImageEvent.TabIndex">
        <short/>
      </element>
      <element name="TTabGetImageEvent.ImageIndex">
        <short/>
      </element>

      <element name="TCTabControlOption">
        <short>
          <var>TCTabControlOption</var> - Show the close button on a tab, allow multi-line tabs.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCTabControlOption.nboShowCloseButtons">
        <short/>
      </element>
      <element name="TCTabControlOption.nboMultiLine">
        <short/>
      </element>

      <element name="TCTabControlOptions">
        <short>
          <var>TCTabControlOptions</var> - set of <var>TCTabControlOption</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCTabControlCapability">
        <short>
          <var>TCTabControlCapability</var> - enumerated type containing possible capabilities of a notebook or tabbed control.
        </short>
        <descr>
          nbcShowCloseButtons, nbcMultiLine, nbcPageListPopup, nbcShowAddTabButton
        </descr>
      </element>
      <element name="TCTabControlCapability.nbcShowCloseButtons">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcMultiLine">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcPageListPopup">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcShowAddTabButton">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcTabsSizeable">
        <short/>
      </element>

      <element name="TCTabControlCapabilities">
        <short>
          <var>TCTabControlCapabilities</var> - set of <var>TCTabControlCapability</var>.
        </short>
      </element>

      <element name="TDrawTabEvent">
        <short>
          <var>TDrawTabEvent</var> - generic event handling procedure for drawing a tab with given index at the specified rectangle.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TDrawTabEvent.Control">
        <short/>
      </element>
      <element name="TDrawTabEvent.TabIndex">
        <short/>
      </element>
      <element name="TDrawTabEvent.Rect">
        <short/>
      </element>
      <element name="TDrawTabEvent.Active">
        <short/>
      </element>

      <element name="TCustomTabControl">
        <short>
          Implements the base class for tabbed controls in the LCL.
        </short>
        <descr>
          <p>
            <var>TCustomTabControl</var> - base class for <var>TTabControl</var>, a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
          </p>
          <p>
            A tab control has a series of <var>Tabs</var> and it may or may not contain pages.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.FAccess"/>
      <element name="TCustomTabControl.FAddingPages"/>
      <element name="TCustomTabControl.FHotTrack"/>
      <element name="TCustomTabControl.FImages"/>
      <element name="TCustomTabControl.FImageWidth"/>
      <element name="TCustomTabControl.FImageListChangeLink"/>
      <element name="TCustomTabControl.FMultiSelect"/>
      <element name="TCustomTabControl.FOnChanging"/>
      <element name="TCustomTabControl.FOnCloseTabClicked"/>
      <element name="TCustomTabControl.FOnGetImageIndex"/>
      <element name="TCustomTabControl.fOnPageChanged"/>
      <element name="TCustomTabControl.FOptions"/>
      <element name="TCustomTabControl.FOwnerDraw"/>
      <element name="TCustomTabControl.FPageIndex"/>
      <element name="TCustomTabControl.FPageIndexOnLastChange"/>
      <element name="TCustomTabControl.FRaggedRight"/>
      <element name="TCustomTabControl.FScrollOpposite"/>
      <element name="TCustomTabControl.FShowTabs"/>
      <element name="TCustomTabControl.FStyle"/>
      <element name="TCustomTabControl.FTabHeight"/>
      <element name="TCustomTabControl.FTabPosition"/>
      <element name="TCustomTabControl.FTabWidth"/>

      <element name="TCustomTabControl.DoSendPageIndex">
        <short>Notifies the widgetset class when PageIndex has been changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoSendShowTabs">
        <short>Notifies the widgetset class when ShowTabs has been changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoSendTabPosition">
        <short>Notifies the widgetset class when TabPosition has been changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoSendTabSize">
        <short>Notifies the widgetset class when TabSize has been changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoImageListChange">
        <short>Notifies the widgetset class when Images has been changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.GetActivePage">
        <short>Gets the value for the ActivePage property.</short>
        <descr>
          <p>
            Uses an internal index value to get the caption for the TCustomPage in the Page property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.ActivePage"/>
          <link id="TCustomTabControl.Page"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetActivePage.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTabControl.GetActivePageComponent">
        <short>Gets the value for the ActivePageComponent property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ActivePageComponent"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetActivePageComponent.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTabControl.GetDisplayRect">
        <short>Gets the value for the DisplayRect property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.DisplayRect"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetDisplayRect.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTabControl.GetMultiLine">
        <short>Gets the value for the MultiLine property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.MultiLine"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetMultiLine.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTabControl.FindVisiblePage">
        <short>Locates a visible page in the tab control.</short>
        <descr>
          <p>
            <var>FindVisiblePage</var> is used to locate a Page in the tab control with its TabVisible property set to True.
          </p>
          <p>
            Index specifies the ordinal position in Pages property that is the search locus. FindVisiblePage searches the Page collection in ascending order starting at the position in Index. If a visible page is not found, Page is searched in descending order starting at Index -1.
          </p>
          <p>
            The return value contains the ordinal position in the indexed Page property where the visible tab was located, or -1 when there are no visible tabs in Page.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.FindVisiblePage.Result">
        <short>
          Ordinal position for the visible page tab, or -1 when a visible tab is not found.
        </short>
      </element>
      <element name="TCustomTabControl.FindVisiblePage.Index">
        <short>Ordinal position where the search is started.</short>
      </element>

      <element name="TCustomTabControl.IsStoredActivePage">
        <short>Implements the storage specifier for the ActivePage property.</short>
        <descr>
          <p>
            Always returns <b>False</b> in <var>TCustomTabControl</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IsStoredActivePage.Result">
        <short>Always returns False in TCustomTabControl.</short>
      </element>

      <element name="TCustomTabControl.MoveTab">
        <short>Moves the specified page control to the position in NewIndex.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.MoveTab.Sender">
        <short>Page object moved in the method.</short>
      </element>
      <element name="TCustomTabControl.MoveTab.NewIndex">
        <short>New position in the list of pages.</short>
      </element>

      <element name="TCustomTabControl.SetMultiLine">
        <short>Sets the value for the MultiLine property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.SetMultiLine"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetMultiLine.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetStyle">
        <short>Sets the value for the Style property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Style"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.WSMovePage">
        <short>Notifies the widgetset class when a page is moved in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.WSMovePage.APage">
        <short/>
      </element>
      <element name="TCustomTabControl.WSMovePage.NewIndex">
        <short/>
      </element>

      <element name="TCustomTabControl.PageRemoved">
        <short>
          Performs action needed when the current page object is removed from the tabbed control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.PageRemoved.Index">
        <short>Ordinal position for the page object removed from the tabbed control.</short>
      </element>

      <element name="TCustomTabControl.SetActivePage">
        <short>Sets the value for the ActivePage property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ActivePage"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetActivePage.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetActivePageComponent">
        <short>Sets the value for the ActivePageComponent property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ActivePageComponent"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetActivePageComponent.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetImages">
        <short>Sets the value for the Images property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Images"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetImages.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetImagesWidth">
        <short>Sets the value for the ImagesWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ImagesWidth"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetImagesWidth.AImagesWidth">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetPageIndex">
        <short>Sets the value for the PageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.PageIndex"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetPageIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetPages">
        <short>Sets the value for the Pages property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Pages"/>
          <link id="TNBPages"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetPages.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetShowTabs">
        <short>Sets the value for the ShowTabs property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ShowTabs"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetShowTabs.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetTabHeight">
        <short>Sets the value for the TabHeight property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabHeight"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetTabHeight.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetTabPosition">
        <short>Sets the value for the ShowTabs property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabPosition"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetTabPosition.tabPos">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.SetTabWidth">
        <short>Sets the value for the TabWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabWidth"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetTabWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.ShowCurrentPage">
        <short>Ensures that the current page has its Visible property set to True.</short>
        <descr>
          <p>
            <var>ShowCurrentPage</var> checks the value in <var>PageIndex</var> to determine if a valid page index has been specified. No actions are performed in the method when PageIndex is less than <b>0</b> or greater than <b>PageCount - 1</b>.
          </p>
          <p>
            ShowCurrentPage gets the <var>TCustomPage</var> instance in <var>Page</var> at the position in <var>PageIndex</var>, and sets its <var>Visible</var> property to <b>True</b>. If the Page is Enabled, it <var>SetFocus</var> method is called.
          </p>
          <p>
            ShowCurrentPage sets the Visible property in the previously selected Page to <b>False</b>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTabControl.UpdateAllDesignerFlags">
        <short>
          Updates control style flags to hide or display pages in the control at design-time.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.UpdateDesignerFlags">
        <short>
          Updates control style flags for the specified page to hide or display the control at design-time.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.UpdateDesignerFlags.APageIndex">
        <short>Ordinal position for the Page updated in the method.</short>
      </element>

      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle">
        <short>
          Notifies the widgetset class when the handle for the image resolution is freed.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.SetImageListAsync"/>
          <link id="#LCL.forms.TApplication.QueueAsyncCall">TApplication.QueueAsyncCall</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle.Sender">
        <short>Image list for the event notification.</short>
      </element>
      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle.AWidth">
        <short>Not used in the method.</short>
      </element>
      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle.AReferenceHandle">
        <short>Not used in the method.</short>
      </element>

      <element name="TCustomTabControl.SetImageListAsync">
        <short>Performs actions needed when an image list in the control is changed.</short>
        <descr>
          <p>
            Queued and executed asynchronously by the Application instance.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.SetImageListAsync.Data">
        <short>Pointer to the Data for the asynchronous event.</short>
      </element>

      <element name="TCustomTabControl.DoAutoAdjustLayout">
        <short>Performs actions needed to apply the specified auto-adjust layout policy.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TCustomTabControl.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TCustomTabControl.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TCustomTabControl.GetPageClass">
        <short>Gets the class type used to create new page instances in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetPageClass.Result">
        <short>Class type used to create new page instances in the control.</short>
      </element>

      <element name="TCustomTabControl.GetListClass">
        <short>Gets the class type used to access a list of pages in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetListClass.Result">
        <short>Class type used to access a list of pages in the control.</short>
      </element>

      <element name="TCustomTabControl.SetOptions">
        <short>Sets the value for the Options property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Options"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetOptions.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTabControl.AddRemovePageHandle">
        <short>
          Notifies the widgetset class when a page handle is added or removed in the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.AddRemovePageHandle.APage">
        <short>Page instance with the handle added or removed.</short>
      </element>

      <element name="TCustomTabControl.CNNotify">
        <short>Handles the CN_NOTIFY message for the control.</short>
        <descr>
          <p>
            Handles TCN_SELCHANGE and TCN_SELCHANGING notification codes in Message.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CNNotify.Message">
        <short>Control notification message handled in the method.</short>
      </element>

      <element name="TCustomTabControl.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomTabControl.CreateWnd">
        <short>
          Creates the Handle for the widgetset object and displays the selected tab and page.
        </short>
        <descr>
          <p>
            Calls the inherited method on entry. Adds or removes handles for pages on the control. Displays the visible tabs and the active page for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.Loaded">
        <short>
          Notifies the widgetset class of the active page when the control Handle is allocated.
        </short>
        <descr>
          <p>
            Notifies the widgetset class of the value in PageIndex when the control Handle has been allocated.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.DoChange">
        <short>
          Performs actions needed when the active page for the control has been changed.
        </short>
        <descr>
          <p>
            Performs actions needed when the active page for the control has been changed.
            Signals the OnChange event handler (when assigned).
            Called when a new value is assigned to PageIndex.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTabControl.InitializeWnd" link="#lcl.controls.TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Change">
        <short>
          Performs actions to show or hide pages when the current page is changed.
        </short>
        <descr>
          <p>
            <var>Change</var> is a method used to performs actions needed to show or hide pages in the tabbed control.
          </p>
          <p>
            Change calls ShowCurrentPage to display the page in PageIndex, and hide the previously visible page in the tabbed control. Change calls DoChange when the control is not being destroyed, or loaded in the LCL component streaming mechanism.
          </p>
          <p>
            Change is called from the MoveTab method, and when selection change messages are handled for the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTabControl.KeyDown">
        <short>Handles page navigation using the Tab key.</short>
        <descr>
          <p>
            <var>KeyDown</var> is overridden in TCustomTabControl to handle use of the <b>Tab</b> key (<b>VK_TAB</b>) to change the active page in the tabbed control.
          </p>
          <p>
            The <var>Options</var> property must contain the value    <var>nboKeyboardTabSwitch</var> to enable the tab switching feature. Pressing <b>Ctrl+Tab</b> switches to the next page by incrementing the <var>PageIndex</var> value. Pressing <b>Ctrl+Shift+Tab</b>  switches to the previous  page by decrementing the <var>PageIndex</var> value.
          </p>
          <p>
            If <var>Key</var> is not the <b>VK_TAB</b> virtual key code, the inherited method is called to handle the values in <var>Key</var> and <var>Shift</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Options"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCTabControlOption"/>
          <link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.KeyDown.Key">
        <short>Virtual key code examined in the method.</short>
      </element>
      <element name="TCustomTabControl.KeyDown.Shift">
        <short>Key modifier(s) used in the method.</short>
      </element>

      <element name="TCustomTabControl.ReadState" link="#lcl.controls.TControl.ReadState"/>
      <element name="TCustomTabControl.ReadState.Reader"/>

      <element name="TCustomTabControl.DialogChar">
        <short>Handles an accelerator key for the active page in the tabbed control.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.DialogChar">TControl.DialogChar</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.DialogChar.Result">
        <short>True if the accelerator was handled in the active page.</short>
      </element>
      <element name="TCustomTabControl.DialogChar.Message">
        <short>Message with the accelerator key examined in the method.</short>
      </element>

      <element name="TCustomTabControl.InternalSetPageIndex">
        <short>Updates the internal page index without triggering an OnChange event.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.InternalSetPageIndex.AValue">
        <short>New value for the internal page index.</short>
      </element>

      <element name="TCustomTabControl.ShowControl">
        <short>Makes the specified page object the active page in the tabbed control.</short>
        <descr>
          <p>
            <var>ShowControl</var> gets the position for the control specified by the <var>APage</var> argument in the <var>Page</var> property, and makes it the active page in the tabbed control. If the control is not found in Page, the inherited ShowControl method is called to display the control.
          </p>
          <p>
            ShowControl is provided for Delphi compatibility.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Page"/>
          <link id="TCustomTabControl.IndexOf"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCustomTabControl.PageToTabIndex"/>
          <link id="TCustomTabControl.TabToPageIndex"/>
          <link id="#lcl.controls.TWinControl.ShowControl">TWinControl.ShowControl</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.ShowControl.APage">
        <short>Page object to locate and display in the method.</short>
      </element>

      <element name="TCustomTabControl.IndexOfTabAt">
        <short>
          <var>IndexOfTabAt</var> returns the index value for the Tab located at the specified client coordinates.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.X">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.Y">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.P">
        <short/>
      </element>

      <element name="TCustomTabControl.IndexOfPageAt">
        <short>Gets the index for the page at the specified client coordinates.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.X">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.Y">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.P">
        <short/>
      </element>

      <element name="TCustomTabControl.UpdateTabProperties">
        <short>
          <var>UpdateTabProperties</var> - apply all pending changes to the Tab.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values.
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.Notification">
        <short>
          Handles the notification when a component is added to or removed from the control.
        </short>
        <descr>
          <p>
            <var>Notification</var> is overridden in <var>TCustomTabControl</var> to ensure that resources allocated for the Images property are Nil'd when the component is removed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Images"/>
          <link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.Notification.AComponent">
        <short>Component for the notification.</short>
      </element>
      <element name="TCustomTabControl.Notification.Operation">
        <short>Operation performed for the component.</short>
      </element>

      <element name="TCustomTabControl.ActivePageComponent">
        <short>The active TCustomPage instance for the tabbed control.</short>
        <descr>
          <p>
            <var>ActivePageComponent</var> is a <var>TCustomPage</var> property which indicates the active page component for the tabbed control.
          </p>
          <p>
            <var>PageIndex</var> is used to access the page instance in <var>Page</var> with the property value. The property value is <b>Nil</b> when PageIndex contains a value that is not in the range <b>0..<var>PageCount</var>-1</b>.
          </p>
          <p>
            Setting a new value for the property causes the <var>IndexOf</var> method to be called to locate the value in the list of pages. PageIndex is updated to reflect the position for the specified page, and may contain <b>-1</b> if pages are not used in the tabbed control.
          </p>
          <p>
            Use <var>ActivePage</var> to get or set the active page in the control using its Caption.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCustomTabControl.Page"/>
          <link id="TCustomTabControl.IndexOf"/>
          <link id="TCustomTabControl.ActivePage"/>
          <link id="TCustomPage"/>
        </seealso>
      </element>

      <element name="TCustomTabControl.ActivePage">
        <short>Caption for the active page in the tabbed control.</short>
        <descr>
          <p>
            <var>ActivePage</var> is a <var>String</var> property which holds the caption for the active page in the control.
          </p>
          <p>
            The property value is retrieved using values in the <var>PageIndex</var> and <var>Page</var> properties, and contains the <var>Caption</var> property for the <var>TCustomPage</var> instance. The property value is an empty string (<b>''</b>) if PageIndex is not in the range <b>0..<var>PageCount</var>-1</b>.
          </p>
          <p>
            Setting a new value for the property causes the indexed Page property to be searched to locate the TCustomPage instance with a Caption matching <var>Value</var>. If a page is found with the specified caption, the <var>SetPageIndex</var> method is called to validate and store the PageIndex, and signal the <var>OnChange</var> event handler when configured in <var>Options</var>. No actions are performed if the new property Value is not used in Page.
          </p>
          <p>
            A value assigned to ActivePage at design-time is <b>not</b> stored in the LCL component streaming mechanism.
          </p>
          <p>
            Use <var>ActivePageComponent</var> to read or write the TCustomPage instance that is the active page in the control.
          </p>
          <p>
            Use <var>Tabs</var> to access the internal page (or tab) list for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Page"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCustomTabControl.Options"/>
          <link id="TCustomTabControl.OnChange"/>
          <link id="TCustomTabControl.ActivePageComponent"/>
          <link id="TCustomTabControl.Tabs"/>
          <link id="#lcl.controls.TControl.Caption">TControl.Caption</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.GetPage">
        <short>Gets the value for the indexed Page property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Page"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetPage.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TCustomTabControl.GetPage.AIndex">
        <short>Ordinal position for the page object requested in the method.</short>
      </element>

      <element name="TCustomTabControl.GetPageCount">
        <short>Gets the value for the PageCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.PageCount"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetPageCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTabControl.InsertPage">
        <short>
          Updates the control when the specified page is inserted into the page list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.InsertPage.APage">
        <short/>
      </element>
      <element name="TCustomTabControl.InsertPage.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.RemovePage">
        <short>
          Updates the control when the page at the specified position is removed from the page list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.RemovePage.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.CanChange">
        <short>
          Signals the OnChanging event handler prior to updates to PageIndex.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CanChange.Result">
        <short>Always returns True.</short>
      </element>

      <element name="TCustomTabControl.DisplayRect">
        <short>
          Rectangular area used to display information for the tabbed control.
        </short>
        <descr>
          <p>
            <var>DisplayRect</var> is a read-only <var>TRect</var> property which contains the display rectangle for the tabbed control. The property value contains the TRect instance returned from the <var>TWinControl.GetClientRect</var> method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.GetClientRect">TWinControl.GetClientRect</link>
          <link id="#rtl.classes.TRect">TRect</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.Tabs">
        <short>
          Contains the list of pages accessible in the tabbed control.
        </short>
        <descr>
          <p>
            <var>Tabs</var> is a <var>TStrings</var> property which contains the list of pages for the tabbed control. It is created using the class reference from GetListClass in the constructor. By default, <var>TNBPages</var> is used as the class type for the page list. It is stored in an internal member, and used when TCustomPage class instances for the control are accessed and maintained.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabIndex">
        <short>Contains the ordinal position for the active Tab in the control.</short>
        <descr>
          <p>
            <var>TabIndex</var> is an <var>Integer</var> property which contains the ordinal position for the active Tab in the tabbed control. It is the same as the <var>PageIndex</var> property; they read and write the same member value. The default value for the property is <b>-1</b>, and indicates that an active tab (page) has not been selected in the control.
          </p>
          <p>
            Setting a new value for the property causes the <var>OnChange</var> event handler to be signalled when <var>nboDoChangeOnSetIndex</var> has been included in the <var>Options</var> for the control. The event handler is not signalled at design-time, during LCL component streaming, or when the control is freed.
          </p>
          <p>
            No actions are performed in the method when the new property value is not in the range <b>-1..<var>PageCount</var>-1</b>, or when the new value is the same as the existing value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCustomTabControl.OnChange"/>
          <link id="TCustomTabControl.Options"/>
          <link id="TCTabControlOption"/>
        </seealso>
      </element>

      <element name="TCustomTabControl.OnChange">
        <short>
          Event handler signalled when the active page (or tab) for the control is changed.
        </short>
        <descr>
          <p>
            <var>OnChange</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the active page (or tab) for the control is changed. OnChange is enabled when the value <var>nboDoChangeOnSetIndex</var> has been included in the <var>Options</var> for the control.
          </p>
          <p>
            Setting a new value in either <var>PageIndex</var> or <var>TabIndex</var> signals the assigned and enabled event handler. It is also called from the <var>Change</var> method when selection change messages are handled for the control, and when a tab is re-ordered using the <var>MoveTab</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Change"/>
          <link id="TCustomTabControl.Options"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCustomTabControl.TabIndex"/>
          <link id="TCTabControlOption"/>
        </seealso>
      </element>

      <element name="TCustomTabControl.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTabControl</var>: calls inherited <var>Create</var> creates a page list, then sets initial bounds and default values for local variables and properties.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomTabControl.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomTabControl</var>: clears and frees pages and list, then calls inherited <var>Destroy</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.TabRect">
        <short>
          Gets the client rectangle for the control adjusted to the parent (when needed).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.TabRect.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.TabRect.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.GetImageIndex">
        <short>
          Gets the ordinal position for the image displayed on the tab for the specified page.
        </short>
        <descr>
          <p>
            <var>GetImageIndex</var> is an <var>Integer</var> function used to get the ordinal position in <var>Images</var> for the image displayed on the specified tab. <var>ThePageIndex</var> contains the <var>Page</var> examined in the method to get its <var>ImageIndex</var> property. If Page does not have a <var>TCustomPage</var> instance at the position in ThePageIndex, <b>-1</b> is used as the image index.
          </p>
          <p>
            GetImageIndex signals the <var>OnGetImageIndex</var> event handler (when assigned) to allow a custom image index to be used in the return value.
          </p>
          <p>
            GetImageIndex is called from methods in the widgetset class when the image displayed on a tab is needed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Page"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCustomTabControl.TabIndex"/>
          <link id="TCustomTabControl.Images"/>
          <link id="TCustomTabControl.OnGetImageIndex"/>
          <link id="TCustomPage.ImageIndex"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetImageIndex.Result">
        <short>Ordinal position in Images for the specified page index.</short>
      </element>
      <element name="TCustomTabControl.GetImageIndex.ThePageIndex">
        <short>Ordinal position in Page with the image index for the tab.</short>
      </element>

      <element name="TCustomTabControl.IndexOf">
        <short>
          <var>IndexOf</var> - returns the index value of a specified page.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IndexOf.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOf.APage">
        <short/>
      </element>

      <element name="TCustomTabControl.CustomPage">
        <short>
          <var>CustomPage</var> - returns the page specified by <var>Index</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CustomPage.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.CustomPage.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.CanChangePageIndex">
        <short>
          <var>CanChangePageIndex</var> - determine whether it is permissible to change the index of the page.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CanChangePageIndex.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.GetMinimumTabWidth">
        <short>
          <var>GetMinimumTabWidth</var> - find the smallest permissible tab width.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetMinimumTabWidth.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.GetMinimumTabHeight">
        <short>
          <var>GetMinimumTabHeight</var> - find the least permissible height for a tab.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetMinimumTabHeight.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.GetCapabilities">
        <short>
          <var>GetCapabilities</var> - returns the set of capabilities.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabToPageIndex">
        <short>Gets the real page index for the specified tab.</short>
        <descr>
          <p>
            <var>TabToPageIndex</var> is an <var>Integer</var> function used to get the page index for the tab at the specified position.  The tab index value in <var>AIndex</var> does not include any non-visible tabs. TabToPageIndex adjusts the index value to include any <var>TCustomPage</var> instances in <var>Page</var> with its <var>TabVisible</var> property set to <b>False</b>.
          </p>
          <p>
            The return value contains the value specified in AIndex after adding any non-visible pages proper to the requested position.
          </p>
          <p>
            No actions are performed in the method at design-time; all pages are visible on the designer surface.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.TabToPageIndex.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.TabToPageIndex.AIndex">
        <short/>
      </element>

      <element name="TCustomTabControl.PageToTabIndex">
        <short>
          Maps the LCL page to the tab index in the widgetset class.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.PageToTabIndex.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.PageToTabIndex.AIndex">
        <short/>
      </element>

      <element name="TCustomTabControl.DoCloseTabClicked">
        <short>
          <var>DoCloseTabClicked</var> - perform the action associated with clicking the Close tab for this page (<var>OnCloseTabClicked</var>).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.DoCloseTabClicked.APage">
        <short/>
      </element>

      <element name="TCustomTabControl.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasized.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomListView.HotTrack"/>
        </seealso>
      </element>

      <element name="TCustomTabControl.Images">
        <short>
          <var>Images</var> - the list of images associated with the pages of this notebook.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.ImagesWidth">
        <short>Width for the Images used in the control.</short>
        <descr>
          <p>
            <var>ImagesWidth</var> specifies the width used for the <var>Images</var> in the control. ImagesWidth determines the resolution (either selected or resized) for the current display density (PPI).
          </p>
          <p>
            Changing the value in the property causes the <var>DoImageListChange</var> method to be called to select the image resolution, and to notify the widgetset class of the change. The <var>UpdateTabProperties</var> method is called to propagate the change to all tabs in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Images"/>
          <link id="TCustomTabControl.ImagesWidth"/>
          <link id="TCustomTabControl.UpdateTabProperties"/>
          <link id="TChangeLink.OnChange"/>
        </seealso>
      </element>

      <element name="TCustomTabControl.MultiLine">
        <short>
          <var>MultiLine</var> - whether the Tab's caption is allowed to have multiple lines.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.MultiSelect">
        <short>
          <var>MultiSelect</var> - whether multiple Tabs are allowed to be selected at the same time (e.g. by pressing Shift or Ctrl while selecting).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.OnChanging">
        <short>
          <var>OnChanging</var> - event handler for changing a tab.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.OnCloseTabClicked">
        <short>
          <var>OnCloseTabClicked</var> - event handler for clicking on the Close button to close a tab.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for getting an image index.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Options">
        <short>
          The set of  <var>Options</var> for the Notebook: Show close buttons on the tabs, multi-line tabs.
        </short>
        <descr>
          <p>The set of  <var>Options</var> for the Notebook: </p>
          <p>
            <var>nboShowCloseButtons</var> (display a little Close Button on the Tab next to the label to allow a user to close that tab),</p>
          <p>
            <var>nboMultiLine</var> (allows multi-line captions on the Tabs)</p>
        </descr>
      </element>

      <element name="TCustomTabControl.OwnerDraw">
        <short>
          <var>OwnerDraw</var> - is the calling routine (<var>Owner</var>) allowed to specify the drawing method?
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Page">
        <short>The current <var>Page</var> of the Notebook.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.Page.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.PageCount">
        <short>
          <var>PageCount</var> - the number of Pages in the Notebook.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.PageIndex">
        <short>
          <var>PageIndex</var> - Index number of the current page.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Pages">
        <short>The list of page names in the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.RaggedRight">
        <short>
          <var>RaggedRight</var> - un-justified or un-aligned text.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.ScrollOpposite">
        <short>
          <var>ScrollOpposite</var> - is scrolling to happen in the opposite direction to usual?
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.ShowTabs">
        <short>
          <var>ShowTabs</var> - if True (default condition), show the tabs for each page.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Style">
        <short>
          <var>Style</var> - Tabs, buttons or flat buttons?
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabHeight">
        <short>
          <var>TabHeight</var> - height of the tabs.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabPosition">
        <short>
          <var>TabPosition</var> - top, bottom, left or right.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabWidth">
        <short>Width of the tabs displayed on the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabStop">
        <short>Enables or disables navigation using the Tab key.</short>
        <descr>
          <p>
            The default value for the property is <b>True</b> in <var>TCustomTabControl</var>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
        </seealso>
      </element>

      <element name="TTabSheet">
        <short>An individual page used in TPageControl.</short>
        <descr>
          <p>
            <var>TTabSheet</var> - individual page of a <var>TPageControl</var>. It is a more elaborate version of <var>TPage</var>, and adds the following features:
          </p>
          <ul>
            <li>Drag/Drop properties</li>
            <li>Ability to Enable/Disable the page</li>
            <li>Ability to make the Tab visible or hidden</li>
          </ul>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <element name="TTabSheet.GetPageControl">
        <short>Gets the value for the PageControl property.</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.PageControl"/>
        </seealso>
      </element>
      <element name="TTabSheet.GetPageControl.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabSheet.GetTabIndex">
        <short>Gets the value for the TabIndex property.</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabSheet.GetTabIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabSheet.SetPageControl">
        <short>Sets the value for the PageControl property.</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.PageControl"/>
        </seealso>
      </element>
      <element name="TTabSheet.SetPageControl.APageControl">
        <short>New value for the property.</short>
      </element>

      <element name="TTabSheet.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TTabSheet.Create">
        <short>calls inherited <var>Create</var> and zeroes <var>ImageIndex</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TTabSheet.Create.TheOwner">
        <short/>
      </element>

      <element name="TTabSheet.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTabSheet</var>: detaches from the Host Dock Site and calls inherited <var>Destroy</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TTabSheet.PageControl">
        <short>The <var>PageControl</var> of which this TabSheet is a member.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabSheet.TabIndex">
        <short>
          <var>TabIndex</var> - the Index value or sequence number of this TabSheet.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabSheet.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
      <element name="TTabSheet.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
      <element name="TTabSheet.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TTabSheet.Caption" link="#lcl.controls.TControl.Caption"/>
      <element name="TTabSheet.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
      <element name="TTabSheet.ClientHeight" link="#lcl.controls.TControl.ClientHeight"/>
      <element name="TTabSheet.ClientWidth" link="#lcl.controls.TControl.ClientWidth"/>
      <element name="TTabSheet.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TTabSheet.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TTabSheet.Height" link="#lcl.controls.TControl.Height"/>
      <element name="TTabSheet.ImageIndex" link="#lcl.comctrls.TCustomPage.ImageIndex"/>
      <element name="TTabSheet.Left" link="#lcl.controls.TControl.Left"/>
      <element name="TTabSheet.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TTabSheet.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TTabSheet.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TTabSheet.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TTabSheet.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TTabSheet.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TTabSheet.OnHide" link="#lcl.comctrls.TCustomPage.OnHide"/>
      <element name="TTabSheet.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TTabSheet.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TTabSheet.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TTabSheet.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TTabSheet.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TTabSheet.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TTabSheet.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TTabSheet.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TTabSheet.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TTabSheet.OnShow" link="#lcl.comctrls.TCustomPage.OnShow"/>
      <element name="TTabSheet.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TTabSheet.PageIndex" link="#lcl.comctrls.TCustomPage.PageIndex"/>
      <element name="TTabSheet.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
      <element name="TTabSheet.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TTabSheet.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TTabSheet.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TTabSheet.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

      <element name="TTabSheet.TabVisible">
        <short>Indicates if the tab is visible in the Parent control.</short>
        <descr>
          <p>
            TabVisible indicates if the Tab is visible in the Parent control. The default value for the property is True in TTabSheet.
          </p>
          <p>
            Changing the value in the property cause the Parent control to be updated to reflect the new value. No actions are performed in the method at design-time, or when the property value is not different than the stored value.
          </p>
          <p>
            When the Parent control has been assigned and has a handle allocated, the TCustomTabControl in Parent is updated to reflect the new value for the property. When True, the active page in the Parent control is changed to the current page instance if one has not already been assigned in the Parent. The page and its handle are removed from the Tab control when the property value is False.
          </p>
          <p>
            Use IsControlVisible to determine if the page is currently the active page displayed in the Parent tab control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.comctrls.TCustomPage.TabVisible">TCustomPage.TabVisible</link>
        </seealso>
      </element>

      <element name="TTabSheet.Top" link="#lcl.controls.TControl.Top"/>
      <element name="TTabSheet.Width" link="#lcl.controls.TControl.Width"/>

      <element name="TPageControl">
        <short>
          <var>TPageControl</var> - provides a series of tabs along the edge of a multi-page component to allow selection of one of the pages (TTabSheet) of the component.
        </short>
        <descr>
          <p>
            <var>TPageControl</var> provides a series of tabs along an edge of a multi-page component to allow selection of one of the pages (<var>TTabSheet</var>) defined for the component.
          </p>
          <p>
            To use <var>TPageControl</var>, select its icon from the Common Controls tab of the IDE Component Palette and place it at the desired location on the Form.
          </p>
          <p>
            Use the Form Designer and Object Inspector to adjust its shape, size, alignment, anchoring, docking and other properties, then select the object and right click with the mouse to bring up a pop-up menu whose first item is 'AddPage'. After you have added as many pages as you need, the individual pages can be edited by selecting <var>ActivePage</var> in the Object Inspector choosing the page required and editing its properties.
          </p>
          <p>
            While a given page is selected, it is also possible to drop other controls (such as buttons, memo boxes etc) on to the page from the Component Palette.
          </p>
          <p>
            Inherits most of its properties from <link id="#lcl.comctrls.TCustomTabControl">TCustomTabControl</link>
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TPageControl.FPageToUndock"/>

      <element name="TPageControl.Clear">
        <short>
          Clears the list of tab names of the control, and causes the associated tab sheets or pages to be freed.
        </short>
        <descr>
          <p>
            By calling the <var>Clear</var> method of the protected <var>Tabs</var> property in the <var>TCustomTabControl</var> ancestor, this method removes all tab sheets from the PageControl. The <var>TPageControl.PageCount</var> is <var>0</var> afterwards.
          </p>
          <p>
            Note, however, that the controls on the tab sheets are only destroyed when their <var>Owner</var> is one of the tabsheets. Otherwise they still exist on the form, but their <var>Parent</var> has been set to <var>nil</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Tabs"/>
        </seealso>
      </element>

      <element name="TPageControl.GetActivePageIndex">
        <short>Gets the value for the ActivePageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePageIndex"/>
        </seealso>
      </element>
      <element name="TPageControl.GetActivePageIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TPageControl.GetActiveTabSheet">
        <short>Gets the value for the ActivePage property.</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePage"/>
        </seealso>
      </element>
      <element name="TPageControl.GetActiveTabSheet.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TPageControl.GetTabSheet">
        <short>Gets the value for the Pages property.</short>
        <descr/>
        <seealso>
          <link id="TPageControl.Pages"/>
        </seealso>
      </element>
      <element name="TPageControl.GetTabSheet.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TPageControl.GetTabSheet.Index">
        <short>Ordinal position for the page or tabsheet requested in the method.</short>
      </element>

      <element name="TPageControl.SetActivePageIndex">
        <short>Sets the value for the ActivePageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePageIndex"/>
        </seealso>
      </element>
      <element name="TPageControl.SetActivePageIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TPageControl.SetActiveTabSheet">
        <short>Sets the value for the ActivePage property.</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePage"/>
        </seealso>
      </element>
      <element name="TPageControl.SetActiveTabSheet.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TPageControl.FindPageWithDockClient">
        <short>
          Finds the tabsheet in the Pages property which is the parent for the control specified in Client.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.FindPageWithDockClient.Result">
        <short/>
      </element>
      <element name="TPageControl.FindPageWithDockClient.Client">
        <short/>
      </element>

      <element name="TPageControl.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TPageControl.GetPageClass">
        <short>
          Gets the class type used to create a new tabsheet (or page) for the page control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.GetPageClass.Result">
        <short>Class type used to create new instances of TPageControl.</short>
      </element>

      <element name="TPageControl.DoAddDockClient">
        <short>
          <var>DoAddDockClient</var> creates a new TabSheet in the PageControl, places the client on it and aligns it.
        </short>
        <descr>
          Client cannot be added to TPageControl itself but new TabSheet should be added and client placed onto it.
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoAddDockClient">TWinControl.DoAddDockClient</link>
        </seealso>
      </element>

      <element name="TPageControl.DockOver" link="#lcl.controls.TWinControl.DockOver">
        <short>Called to check whether this control allows docking and where.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.DockOver.Source">
        <short/>
      </element>
      <element name="TPageControl.DockOver.X">
        <short/>
      </element>
      <element name="TPageControl.DockOver.Y">
        <short/>
      </element>
      <element name="TPageControl.DockOver.State">
        <short/>
      </element>
      <element name="TPageControl.DockOver.Accept">
        <short/>
      </element>

      <element name="TPageControl.DoRemoveDockClient">
        <short>
          <var>DoRemoveDockClient</var> - frees the page which is being undocked.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoRemoveDockClient">TWinControl.DoRemoveDockClient</link>
        </seealso>
      </element>

      <element name="TPageControl.DoUndockClientMsg" link="#lcl.controls.TWinControl.DoUndockClientMsg"/>

      <element name="TPageControl.ChildClassAllowed" link="#lcl.controls.TWinControl.ChildClassAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.ChildClassAllowed.Result">
        <short/>
      </element>
      <element name="TPageControl.ChildClassAllowed.ChildClass">
        <short/>
      </element>

      <element name="TPageControl.FindNextPage">
        <short>
          <var>FindNextPage</var> - returns the next page (<var>TTabSheet</var>) in the sequence.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.FindNextPage.Result">
        <short/>
      </element>
      <element name="TPageControl.FindNextPage.CurPage">
        <short/>
      </element>
      <element name="TPageControl.FindNextPage.GoForward">
        <short/>
      </element>
      <element name="TPageControl.FindNextPage.CheckTabVisible">
        <short/>
      </element>

      <element name="TPageControl.SelectNextPage">
        <short>
          <var>SelectNextPage</var> - checking that its tab is visible.
        </short>
        <descr>
          <p>If GoForward is True, goes to next (higher index) page;</p>
          <p>if False, goes to previous (lower index)</p>
          <p>If <var>CheckTabVisible</var> is True, will only move if the tab is visible</p>
        </descr>
        <seealso/>
      </element>
      <element name="TPageControl.SelectNextPage.GoForward">
        <short/>
      </element>
      <element name="TPageControl.SelectNextPage.CheckTabVisible">
        <short/>
      </element>

      <element name="TPageControl.IndexOfTabAt" link="#lcl.comctrls.TCustomTabControl.IndexOfTabAt"/>
      <element name="TPageControl.IndexOfTabAt.Result"/>
      <element name="TPageControl.IndexOfTabAt.X"/>
      <element name="TPageControl.IndexOfTabAt.Y"/>
      <element name="TPageControl.IndexOfTabAt.P"/>

      <element name="TPageControl.IndexOfPageAt" link="#lcl.comctrls.TCustomTabControl.IndexOfPageAt"/>
      <element name="TPageControl.IndexOfPageAt.Result"/>
      <element name="TPageControl.IndexOfPageAt.X"/>
      <element name="TPageControl.IndexOfPageAt.Y"/>
      <element name="TPageControl.IndexOfPageAt.P"/>

      <element name="TPageControl.AddTabSheet">
        <short>Convenience routine used to make the TPageControl more intuitive to use.</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.PageControl"/>
          <link id="TPageControl.Pages"/>
          <link id="TPageControl.ActivePage"/>
          <link id="TPageControl.GetPageClass"/>
        </seealso>
      </element>
      <element name="TPageControl.AddTabSheet.Result">
        <short>Page class instance created in the method.</short>
      </element>

      <element name="TPageControl.ActivePageIndex">
        <short>
          <var>ActivePageIndex</var> - index value of currently selected (active) page.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TPageControl.Pages">
        <short>
          <var>Pages</var> - the actual Pages (<var>TTabSheet</var>) that comprise the component.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Pages"/>
        </seealso>
      </element>
      <element name="TPageControl.Pages.Index">
        <short/>
      </element>

      <element name="TPageControl.ActivePage">
        <short>
          <var>ActivePage</var> - the currently selected active page (<var>TTabSheet</var>).
        </short>
        <descr>
          <p>
            <var>ActivePage</var> - the currently selected active page (<var>TTabSheet</var>).
          </p>
          <remark>
            Please note that the property is implemented with a type that differs from   <var>TCustomTabControl</var>, where <var>ActivePage</var> is defined as a <var>String</var>.
          </remark>
        </descr>
        <seealso/>
      </element>

      <element name="TPageControl.OnGetDockCaption" link="#lcl.controls.TWinControl.OnGetDockCaption"/>

      <element name="TPageControl.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TPageControl.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TPageControl.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
      <element name="TPageControl.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TPageControl.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TPageControl.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TPageControl.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
      <element name="TPageControl.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TPageControl.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TPageControl.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TPageControl.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TPageControl.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TPageControl.HotTrack" link="#lcl.comctrls.TCustomTabControl.HotTrack"/>
      <element name="TPageControl.Images" link="#lcl.comctrls.TCustomTabControl.Images"/>
      <element name="TPageControl.ImagesWidth" link="#lcl.comctrls.TCustomTabControl.ImagesWidth"/>
      <element name="TPageControl.MultiLine" link="#lcl.comctrls.TCustomTabControl.MultiLine"/>
      <element name="TPageControl.ParentBidiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
      <element name="TPageControl.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TPageControl.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TPageControl.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TPageControl.RaggedRight" link="#lcl.comctrls.TCustomTabControl.RaggedRight"/>
      <element name="TPageControl.ScrollOpposite" link="#lcl.comctrls.TCustomTabControl.ScrollOpposite"/>
      <element name="TPageControl.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TPageControl.ShowTabs" link="#lcl.comctrls.TCustomTabControl.ShowTabs"/>
      <element name="TPageControl.Style" link="#lcl.comctrls.TCustomTabControl.Style"/>
      <element name="TPageControl.TabHeight" link="#lcl.comctrls.TCustomTabControl.TabHeight"/>
      <element name="TPageControl.TabIndex" link="#lcl.comctrls.TCustomTabControl.TabIndex"/>

      <element name="TPageControl.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TPageControl.TabPosition" link="#lcl.comctrls.TCustomTabControl.TabPosition"/>
      <element name="TPageControl.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TPageControl.TabWidth" link="#lcl.comctrls.TCustomTabControl.TabWidth"/>
      <element name="TPageControl.Visible" link="#lcl.controls.TControl.Visible"/>

      <element name="TPageControl.OnChange">
        <short><var>OnChange</var> - Occurs immediately after a tab is selected.</short>
        <descr>Occurs immediately after a tab is selected.</descr>
        <seealso/>
      </element>

      <element name="TPageControl.OnChanging" link="#lcl.comctrls.TCustomTabControl.OnChanging"/>
      <element name="TPageControl.OnCloseTabClicked" link="#lcl.comctrls.TCustomTabControl.OnCloseTabClicked"/>
      <element name="TPageControl.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TPageControl.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
      <element name="TPageControl.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
      <element name="TPageControl.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TPageControl.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TPageControl.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TPageControl.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TPageControl.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TPageControl.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TPageControl.OnGetImageIndex" link="#lcl.comctrls.TCustomTabControl.OnGetImageIndex"/>
      <element name="TPageControl.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
      <element name="TPageControl.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TPageControl.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TPageControl.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TPageControl.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TPageControl.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TPageControl.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TPageControl.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TPageControl.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TPageControl.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TPageControl.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TPageControl.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TPageControl.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>
      <element name="TPageControl.Options" link="#lcl.comctrls.TCustomTabControl.Options"/>

      <element name="TTabControlStrings">
        <short>
          <var>TTabControlStrings</var> - the Strings that appear on the tabs of <var>TTabControl</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.FHotTrack"/>
      <element name="TTabControlStrings.FImages"/>
      <element name="TTabControlStrings.FMultiLine"/>
      <element name="TTabControlStrings.FMultiSelect"/>
      <element name="TTabControlStrings.FOwnerDraw"/>
      <element name="TTabControlStrings.FRaggedRight"/>
      <element name="TTabControlStrings.FScrollOpposite"/>
      <element name="TTabControlStrings.FTabControl"/>
      <element name="TTabControlStrings.FUpdateCount"/>

      <element name="TTabControlStrings.GetTabIndex">
        <short>
          <var>GetTabIndex</var> - returns the Index value of the current Tab.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.GetTabIndex.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.SetHotTrack">
        <short>
          <var>SetHotTrack</var> - specifies the status of HotTrack.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetHotTrack.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetImages">
        <short>
          <var>SetImages</var> - specifies the list of images to be used.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetImages.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetMultiLine">
        <short>
          <var>SetMultiLine</var> - specifies whether multi-line captions are used.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetMultiLine.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetMultiSelect">
        <short>
          <var>SetMultiSelect</var> - specifies whether MultiSelection is available.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetMultiSelect.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetOwnerDraw">
        <short>
          <var>SetOwnerDraw</var> - specifies whether an owner-derived drawing can be used.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetOwnerDraw.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetRaggedRight">
        <short>
          <var>SetRaggedRight</var> - specifies whether ragged-right (as opposed to right-justified) alignment is to be used.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetRaggedRight.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetScrollOpposite">
        <short>
          <var>SetScrollOpposite</var> - specifies whether scroll bars are to operate in the opposite sense to normal.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetScrollOpposite.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetTabIndex">
        <short>
          <var>SetTabIndex</var> - specifies an index value for a tab.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetTabIndex.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.Create">
        <short>
          <var>Create</var> - constructor for <var>TTabControlStrings</var>: calls inherited <var>Create</var> then sets many local defaults.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TTabControlStrings</var>. It calls  the inherited <var>Create</var> method then sets default values in the class instance.
          </p>
          <p>Among the defaults set are:</p>
          <p>
            HotTrack, Multiline, MultiSelect, OwnerDraw, RaggedRight, ScrollOpposite - all False; Tab height and width to zero
          </p>
        </descr>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTabControlStrings.Create.TheTabControl">
        <short/>
      </element>

      <element name="TTabControlStrings.GetHitTestInfoAt">
        <short>
          <var>GetHitTestInfoAt</var> - returns the results of a hit test at the specified location X, Y.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TTabControlStrings.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TTabControlStrings.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TTabControlStrings.GetSize">
        <short>Gets the size for the String displayed on a tab control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.GetSize.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.IndexOfTabAt">
        <short>
          <var>IndexOfTabAt</var> - returns the Index value of the tab at the specified location X, Y.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.IndexOfTabAt.Result">
        <short/>
      </element>
      <element name="TTabControlStrings.IndexOfTabAt.X">
        <short/>
      </element>
      <element name="TTabControlStrings.IndexOfTabAt.Y">
        <short/>
      </element>

      <element name="TTabControlStrings.RowCount">
        <short>
          <var>RowCount</var> - number of rows (for a multi-row string).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.RowCount.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.TabRect">
        <short>
          <var>TabRec</var> - returns the coordinates of the rectangle for the tab with specified index.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.TabRect.Result">
        <short/>
      </element>
      <element name="TTabControlStrings.TabRect.Index">
        <short/>
      </element>

      <element name="TTabControlStrings.ImageListChange">
        <short>
          <var>ImageListChange</var> - method for changing the image list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.ImageListChange.Sender">
        <short/>
      </element>

      <element name="TTabControlStrings.ScrollTabs">
        <short>
          <var>ScrollTabs</var> - scrolls the tabs by an amount specified by <var>Delta</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.ScrollTabs.Delta">
        <short/>
      </element>

      <element name="TTabControlStrings.TabControlBoundsChange">
        <short>
          <var>TabControlBoundsChange</var> - method for dealing with a change in the bounds of a Tab Control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.UpdateTabImages">
        <short>
          <var>UpdateTabImages</var> - bring the tab images up to date.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.BeginUpdate">
        <short>
          <var>BeginUpdate</var> increments the Update count.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.BeginUpdate">TStrings.BeginUpdate</link>
        </seealso>
      </element>

      <element name="TTabControlStrings.EndUpdate">
        <short>
          <var>EndUpdate</var> decrements the Update count.
        </short>
        <descr/>
        <errors>An exception is raised if the Update count is zero</errors>
        <seealso>
          <link id="#rtl.classes.TStrings.EndUpdate">TStrings.EndUpdate</link>
        </seealso>
      </element>

      <element name="TTabControlStrings.IsUpdating">
        <short>
          <var>IsUpdating</var> - returns True if in the process of updating.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.IsUpdating.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.TabControl">
        <short>The <var>TabControl</var> to which these strings apply.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.TabIndex">
        <short>
          <var>TabIndex</var> - the index of the current Tab.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasized.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.comctrls.TCustomListView.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>

      <element name="TTabControlStrings.Images">
        <short>The list of <var>Images</var> associated with the Strings for these tabs.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.MultiLine">
        <short>
          <var>MultiLine</var> - if True, multiple lines may be used in Tab strings.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.MultiSelect">
        <short>
          <var>MultiSelect</var> - if True, multiple tabs can be selected, for example by holding down Shift or Ctrl keys while selecting.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.OwnerDraw">
        <short>
          <var>OwnerDraw</var> - if True, Owner object (or calling routine) can specify drawing methods.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.RaggedRight">
        <short>
          <var>RaggedRight</var> - if True, strings are un-justified or un-aligned with ragged right margin.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.ScrollOpposite">
        <short>
          <var>ScrollOpposite</var> - if True, scrolling proceeds in opposite direction to usual.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl">
        <short>Implements the tabbed page control used in TNoteBookStringsTabControl.</short>
        <descr>
          <p>
            TNoteBookStringsTabControl is a TPageControl descendant which implements the tabbed page control used in TNoteBookStringsTabControl.
          </p>
        </descr>
        <seealso>
          <link id="TPageControl"/>
        </seealso>
      </element>

      <element name="TNoteBookStringsTabControl.FHandleCreated"/>

      <element name="TNoteBookStringsTabControl.CreateHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl.AdjustXY">
        <short>Adjusts the specified coordinates to the ClientOrigin for the parent.</short>
        <descr>
          <p>
            The adjustment amount is the difference between the <var>ClientOrigin</var> for the control and the <var>ClientOrigin</var> for the <var>Parent</var> of the control. The offset amounts are then applied to the values <var>X</var> and <var>Y</var>.
          </p>
          <p>
            Called from the <var>DragDrop</var>, <var>DragOver</var>, <var>MouseMove</var>, <var>MouseDown</var>, and <var>MouseUp</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TNoteBookStringsTabControl.DragDrop"/>
          <link id="TNoteBookStringsTabControl.DragOver"/>
          <link id="TNoteBookStringsTabControl.MouseMove"/>
          <link id="TNoteBookStringsTabControl.MouseDown"/>
          <link id="TNoteBookStringsTabControl.MouseUp"/>
        </seealso>
      </element>
      <element name="TNoteBookStringsTabControl.AdjustXY.X">
        <short>Horizontal coordinate adjusted in the method.</short>
      </element>
      <element name="TNoteBookStringsTabControl.AdjustXY.Y">
        <short>Vertical coordinate adjusted in the method.</short>
      </element>

      <element name="TNoteBookStringsTabControl.DoStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.DoStartDrag.DragObject">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.DragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.DragDrop.Source">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragDrop.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragDrop.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.DragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.Source">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.Y">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.State">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.Accept">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.Button">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.Shift">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseMove.Shift">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseMove.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseMove.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.Button">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.Shift">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl.GetPopupMenu">
        <short>
          Gets the value for the PopupMenu property.
        </short>
        <descr>
          <p>
            <var>GetPopupMenu</var> is an overridden <var>TPopupMenu</var> function which implements the read access specifier for the <var>PopupMenu</var> property. The return value contains the TPopupMenu instance from the <var>Parent</var> control when it is derived from TTabControl and <var>Options</var> contains the value <var>nboHidePageListPopup</var>. Otherwise, the inherited method in <var>TControl</var> is called to get the popup menu instance for the control.
          </p>
        </descr>
        <seealso>
          <link id="TTabControl"/>
          <link id="TPageControl.Options"/>
          <link id="#lcl.menus.TPopupMenu">TPopupMenu</link>
          <link id="#lcl.controls.TControl.GetPopupMenu">TControl.GetPopupMenu</link>
          <link id="#lcl.controls.TControl.PopupMenu">TControl.PopupMenu</link>
          <link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
        </seealso>
      </element>
      <element name="TNoteBookStringsTabControl.GetPopupMenu.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TNoteBookStringsTabControl.WSRegisterClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControlClass">
        <short>Class type reference for TNoteBookStringsTabControl</short>
        <descr/>
        <seealso>
          <link id="TTabControlNoteBookStrings.GetInternalTabControllClass"/>
        </seealso>
      </element>

      <element name="TTabControlNoteBookStrings">
        <short>
          <var>TTabControlNoteBookStrings</var> - instance of <var>TTabControlStrings</var> for use with a <var>TNoteBook</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlNoteBookStrings.FNoteBook"/>
      <element name="TTabControlNoteBookStrings.FInHandleCreated"/>

      <element name="TTabControlNoteBookStrings.GetStyle">
        <short>Gets the value for the Style property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.GetStyle.Result">
        <short>Value for the Style property.</short>
      </element>

      <element name="TTabControlNoteBookStrings.SetStyle">
        <short>Sets the value for the Style property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.SetStyle.AValue">
        <short>New value for the Style property.</short>
      </element>

      <element name="TTabControlNoteBookStrings.GetInternalTabControllClass">
        <short>Gets a new instance of a tab control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.GetInternalTabControllClass.Result">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Get">
        <short>
          <var>Get</var> returns the text string found on the indexed page.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStringList">TStringList</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Get.Result">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.Get.Index">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetCount">
        <short>Gets the value for the Count property.</short>
        <descr>
          <p>
            <var>GetCount</var> is an overridden method in <var>TTabControlNoteBookStrings</var> used to get the value for the <var>Count</var> property. In TTabControlNoteBookStrings, the property contains the value from the <var>PageCount</var> property in <var>NoteBook</var>.
          </p>
        </descr>
        <seealso>
          <link id="TTabControlNoteBookStrings.Notebook"/>
          <link id="TCustomTabControl.PageCount"/>
          <link id="#rtl.classes.TStrings.Count">TStrings.Count</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.GetCount.Result">
        <short>Value for the Count property.</short>
      </element>

      <element name="TTabControlNoteBookStrings.GetObject">
        <short>
          <var>GetObject</var> returns the indexed object from the paged notebook.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Objects">TStrings.Objects</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.GetObject.Result">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.GetObject.Index">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetTabIndex">
        <short>Gets the value for the TabIndex property.</short>
        <descr/>
        <seealso>
          <link id="TTabControlStrings.GetTabIndex"/>
          <link id="TTabControlStrings.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.GetTabIndex.Result">
        <short>Value for the TabIndex property.</short>
      </element>

      <element name="TTabControlNoteBookStrings.GetTabPosition">
        <short>Gets the value for the TabPosition property.</short>
        <descr/>
        <seealso>
          <link id="TTabControlNoteBookStrings.TabPosition"/>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.GetTabPosition.Result">
        <short>Value for the TabPosition property.</short>
      </element>

      <element name="TTabControlNoteBookStrings.NBChanging">
        <short>
          <var>NBChanging</var> - method for dealing with the process for change in a NoteBook.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBChanging.Sender">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.NBChanging.AllowChange">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.NBGetImageIndex">
        <short>
          <var>NBGetImageIndex</var> - obtains the Image Index associated with a given Tab Index in the NoteBook.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.Sender">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.TheTabIndex">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.ImageIndex">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.NBPageChanged">
        <short>
          <var>NBPageChanged</var> - Method for dealing with a NoteBook page that has changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBPageChanged.Sender">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.NBHandleCreated">
        <short>
          Ensures that the bounds for the Tab control are updated when the handle for the class instance is created.
        </short>
        <descr>
          <p>
            Implements an internal event handler assigned to the TNoteBookStringsTabControl instance for the class.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBHandleCreated.Sender">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Put">
        <short>
          <var>Put</var> writes the supplied string to the indexed page of the notebook.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStringList">TStringList</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Put.Index">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.Put.S">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.PutObject">
        <short>
          <var>PutObject</var> stores the supplied object at the indexed place in the paged notebook.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Objects">TStrings.Objects</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.PutObject.Index">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.PutObject.AObject">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.SetImages">
        <short>
          <var>SetImages</var> - if the supplied ImageList is of correct type, stores it in the notebook <var>Images</var> area.
        </short>
        <descr/>
        <seealso>
          <link id="TTabControlStrings.SetImages"/>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.SetImages.AValue">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.SetMultiLine">
        <short>Sets the value for the MultiLine property.</short>
        <descr/>
        <seealso>
          <link id="TTabControlStrings.SetMultiLine"/>
          <link id="TTabControlStrings.MultiLine"/>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.SetMultiLine.AValue">
        <short>New value for the MultiLine property.</short>
      </element>

      <element name="TTabControlNoteBookStrings.SetTabIndex">
        <short>Sets the value for the TabIndex property.</short>
        <descr/>
        <seealso>
          <link id="TTabControlStrings.SetTabIndex"/>
          <link id="TTabControlStrings.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.SetTabIndex.AValue">
        <short>New value for the TabIndex property.</short>
      </element>

      <element name="TTabControlNoteBookStrings.SetUpdateState">
        <short>
          <var>SetUpdateState</var> - if Updating is True, calls <var>BeginUpdate</var>; otherwise calls <var>EndUpdate</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings">TStrings</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.SetUpdateState.Updating">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Create">
        <short>
          <var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: calls inherited <var>Create</var> then sets some default Actions.
        </short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: calls inherited <var>Create</var> then sets some default Actions.
          </p>
          <p>
            Among the actions set are: OnGetImageIndex, OnChanging, OnChange. Notebook is created with a nominated parent.
          </p>
        </descr>
        <seealso>
          <link id="TTabControlStrings.Create"/>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Create.TheTabControl">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTabControlNoteBookStrings</var>: frees NoteBook then calls inherited <var>Destroy</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Destroy">TStrings.Destroy</link>
        </seealso>
      </element>

      <element name="TTabControlNoteBookStrings.Clear">
        <short>
          <var>Clear</var> calls the <var>Clear</var> method for the client Notebook.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Clear">TStrings.Clear</link>
        </seealso>
      </element>

      <element name="TTabControlNoteBookStrings.Delete">
        <short>
          <var>Delete</var> calls the <var>Delete</var> method for the client NoteBook.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Delete">TStrings.Delete</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Delete.Index">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Insert">
        <short>
          <var>Insert</var> calls the <var>Insert</var> method for the client NoteBook.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Insert">TStrings.Insert</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Insert.Index">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.Insert.S">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetSize" link="#lcl.comctrls.TTabControlStrings.GetSize"/>
      <element name="TTabControlNoteBookStrings.GetSize.Result"/>

      <element name="TTabControlNoteBookStrings.TabControlBoundsChange" link="#lcl.comctrls.TTabControlStrings.TabControlBoundsChange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlNoteBookStrings.IndexOfTabAt" link="#lcl.comctrls.TTabControlStrings.IndexOfTabAt"/>
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.Result"/>
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.X"/>
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.Y"/>

      <element name="TTabControlNoteBookStrings.TabPosition">
        <short>
          Indicates the alignment and orientation for the tabs on the control.
        </short>
        <descr>
          <p>
            <var>TabPosition</var> is a <var>TTabPosition</var> property which indicates how the Tabs on the control are aligned and oriented. The default value for the property is tpTop, and causes the tabs to align across the top of the client display area. The rise area for the control is also aligned to the top of the control.
          </p>
          <p>
            Changing the property value causes the widgetset class to be updated.
          </p>
        </descr>
        <seealso>
          <link id="TTabPosition"/>
        </seealso>
      </element>

      <element name="TTabControlNoteBookStrings.Style">
        <short>
          Drawing style used for the tabs on the control.
        </short>
        <descr>
          <p>
            <var>Style</var> is a <var>TTabStyle</var> property which controls the drawing style used for the tabs on the control. Read and write access to the property value is re-directed to the Style property in Notebook. The default value for the property is tsTabs, as set in the TCustomTabControl instance in NoteBook.
          </p>
          <p>
            When a new value is assigned to the property, the TabControlBoundsChange method is called to re-calculate and apply the height and/or width for the tab control.
          </p>
        </descr>
        <seealso>
          <link id="TTabControlNoteBookStrings.TabControlBoundsChange"/>
          <link id="TTabControlNoteBookStrings.NoteBook"/>
          <link id="TCustomTabControl.Style"/>
          <link id="TTabStyle"/>
        </seealso>
      </element>

      <element name="TTabControlNoteBookStrings.NoteBook">
        <short>
          The tab control where the string values are displayed as the caption for the tabs.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl">
        <short>
          <var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>.
        </short>
        <descr>
          <p>
            <var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
          </p>
          <p>
            Use <var>TTabControl </var>by selecting its icon from the Common Controls tab of the IDE Component Palette and placing it at the desired location on the <var>Form</var>. Use the Form Designer and Object Inspector to adjust its shape, size, alignment, anchoring and other properties. Tabs can be added or removed from the component by selecting it, then right-clicking with the mouse to get a pop-up menu whose first item is 'Add Tab'. Once created, the Tabs can be edited by selecting the <var>Tabs</var> entry in the Object Inspector and selecting the ellipsis (...) which will cause a pop-up String editor to appear. The tabs can be given new captions, moved up and down the list or removed altogether as required.
          </p>
          <p>
            Each Tab has an Index (starting from 0) and this index can be used to specify an entry from <var>Images</var> for display in the <var>DisplayRect</var>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TTabControl.FImageChangeLink"/>
      <element name="TTabControl.FOnChange"/>
      <element name="TTabControl.FOnChangeNeeded"/>
      <element name="TTabControl.FTabControlCreating"/>
      <element name="TTabControl.FTabs"/>
      <element name="TTabControl.FCanvas"/>

      <element name="TTabControl.AdjustDisplayRect">
        <short>
          Adjusts the display rectangle to reserve space for an internal border drawn on the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.AdjustDisplayRect.ARect">
        <short/>
      </element>

      <element name="TTabControl.GetDisplayRect">
        <short>Gets the value for the DisplayRect property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.DisplayRect"/>
        </seealso>
      </element>
      <element name="TTabControl.GetDisplayRect.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetHotTrack">
        <short>Gets the value for the HotTrack property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.HotTrack"/>
        </seealso>
      </element>
      <element name="TTabControl.GetHotTrack.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetMultiLine">
        <short>Gets the value for the MultiLine property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiLine"/>
        </seealso>
      </element>
      <element name="TTabControl.GetMultiLine.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetMultiSelect">
        <short>Gets the value for the MultiSelect property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiSelect"/>
        </seealso>
      </element>
      <element name="TTabControl.GetMultiSelect.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetOwnerDraw">
        <short>Gets the value for the OwnerDraw property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.OwnerDraw"/>
        </seealso>
      </element>
      <element name="TTabControl.GetOwnerDraw.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetRaggedRight">
        <short>Gets the value for the RaggedRight property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.RaggedRight"/>
        </seealso>
      </element>
      <element name="TTabControl.GetRaggedRight.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetScrollOpposite">
        <short>Gets the value for the ScrollOpposite property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.ScrollOpposite"/>
        </seealso>
      </element>
      <element name="TTabControl.GetScrollOpposite.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetTabIndex">
        <short>Gets the value for the TabIndex property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabControl.GetTabIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.GetTabRectWithBorder">
        <short>
          Gets a rectangle with the space reserved for the tabs on the control including border space.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.GetTabRectWithBorder.Result">
        <short/>
      </element>

      <element name="TTabControl.GetTabStop">
        <short>Gets the value for the TabStop property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabStop"/>
        </seealso>
      </element>
      <element name="TTabControl.GetTabStop.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTabControl.SetHotTrack">
        <short>Sets the value for the HotTrack property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.HotTrack"/>
        </seealso>
      </element>
      <element name="TTabControl.SetHotTrack.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetImages">
        <short>Sets the value for the Images property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.Images"/>
        </seealso>
      </element>
      <element name="TTabControl.SetImages.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetMultiLine">
        <short>Sets the value for the MultiLine property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiLine"/>
        </seealso>
      </element>
      <element name="TTabControl.SetMultiLine.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetMultiSelect">
        <short>Sets the value for the MultiSelect property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiSelect"/>
        </seealso>
      </element>
      <element name="TTabControl.SetMultiSelect.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetOwnerDraw">
        <short>Sets the value for the OwnerDraw property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.OwnerDraw"/>
        </seealso>
      </element>
      <element name="TTabControl.SetOwnerDraw.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetRaggedRight">
        <short>Sets the value for the RaggedRight property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.RaggedRight"/>
        </seealso>
      </element>
      <element name="TTabControl.SetRaggedRight.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetScrollOpposite">
        <short>Sets the value for the ScrollOpposite property.</short>
        <short/>
        <descr/>
        <seealso>
          <link id="TTabControl.ScrollOpposite"/>
        </seealso>
      </element>
      <element name="TTabControl.SetScrollOpposite.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetStyle">
        <short>Sets the value for the Style property.</short>
        <short/>
        <descr/>
        <seealso>
          <link id="TTabControl.Style"/>
          <link id="TCustomTabControl.SetStyle"/>
        </seealso>
      </element>
      <element name="TTabControl.SetStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetTabHeight">
        <short>Sets the Height for tabs displayed on the control.</short>
        <descr>
          <p>
            <var>SetTabHeight</var> is used to set the height for the tabs displayed on the control to the value in <var>AValue</var>. SetTabHeight calls <var>GetCapabilities</var> to determine if the value <var>nbcTabsSizeable</var> is included in the capabilities for the control. No actions are performed in the method when nbcTabsSizeable is <b>not</b> present in the controls capabilities list.
          </p>
          <p>
            SetTabHeight propogates the new tab height to the Notebook which contains the <var>Tabs</var> in the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.SetTabHeight.AValue">
        <short>New height for the tabs displayed on the control.</short>
      </element>

      <element name="TTabControl.SetTabPosition">
        <short>Sets the value for the TabPosition property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabPosition"/>
          <link id="TCustomTabControl.SetTabPosition"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabPosition.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetTabs">
        <short>Sets the value for the Tabs property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.Tabs"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabs.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetTabStop">
        <short>Sets the value for the TabStop property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabStop"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabStop.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.SetTabWidth">
        <short>Sets the value for the TabWidth property.</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabWidth"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.WSRegisterClass">
        <short>Registers the class type with the widgetset.</short>
        <descr>
          <p>
            <var>WSRegisterClass</var> is an overridden class procedure used to register the widgetset class used to create new instances of the class. WSRegisterClass calls the inherited method, and calls RegisterPropertyToSkip to omit the <var>OnDrawTab</var> property when the component is loaded at run-time. OnDrawTab was used in an older version of the LCL.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.SetOptions">
        <short>Sets the value for the Options property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Options"/>
          <link id="TCustomTabControl.SetOptions"/>
        </seealso>
      </element>
      <element name="TTabControl.SetOptions.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.AddRemovePageHandle">
        <short>Not implemented in TTabControl. Page handles are not used.</short>
        <descr>
          <p>
            An empty implementation in TTabControl; there are no pages, so no handle is required.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.AddRemovePageHandle.APage">
        <short/>
      </element>

      <element name="TTabControl.CanChange">
        <short>Indicates whether the tab control can update its Tabs property.</short>
        <descr>
          <p>
            Signals the OnChanging event handler (when assigned) to get the return value for the method. The default return value is True when OnChanging has not been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Tabs"/>
          <link id="TCustomTabControl.OnChanging"/>
        </seealso>
      </element>
      <element name="TTabControl.CanChange.Result">
        <short>True if the Tabs for the control can be modified.</short>
      </element>

      <element name="TTabControl.CanShowTab">
        <short>Indicates if the control can show the tab at the specified position.</short>
        <descr>
          <p>Always returns True in TTabControl.</p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.CanShowTab.Result">
        <short>Always returns True in TTabControl.</short>
      </element>
      <element name="TTabControl.CanShowTab.ATabIndex">
        <short>Ordinal position for the requested tab.</short>
      </element>

      <element name="TTabControl.Change">
        <short>Changes the active tab for the control.</short>
        <descr>
          <p>
            Change is an overridden method in TTabControl. It re-implements the method from the ancestor class to signal the OnChange event handler (when assigned) to change the active tab for the control. An internal flag is used to determine if a previous call to OnChange has not been completed. No actions are performed in the method when the flag is set.
          </p>
          <p>
            Change does <b>not</b> call the inherited method.
          </p>
        </descr>
        <seealso>
          <link id="TTabControl.IsUpdating"/>
          <link id="TCustomTabControl.Change"/>
        </seealso>
      </element>

      <element name="TTabControl.CreateWnd" link="#lcl.comctrls.TCustomTabControl.CreateWnd"/>
      <element name="TTabControl.DestroyHandle" link="#lcl.controls.TWinControl.DestroyHandle"/>

      <element name="TTabControl.Notification">
        <short>
          Handles the notification when a component is added to or removed from the class instance.
        </short>
        <descr>
          <p>
            <var>Notification</var> is an overridden method in <var>TTabControl</var>, and calls the inherited method on entry. It ensures that the <var>Images</var> member is set to <b>Nil</b> when the component is removed from the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Notification"/>
        </seealso>
      </element>
      <element name="TTabControl.Notification.AComponent">
        <short>Component for the notification.</short>
      </element>
      <element name="TTabControl.Notification.Operation">
        <short>Operation performed for the component.</short>
      </element>

      <element name="TTabControl.SetDragMode">
        <short>Sets the value for the DragMode property.</short>
        <descr>
          <p>
            <var>SetDragMode</var> is an overridden method in <var>TTabControl</var> used to set the value for the <var>DragMode</var> property. It calls the inherited method on entry, and copies the new property value to the <var>Tabs</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Tabs"/>
          <link id="TTabControlNoteBookStrings"/>
          <link id="#lcl.controls.TControl.SetDragMode">TControl.SetDragMode</link>
          <link id="#lcl.controls.TControl.DragMode">TControl.DragMode</link>
        </seealso>
      </element>
      <element name="TTabControl.SetDragMode.Value">
        <short/>
      </element>

      <element name="TTabControl.SetTabIndex">
        <short>Sets the value for the TabIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabIndex.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TTabControl.UpdateTabImages">
        <short>Calls the corresponding method in Tabs.</short>
        <descr>
          <p>Calls the corresponding method in Tabs.</p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Tabs"/>
        </seealso>
      </element>

      <element name="TTabControl.ImageListChange">
        <short>Calls the corresponding method in Tabs.</short>
        <descr>
          <p>Calls the corresponding method in Tabs.</p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Tabs"/>
        </seealso>
      </element>
      <element name="TTabControl.ImageListChange.Sender">
        <short>Object (TCustomTabControl) for the event.</short>
      </element>

      <element name="TTabControl.DoSetBounds">
        <short>
          Updates the bounds for the control to the specified values.
        </short>
        <descr>
          <p>
            <var>DoSetBounds</var> is an overridden method in cv <var>TTabControl</var>. It calls the inherited method in entry to adjust the client rectangle for the control and its control flags. Calls the <var>TabControlBoundsChange</var> method in the <var>Tabs</var> property when it has been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Tabs"/>
          <link id="#lcl.controls.TWinControl.DoSetBounds">TWinControl.DoSetBounds</link>
        </seealso>
      </element>
      <element name="TTabControl.DoSetBounds.ALeft">
        <short>New value for the Left property.</short>
      </element>
      <element name="TTabControl.DoSetBounds.ATop">
        <short>New value for the Top property.</short>
      </element>
      <element name="TTabControl.DoSetBounds.AWidth">
        <short>New value for the Width property.</short>
      </element>
      <element name="TTabControl.DoSetBounds.AHeight">
        <short>New value for the Height property.</short>
      </element>

      <element name="TTabControl.GetControlClassDefaultSize">
        <short>Gets the default size for new instances of the class.</short>
        <descr>
          <p>
            <var>GetControlClassDefaultSize</var> is an overridden <var>TSize</var> class function used to get the dimensions for a new instance of the <var>TTabControl</var> class. The return value contains the Width (CX) and Height (CY) for the class instance.
          </p>
          <p>
            The default size in TTabControl is 200 pixels (width) by 150 pixels (height).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.GetControlClassDefaultSize.Result">
        <short>TSize instance with the dimensions for the new class instance.</short>
      </element>

      <element name="TTabControl.PaintWindow">
        <short>Updates the canvas handle and paints the control.</short>
        <descr>
          <p>
            <var>PaintWindow</var> is an overridden method in <var>TTabControl</var>. It ensures that the specified device context matches the <var>Handle</var> for the control canvas. When they differ, the value in <var>DC</var> is temporarily used as the canvas handle. The modified canvas handle is reset prior to exiting from the method.
          </p>
          <p>
            PaintWindow calls the <var>Paint</var> method to render the control using the theme elements details available for a tab control. PaintWindow is called when a paint message is received and applied in the <var>PaintHandler</var> method.
          </p>
          <p>
            PaintWindow re-implements the method from the ancestor class, and does not call the inherited method.
          </p>
        </descr>
        <seealso>
          <link id="TTabControl.Paint"/>
          <link id="#lcl.controls.TWinControl.PaintWindow">TWinControl.PaintWindow</link>
        </seealso>
      </element>
      <element name="TTabControl.PaintWindow.DC">
        <short>Device context for the control canvas.</short>
      </element>

      <element name="TTabControl.Paint">
        <short>Paints the control to its Canvas using theme services.</short>
        <descr>
        <p>
            <var>Paint</var> is a method used to render the tab control to its canvas. It handles the background and tabs for the control excluding any button decorations. Buttons are handled in a differ component. Paint adjusts the display rectangle in ARect to reserved a single pixel on the edge indicated in the <var>TabPosition</var> property. This avoids drawing a border on the edge where the control is aligned.
        </p>
          <p>
            Paint uses <var>ThemeServices</var> to get theme elements available for a tab control, and to draw the control to its <var>Canvas</var> using the theme details. A raised 3D frame is drawn around the control. At design-time, the <var>Caption</var> for the control is drawn centered in its display area.
          </p>
        </descr>
        <seealso>
          <link id="TTabControl.TabPosition"/>
          <link id="#lcl.controls.TControl.Caption">TControl.Caption</link>
        </seealso>
      </element>

      <element name="TTabControl.AdjustDisplayRectWithBorder">
        <short>Adjust the specified display rectangle to use the size in Tabs.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.AdjustDisplayRectWithBorder.ARect">
        <short/>
      </element>

      <element name="TTabControl.AdjustClientRect">
        <short>Calls the AdjustDisplayRect method.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.AdjustClientRect.ARect">
        <short/>
      </element>

      <element name="TTabControl.CreateTabNoteBookStrings">
        <short>Creates the TTabControlNoteBookStrings instance used in Tabs.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.CreateTabNoteBookStrings.Result">
        <short>TTabControlNoteBookStrings instance created in the method.</short>
      </element>

      <element name="TTabControl.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance. Create calls the inherited constructor, and sets the default values for the following properties in the class instance:
          </p>
          <ul>
            <li>Tabs</li>
            <li>TabStop</li>
            <li>BorderWidth</li>
          </ul>
          <p>
            Create calls GetControlClassDefaultSize and sets the initial bounds for the control using SetInitialBounds. Create allocates a TControlCanvas instance that is used in the Canvas property.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TTabControl.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy ensures that resources allocated in the class instance are freed, including:
          </p>
          <ul>
            <li>Buttons (and the associated toolbar)</li>
            <li>Internal ImageChangeLinks</li>
          </ul>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.IndexOfTabAt">
        <short>Gets the position for the tab at the specified mouse coordinates.</short>
        <descr>
          <p>
            <var>IndexOfTabAt</var> is an overridden overloaded <var>Integer</var> function used to get the position for the tab at the specified mouse coordinates. The overloaded variants allow the mouse coordinates to be specified as a <var>TPoint</var> instance, or two Integer values.
          </p>
          <p>
            IndexOfTabAt re-implements the methods from the ancestor class to use the <var>TTabControlNoteBookStrings</var> instance in Tabs. Tabs provides the offset for the control from the value in ClientOrigin. The <var>IndexOfTabAt</var> method in Tabs is called to get the return value for the method.
          </p>
          <p>
            The return value contains the ordinal position in Tabs where the mouse pointer is located.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.IndexOfTabAt"/>
        </seealso>
      </element>
      <element name="TTabControl.IndexOfTabAt.Result">
        <short>Ordinal position for the hovered tab in the Tabs property.</short>
      </element>
      <element name="TTabControl.IndexOfTabAt.X">
        <short>Horizontal coordinate for the mouse pointer.</short>
      </element>
      <element name="TTabControl.IndexOfTabAt.Y">
        <short>Vertical coordinate for the mouse pointer.</short>
      </element>
      <element name="TTabControl.IndexOfTabAt.P">
        <short>TPoint instance with the mouse coordinates.</short>
      </element>

      <element name="TTabControl.GetHitTestInfoAt">
        <short>Gets a set of hit test results for the specified mouse coordinates.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TTabControl.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TTabControl.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TTabControl.GetImageIndex">
        <short>
          Signals the OnGetImageIndex event handler to get an image for the specified tab index.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.GetImageIndex.Result">
        <short/>
      </element>
      <element name="TTabControl.GetImageIndex.ATabIndex">
        <short/>
      </element>

      <element name="TTabControl.IndexOfTabWithCaption">
        <short>Gets the ordinal position for the tab with the specified Caption.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.IndexOfTabWithCaption.Result">
        <short/>
      </element>
      <element name="TTabControl.IndexOfTabWithCaption.TabCaption">
        <short/>
      </element>

      <element name="TTabControl.TabRect">
        <short>Gets the rectangle where the tab at the specified position is drawn.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.TabRect.Result">
        <short/>
      </element>
      <element name="TTabControl.TabRect.Index">
        <short/>
      </element>

      <element name="TTabControl.RowCount">
        <short>Gets the number of rows needed to render the Tabs on the control.</short>
        <descr>
          Always returns 1 in TTabControl.
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.RowCount.Result">
        <short/>
      </element>

      <element name="TTabControl.ScrollTabs">
        <short>
          Scrolls the tabs on the control horizontally by the value specified in Delta.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.ScrollTabs.Delta">
        <short/>
      </element>

      <element name="TTabControl.BeginUpdate">
        <short>Starts an update process for the control.</short>
        <descr>
          <p>
            No actions are performed in the method if the Tabs property has not been assigned.
          </p>
          <p>
            Calls the BeginUpdate method in Tabs to start the update process.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.EndUpdate">
        <short>Finishes an update process for the control.</short>
        <descr>
          <p>
            No actions are performed in the method if the <var>Tabs</var> property has not been assigned.
          </p>
          <p>
            Calls the <var>EndUpdate</var> method in Tabs to complete the update process. The <var>Change</var> method is called when there no unfinished updates in Tabs and an internal flag is set to trigger the <var>OnChange</var> event handler.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.IsUpdating">
        <short>
          Indicates if there are unfinished updates for one of the Tabs on the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.IsUpdating.Result">
        <short/>
      </element>

      <element name="TTabControl.DisplayRect">
        <short>Display area for the tab control.</short>
        <descr>
          <p>
            <var>DisplayRect</var> is a read-only <var>TRect</var> property which contains the display area for the page in the tabbed control. It uses the client rectangle for the control as the value for the property. Use <var>TabRect</var> to get the display area for the tab in the tabbed control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.HotTrack" link="#lcl.comctrls.TCustomTabControl.HotTrack"/>
      <element name="TTabControl.Images" link="#lcl.comctrls.TCustomTabControl.Images"/>
      <element name="TTabControl.ImagesWidth" link="#lcl.comctrls.TCustomTabControl.ImagesWidth"/>
      <element name="TTabControl.MultiLine" link="#lcl.comctrls.TCustomTabControl.MultiLine"/>
      <element name="TTabControl.MultiSelect" link="#lcl.comctrls.TCustomTabControl.MultiSelect"/>
      <element name="TTabControl.OnChange" link="#lcl.comctrls.TCustomTabControl.OnChange"/>
      <element name="TTabControl.OnChanging" link="#lcl.comctrls.TCustomTabControl.OnChanging"/>
      <element name="TTabControl.OnGetImageIndex" link="#lcl.comctrls.TCustomTabControl.OnGetImageIndex"/>
      <element name="TTabControl.OwnerDraw" link="#lcl.comctrls.TCustomTabControl.OwnerDraw"/>
      <element name="TTabControl.RaggedRight" link="#lcl.comctrls.TCustomTabControl.RaggedRight"/>
      <element name="TTabControl.ScrollOpposite" link="#lcl.comctrls.TCustomTabControl.ScrollOpposite"/>
      <element name="TTabControl.Style" link="#lcl.comctrls.TCustomTabControl.Style"/>
      <element name="TTabControl.TabPosition" link="#lcl.comctrls.TCustomTabControl.TabPosition"/>
      <element name="TTabControl.TabHeight" link="#lcl.comctrls.TCustomTabControl.TabHeight"/>
      <element name="TTabControl.TabIndex" link="#lcl.comctrls.TCustomTabControl.TabIndex"/>
      <element name="TTabControl.Tabs" link="#lcl.comctrls.TCustomTabControl.Tabs"/>
      <element name="TTabControl.TabStop" link="#lcl.comctrls.TCustomTabControl.TabStop"/>
      <element name="TTabControl.TabWidth" link="#lcl.comctrls.TCustomTabControl.TabWidth"/>
      <element name="TTabControl.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TTabControl.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TTabControl.BIdiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TTabControl.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TTabControl.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TTabControl.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
      <element name="TTabControl.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TTabControl.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TTabControl.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TTabControl.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TTabControl.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TTabControl.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
      <element name="TTabControl.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TTabControl.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
      <element name="TTabControl.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
      <element name="TTabControl.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TTabControl.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TTabControl.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TTabControl.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TTabControl.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TTabControl.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TTabControl.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
      <element name="TTabControl.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TTabControl.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TTabControl.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TTabControl.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TTabControl.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TTabControl.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TTabControl.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TTabControl.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TTabControl.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TTabControl.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TTabControl.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TTabControl.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>
      <element name="TTabControl.Options" link="#lcl.comctrls.TCustomTabControl.Options"/>
      <element name="TTabControl.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
      <element name="TTabControl.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TTabControl.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TTabControl.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TTabControl.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TTabControl.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TTabControl.Visible" link="#lcl.controls.TControl.Visible"/>

      <element name="TCustomDrawTarget">
        <short>
          <var>TCustomDrawTarget</var> - enumerated type controlling how a target object is drawn.
        </short>
      </element>
      <element name="TCustomDrawTarget.dtControl">
        <short>Draw the entire control.</short>
      </element>
      <element name="TCustomDrawTarget.dtItem">
        <short>Draw one item (or line in report mode).</short>
      </element>
      <element name="TCustomDrawTarget.dtSubItem">
        <short>Draw one subitem (except subitem 0 which is drawn by dtItem).</short>
      </element>

      <element name="TCustomDrawStage">
        <short>
          <var>TCustomDrawStage</var>  a series of constants to define the drawing stages.
        </short>
        <descr/>
      </element>
      <element name="TCustomDrawStage.cdPrePaint">
        <short/>
      </element>
      <element name="TCustomDrawStage.cdPostPaint">
        <short/>
      </element>
      <element name="TCustomDrawStage.cdPreErase">
        <short/>
      </element>
      <element name="TCustomDrawStage.cdPostErase">
        <short/>
      </element>

      <element name="TCustomDrawStateFlag">
        <short>
          <var>TCustomDrawStateFlag</var> - series of flags to define the DrawState.</short>
        <descr>
          <p>
            <var>TCustomDrawStateFlag</var> is an enumerated type with values representing the drawing states available in custom-drawn controls. Values from the enumeration are stored in the <var>TCustomDrawState</var> set type passed as an argument to event handlers in list view and tree view controls, and stored internally in the controls.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawState"/>
          <link id="TLVCustomDrawItemEvent"/>
          <link id="TLVCustomDrawSubItemEvent"/>
          <link id="TLVAdvancedCustomDrawItemEvent"/>
          <link id="TLVAdvancedCustomDrawSubItemEvent"/>
          <link id="TTVCustomDrawItemEvent"/>
          <link id="TTVAdvancedCustomDrawItemEvent"/>
        </seealso>
      </element>
      <element name="TCustomDrawStateFlag.cdsSelected">
        <short>Control is drawn using the selected style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsGrayed">
        <short>Control is drawn using the grayed or unselected style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsDisabled">
        <short>Control is drawn using the disabled style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsChecked">
        <short>Control is drawn using the checked style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsFocused">
        <short>Control is drawn using the focused style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsDefault">
        <short>Control is drawn using the default style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsHot">
        <short>Control is drawn using the hot tracking style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsMarked">
        <short>Control is drawn using the marked (multiselected) style.</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsIndeterminate">
        <short>Control is drawn using the indeterminate state style.</short>
      </element>

      <element name="TCustomDrawState">
        <short>
          <var>TCustomDrawState</var>  - set of <var>TCustomDrawStateFlag</var>.
        </short>.
        <descr>
          TCustomDrawState determines how a item will be drawn.
        </descr>
        <seealso>
          <link id="TCustomDrawStateFlag"/>
          <link id="TLVCustomDrawItemEvent"/>
          <link id="TLVCustomDrawSubItemEvent"/>
          <link id="TLVAdvancedCustomDrawItemEvent"/>
          <link id="TLVAdvancedCustomDrawSubItemEvent"/>
          <link id="TTVCustomDrawItemEvent"/>
          <link id="TTVAdvancedCustomDrawItemEvent"/>
        </seealso>
      </element>

      <element name="TCustomDrawResultFlag">
        <short>
          <var>TCustomDrawResultFlag</var> - enumerated type, a series of flags to signify the result of a drawing process.
        </short>
      </element>
      <element name="TCustomDrawResultFlag.cdrSkipDefault">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyPostpaint">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyItemdraw">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifySubitemdraw">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyPosterase">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyItemerase">
        <short/>
      </element>

      <element name="TCustomDrawResult">
        <short>
          <var>TCustomDrawResult</var> - set of <var>TCustomDrawResultFlag</var>.
        </short>.
        <descr/>
        <seealso/>
      </element>

      <element name="TSortType">
        <short>
          Indicates the sort mechanism used for items in tree view and list view controls.
        </short>
        <descr>
          <p>
            <var>TSortType</var> is an enumerated type with values indicating the sort mechanism used for items in tree view or list view controls. TSortType is the type used to implement the <var>SortType</var> property in both <var>TCustomTreeView</var> and <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.SortType"/>
          <link id="TCustomTreeView.AlphaSort"/>
          <link id="TCustomTreeView.CustomSort"/>
          <link id="TCustomListView.SortType"/>
          <link id="TCustomListView.Sort"/>
        </seealso>
      </element>
      <element name="TSortType.stNone">
        <short>Sorting is not used for list items.</short>
      </element>
      <element name="TSortType.stData">
        <short>List items are sorted by their data and not their display text.</short>
      </element>
      <element name="TSortType.stText">
        <short>List items are sorted by their display text and not their data.</short>
      </element>
      <element name="TSortType.stBoth">
        <short>List items are sorted using both display text and data.</short>
      </element>

      <element name="TListItemState">
        <short>Represents state values for items in a list view control.</short>
        <descr>
          <p>
            <var>TListItemState</var> is an enumerated type with values which represent the state for items in a list view control. The values reflect the current settings for properties in <var>TListItem</var>.
          </p>
          <p>
            Values from TListItemState are stored in the <var>TListItemStates</var> set type.
          </p>
        </descr>
        <seealso>
          <link id="TListItemStates"/>
          <link id="TListItem.StateIndex"/>
        </seealso>
      </element>
      <element name="TListItemState.lisCut">
        <short>The list item has its Cut property set to True.</short>
      </element>
      <element name="TListItemState.lisDropTarget">
        <short>The list item has its DropTarget property set to True.</short>
      </element>
      <element name="TListItemState.lisFocused">
        <short>The list item has its Focused property set to True.</short>
      </element>
      <element name="TListItemState.lisSelected">
        <short>The list item has its Selected property set to True.</short>
      </element>

      <element name="TListItemStates">
        <short>
          Set type used to store value(s) from the TListItemState enumeration.
        </short>
        <descr>
          <p>
            <var>TListItemStates</var> is a set type used to store zero or more values from the <var>TListItemState</var> enumeration. TListItemStates is the type used to implement the <var>States</var> member in <var>TListItem</var>. Values are included in and excluded from the set when the corresponding properties in TListItem are changed.
          </p>
        </descr>
        <seealso>
          <link id="TListItem.Cut"/>
          <link id="TListItem.DropTarget"/>
          <link id="TListItem.Focused"/>
          <link id="TListItem.Selected"/>
          <link id="TListItem.StateIndex"/>
        </seealso>
      </element>

      <element name="TListItemFlag">
        <short>
          <var>TListItemFlag</var> - enumerated type, a flag denoting a list item is being destroyed or created.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemFlag.lifDestroying">
        <short>List item has been marked for destruction by a notify message.</short>
      </element>
      <element name="TListItemFlag.lifCreated">
        <short>List item has been marked as created by a notify message.</short>
        <short/>
      </element>

      <element name="TListItemFlags">
        <short>Set type used to store TListItemFlag enumeration values.</short>
        <descr>
          <p>
            <var>TListItemFlags</var> is a set type used to store zero or more values from the <var>TListItemFlag</var> enumeration. It is the type used to implement the internal <var>Flags</var> member in <var>TListItem</var>.
          </p>
        </descr>
        <seealso>
          <link id="TListItem"/>
          <link id="TListItemFlag"/>
        </seealso>
      </element>

      <element name="TDisplayCode">
        <short>
          <var>TDisplayCode</var> - enumerated type denoting how items are displayed.
        </short>
        <descr>
          <p>
            <var>TDisplayCode</var> is an enumerated type with values that denote how the item or subitem is displayed in a list view control. The values are passed as arguments to the <var>DisplayRect</var> and  <var>DisplayRectSubItem</var> methods in <var>TListItem</var>, and allows the widgetset to layout and rendering the list items for the platform.
          </p>
        </descr>
        <seealso>
          <link id="TListItem.DisplayRect"/>
          <link id="TListItem.DisplayRectSubItem"/>
        </seealso>
      </element>
      <element name="TDisplayCode.drBounds">
        <short>List item is rendered using the Bounds for the item display rectangle.</short>
      </element>
      <element name="TDisplayCode.drIcon">
        <short>List item is rendered using the width and height for the associated image.</short>
      </element>
      <element name="TDisplayCode.drLabel">
        <short>List item is rendered using the text metrics for the caption in the item.</short>
      </element>
      <element name="TDisplayCode.drSelectBounds">
        <short>List item is rendered using the selection rectangle for the item.</short>
      </element>

      <element name="TIconArrangement">
        <short>Represents icon arrangement options in a list view control.</short>
        <descr>
          <p>
            <var>TIconArrangement</var> is an enumerated type with values representing the icon arrangement options for a list view control.
          </p>
        </descr>
        <seealso>
          <link id="TIconOptions"/>
          <link id="TCustomListView"/>
        </seealso>
      </element>
      <element name="TIconArrangement.iaTop">
        <short>
          Icons are arranged from the top to the bottom, then left to right in the control.
        </short>
      </element>
      <element name="TIconArrangement.iaLeft">
        <short>
          Icons are arranged from left to right, then top to bottom in the control.
        </short>
      </element>

      <element name="TIconOptions">
        <short>Contains text wrapping and icon layout settings for a list view control.</short>
        <descr>
          <p>
            <var>TIconOptions</var> is a <var>TPersistent</var> descendant which represents the text wrapping and icon layout settings in the <var>IconOptions</var> property in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.IconOptions"/>
        </seealso>
      </element>

      <element name="TIconOptions.FListView"/>
      <element name="TIconOptions.FArrangement"/>

      <element name="TIconOptions.GetAutoArrange">
        <short>Gets the value for the AutoArrange property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.GetAutoArrange.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TIconOptions.GetWrapText">
        <short>Gets the value for the WrapText property.</short>
        <descr/>
        <seealso>
          <link id="TIconOptions.WrapText"/>
        </seealso>
      </element>
      <element name="TIconOptions.GetWrapText.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TIconOptions.SetArrangement">
        <short>Sets the value for the Arrangement property.</short>
        <descr/>
        <seealso>
          <link id="TIconOptions.Arrangement"/>
        </seealso>
      </element>
      <element name="TIconOptions.SetArrangement.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TIconOptions.SetAutoArrange">
        <short>Sets the value for the AutoArrange property.</short>
        <descr/>
        <seealso>
          <link id="TIconOptions.AutoArrange"/>
        </seealso>
      </element>
      <element name="TIconOptions.SetAutoArrange.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TIconOptions.SetWrapText">
        <short>Sets the value for the WrapText property.</short>
        <descr/>
        <seealso>
          <link id="TIconOptions.WrapText"/>
        </seealso>
      </element>
      <element name="TIconOptions.SetWrapText.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TIconOptions.AssignTo">
        <short>Assign values from the class instance to the specified persistent object.</short>
        <descr>
          <p>
            <var>AssignTo</var> is an overridden method which implements support for the <var>TIconOptions</var> type in the RTL object persistence mechanism. AssignTo allows property values from the current class instance to the stored to the persistent object in <var>Dest</var>.
          </p>
          <p>
            When Dest is a TIconOptions instance, AssignTo copies the values from the current class instance:
          </p>
          <ul>
            <li>Arrangement</li>
            <li>AutoArrange</li>
            <li>WrapText</li>
          </ul>
          <p>
            If ADest is not derived from TIconOptions, the inherited method is called.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TIconOptions.AssignTo.Dest">
        <short>Persistent object where property values are stored.</short>
      </element>

      <element name="TIconOptions.GetOwner">
        <short>Gets the owner of the class instance.</short>
        <descr>
          <p>
            <var>GetOwner</var> is an overridden method in <var>TIconOptions</var> used to get the owner of the class instance. It returns the <var>TCustomListView</var> instance passed as an argument to the <var>Create</var> constructor.
          </p>
        </descr>
        <seealso>
          <link id="TIconOptions.Create"/>
          <link id="TCustomListView"/>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TIconOptions.GetOwner.Result">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TIconOptions.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create stores the value in AOwner to an internal member used in the class instance, and sets the default value for the <var>Arrangement</var> property to <var>iaTop</var>.
          </p>
        </descr>
        <seealso>
          <link id="TIconOptions.Arrangement"/>
          <link id="TIconArrangement"/>
        </seealso>
      </element>
      <element name="TIconOptions.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TIconOptions.Arrangement">
        <short>Indicates the icon position relative to the caption in a list item.</short>
        <descr>
          <p>
            <var>Arrangement</var> is a <var>TIconArrangement</var> property which indicates the layout for the icon or image in a list item relative to its caption text. The default value for the property is <var>iaTop</var>, and causes the icon to be displayed above the caption for the list item.
          </p>
          <p>
            See <link id="TIconArrangement">TIconArrangement</link> for other values in the enumeration and their usage.
          </p>
        </descr>
        <seealso>
          <link id="TIconArrangement"/>
        </seealso>
      </element>

      <element name="TIconOptions.AutoArrange">
        <short>Indicates whether icons in a list view can be automatically arranged.</short>
        <descr>
          <p>
            AutoArrange is a Boolean property which indicates if icons in a list view control can be automatically arranged when items are added to the control. The default value for the property is False.
          </p>
          <p>
            AutoArrange is used when the list view uses the vsIcon or vsSmallIcon view styles.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ViewStyle"/>
          <link id="TViewStyle"/>
        </seealso>
      </element>

      <element name="TIconOptions.WrapText">
        <short>Indicates if the caption for a list item can wrap into multiple lines.</short>
        <descr>
          <p>
            WrapText is a Boolean property which indicates if the Caption for a list view item  can be wrapped into multiple lines. The default value for the property is True.
          </p>
          <p>
            The Caption for the item is wrapped when its length exceeds the width for the icon in the list item.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TListItem">
        <short>
          Represents the items created in TCustomListView and descendants.
        </short>
        <descr>
          <p>
            <var>TListItem</var> is the base class for the Items created in <var>TCustomListView</var> and <var>TListView</var>.
          </p>
          <p>
            TListItem provides properties which identify the content for the list item, like: Caption, SubItems, Data, Index, ImageIndeex, and StateIndex. Other properties indicate the disposition of the item in the control, like: Checked, Cut, DropTarget, Focused, and Selected.
          </p>
          <p>
            Methods are provided that allow the list item to interact with the control and the widgetset class.
          </p>
          <p>
            TListItem is the type used in the TListItems container.
          </p>
        </descr>
        <seealso>
          <link id="TListItems"/>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
          <link id="#rtl.objects.TObject">TObject</link>
        </seealso>
      </element>

      <element name="TListItem.FOwner"/>
      <element name="TListItem.FFlags"/>
      <element name="TListItem.FSubItems"/>
      <element name="TListItem.FCaption"/>
      <element name="TListItem.FData"/>
      <element name="TListItem.FImageIndex"/>
      <element name="TListItem.FStateIndex"/>
      <element name="TListItem.FStates"/>
      <element name="TListItem.FChecked"/>

      <element name="TListItem.GetCaption">
        <short>Gets the value for the Caption property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Caption"/>
        </seealso>
      </element>
      <element name="TListItem.GetCaption.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetChecked">
        <short>Gets the value for the Check property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Checked"/>
        </seealso>
      </element>
      <element name="TListItem.GetChecked.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetLeft">
        <short>Gets the value for the Left property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Left"/>
        </seealso>
      </element>
      <element name="TListItem.GetLeft.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetListView">
        <short>Gets the value for the ListView property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.ListView"/>
        </seealso>
      </element>
      <element name="TListItem.GetListView.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetPosition">
        <short>Gets the value for the Position property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Position"/>
        </seealso>
      </element>
      <element name="TListItem.GetPosition.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetState">
        <short>Gets the value for a state property in the list item.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Selected"/>
        </seealso>
      </element>
      <element name="TListItem.GetState.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TListItem.GetState.AState">
        <short>
          TListItemState enumeration value which identifies the property value returned from the method.
        </short>
      </element>

      <element name="TListItem.GetImageIndex">
        <short>Gets the value for the ImageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.ImageIndex"/>
        </seealso>
      </element>
      <element name="TListItem.GetImageIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetIndex">
        <short>Gets the value for the Index property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Index"/>
        </seealso>
      </element>
      <element name="TListItem.GetIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetStateIndex">
        <short>Gets the value for the StateIndex property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.StateIndex"/>
        </seealso>
      </element>
      <element name="TListItem.GetStateIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetSubItemImages">
        <short>Gets the value for the indexed SubItemImages property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetSubItemImages.Result">
        <short>Value for the indexed property.</short>
      </element>
      <element name="TListItem.GetSubItemImages.AIndex">
        <short>Ordinal position for the sub-item image in the property value.</short>
      </element>

      <element name="TListItem.GetSubItems">
        <short>Gets the value for the SubItems property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.SubItems"/>
        </seealso>
      </element>
      <element name="TListItem.GetSubItems.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.GetTop">
        <short>Gets the value for the Top property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Top"/>
        </seealso>
      </element>
      <element name="TListItem.GetTop.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TListItem.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.WSUpdateAllowed.Result">
        <short/>
      </element>

      <element name="TListItem.WSUpdateText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSUpdateImages">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSUpdateChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSSetState">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSUpdateState">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.SetChecked">
        <short>Sets the value for the Checked property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Checked"/>
        </seealso>
      </element>
      <element name="TListItem.SetChecked.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetState">
        <short>
          Sets the value for the property identified by the AState argument.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetState.AState">
        <short>TListItemState value which identifies the property updated.</short>
      </element>
      <element name="TListItem.SetState.AIsSet">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetData">
        <short>Sets the value for the Data property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Data"/>
        </seealso>
      </element>
      <element name="TListItem.SetData.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetImageIndex">
        <short>Sets the value for the ImageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.ImageIndex"/>
        </seealso>
      </element>
      <element name="TListItem.SetImageIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetLeft">
        <short>Sets the value for the Left property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Left"/>
        </seealso>
      </element>
      <element name="TListItem.SetLeft.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetCaption">
        <short>Sets the value for the Caption property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Caption"/>
        </seealso>
      </element>
      <element name="TListItem.SetCaption.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetPosition">
        <short>Sets the value for the Position property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Position"/>
        </seealso>
      </element>
      <element name="TListItem.SetPosition.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetStateIndex">
        <short>Sets the value for the StateIndex property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.StateIndex"/>
        </seealso>
      </element>
      <element name="TListItem.SetStateIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetSubItemImages">
        <short>Sets the value for the indexed SubItemImages property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.SubItemImages"/>
        </seealso>
      </element>
      <element name="TListItem.SetSubItemImages.AIndex">
        <short>Ordinal position for the new value.</short>
      </element>
      <element name="TListItem.SetSubItemImages.AValue">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TListItem.SetSubItems">
        <short>Sets the value for the SubItems property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.SubItems"/>
        </seealso>
      </element>
      <element name="TListItem.SetSubItems.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.SetTop">
        <short>Sets the value for the Top property.</short>
        <descr/>
        <seealso>
          <link id="TListItem.Top"/>
        </seealso>
      </element>
      <element name="TListItem.SetTop.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TListItem.IsEqual">
        <short>
          Determines if the specified list item has the same values as the current class instance.
        </short>
        <descr>
          <p>
            <var>IsEqual</var> is a <var>Boolean</var> function used to determine if the list item has the same values as the list item specified in <var>AItem</var>. IsEqual compares the values in the <var>Caption</var>, <var>Data</var>, and the internal <var>FStates</var> member in both <var>TListItem</var> instances. The return value is <b>True</b> when the content in the instances is the same.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TListItem.IsEqual.Result">
        <short>True when the list items have the same content.</short>
      </element>
      <element name="TListItem.IsEqual.AItem">
        <short>List item compared to the current class instance.</short>
      </element>

      <element name="TListItem.IsOwnerData">
        <short>Determines if the list item has an owner with a valid handle.</short>
        <descr>
          <p>
            <var>IsOwnerData</var> is a <var>Boolean</var> function used to determine if the list item has an owner with a valid handle. IsOwnerData always returns <b>False</b> in <var>TListItem</var>. It is overridden in descendent classes like <var>TOwnerDataListItem</var>.
          </p>
        </descr>
        <seealso>
          <link id="TOwnerDataListItem.IsOwnerData"/>
        </seealso>
      </element>
      <element name="TListItem.IsOwnerData.Result">
        <short>True if the list item has an owner with a valid handle.</short>
      </element>

      <element name="TListItem.GetCheckedInternal">
        <short>True if the member variable for the Checked property contains True.</short>
        <descr>
          <p>
            Used in methods in the widgetset class.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TListItem.GetCheckedInternal.Result">
        <short/>
      </element>

      <element name="TListItem.GetOwner">
        <short>Gets the owner of the class instance.</short>
        <descr>
          <p>
            Returns the value in the <var>Owner</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TListItem.Owner"/>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TListItem.GetOwner.Result">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TListItem.Assign">
        <short>
          Copies values from the specified persistent object into the current class instance.
        </short>
        <descr>
          <p>
            <var>Assign</var> is an overridden method used copy property values from the persistent object in <var>ASource</var> into the current class instance. When <var>ASource</var> is a <var>TListItem</var> descendant, the following property values are copied:
          </p>
          <ul>
            <li>Caption</li>
            <li>Data</li>
            <li>ImageIndex</li>
            <li>SubItems</li>
          </ul>
          <p>
            If ASource is not descended from TListItem, the inherited method is called to handle the assignment.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TListItem.Assign.ASource">
        <short>Persistent object with values copied in the method.</short>
      </element>

      <element name="TListItem.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited constructor on entry. <var>AOwner</var> is the <var>TListItems</var> instance which acts as the container for the list item.
          </p>
          <p>
            Create sets the default values in member variables used in the class instance. The property interfaces are not used before they are not available until the list item is added to the TListItems container.
          </p>
        </descr>
        <seealso>
          <link id="TListItems"/>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TListItem.Create.AOwner">
        <short>Container which owns the list item.</short>
      </element>

      <element name="TListItem.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance.
          </p>
          <p>
            Destroy sets the internal flag that marks the list item for destruction in the <var>Owner</var>. When the Owner is assigned, its <var>ItemDestroying</var> method is called to signal destruction of the list item in the container.
          </p>
          <p>
            Destroy free and Nils resources allocated for the <var>SubItems</var> property, and calls the inherited destructor prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TListItem.SubItems"/>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TListItem.Delete">
        <short>Removes the list item from the container.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.MakeVisible">
        <short>
          Makes the item visible in the list view control which owns the container and the list item.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.MakeVisible.PartialOK">
        <short>True is the list item can be partially visible in the control.</short>
      </element>

      <element name="TListItem.DisplayRect">
        <short>
          <var>DisplayRect</var> - returns the coordinates of a rectangle for displaying the current item.
        </short>
        <descr>
          <p>
            <var>DisplayRect</var> - returns the coordinates of a rectangle for displaying the current item.
          </p>
          <p>
            Display codes can be: <var>drBounds</var>, <var>drIcon</var>, <var>drLabel</var>, <var>drSelectBounds</var>.
          </p>
        </descr>
      </element>
      <element name="TListItem.DisplayRect.Result">
        <short/>
      </element>
      <element name="TListItem.DisplayRect.Code">
        <short/>
      </element>

      <element name="TListItem.DisplayRectSubItem">
        <short>
          <var>DisplayRectSubItem</var> - returns the coordinates of a display rectangle for a specified sub-item.
        </short>
        <descr>
          <p>
            <var>DisplayRectSubItem</var> - returns the coordinates of a display rectangle for a specified sub-item.
          </p>
          <p>
            Display codes can be: <var>drBounds</var>, <var>drIcon</var>, <var>drLabel</var>, <var>drSelectBounds</var>.
          </p>
        </descr>
      </element>
      <element name="TListItem.DisplayRectSubItem.Result">
        <short/>
      </element>
      <element name="TListItem.DisplayRectSubItem.SubItem">
        <short/>
      </element>
      <element name="TListItem.DisplayRectSubItem.Code">
        <short/>
      </element>

      <element name="TListItem.EditCaption">
        <short>
          Makes the item the selection in the list view control and displays the editor when allowed.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomListView.Selected"/>
          <link id="TCustomListView.ReadOnly"/>
        </seealso>
      </element>
      <element name="TListItem.EditCaption.Result">
        <short>True if the control is not ReadOnly and the editor is valid, otherwise False.</short>
      </element>

      <element name="TListItem.GetStates">
        <short>Returns all the states for the list item.</short>
        <descr>
          <p>
            <var>GetStates</var> is a <var>TListItemStates</var> function used to get the state values for an item in a list view control. The state values are retrieved using methods in the widgetset class for the <var>TCustomListView</var> control which owns the list item. If the widgetset class does not return the values,  the return value contains the existing values in the States member for the <var>TListItem</var> instance.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TListItem.GetStates.Result">
        <short>State values for the list item.</short>
      </element>

      <element name="TListItem.Caption">
        <short>
          <var>Caption</var> - the name given to this item on the list.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Checked">
        <short>
          <var>Checked</var> - if True, a check mark is present beside the item implying it has been selected.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Cut">
        <short>
          <var>Cut</var> this item from the list (but it can be placed on the clipboard).
        </short>
      </element>

      <element name="TListItem.Data">
        <short>Pointer to the Data associated with this item.</short>
      </element>

      <element name="TListItem.DropTarget">
        <short>
          <var>DropTarget</var> - returns True if this is a valid target on the list for dropping.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Focused">
        <short>Property is true if this item has Focus.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Index">
        <short>The index of this item in the list (integer).</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.ImageIndex">
        <short>The index of the image associated with this Item in the list.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Left">
        <short>The position of the Left side of the list item.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.ListView">
        <short>The <var>ListView</var> in which this Item is found.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Owner">
        <short>The Owner of the ListItem.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Position">
        <short>The coordinates of the position where the ListItem is located.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Selected">
        <short>
          Whether this Item has been <var>Selected</var> (often denoted by a check-mark).
        </short>
        <descr>
          <p>
            Selected is a Boolean property which indicates if the list item has been selected. The property value is determined by examining the internal TListItemStates set for the class instance. When lisSelected has been included in the state values, the property is True. Otherwise, the property is False.
          </p>
          <p>
            Setting a new value for the property causes the value lisSelected to be included in or removed from the internal set. AIsSet indicates whether the state value is set. When True, the state value is included in the set. Otherwise, the state value is excluded.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TListItem.StateIndex">
        <short>
          Ordinal position for the image used to represent the state for the list item.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.SubItems">
        <short>The list of <var>SubItems</var> associated with this ListItem.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.SubItemImages">
        <short>
          <var>SubItemImages</var> - the list of Images associated with the SubItems.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SubItemImages.AIndex">
        <short/>
      </element>

      <element name="TListItem.Top">
        <short>The position of the <var>Top</var> of this ListItem.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItemClass">
        <short>Class reference used to create new instances of TListItem.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOwnerDataListItem">
        <short>
          List item used in a list view control when owner data (virtual) mode is enabled.
        </short>
        <descr>
          <p>
            TOwnerDataListItem is a TListItem descendant which implements a list item used for a list view control in virtual mode.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TOwnerDataListItem.FDataIndex"/>
      <element name="TOwnerDataListItem.FCached"/>

      <element name="TOwnerDataListItem.GetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetCaption.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.GetIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetIndex.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.GetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetImageIndex.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetCaption.AValue">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetImageIndex.AValue">
        <short/>
      </element>

      <element name="TOwnerDataListItem.GetSubItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetSubItems.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.DoCacheItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOwnerDataListItem.IsOwnerData">
        <short>
          True if the owner for the list item has been assigned and can be updated in the widgetset class.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.IsOwnerData.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetDataIndex">
        <short>Sets the internal index position for the virutal item.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetDataIndex.ADataIndex">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetOwner">
        <short>Sets the TListItems container which owns the list item.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetOwner.AOwner">
        <short/>
      </element>

      <element name="TListItemsEnumerator">
        <short>
          Implements an enumerator for TListItem values in a TListItems container.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItemsEnumerator.FItems"/>
      <element name="TListItemsEnumerator.FPosition"/>

      <element name="TListItemsEnumerator.GetCurrent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsEnumerator.GetCurrent.Result">
        <short/>
      </element>

      <element name="TListItemsEnumerator.Create">
        <short>Constructor for the class instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsEnumerator.Create.AItems">
        <short>List items navigated in the enumerator.</short>
      </element>

      <element name="TListItemsEnumerator.MoveNext">
        <short>Moves to the next value for the enumerator.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsEnumerator.MoveNext.Result">
        <short/>
      </element>

      <element name="TListItemsEnumerator.Current">
        <short>Current value for the enumerator.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItemsFlag">
        <short>Widgetset flags applied to the TListItems container.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsFlag.lisfWSItemsCreated">
        <short/>
      </element>

      <element name="TListItemsFlags">
        <short>Set type used to store TListItemsFlag enumeration values.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems">
        <short>
          <var>TListItems</var> - a list of items with a cache of the last accessed item.
        </short>
        <descr>
          <var>TListitems</var> has a built-in cache for the last accessed item. This will speed up interface updates since <var>Item.Index</var> is  often used for the same item updating more properties.  If <var>FCacheIndex</var> contains -1 then the cache is not valid.
        </descr>
        <seealso/>
      </element>

      <element name="TListItems.FOwner"/>
      <element name="TListItems.FItems"/>
      <element name="TListItems.FFlags"/>
      <element name="TListItems.FCacheIndex"/>
      <element name="TListItems.FCacheItem"/>

      <element name="TListItems.WSCreateCacheItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSUpdateAllowed.Result">
        <short/>
      </element>

      <element name="TListItems.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSUpdateAllowed.Result">
        <short/>
      </element>

      <element name="TListItems.WSUpdateItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSUpdateItem.AIndex">
        <short/>
      </element>
      <element name="TListItems.WSUpdateItem.AValue">
        <short/>
      </element>

      <element name="TListItems.WSSetItemsCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSSetItemsCount.ACount">
        <short/>
      </element>

      <element name="TListItems.ItemDestroying">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.ItemDestroying.AItem">
        <short/>
      </element>

      <element name="TListItems.ReadData">
        <short/>
        <descr>
          Reads data in a Delphi compatible way.
        </descr>
        <seealso/>
      </element>
      <element name="TListItems.ReadData.Stream">
        <short/>
      </element>

      <element name="TListItems.ReadLazData">
        <short/>
        <descr>
          Reads data in a 64-bit safe way.
        </descr>
        <seealso/>
      </element>
      <element name="TListItems.ReadLazData.Stream">
        <short/>
      </element>

      <element name="TListItems.WriteLazData">
        <short/>
        <descr>
          Writes data in a 64-bit safe way.
        </descr>
        <seealso/>
      </element>
      <element name="TListItems.WriteLazData.Stream">
        <short/>
      </element>

      <element name="TListItems.DefineProperties">
        <short>
          <var>DefineProperties</var> - calls inherited method, then defines some specific binary properties.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TListItems.DefineProperties.Filer">
        <short/>
      </element>

      <element name="TListItems.GetCount">
        <short>
          <var>GetCount</var> - find the number of Items in the list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.GetCount.Result">
        <short/>
      </element>

      <element name="TListItems.GetItem">
        <short>
          <var>GetItem</var> returns the <var>ListItem</var> specified by <var>AIndex</var>.
        </short>.
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.GetItem.Result">
        <short/>
      </element>
      <element name="TListItems.GetItem.AIndex">
        <short/>
      </element>

      <element name="TListItems.GetOwner">
        <short>Gets the owner of the persistent object. </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.GetOwner.Result">
        <short>TCustomListView instance that owns the list items.</short>
      </element>

      <element name="TListItems.WSCreateItems">
        <short>
          <var>WSCreateItems</var> - instruction to the widgetset to create Items.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.DoFinalizeWnd">
        <short>Updates flags in the class instance when the widgetset handle is freed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.SetCount">
        <short>Sets the value for the Count property.</short>
        <descr/>
        <seealso>
          <link id="TListItems.Count"/>
        </seealso>
      </element>
      <element name="TListItems.SetCount.ACount">
        <short>New value for the Count property.</short>
      </element>

      <element name="TListItems.SetItem">
        <short>
          <var>SetItem</var> - writes the Index and content of a given Item to a local variable.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.SetItem.AIndex">
        <short/>
      </element>
      <element name="TListItems.SetItem.AValue">
        <short/>
      </element>

      <element name="TListItems.ClearSelection">
        <short>Clears the selected state for all TListItem instances in the class.</short>
        <descr/>
        <seealso>
          <link id="TListItems.Item"/>
          <link id="TListItem.Selected"/>
        </seealso>
      </element>

      <element name="TListItems.SelectAll">
        <short>Sets the selected state for all TListItem instances in the class.</short>
        <descr/>
        <seealso>
          <link id="TListItems.Item"/>
          <link id="TListItem.Selected"/>
        </seealso>
      </element>

      <element name="TListItems.Add">
        <short>
          <var>Add</var> an Item to the Collection.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Add.Result">
        <short/>
      </element>

      <element name="TListItems.AddItem">
        <short>
          <var>AddItem</var> - add the specified <var>AItem</var> to the collection.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.AddItem.AItem">
        <short/>
      </element>

      <element name="TListItems.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update process.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Clear">
        <short>
          <var>Clear</var> - remove all Items from the list.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Create">
        <short>
          <var>Create</var> - constructor for <var>TListItems</var>: calls inherited <var>Create</var> then creates the list.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TListItems.Create.AOwner">
        <short/>
      </element>

      <element name="TListItems.Destroy">
        <short>
          <var>Destroy</var> destructor for <var>TListItems</var>: frees the individual items on the list, then calls inherited <var>Destroy</var>.
        </short>.
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TListItems.Delete">
        <short>Remove the Item specified by <var>AIndex</var> from the collection.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Delete.AIndex">
        <short/>
      </element>

      <element name="TListItems.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update process.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Exchange">
        <short>Exchanges the list items stored at the specified positions.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Exchange.AIndex1">
        <short/>
      </element>
      <element name="TListItems.Exchange.AIndex2">
        <short/>
      </element>

      <element name="TListItems.Move">
        <short>
          Moves the list item at the specified position to a new position in the list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Move.AFromIndex">
        <short/>
      </element>
      <element name="TListItems.Move.AToIndex">
        <short/>
      </element>

      <element name="TListItems.FindCaption">
        <short>
          <var>FindCaption</var> - returns the ListItem with the specified caption at the given starting place.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.FindCaption.StartIndex">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Value">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Partial">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Inclusive">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Wrap">
        <short/>
      </element>
      <element name="TListItems.FindCaption.PartStart">
        <short/>
      </element>

      <element name="TListItems.FindData">
        <short>
          <var>FindData</var> - returns the ListItem associated with the specified data pointer.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.FindData.Result">
        <short/>
      </element>
      <element name="TListItems.FindData.AData">
        <short/>
      </element>
      <element name="TListItems.FindData.StartIndex">
        <short/>
      </element>
      <element name="TListItems.FindData.Value">
        <short/>
      </element>
      <element name="TListItems.FindData.Inclusive">
        <short/>
      </element>
      <element name="TListItems.FindData.Wrap">
        <short/>
      </element>

      <element name="TListItems.GetEnumerator">
        <short>Gets an enumerator for the Item values in the list.</short>
        <descr/>
        <seealso>
          <link id="TListItemsEnumerator"/>
        </seealso>
      </element>
      <element name="TListItems.GetEnumerator.Result">
        <short/>
      </element>

      <element name="TListItems.IndexOf">
        <short>Gets the ordinal position in the list for the specified list item.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.IndexOf.Result">
        <short/>
      </element>
      <element name="TListItems.IndexOf.AItem">
        <short/>
      </element>

      <element name="TListItems.Insert">
        <short>
          <var>Insert</var> an item in the list at <var>AIndex</var>, returning the value of the <var>ListItem</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Insert.Result">
        <short/>
      </element>
      <element name="TListItems.Insert.AIndex">
        <short/>
      </element>

      <element name="TListItems.InsertItem">
        <short>
          <var>InsertItem</var> - procedure to insert <var>AItem</var> at position <var>AIndex</var> in the list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.InsertItem.AItem">
        <short/>
      </element>
      <element name="TListItems.InsertItem.AIndex">
        <short/>
      </element>

      <element name="TListItems.Flags">
        <short>Contains the flag values currently assigned to the list.</short>
        <descr>
          <p>
            <var>Flags</var> is a read-only <var>TListItemsFlags</var> property with the flag values currently assigned to the list. Values in flags are added and removed as needed in methods for the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TListItemsFlags"/>
        </seealso>
      </element>

      <element name="TListItems.Count">
        <short>
          <var>Count</var> - the number of items in the collection.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Item">
        <short>An <var>Item</var> in the list, specified by its Index value.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Item.AIndex">
        <short/>
      </element>
      <element name="TListItems.Owner">
        <short>
          <var>Owner</var> - the ListView that owns this collection of ListItems.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOwnerDataListItems">
        <short>
          Faux container for the items in a list view control when owner data (virtual) mode is enabled.
        </short>
        <descr>
          <p>
            Only the most recent list item is actually populated in the list view control when owner data is enabled.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TOwnerDataListItems.fItemsCount"/>

      <element name="TOwnerDataListItems.GetCount">
        <short>Gets the value for the Count property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItems.GetCount.Result">
        <short>Value for the Count property.</short>
      </element>

      <element name="TOwnerDataListItems.SetCount">
        <short>Sets the value for the Count property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItems.SetCount.ACount">
        <short>New value for the Count property.</short>
      </element>

      <element name="TOwnerDataListItems.GetItem">
        <short>Gets the value for the indexed Item property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItems.GetItem.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TOwnerDataListItems.GetItem.AIndex">
        <short>Ordinal position for the indexed property value.</short>
      </element>

      <element name="TOwnerDataListItems.Clear">
        <short>Frees the list items stored in the Items property.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TWidth">
        <short>ImageIndex.</short>
        <descr>
          TWidth is an Integer range type.
          Range is 0..MaxInt.
        </descr>
        <seealso/>
      </element>

      <element name="TSortIndicator">
        <short>
          Represents the sort indicators available for a column in a list view control.
        </short>
        <descr>
          <p>
            <var>TSortIndicator</var> is an enumerated type with values that represent the sort indicators available in the <var>TListColumn</var> class. TSortIndicator is the type used to implement the <var>SortIndicator</var> property in <var>TListColumn</var>.
          </p>
        </descr>
        <seealso>
          <link id="TListColumn.SortIndicator"/>
        </seealso>
      </element>
      <element name="TSortIndicator.siNone">
        <short>No sort indicator is used for the list column.</short>
      </element>
      <element name="TSortIndicator.siAscending">
        <short>Uses an ascending sort indicator for the list column.</short>
      </element>
      <element name="TSortIndicator.siDescending">
        <short>Uses a  descending sort indicator for the list column.</short>
      </element>

      <element name="TListColumn">
        <short>
          Represents an individual column in a multi-column list control.
        </short>
        <descr>
          <p>
            <var>TListColumn</var> is a <var>TCollectionItem</var> descendant which represents an individual column in a multi-column list control.
          </p>
          <p>
            TListColumn is the type used for items added to the <var>TListColumns</var> collection, and maintained in the <var>TCustomListView.Columns</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TListColumns"/>
          <link id="TCustomListView.Columns"/>
          <link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
        </seealso>
      </element>

      <element name="TListColumn.FAlignment"/>
      <element name="TListColumn.FAutoSize"/>
      <element name="TListColumn.FCaption"/>
      <element name="TListColumn.FMinWidth"/>
      <element name="TListColumn.FMaxWidth"/>
      <element name="TListColumn.FVisible"/>
      <element name="TListColumn.FWidth"/>
      <element name="TListColumn.FImageIndex"/>
      <element name="TListColumn.FTag"/>
      <element name="TListColumn.FSortIndicator"/>

      <element name="TListColumn.GetWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.GetWidth.Result">
        <short/>
      </element>

      <element name="TListColumn.WSCreateColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.WSDestroyColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.WSReadAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.SetVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetVisible.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetAutoSize.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetMinWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetMinWidth.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetMaxWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetMaxWidth.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetWidth.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetCaption.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetAlignment.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetImageIndex.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetSortIndicator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetSortIndicator.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetIndex">
        <short>Sets the value for the Index property.</short>
        <descr>
          <p>
            Calls the inherited  method to move the collection item to the position indicated in the property value. Calls the <var>ColumnMove</var> method in the widgetset class to reorder the column in the control.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
        </seealso>
      </element>
      <element name="TListColumn.SetIndex.AValue">
        <short>New value for the Index property.</short>
      </element>

      <element name="TListColumn.GetDisplayName">
        <short>Gets the value for the DisplayName property.</short>
        <descr>
          <p>
            <var>GetDisplayName</var> returns the <var>Caption</var> for the control, and when  blank, calls the inherited method to the property value.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
        </seealso>
      </element>
      <element name="TListColumn.GetDisplayName.Result">
        <short>Value for the DisplayName property.</short>
      </element>

      <element name="TListColumn.GetStoredWidth">
        <short>Gets the value for Width as included in LCL component streaming.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.GetStoredWidth.Result">
        <short>Returns the value in the Width property.</short>
      </element>

      <element name="TListColumn.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for TListColumn, and sets the default values for properties, including:
          </p>
          <ul>
            <li>Alignment</li>
            <li>Caption</li>
            <li>Width</li>
            <li>Visible</li>
            <li>MinWidth</li>
            <li>MaxWidth</li>
            <li>AutoSize</li>
            <li>Tag</li>
            <li>ImageIndex</li>
          </ul>
          <p>
            Create calls the inherited <var>Create</var> method to instantiate the class instance and assign the value in ACollection as the owner for the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="TListColumn.Create.ACollection">
        <short/>
      </element>

      <element name="TListColumn.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for <var>TListColumn</var>. When the collection allows updates, the update is suppressed for the column instance that is being destroyed. Calls the inherited method to clear the owner for the collection item and destroy the class instance. The columnDelete method in the widgetset class is called to remove the column.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
        </seealso>
      </element>

      <element name="TListColumn.Assign">
        <short>
          Copies properties from the specified persistent object to the current class instance.
        </short>
        <descr>
          <p>
            <var>Assign</var> is an overridden method used to implement object persistence for the <var>TListColumn</var> type. It copies property values from the persistent object in <var>ASource</var> into the current class instance. When ASource is derived from TListColumn, the following properties are copied:
          </p>
          <ul>
            <li>Alignment</li>
            <li>AutoSize</li>
            <li>Caption</li>
            <li>MaxWidth</li>
            <li>MinWidth</li>
            <li>Visible</li>
            <li>Width</li>
          </ul>
          <p>
            The Changed method is called to signal a change in the values for the collection item.
          </p>
          <p>
            If ASource is not derived from TListColumn, the inherited method is called using ASource as an argument. An EConvertError exception is raised if ASource has not been assigned (contains Nil).
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TListColumn.Assign.ASource">
        <short/>
      </element>

      <element name="TListColumn.WidthType">
        <short>Not used in LCL.</short>
        <descr>
          <p>
            WidthType is a read-only TWidth property. Provided for VCL code compatibility.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TListColumn.Alignment">
        <short>Sets the horizontal alignment for the Caption text.</short>
        <descr>
          <p>
            Left or right justified,  or centered.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TListColumn.AutoSize">
        <short>
          When other columns have fixed width, auto-calculate width of this column, to fill entire width.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.Caption">
        <short>Caption text for the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.ImageIndex">
        <short>Index of icon, inside ImageList object for columns of Listview.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.MaxWidth">
        <short>Maximal width for this column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.MinWidth">
        <short>Minimal width for this column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.Tag">
        <short>Int value, to store some info for this column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.Visible">
        <short>Indicates whether the column is visible on the associated list view control.</short>
        <descr>
          <p>
            <var>Visible</var> is a <var>Boolean</var> property which indicates if the column is visible on the list view control where it is defined.  The default value for the property is <b>True</b>.
          </p>
          <p>
            Changing the property value causes the item to updated in its collection, and any observers are notified of the change. The widgetset class instance is also notified when its handle has been allocated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TListColumn.Width">
        <short>Width for the column on a list view control.</short>
        <descr>
          <p>
            <var>Width</var> is an <var>Integer</var> property with the width for the column on a list view control. Width is used along with MaxWidth and MinWidth to control the amount of space needed or available for the column.
          </p>
          <p>
            The property value is read from and written to the widgetset class instance when its handle is allocated.
          </p>
          <p>
            The default value for the property is 50 (pixels). If the property is changed, the value is normalized to the range indicated by MinWidth and MaxWidth (when assigned). Default values are not assigned for the MinWidth and MaxWidth properties. The collection which owns the column instance is updated, and the list view and any observers are notified when the column is modified.
          </p>
          <p>
            Set AutoSize to <b>True</b> to automatically resize the column to its content and the available space on the associated list view control.
          </p>
        </descr>
        <seealso>
          <link id="TListColumn.AutoSize"/>
          <link id="TListColumn.MaxWidth"/>
          <link id="TListColumn.MinWidth"/>
        </seealso>
      </element>

      <element name="TListColumn.SortIndicator">
        <short>
          Specifies the sort indicator displayed for the column.
        </short>
        <descr>
          <p>
            Reflects the sort direction or order for the column on the associated list view control.
          </p>
        </descr>
        <seealso>
          <link id="TSortIndicator"/>
        </seealso>
      </element>

      <element name="TListColumns">
          A collection for TListColumn instances defined for a multi-column list view control.
          <short>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns.FOwner"/>
      <element name="TListColumns.FItemNeedsUpdate"/>
      <element name="TListColumns.FNeedsUpdate"/>

      <element name="TListColumns.GetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumns.GetItem.Result">
        <short/>
      </element>
      <element name="TListColumns.GetItem.AIndex">
        <short/>
      </element>

      <element name="TListColumns.WSCreateColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns.SetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumns.SetItem.AIndex">
        <short/>
      </element>
      <element name="TListColumns.SetItem.AValue">
        <short/>
      </element>

      <element name="TListColumns.DoFinalizeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns.GetOwner">
        <short>Gets the owner of the persistent object.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent"/>
        </seealso>
      </element>
      <element name="TListColumns.GetOwner.Result">
        <short>TPersistent object instance that owns the collection.</short>
      </element>

      <element name="TListColumns.Create">
        <short>
          <var>Create</var> - constructor for <var>TListColumns</var>: sets ownership then calls inherited <var>Create</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <element name="TListColumns.Create.TheOwner">
        <short/>
      </element>

      <element name="TListColumns.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TListColumns</var>: calls inherited destructor.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Destroy">TCollection.Destroy</link>
        </seealso>
      </element>

      <element name="TListColumns.Update">
        <short>
          <var>Update</var> checks if update is in fact required, then calls inherited method.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection">TCollection</link>
        </seealso>
      </element>

      <element name="TListColumns.Update.Item">
        <short/>
      </element>

      <element name="TListColumns.Add">
        <short>
          <var>Add</var> calls the inherited method, then adjusts state flags.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
        </seealso>
      </element>
      <element name="TListColumns.Add.Result">
        <short/>
      </element>

      <element name="TListColumns.Owner">
        <short>Owner of the collection instance.</short>
        <descr>
          <p>
            <var>Owner</var> is a read-only <var>TCustomListView</var> property which contains the control that is the owner of the column collection. Its value is set to the argument passed to the Create constructor.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView"/>
        </seealso>
      </element>

      <element name="TListColumns.Items">
        <short>Provides indexed access to the items in the column collection.</short>
        <descr>
          <p>
            <var>Items</var> is the default property for the collection, and the target for an enumerator used with the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection.Items">TCollection.Items</link>
        </seealso>
      </element>
      <element name="TListColumns.Items.AIndex">
        <short>Ordinal position for the indexed property value.</short>
      </element>

      <element name="TListColumns.Assign">
        <short>
          <var>Assign</var> checks that source is of correct type, then adds new columns and copies items from source into them; otherwise calls inherited <var>Assign</var> which probably raises an exception.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Assign">TCollection.Assign</link>
        </seealso>
      </element>
      <element name="TListColumns.Assign.Source">
        <short/>
      </element>

      <element name="TItemChange">
        <short>
          <var>TItemChange</var> - enumerated type for kind of change: in text, in image or in state.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TItemChange.ctText">
        <short/>
      </element>
      <element name="TItemChange.ctImage">
        <short/>
      </element>
      <element name="TItemChange.ctState">
        <short/>
      </element>

      <element name="TViewStyle">
        <short>
          Represents the view styles available for the items in a list view control.
        </short>
        <descr>
          <p>
            <var>TViewStyle</var> is an enumerated type with values representing the view styles available for the items in a List View control. TViewStyle is the type used for the <var>ViewStyle</var> property in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ViewStyle"/>
        </seealso>
      </element>
      <element name="TViewStyle.vsIcon">
        <short>
          Displays a large icon and the caption for each list view item.  The icon is centered above the caption text.
        </short>
      </element>
      <element name="TViewStyle.vsSmallIcon">
        <short>
          Displays a small icon and caption text for each list view item. Caption text on the right-hand side of the icon.
        </short>
      </element>
      <element name="TViewStyle.vsList">
        <short>
          Displays a small icon with caption text to its right-hand side. The list items are arranged in columns.
        </short>
      </element>
      <element name="TViewStyle.vsReport">
        <short>
          Displays a each list item as a series of columns with a small icon on the left-hand side of the row. Each columns has a header at the top of the list view control.
        </short>
      </element>

      <element name="TItemFind">
        <short>
          Represents a search mechanism used to locate the data for a list view item.
        </short>
        <descr>
          <p>
            <var>TItemFind</var> is the type passed as an argument to <var>TLVDataFindEvent</var> and used to implement the <var>OnDataFind</var> event handler in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OnDataFind"/>
          <link id="TLVDataFindEvent"/>
        </seealso>
      </element>
      <element name="TItemFind.ifData">
        <short>Not used in the current implementation.</short>
      </element>
      <element name="TItemFind.ifPartialString">
        <short>Not used in the current implementation.</short>
      </element>
      <element name="TItemFind.ifExactString">
        <short>Not used in the current implementation.</short>
      </element>
      <element name="TItemFind.ifNearest">
        <short>Not used in the current implementation.</short>
      </element>

      <element name="TSearchDirection">
        <short>
          Represents search direction used to locate the list view item nearest to given  coordinates.
        </short>
        <descr>
          <p>
            Values from TSearchDirection are passed as an argument to the GetNearestItem method in TCustomListView.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.GetNearestItem"/>
        </seealso>
      </element>
      <element name="TSearchDirection.sdLeft">
        <short>Searches to the left of the specified list view coordinates.</short>
      </element>
      <element name="TSearchDirection.sdRight">
        <short>Searches to the right of the specified list view coordinates.</short>
      </element>
      <element name="TSearchDirection.sdAbove">
        <short>Searches above the specified list view coordinates.</short>
      </element>
      <element name="TSearchDirection.sdBelow">
        <short>Searches below the specified list view coordinates.</short>
      </element>
      <element name="TSearchDirection.sdAll">
        <short>
          Searches in all directions for the list view closest to the given coordinates.
        </short>
      </element>

      <element name="TLVChangeEvent">
        <short>
          Event handler signalled when a property value for a list view item is changed.
        </short>
        <descr>
          <p>
            <var>TLVChangeEvent</var> is an object procedure which specifies an event handler signalled when a property value for a list view item is changed. Arguments passed to the method identify the list view control, the list view item, and the specific property for the event notification.
          </p>
          <p>
            TLVChangeEvent is the type used for the <var>OnChange</var> property in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TItemChange"/>
          <link id="TCustomListView.OnChange"/>
        </seealso>
      </element>
      <element name="TLVChangeEvent.Sender">
        <short>Object instance (TCustomListView) for the notification.</short>
      </element>
      <element name="TLVChangeEvent.Item">
        <short>List item for the notification.</short>
        </element>
      <element name="TLVChangeEvent.Change">
        <short>Indicates the property value that was changed in Item.</short>
      </element>

      <element name="TLVDataFindEvent">
        <short>Not used in the current LCL implementation.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDataFindEvent.Sender">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFind">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFindString">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFindPosition">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFindData">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AStartIndex">
        <short/>
      </element>
      <element name="TLVDataFindEvent.ADirection">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AWrap">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AIndex">
        <short/>
      </element>

      <element name="TLVDataHintEvent">
        <short>Not used in the current LCL implementation.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDataHintEvent.Sender">
        <short/>
      </element>
      <element name="TLVDataHintEvent.StartIndex">
        <short/>
      </element>
      <element name="TLVDataHintEvent.EndIndex">
        <short/>
      </element>

      <element name="TLVDataStateChangeEvent">
        <short>Not used in the current LCL implementation.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDataStateChangeEvent.Sender">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.StartIndex">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.EndIndex">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.OldState">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.NewState">
        <short/>
      </element>

      <element name="TLVColumnClickEvent">
        <short>
          <var>TLVColumnClickEvent</var> - generic event handler method for a click on a List View column.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVColumnClickEvent.Sender">
        <short/>
      </element>
      <element name="TLVColumnClickEvent.Column">
        <short/>
      </element>

      <element name="TLVColumnRClickEvent">
        <short>
          <var>TLVColumnRClickEvent</var> - generic event handler method for a right click on a List View column.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVColumnRClickEvent.Sender">
        <short/>
      </element>
      <element name="TLVColumnRClickEvent.Column">
        <short/>
      </element>
      <element name="TLVColumnRClickEvent.Point">
        <short/>
      </element>

      <element name="TLVCompare">
        <short>
          Specifies a routine used to compare the values in two items in a list view control.
        </short>
        <descr>
          <p>
            <var>TLVCompare</var> is a routine used to determine the relative sort order for the list items passed in the Item1 and Item2, and allows an  optional Integer parameter value used in the comparison. The return value  is the relative sort order for the <var>TListItem</var> instances. For example:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>Item1 comes before Item2 in the sort order.</dd>
            <dt>0</dt>
            <dd>
              Item1 and Item2 have the same sort order value.
            </dd>
            <dt>1</dt>
            <dd>
              Item1 comes after Item2 in the sort order.
            </dd>
          </dl>
          <p>
            A TLVCompare type is passed as an argument to the <var>CustomSort</var> method in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.CustomSort"/>
          <link id="TListItem"/>
          <link id="TLVCompareEvent"/>
        </seealso>
      </element>
      <element name="TLVCompare.Result">
        <short>Relative sort order for the specified list items.</short>
      </element>
      <element name="TLVCompare.Item1">
        <short>First list item for the comparison.</short>
      </element>
      <element name="TLVCompare.Item2">
        <short>Second list item for the comparison.</short>
      </element>
      <element name="TLVCompare.AOptionalParam">
        <short>Pointer to an optional Integer value used in the comparison.</short>
      </element>

      <element name="TLVCompareEvent">
        <short>
          <var>TLVCompareEvent</var> - generic event handler method for List View comparison.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCompareEvent.Sender">
        <short/>
      </element>
      <element name="TLVCompareEvent.Item1">
        <short/>
      </element>
      <element name="TLVCompareEvent.Item2">
        <short/>
      </element>
      <element name="TLVCompareEvent.Data">
        <short/>
      </element>
      <element name="TLVCompareEvent.Compare">
        <short/>
      </element>

      <element name="TLVDeletedEvent">
        <short>
          <var>TLVDeletedEvent</var> - generic event handler method for deleted items in List View.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDeletedEvent.Sender">
        <short/>
      </element>
      <element name="TLVDeletedEvent.Item">
        <short/>
      </element>

      <element name="TLVEditingEvent">
        <short>
          Specifies an event handler signalled when an edit action is started for an item in a list view control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVEditingEvent.Sender">
        <short/>
      </element>
      <element name="TLVEditingEvent.Item">
        <short/>
      </element>
      <element name="TLVEditingEvent.AllowEdit">
        <short/>
      </element>

      <element name="TLVEditedEvent">
        <short>
          Specifies an event handler signalled when an edit action is completed for an item in a list view control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVEditedEvent.Sender">
        <short/>
      </element>
      <element name="TLVEditedEvent.Item">
        <short/>
      </element>
      <element name="TLVEditedEvent.AValue">
        <short/>
      </element>

      <element name="TLVInsertEvent">
        <short>
          <var>TLVInsertEvent</var> - generic event handler method for List View insertion.
        </short>
        <descr/>
        <seealso>
          <link id="TLVDeletedEvent"/>
        </seealso>
      </element>

      <element name="TLVDataEvent">
        <short>Alias to the TLVDeletedEvent type.</short>
        <descr/>
        <seealso>
          <link id="TLVDeletedEvent"/>
        </seealso>
      </element>

      <element name="TLVCheckedItemEvent">
        <short>
          Specifies an event handler signalled when the checked state for an item in a list view control has been changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCheckedItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVCheckedItemEvent.Item">
        <short/>
      </element>

      <element name="TLVSelectItemEvent">
        <short>
          <var>TLVSelectItemEvent</var> - generic event handler method for List View selection.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVSelectItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVSelectItemEvent.Item">
        <short/>
      </element>
      <element name="TLVSelectItemEvent.Selected">
        <short/>
      </element>

      <element name="TLVCustomDrawEvent">
        <short>
          <var>TLVCustomDrawEvent</var> - generic event handler method for List View custom drawing.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TLVCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TLVCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVCustomDrawItemEvent">
        <short>
          <var>TLVCustomDrawItemEvent</var> - generic event handling method for List View item drawing.
        </short>
      </element>
      <element name="TLVCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVCustomDrawItemEvent.Item">
        <short/>
      </element>
      <element name="TLVCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TLVCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVCustomDrawSubItemEvent">
        <short>
          <var>TLVCustomDrawSubItemEvent</var> - generic event handling method for List View subitem drawing.
        </short>
      </element>
      <element name="TLVCustomDrawSubItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.Item">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.SubItem">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.State">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVDrawItemEvent">
        <short>
          Specifies an event handler signalled to draw an item in a list view control.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomListView.OnDrawItem"/>
        </seealso>
      </element>
      <element name="TLVDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVDrawItemEvent.AItem">
        <short/>
      </element>
      <element name="TLVDrawItemEvent.ARect">
        <short/>
      </element>
      <element name="TLVDrawItemEvent.AState">
        <short/>
      </element>

      <element name="TLVAdvancedCustomDrawEvent">
        <short>
          <var>TLVAdvancedCustomDrawEvent</var> - generic event handling method for List View custom drawing.
        </short>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.Stage">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVAdvancedCustomDrawItemEvent">
        <short>
          Specifies an event handler signalled to perform advanced custom drawing for a list view item with stage and state information.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.Item">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.Stage">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVAdvancedCustomDrawSubItemEvent">
        <short>
          <var>TLVAdvancedCustomDrawSubItemEvent</var> - generic event handling method for List View custom subitem drawing.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.Item">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.SubItem">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.State">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.Stage">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVCreateItemClassEvent">
        <short>
          Specifies an event handler signalled to get the class type needed to create a new list view item.
        </short>
        <descr>
          <p>
            Arguments to the object procedure identify the list view control (<var>Sender</var>)  and the class type (<var>ItemClass</var>) used to create new list view items. ItemClass is a variable parameter which is updated in the event handler with the TListItemClass class reference needed for the list view control.
          </p>
          <p>
            <var>TLVCreateItemClassEvent</var> is the type used for the <var>OnCreateItemClass</var> property in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OnCreateItemClass"/>
          <link id="TCustomListView.CreateListItem"/>
          <link id="TListItemClass"/>
        </seealso>
      </element>
      <element name="TLVCreateItemClassEvent.Sender">
        <short>Object (TCustomListView) for the event notification.</short>
      </element>
      <element name="TLVCreateItemClassEvent.ItemClass">
        <short>Class for the new list view item.</short>
      </element>

      <element name="TListViewProperty">
        <short>
          Represents Boolean properties used in TCustomListView.
        </short>
        <descr>
          <p>
            <var>TListViewProperty</var> is an enumerated type with values representing  Boolean properties used in TCustomListView.
          </p>
          <p>
            Values from the enumeration are included in or excluded from the <var>TListViewProperties</var> set type. When a value is included in the set, the corresponding Boolean property has been set to <b>True</b>. When a value is excluded from the set, the corresponding Boolean property has been set to <var>False</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TListViewProperty.lvpAutoArrange">
        <short>Represents the AutoArrange property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpCheckboxes">
        <short>Represents the CheckBoxes property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpColumnClick">
        <short>Represents the ColumnClick property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpFlatScrollBars">
        <short>Represents the FlatScrollBars property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpFullDrag">
        <short>Represents the FullDrag property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpGridLines">
        <short>Represents the GridLines property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpHideSelection">
        <short>Represents the HideSelection property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpHotTrack">
        <short>Represents the HotTrack property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpMultiSelect">
        <short>Represents the MultiSelect property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpOwnerDraw">
        <short>Represents the OwnerDraw property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpReadOnly">
        <short>Represents the ReadOnly property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpRowSelect">
        <short>Represents the RowSelect property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpShowColumnHeaders">
        <short>Represents the ShowColumnHeaders property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpShowWorkAreas">
        <short>Represents the ShowWorkAreas property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpWrapText">
        <short>Represents the WrapText property in TCustomListView.</short>
      </element>
      <element name="TListViewProperty.lvpToolTips">
        <short>Represents the ToolTips property in TCustomListView.</short>
      </element>

      <element name="TListViewProperties">
        <short>
          Set type used to store values from the TListViewProperty enumeration.
        </short>
        <descr>
          <p>
            <var>TListViewProperties</var> is a set type used to store zero or more values from the <var>TListViewProperty</var> enumeration.
          </p>
          <p>
            The set represents Boolean property values found in TCustomListView / TListView. When a value is included in the set, the corresponding property in TCustomListView has been set to True. The value is excluded from the set when the corresponding property in TCustomListView is set to False.
          </p>
          <p>
            TListViewProperties is the type used to implement the internal FProperties member in TCustomListView.
          </p>
        </descr>
        <seealso>
          <link id="TListViewProperty"/>
          <link id="TCustomListView"/>
        </seealso>
      </element>

      <element name="TListViewImageList">
        <short>
          Represents the image list sizes used in TCustomListView.
        </short>
        <descr>
          <p>
            <var>TListViewImageList</var> is an enumeration type with values that represent image list sizes used in TCustomListView.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TListViewImageList.lvilSmall">
        <short>Represents the SmallImages property in TCustomListView.</short>
      </element>
      <element name="TListViewImageList.lvilLarge">
        <short>Represents the LargeImages property in TCustomListView.</short>
      </element>
      <element name="TListViewImageList.lvilState">
        <short>Represents the StateImages property in TCustomListView.</short>
      </element>

      <element name="TListHotTrackStyle">
        <short>
          Represents cursor shapes displayed during hot tracking in a control.
        </short>
        <descr>
          <p>
            <var>TListHotTrackStyle</var> is an enumerated type with values for cursor shapes displayed for the "hot tracking" state in a TCustomListView control. Hot tracking occurs when the mouse pointer hovers over an item in a control, and it is highlighted (aka hot-lighted). Values from TListHotTrackStyle are stored in the TListHotTrackStyles set type used for the TCustomListView.HotTrackStyles property.
          </p>
        </descr>
        <seealso>
          <link id="TListHotTrackStyles"/>
          <link id="TCustomListView.HotTrackStyles"/>
        </seealso>
      </element>
      <element name="TListHotTrackStyle.htHandPoint">
        <short>For current ListView item, show the HandPoint mouse cursor.</short>
      </element>
      <element name="TListHotTrackStyle.htUnderlineCold">
        <short>For current ListView item, show the pale underline.</short>
      </element>
      <element name="TListHotTrackStyle.htUnderlineHot">
        <short>For current ListView item, show the bold underline.</short>
      </element>

      <element name="TListHotTrackStyles">
        <short>
          Set type used to store values from <var>TListHotTrackStyle</var>.
        </short>
        <descr>
          <p>
            <var>TListHotTrackStyles</var> is a set type used to store zero or more values from the <var>TListHotTrackStyle</var> enumeration. TListHotTrackStyles is the type used to implement the <var>TCustomListView.HotTrackStyles</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TListHotTrackStyle"/>
          <link id="TCustomListView.HotTrackStyles"/>
        </seealso>
      </element>

      <element name="TListViewFlag">
        <short>
          Represents flag values used in TCustomListView when sorting or validating items in the control.
        </short>
      </element>
      <element name="TListViewFlag.lffSelectedValid">
        <short>The value in the Selected property is valid.</short>
      </element>
      <element name="TListViewFlag.lffItemsMoving">
        <short>Items in the control are being moved.</short>
      </element>
      <element name="TListViewFlag.lffItemsSorting">
        <short>Items in the control are being sorted.</short>
      </element>
      <element name="TListViewFlag.lffPreparingSorting">
        <short>Sort parameters are being prepared.</short>
      </element>

      <element name="TListViewFlags">
        <short>
          Set type used to store values from the TListViewFlag enumeration.
        </short>
        <descr>
          <p>
            <var>TListViewFlags</var> is the type used to implement the internal flags for the <var>TCustomListView</var> control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView"/>
        </seealso>
      </element>

      <element name="TSortDirection">
        <short>Represents the sort directions used for items in a list view control.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.SortDirection"/>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.Sort"/>
          <link id="TCustomListView.AlphaSort"/>
          <link id="TCustomListView.CustomSort"/>
        </seealso>
      </element>
      <element name="TSortDirection.sdAscending">
        <short>Sorts list items in ascending order.</short>
      </element>
      <element name="TSortDirection.sdDescending">
        <short>Sorts list items in descending order.</short>
      </element>

      <element name="TCustomListViewEditor">
        <short>Provides multi-platform editing capabilities for a list view control.</short>
        <descr>
          <p>
            Used to provide multi-platform editing capabilities for <var>TCustomListView</var>. It implements the internal editor control in TCustomListView.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Edit"/>
        </seealso>
      </element>

      <element name="TCustomListViewEditor.FItem"/>

      <element name="TCustomListViewEditor.ListViewEditorKeyDown">
        <short>Implements the OnKeyDown event handler for the editor control.</short>
        <descr>
          <p>
            Ensures that the VK_ESCAPE and VK_RETURN virtual key codes are handled for the editor. VK_ESCAPE causes the editor to be hidden, and focused is returned to the parent control. VK_RETURN does not hide the editor, but focus is returned to the parent control. In both cases, Key is set to 0 to indicate that the key was handled in the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListViewEditor.Create"/>
          <link id="#lcl.controls.TWinControl.OnKeyDown">TWinControl.OnKeyDown</link>
        </seealso>
      </element>
      <element name="TCustomListViewEditor.ListViewEditorKeyDown.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TCustomListViewEditor.ListViewEditorKeyDown.Key">
        <short>Virtual key code examined in the method.</short>
      </element>
      <element name="TCustomListViewEditor.ListViewEditorKeyDown.Shift">
        <short>Shift / Ctrl / Alt modifier for the key code.</short>
      </element>

      <element name="TCustomListViewEditor.DoExit">
        <short>Performs actions needed when the editor loses focus.</short>
        <descr>
          <p>
            Calls the HideEditor method in the parent control (TCustomListView).
            Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TCustomEdit.DoExit"/>
        </seealso>
      </element>

      <element name="TCustomListViewEditor.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          Create is the overridden constructor for the class instance, and calls the inherited method on entry.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListViewEditor.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomListViewEditor.Item">
        <short>List item updated in the editor control.</short>
        <descr>
          <p>
            <var>Item</var> is a <var>TListItem</var> property with the list item updated in the editor control. The value in Item is assigned in the ShowEditor method in the parent control (TCustomListView). Item is set to <b>Nil</b> when the editor control is hidden.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListViewEditor.DoExit"/>
          <link id="TListItem"/>
        </seealso>
      </element>

      <element name="TCustomListView">
        <short>
          <var>TCustomListView</var> is the base class for <var>TListView</var>.
        </short>
        <descr>
          <p>
            <var>TCustomListView</var> is the base class for <var>TListView</var>. It provides a multi-platform implementation of the List View control from the Windows API. TCustomListView allows a collection of items to be displayed using different view styles. For instance:
          </p>
          <dl>
            <dt>Icon View</dt>
            <dd>Each list item has an large icon with a caption.</dd>
            <dt>Small Icon View</dt>
            <dd>Each list item has a small icon with a caption.</dd>
            <dt>List View</dt>
            <dd>
              Each list item has a small icon with a caption, and is displayed in a single column in the control.
            </dd>
            <dt>Report View</dt>
            <dd>
              Each list item is displayed on a single line, with sub-items displayed as additional columns. The first column has a small icon and a caption. Other columns contain the text for the sub-items.
            </dd>
          </dl>
          <remark>
            TCustomListView does <b>not</b> implement some features available for Windows version 6 or higher, including: the Tile View style, List View Item Grouping, and List View Work Areas.
          </remark>
        </descr>
      </element>

      <element name="TCustomListView.FEditor"/>
      <element name="TCustomListView.FAllocBy"/>
      <element name="TCustomListView.FAutoSort"/>
      <element name="TCustomListView.FAutoSortIndicator"/>
      <element name="TCustomListView.FAutoWidthLastColumn"/>
      <element name="TCustomListView.FCanvas"/>
      <element name="TCustomListView.FDefaultItemHeight"/>
      <element name="TCustomListView.FHotTrackStyles"/>
      <element name="TCustomListView.FIconOptions"/>
      <element name="TCustomListView.FOnEdited"/>
      <element name="TCustomListView.FOnEditing"/>
      <element name="TCustomListView.FOwnerData"/>
      <element name="TCustomListView.FOwnerDataItem"/>
      <element name="TCustomListView.FListItems"/>
      <element name="TCustomListView.FColumns"/>
      <element name="TCustomListView.FImages"/>
      <element name="TCustomListView.FImagesWidth"/>
      <element name="TCustomListView.FImageChangeLink"/>
      <element name="TCustomListView.FFlags"/>
      <element name="TCustomListView.FShowEditorQueued"/>
      <element name="TCustomListView.FSortDirection"/>
      <element name="TCustomListView.FViewStyle"/>
      <element name="TCustomListView.FSortType"/>
      <element name="TCustomListView.FSortColumn"/>
      <element name="TCustomListView.FCustomSort_Func"/>
      <element name="TCustomListView.FCustomSort_Param"/>
      <element name="TCustomListView.FScrollBars"/>
      <element name="TCustomListView.FViewOriginCache"/>
      <element name="TCustomListView.FSelected"/>
      <element name="TCustomListView.FFocused"/>
      <element name="TCustomListView.FSelectedIdx"/>
      <element name="TCustomListView.FHoverTime"/>
      <element name="TCustomListView.FUpdateCount"/>
      <element name="TCustomListView.FOnChange"/>
      <element name="TCustomListView.FOnColumnClick"/>
      <element name="TCustomListView.FOnCompare"/>
      <element name="TCustomListView.FOnData"/>
      <element name="TCustomListView.FOnDataFind"/>
      <element name="TCustomListView.FOnDataHint"/>
      <element name="TCustomListView.FOnDataStateChange"/>
      <element name="TCustomListView.FOnDeletion"/>
      <element name="TCustomListView.FOnInsert"/>
      <element name="TCustomListView.FOnItemChecked"/>
      <element name="TCustomListView.FOnSelectItem"/>
      <element name="TCustomListView.FOnCustomDraw"/>
      <element name="TCustomListView.FOnCustomDrawItem"/>
      <element name="TCustomListView.FOnCustomDrawSubItem"/>
      <element name="TCustomListView.FOnAdvancedCustomDraw"/>
      <element name="TCustomListView.FOnAdvancedCustomDrawItem"/>
      <element name="TCustomListView.FOnAdvancedCustomDrawSubItem"/>
      <element name="TCustomListView.FProperties"/>

      <element name="TCustomListView.GetBoundingRect">
        <short>Gets the value for the BoundingRect property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.tBoundingRect"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetBoundingRect.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetColumnCount">
        <short>Gets the value for the ColumnCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ColumnCount"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetColumnCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetColumnFromIndex">
        <short>Gets the value for the indexed Column property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.Column"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetColumnFromIndex.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TCustomListView.GetColumnFromIndex.AIndex">
        <short>Ordinal position for the indexed property value.</short>
      </element>

      <element name="TCustomListView.GetDropTarget">
        <short>Gets the value for the DropTarget property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.DropTarget"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetDropTarget.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetFocused">
        <short>Gets the value for the ItemFocused property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ItemFocused"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetFocused.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetImageList">
        <short>Gets the value for the indexed LargeImages property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.LargeImages"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetImageList.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TCustomListView.GetImageList.ALvilOrd">
        <short>Ordinal position for the indexed property value.</short>
      </element>

      <element name="TCustomListView.GetHoverTime">
        <short>Gets the value for the HoverTime property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.HoverTime"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetHoverTime.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetItemIndex">
        <short>Gets the value for the ItemIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ItemIndex"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetItemIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetProperty">
        <short>
          Determines if the specified Boolean property has been set in the control.
        </short>
        <descr>
          <p>
            <var>GetProperty</var> is a <var>Boolean</var> method used to determine if the specified property value has been set to <b>True</b> in the control.
          </p>
          <p>
            <var>ALvpOrd</var> contains a value from the <var>TListViewProperty</var> enumeration which identifies the property value accessed in the method. The return value is <b>True</b> when ALvpOrd has been included in the internal <var>TListViewProperties</var> set.
          </p>
          <p>
            This technique allows multiple Boolean properties to be represented using a single set type member variable. It avoids allocating a Boolean member for each of the property values.
          </p>
          <p>
            GetProperty is used as the read access specifier for several properties in <var>TCustomListView</var>, including:
          </p>
          <ul>
            <li>ColumnClick</li>
            <li>HideSelection</li>
            <li>OwnerDraw</li>
            <li>ShowColumnHeaders</li>
            <li>ShowWorkAreas</li>
            <li>ToolTips</li>
            <li>CheckBoxes</li>
            <li>FlatScrollBars</li>
            <li>FullDrag</li>
            <li>GridLines</li>
            <li>HotTrack</li>
            <li>MultiSelect</li>
            <li>ReadOnly</li>
            <li>RowSelect</li>
          </ul>
          <p>
            See <var>SetProperty</var> for the write access specifier equivalent.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.SetProperty"/>
          <link id="TListViewProperty"/>
          <link id="TListViewProperties"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetProperty.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TCustomListView.GetProperty.ALvpOrd">
        <short>Ordinal TListViewProperty value used to access the property value.</short>
      </element>

      <element name="TCustomListView.GetSelCount">
        <short>Gets the value for the SelCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.SelCount"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetSelCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetSelection">
        <short>Gets the value for the Selected property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.Selected"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetSelection.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetTopItem">
        <short>Gets the value for the TopItem property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.TopItem"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetTopItem.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetViewOrigin">
        <short>Gets the value for the ViewOrigin property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ViewOrigin"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetViewOrigin.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.GetVisibleRowCount">
        <short>Gets the value for the VisibleRowCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.VisibleRowCount"/>
        </seealso>
      </element>
      <element name="TCustomListView.GetVisibleRowCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomListView.ResizeLastColumn">
        <short>Makes the last visible column fill the remaining width in the control.</short>
        <descr>
          <p>
            <var>ResizeLastColumn</var> is a method used to make the last visible column fill the remaining unused width for the control.
          </p>
          <p>
            ResizeLastColumn is relevant when <var>ViewStyle</var> is set to <var>vsList</var> or <var>vsReport</var>, and <var>ColumnCount</var> is not set to 0 (zero). No actions are performed in the method if both conditions are not met.
          </p>
          <p>
            ResizeLastColumn examines the values in <var>Columns</var> (in reverse order) to find the last <var>TListColumn</var> instance with its <var>Visible</var> property set to <b>True</b>. The accumulated width for the preceding visible columns (and borders) is calculated. The difference between ClientWidth and the accumulated width is used for the last column when it is a positive non-zero value.
          </p>
          <p>
            The column affected in the method has its <var>AutoSize</var>, <var>MinWidth</var>, and <var>MaxWidth</var> properties reset before applying the new <var>Width</var>.
          </p>
          <p>
            ResizeLastColumn is used when <var>AutoWidthLastColumn</var> is set to <b>True</b>. The method is called when the bounds for the control have been changed, or when the value in AutoWidthLastColumn has been changed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.AutoWidthLastColumn"/>
          <link id="TCustomListView.Columns"/>
          <link id="TCustomListView.ColumnCount"/>
          <link id="TCustomListView.ViewStyle"/>
          <link id="TListColumn.AutoSize"/>
          <link id="TListColumn.MaxWidth"/>
          <link id="TListColumn.MinWidth"/>
          <link id="TListColumn.Width"/>
          <link id="TListColumn.Visible"/>
        </seealso>
      </element>

      <element name="TCustomListView.SetAllocBy">
        <short>Sets the value for the AllocBy property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.AllocBy"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetAllocBy.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetAutoWidthLastColumn">
        <short>Sets the value for the AutoWidthLastColumn property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.AutoWidthLastColumn"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetAutoWidthLastColumn.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetColumns">
        <short>Sets the value for the Columns property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.Columns"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetColumns.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetDefaultItemHeight">
        <short>Sets the value for the DefaultItemHeight property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.DefaultItemHeight"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetDefaultItemHeight.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetDropTarget">
        <short>Sets the value for the DropTarget property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.DropTarget"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetDropTarget.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetFocused">
        <short>Sets the value for the ItemFocused property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ItemFocused"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetFocused.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetHotTrackStyles">
        <short>Sets the value for the HotTrackStyles property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.HotTrackStyles"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetHotTrackStyles.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetHoverTime">
        <short>Sets the value for the HoverTime property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.HoverTime"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetHoverTime.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetIconOptions">
        <short>Sets the value for the IconOptions property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.IconOptions"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetIconOptions.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetImageList">
        <short>
          Sets the value for properties like LargeImages, SmallImages, and StateImages.
        </short>
        <descr>
          <p>
            <var>SetImageList</var> is the write access specifier for properties including <var>LargeImages</var>, <var>SmallImages</var>, and <var>StateImages</var>. The value in <var>ALvilOrd</var> indicates which image list is updated in the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.LargeImages"/>
          <link id="TCustomListView.SmallImages"/>
          <link id="TCustomListView.StateImages"/>
          <link id="TCustomListView.GetImageList"/>
          <link id="TListViewImageList"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetImageList.ALvilOrd">
        <short>
          TListViewImageList value which identifies the image list updated in the method.
        </short>
      </element>
      <element name="TCustomListView.SetImageList.AValue">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TCustomListView.SetImageListWidth">
        <short>Sets the value for the LargeImagesWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.LargerImagesWidth"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetImageListWidth.ALvilOrd">
        <short>Identifier for the image list affected in the method.</short>
      </element>
      <element name="TCustomListView.SetImageListWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetImageListWS">
        <short>
          Notifies the widgetset class when an image list for the control has been changed.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomListView.SetImageList"/>
          <link id="TCustomListView.LargeImages"/>
          <link id="TCustomListView.SmallImages"/>
          <link id="TCustomListView.StateImages"/>
          <link id="TCustomListView.DoAutoAdjustLayout"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetImageListWS.ALvil">
        <short>Identifies the image list updated in the method.</short>
      </element>

      <element name="TCustomListView.SetItemIndex">
        <short>Sets the value for the ItemIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ItemIndex"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetItemIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetItems">
        <short>Sets the value for the Items property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.Items"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetItems.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetItemVisible">
        <short>
          Notifies the widgetset class when the visibility for a list item has been changed.
        </short>
        <descr>
          <p>
            Calls the ItemShow method in the widgetset class.
          </p>
          <p>
            No actions are performed in the method during LCL component streaming, or when the Handle has not been allocated for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.SetItemVisible.AValue">
        <short>List item with the changed visibility.</short>
      </element>
      <element name="TCustomListView.SetItemVisible.APartialOK">
        <short>
          True when the list item can be partially visible in the control; False requires the item to be fully visible to be displayed.
        </short>
      </element>

      <element name="TCustomListView.SetOwnerData">
        <short>Sets the value for the OwnerData property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.OwnerData"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetOwnerData.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetProperty">
        <short>Sets the value for the specified Boolean property.</short>
        <descr>
          <p>
            <var>SetProperty</var> is a method used to set the Boolean value for the property represented by the value in <var>ALvpOrd</var>.
          </p>
          <p>
            <var>ALvpOrd</var> contains a value from the <var>TListViewProperty</var> enumeration which identifies the property updated in the method.  <var>AIsSet</var> contains the new Boolean value for the property.
          </p>
          <p>
            SetProperty is used as the write access specifier for several properties in <var>TCustomListView</var>, including:
          </p>
          <ul>
            <li>ColumnClick</li>
            <li>HideSelection</li>
            <li>OwnerDraw</li>
            <li>ShowColumnHeaders</li>
            <li>ShowWorkAreas</li>
            <li>ToolTips</li>
            <li>CheckBoxes</li>
            <li>FlatScrollBars</li>
            <li>FullDrag</li>
            <li>GridLines</li>
            <li>HotTrack</li>
            <li>MultiSelect</li>
            <li>ReadOnly</li>
            <li>RowSelect</li>
          </ul>
          <p>
            This technique allows multiple Boolean properties to be represented using a single set type member variable. It avoids allocating a Boolean member for each of the property values.
          </p>
          <p>
            See <var>GetProperty</var> for the read access specifier equivalent.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.GetProperty"/>
          <link id="TListViewProperty"/>
          <link id="TListViewProperties"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetProperty.ALvpOrd">
        <short>Identifies the property updated in the method.</short>
      </element>
      <element name="TCustomListView.SetProperty.AIsSet">
        <short>Value for the specified property.</short>
      </element>

      <element name="TCustomListView.SetScrollBars">
        <short>Sets the value in the ScrollBars property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ScrollBars"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetScrollBars.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetSelection">
        <short>Sets the value in the Selected property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.Selected"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetSelection.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetShowEditorQueued">
        <short>Sets the value for the ShowEditorQueued property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetShowEditorQueued.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetSortColumn">
        <short>Sets the value for the SortColumn property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.SortColumn"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetSortColumn.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetSortDirection">
        <short>Sets the value for the SortDirection property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.SortDirection"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetSortDirection.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetSortType">
        <short>Sets the value for the SortType property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.SortType"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetSortType.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetViewOrigin">
        <short>Sets the value for the ViewOrigin property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ViewOrigin"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetViewOrigin.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.SetViewStyle">
        <short>Sets the value for the ViewStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomListView.ViewStyle"/>
        </seealso>
      </element>
      <element name="TCustomListView.SetViewStyle.Avalue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomListView.QueuedShowEditor">
        <short>Performs an asynchronous display of the editor for the control.</short>
        <descr>
          <p>
            Toggles the Boolean value in the ShowEditorQueued property, and calls the ShowEditor method.
          </p>
          <p>
            QueuedShowEditor is called when the ShowEditorQueued property is set to True.
            Application.QueueAsyncCall is used to asynchronously execute the method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.QueuedShowEditor.Data">
        <short>Not used in the current implementation.</short>
      </element>

      <element name="TCustomListView.SortWithParams">
        <short/>
        <descr/>
        <seealso>
          <link id="TCustomListView.Sort"/>
          <link id="TCustomListView.SortType"/>
          <link id="TCustomListView.CustomSort"/>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.Items"/>
          <link id="TCustomListView.ItemIndex"/>
          <link id="TCustomListView.MultiSelect"/>
          <link id="TCustomListView.OnCompare"/>
          <link id="TListItems.Sort"/>
        </seealso>
      </element>
      <element name="TCustomListView.SortWithParams.ACompareFunc">
        <short/>
      </element>

      <element name="TCustomListView.UpdateScrollbars">
        <short>Not implemented in the current LCL version.</short>
        <descr>
          <p>
            Not implemented in the current LCL version. Updates to scrll bar visibility, position, or range are handled in the widgetset class.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.CNNotify">
        <short>Handles the CN_NOTIFY message for the control.</short>
        <descr>
          <p>
            <var>CNNotify</var> is a method used to handle control notification (CN_NOTIFY) messages received from the widgetset class for the control. The message in the <var>AMessage</var> argument contains additional information that tells the control the action to perform, and control-specific values for the action.
          </p>
          <p>
            For TCustomListView and TListView, the message may contain List View Notification codes like the following:
          </p>
          <dl>
            <dt>LVN_DELETEITEM</dt>
            <dd>Deletes a specific list item on the control.</dd>
            <dt>LVN_DELETEALLITEMS</dt>
            <dd>Deletes all list items on the control.</dd>
            <dt>LVN_COLUMNCLICK</dt>
            <dd>Handles a mouse click on a column header.</dd>
            <dt>LVN_ITEMCHANGED</dt>
            <dd>
              Updates the control when the focus, selection, or state values for a list item are  changed.
            </dd>
          </dl>
          <p>
            CNNotify updates property values and calls methods in the class instance as needed to respond to the notification message.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.CNNotify.AMessage">
        <short>Message examined in the method.</short>
      </element>

      <element name="TCustomListView.CNDrawItem">
        <short>Handles the CN_DRAWITEM control notification message for the control.</short>
        <descr>
          <p>
            <var>CNDrawItem</var> is a method used to handle the CN_DRAWITEM control notification message for the list view control. CNDrawItem uses the Canvas for the control to perform drawing operations needed to draw a list item or area on the control. No actions are performed in the method if the control Canvas has not been assigned.
          </p>
          <p>
            Message contains information about the list item or area drawn on the control, including:
          </p>
          <dl>
            <dt>DC</dt>
            <dd>The device context (handle) assigned to the control Canvas.</dd>
            <dt>ItemID</dt>
            <dd>
              Ordinal position in Items for the list item drawn in the method, or -1 when a given area on the control is filled.
            </dd>
            <dt>ItemState</dt>
            <dd>Drawing state for the list item.</dd>
            <dt>Area</dt>
            <dd>Rectangular area filled with the Brush for the control.</dd>
          </dl>
          <p>
            If the message contains a valid ItemID (not -1), the DrawItem method is called to draw the list item in the specified state. If the ItemID is -1, the FillRect method in Canvas is called to fill the specified Area using the Brush for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.CNDrawItem.Message">
        <short>Message examined in the method.</short>
      </element>

      <element name="TCustomListView.InvalidateSelected">
        <short>Clears the current selection for the control.</short>
        <descr>
          <p>
            <var>InvalidateSelected</var> is a method used to clear the current selection for the control. It sets the value in the Selected property to Nil, and resets the internal memeber used to track the selected item in OwnerData mode. It also updates the control flags to remove the value lffSelectedValid.
          </p>
          <p>
            InvalidateSelected is called when a list item is deleted which is the current value in Selected, or when all list items are deleted for the control. It is also called when a new value is assigned to Selected.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.ImageResolutionHandleDestroyed">
        <short>
          Implements the event handler signalled when the handle for an image list resolution is freed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.ImageResolutionHandleDestroyed.Sender">
        <short/>
      </element>
      <element name="TCustomListView.ImageResolutionHandleDestroyed.AWidth">
        <short/>
      </element>
      <element name="TCustomListView.ImageResolutionHandleDestroyed.AReferenceHandle">
        <short/>
      </element>

      <element name="TCustomListView.SetImageListAsync">
        <short>
          Performs an asynchronous notification when an image list in the control is changed.
        </short>
        <descr>
          <p>
            Calls SetImageListWS using the TListViewImageList value passed in the Data argument.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.SetImageListAsync.Data">
        <short>Identifies the image list updated in the control.</short>
      </element>

      <element name="TCustomListView.FOnCreateItemClass"/>
      <element name="TCustomListView.FOnDrawItem"/>

      <element name="TCustomListView.HideEditor">
        <short>Hides the editor control for the list view.</short>
        <descr>
          <p>
            <var>HideEditor</var> is a method used to hide the <var>TCustomListViewEditor</var> instance used as the editor in the list view control.
          </p>
          <p>
            HideEditor applies the current text in the editor to the selected Item by calling <var>DoEndEdit</var>. The Visible property in the editor is set to <b>False</b>. Values in the editor are reset, including the reference to the list item and the bounds for the editor control.
          </p>
          <p>
            HideEditor is called when the list view control loses focus. It is also called when horizontal and vertical scroll messages are handled in the control, and when a column has been clicked.
          </p>
          <p>
            Use <var>ShowEditor</var> to configure and display the editor for the current item in the list view control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.DoEndEdit"/>
          <link id="TCustomListView.DoExit"/>
          <link id="TCustomListView.ColClick"/>
          <link id="TCustomListView.WmHScroll"/>
          <link id="TCustomListView.WmVScroll"/>
          <link id="TCustomListViewEditor"/>
        </seealso>
      </element>

      <element name="TCustomListView.ShowEditor">
        <short>Displays the editor for the list view control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.WMHScroll">
        <short>Handles the LM_HSCROLL message for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.WMHScroll.Message">
        <short>Message examined in the method.</short>
      </element>

      <element name="TCustomListView.WMVScroll">
        <short>Handles the LM_VSCROLL message for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.WMVScroll.Message">
        <short>Message examined in the method.</short>
      </element>

      <element name="TCustomListView.ShowEditorQueued">
        <short>Indicates if ShowEditor has been called asynchronously for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ItemDeleted">
        <short>Called when the specified list item is removed from the list.</short>
        <descr>
          <p>
            <var>ItemDeleted</var> is a method called when the specified list item is removed from the Items for the control.
          </p>
          <p>
            ItemDeleted ensures that the list item in AItem is not referenced as a selected or focused item on the control. If AItem is the value in Selected, Selected is set to Nil and the control flags are updated to removed the valid selection flag (ffSelectedValid). If AItem is the focused list item on the control, the focus reference is set to Nil.
          </p>
          <p>
            ItemDeleted is called when the TListItem instance in AItem is freed from the container in Items. ItemDeleted calls DoDeletion to execute the Delete method in TCustomListView (when not overridden) or signal the OnDeletion event handler (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.ItemDeleted.AItem">
        <short>TListItem instance deleted from the Items for the control.</short>
      </element>

      <element name="TCustomListView.ItemInserted">
        <short>
          <var>ItemInserted</var> - the specified item is inserted into the list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.ItemInserted.AItem">
        <short/>
      </element>

      <element name="TCustomListView.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomListView.GetControlClassDefaultSize">
        <short>Gets the default size for new instances of the class.</short>
        <descr>
          <p>
            GetControlClassDefaultSize is an overridden TSize class function used to get the default size for new instances of the class type. In TCustomListView, the default dimensions are 250 pixels wide by 150 pixels high.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.GetControlClassDefaultSize.Result">
        <short>
          TSize instance with the default dimensions for a new instance of the class.
        </short>
      </element>

      <element name="TCustomListView.InitializeWnd">
        <short>
          <var>InitializeWnd</var> - calls inherited method, then sets various local properties.
        </short>
        <descr>
          <var>InitializeWnd</var> - calls inherited method, then sets style, adds columns, sets imagelists and item depending properties (scroll bars, sorting etc), adds items and sets other miscellaneous properties (default item height, hot track styles, hover time etc)
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
        </seealso>
      </element>

      <element name="TCustomListView.FinalizeWnd">
        <short>Frees the window handle and other resources for the control.</short>
        <descr>
          <var>FinalizeWnd</var> retrieves the cached origin for the list view and finalizes the items and columns for the control.
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.FinalizeWnd">TWinControl.FinalizeWnd</link>
        </seealso>
      </element>

      <element name="TCustomListView.DestroyWnd" link="#lcl.controls.TWinControl.DestroyWnd"/>
      <element name="TCustomListView.BeginAutoDrag" link="#lcl.controls.TControl.BeginAutoDrag"/>

      <element name="TCustomListView.CreateListItem">
        <short>
          Signals the OnCreateItemClass event handler to get the class type used for new list items, and creates a new list item.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CreateListItem.Result">
        <short>List item created in the method.</short>
      </element>

      <element name="TCustomListView.CreateListItems">
        <short>Creates a new TListItems instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CreateListItems.Result">
        <short>TListItems instance created in the method.</short>
      </element>

      <element name="TCustomListView.CanEdit">
        <short>Determines if the specified Item can be edited in the control.</short>
        <descr>
          <p>
            <var>CanEdit</var> is a <var>Boolean</var> function used to determine if the editor can be displayed and activated for the specified Item. The return value defaults to <b>True</b>.
          </p>
          <p>
            CanEdit signals the <var>OnEditing</var> event handler (when assigned), where the return value can be modified. Use values in <var>Item</var> or the list view control to determine the return value (including their respective ReadOnly properties).
          </p>
          <p>
            CanEdit is called from the <var>ShowEditor</var> method, and occurs before the Editor in the control is configured and displayed.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.CanEdit.Result">
        <short>True if the editor can be displayed and activated for the specified item.</short>
      </element>
      <element name="TCustomListView.CanEdit.Item">
        <short>List item to examine in the method.</short>
      </element>

      <element name="TCustomListView.Change">
        <short>
          <var>Change</var>  - Internal procedure to simulate the <var>OnChange</var> event.
        </short>
        <descr>
          <p>
            This is an internal procedure which is called after an item has been changed. It is a programmatic method for simulating the <var>OnChange</var> event if the programmer has assigned a method to this event.
          </p>
        </descr>
      </element>
      <element name="TCustomListView.Change.AItem">
        <short/>
      </element>
      <element name="TCustomListView.Change.AChange">
        <short/>
      </element>

      <element name="TCustomListView.ColClick">
        <short>
          Performs actions to handle a mouse click on a Report view column header.
        </short>
        <descr>
          <p>
            <var>ColClick</var> is a method used to handle a mouse click on a column header when the list view control is in Report view (ViewStyle = vsReport).
          </p>
          <p>
            ColClick ensures that the Editor for the control is hidden when it has been assigned and displayed for the control.
          </p>
          <p>
            AColumn is the TListColumn instance representing the column header clicked on the control. The OnColumnClick event handler is signalled (when assigned) if  ColumnClick is set to True. The event handler can be used to adjust property  values in the column argument or the list view control as needed.
          </p>
          <p>
            ColClick uses the value in AutoSort to determine if the control is updated to reflect a change to the sort column or its order indicator. No additional actions are performed when AutoSort is False or SortType is stNone.
          </p>
          <p>
            When AutoSort is set to True, the Index in AColumn is used to set the value for the SortColumn property, When AutoSortIndicator is enabled, the Columns for the control are updated to clear any previous sort indicators when a new sort column has been clicked. The sort indicator in the AColumn argument is also updated. If AColumn was already the SortColumn for the control, the value in SortDirection is toggled between it ascending and descending values.
          </p>
          <p>
            ColClick is called when the LVN_COLUMNCLICK control notification message is handled for the list view control.
          </p>
        </descr>
      </element>
      <element name="TCustomListView.ColClick.AColumn">
        <short>List view column clicked in the header for the control.</short>
      </element>

      <element name="TCustomListView.Delete">
        <short>Deletes the specified list item.</short>
        <descr>
          <p>
            <var>Delete</var> is a method used to delete the list item specified in AItem.
          </p>
          <p>
            In Delphi, Delete is called when Items.Delete is executed.  The OnDeletion event handler is signalled each time the method is called, even when list items are freed from the Items container.
          </p>
          <p>
            The Lazarus implementation differs. It uses a flag value in AItem to determine if the method has been called when the list item is freed, or when the Delete method in the list item has been called explicitly.
          </p>
          <p>
            Delete is called from the DoDeletion method if an overridden Delete method has  been implemented. The OnDeletion event handler is signalled when Delete has been explicitly called, and when the Delete method has not been overridden.
          </p>
          <p>
            While not 100% Delphi compatible, it is more compatible than previous LCL versions.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.DoDeletion"/>
          <link id="TCustomListView.OnDeletion"/>
          <link id="TCustomListView.Items"/>
          <link id="TCustomListView.ItemDeleted"/>
          <link id="TListItem.Delete"/>
          <link id="TListItems.Delete"/>
        </seealso>
      </element>
      <element name="TCustomListView.Delete.AItem">
        <short>List item deleted in the method.</short>
      </element>

      <element name="TCustomListView.DoDeletion">
        <short>Performs actions needed to delete the specified list item.</short>
        <descr>
          <p>
            <var>DoDeletion</var> ensures an overridden <var>Delete</var> method in a descendent class is always executed for the list item in AItem. If the method has been overridden, the <var>OnDeletion</var> event handler is signalled (when assigned).
          </p>
          <p>
            DoDeletion is called from <var>ItemDeleted</var>, and occurs after the value in <var>LastSelected</var> has been updated.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Delete"/>
          <link id="TCustomListView.ItemDeleted"/>
          <link id="TCustomListView.OnDeletion"/>
          <link id="TCustomListView.Items"/>
          <link id="TListItem.Delete"/>
          <link id="TListItems.Delete"/>
        </seealso>
      </element>
      <element name="TCustomListView.DoDeletion.AItem">
        <short>List view item deleted in the method.</short>
      </element>

      <element name="TCustomListView.DoInsert">
        <short>Performs actions needed to insert the specified list item.</short>
        <descr>
          <p>
            <var>DoInsert</var> ensures an overridden <var>Insert</var> method in a descendent class is always executed for the list item in AItem. If the method has been overridden, the <var>OnInsert</var> event handler is signalled (when assigned).
          </p>
          <p>
            DoInsert is called from the ItemInserted method which occurs when the list item is stored in the Items property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ItemInserted"/>
          <link id="TCustomListView.OnInsert"/>
          <link id="TCustomListView.Items"/>
          <link id="TListItems.Insert"/>
          <link id="TListItems.InsertItem"/>
        </seealso>
      </element>
      <element name="TCustomListView.DoInsert.AItem">
        <short>List view item inserted in the method.</short>
      </element>

      <element name="TCustomListView.InsertItem">
        <short>Inserts an Item into the List.</short>
        <descr>
          <p>
            Signals the OnInsert event handler (when assigned) using the value in AItem as an argument.
          </p>
          <p>
            InsertItem is called from the DoInsert method when an overridden method has been implemented in a descendent class and called from ItemInserted.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OnInsert"/>
          <link id="TCustomListView.DoInsert"/>
          <link id="TCustomListView.ItemInserted"/>
          <link id="TListItem"/>
        </seealso>
      </element>
      <element name="TCustomListView.InsertItem.AItem">
        <short>Item with the values inserted into the Items for the control.</short>
      </element>

      <element name="TCustomListView.DoItemChecked">
        <short>Synchronizes the checked state for an item with the widgetset class.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoItemChecked.AItem">
        <short/>
      </element>

      <element name="TCustomListView.DoSelectItem">
        <short>
          Signals the OnSelectItem event handler when the current selection is changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoSelectItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.DoSelectItem.ASelected">
        <short/>
      </element>

      <element name="TCustomListView.DoAutoAdjustLayout">
        <short>Adjusts the layout for the list view using the specified arguments.</short>
        <descr>
          <p>
            <var>DoAutoAdjustLayout</var> is an overridden procedure used to adjust the layout for the list view using the specified arguments. DoAutoAdjustLayout calls the inherited method.
          </p>
          <p>
            DoAutoAdjustLayout extends the ancestor method to include support for sizing the columns in the list view using the proportions specified in AXProportion and AYProportion for the display density (DPI). DoAutoAdjustLayout also ensures that the widgetset class is initialized for each of the image list sizes represented by the TListViewImageList enumeration.
          </p>
          <p>
            No actions are performed in the method if AMode does not include one of the following values: lapAutoAdjustWithoutHorizontalScrolling or lapAutoAdjustForDPI.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
        </seealso>
      </element>
      <element name="TCustomListView.DoAutoAdjustLayout.AMode">
        <short>Layout adjustment policy used in the method.</short>
      </element>
      <element name="TCustomListView.DoAutoAdjustLayout.AXProportion">
        <short>Factor used to adjust widths.</short>
      </element>
      <element name="TCustomListView.DoAutoAdjustLayout.AYProportion">
        <short>Factor used to adjust heights.</short>
      </element>

      <element name="TCustomListView.DoSetBounds">
        <short>Set the bounds for the control to the specified values.</short>
        <descr>
          <p>
            Resizes the last column (if enabled) when the bounds for the control have been changed.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.DoSetBounds.ALeft">
        <short>Left coordinate for the control.</short>
      </element>
      <element name="TCustomListView.DoSetBounds.ATop">
        <short>Top coordinate for the control.</short>
      </element>
      <element name="TCustomListView.DoSetBounds.AWidth">
        <short>Width for the control.</short>
      </element>
      <element name="TCustomListView.DoSetBounds.AHeight">
        <short>Height for the control.</short>
      </element>

      <element name="TCustomListView.DoEndEdit">
        <short>
          Performs actions when editing has been completed for an item in the control.
        </short>
        <descr>
          <p>
            Calls an overridden Edit method when available, or signals the OnEdited event handler (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.DoEndEdit.AItem">
        <short/>
      </element>
      <element name="TCustomListView.DoEndEdit.AValue">
        <short/>
      </element>

      <element name="TCustomListView.Edit">
        <short>
          Signals OnEdited to validate the editor text, and updates the caption for the specified list item.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.Edit.AItem">
        <short>List item updated in the method.</short>
      </element>

      <element name="TCustomListView.ImageChanged">
        <short>
          <var>ImageChanged</var> - procedure to signal that an image has changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.ImageChanged.Sender">
        <short>Object for the event notification.</short>
      </element>

      <element name="TCustomListView.Loaded">
        <short>
          Performs actions when LCL component streaming is completed for the component.
        </short>
        <descr>
          <p>
            Creates columns in the widgetset class when the Handle for the control has been allocated. Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TCustomListView.Notification">
        <short>
          Handles the notification when a component is added to or removed from the class instance.
        </short>
        <descr>
          <p>
            Ensures that members for the LargeImages, SmallImages, and StateImages are set to Nil when the corresponding image list is removed.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.Notification.AComponent">
        <short>Component for the notification.</short>
      </element>
      <element name="TCustomListView.Notification.Operation">
        <short>Operation performed for the component.</short>
      </element>

      <element name="TCustomListView.IsCustomDrawn">
        <short>
          <var>IsCustomDrawn</var> - returns True if a target has been custom drawn.
        </short>
        <descr>
          <p>
            Indicates whether the control, items, or sub-items are custom-drawn using the event handlers available in the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.IsCustomDrawn.Result">
        <short/>
      </element>
      <element name="TCustomListView.IsCustomDrawn.ATarget">
        <short/>
      </element>
      <element name="TCustomListView.IsCustomDrawn.AStage">
        <short/>
      </element>

      <element name="TCustomListView.CustomDraw">
        <short>
          Performs custom drawing in the given rectangle and returns True if successful.
        </short>
        <descr>
          <p>
            <var>CustomDraw</var> draws the control using the OnCustomDraw or OnAdvancedCustomDraw event handlers (when assigned).
          </p>
        </descr>
      </element>
      <element name="TCustomListView.CustomDraw.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomDraw.ARect">
        <short/>
      </element>
      <element name="TCustomListView.CustomDraw.AStage">
        <short/>
      </element>

      <element name="TCustomListView.CustomDrawItem">
        <short>
          Custom draws the specified item and returns True if successful.
        </short>
        <descr>
          <p>
            <var>CustomDrawItem</var> draws an item in the control using the OnCustomDrawItem or OnAdvancedCustomDrawItem event handlers (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.CustomDrawItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawItem.AState">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawItem.AStage">
        <short/>
      </element>

      <element name="TCustomListView.CustomDrawSubItem">
        <short>
          Custom draws the specified subitem returning True if successful.
        </short>
        <descr>
          <p>
            <var>CustomDrawSubItem</var> draws a sub-item in the control using the OnCustomDrawSubItem and OnAdvancedCustomDrawSubItem event handlers (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.ASubItem">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.AState">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.AStage">
        <short/>
      </element>

      <element name="TCustomListView.IntfCustomDraw">
        <short>
          <var>IntfCustomDraw</var> - uses the interface to perform custom drawing and returns a result of drawing.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.Result">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.ATarget">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AStage">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AItem">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.ASubItem">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AState">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AStage">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.ARect">
        <short/>
      </element>

      <element name="TCustomListView.GetUpdateCount">
        <short>Gets the value for the internal update counter.</short>
        <descr>
          The internal counter is maintained when the BeginUpdate and EndUpdate methods are called.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.GetUpdateCount.Result">
        <short>Value for the internal update counter in the control.</short>
      </element>

      <element name="TCustomListView.DrawItem">
        <short>Draws the specified list item with a given state.</short>
        <descr>
          <p>
            Signals the OndrawItem event handler (when assigned) to draw the list item. Calls the FillRect and TextOut methods in the control Canvas when the event handler is not assigned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.DrawItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.DrawItem.ARect">
        <short/>
      </element>
      <element name="TCustomListView.DrawItem.AState">
        <short/>
      </element>

      <element name="TCustomListView.DoGetOwnerData">
        <short>
          Performs actions to get list item data when OwnerData is True.
        </short>
        <descr>
          <p>
            Signals the OnData event handler (when assigned) to get the data for the list item. Properties in Item are updated in the event handler with the values needed for the list item.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.DoGetOwnerData.Item">
        <short/>
      </element>

      <element name="TCustomListView.DoOwnerDataHint">
        <short>Signals the OnDataHint event handler (when assigned).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoOwnerDataHint.Result">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataHint.AStartIndex">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataHint.AEndIndex">
        <short/>
      </element>

      <element name="TCustomListView.DoOwnerDataStateChange">
        <short>Signals the OnDataStateChange event handler (when assigned).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.Result">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.AStartIndex">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.AEndIndex">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.AOldState">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.ANewState">
        <short/>
      </element>

      <element name="TCustomListView.DblClick">
        <short>Performs actions needed when the control is double clicked.</short>
        <descr>
          <p>
            Calls the inherited DblClick method. Ensures that ShowEditorQueued is set to True when the control has an assigned editor and is not marked as read-only.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DblClick">TControl.DblClick</link>
        </seealso>
      </element>

      <element name="TCustomListView.KeyDown">
        <short>Handles key down messages for the control.</short>
        <descr>
          <p>
            Handles an F2 function key pressed when the control has focus. Ensures that the editor is displayed when the control is not marked  as ReadOnly. The keystroke is digested (set to zero).
          </p>
          <p>
            If the control is marked as ReadOnly, or Key is not the unshifted F2 function key, the inherited KeyDown method is called to handle the values in Key and Shift.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
        </seealso>
      </element>
      <element name="TCustomListView.KeyDown.Key">
        <short>Virtual key code examined in the method.</short>
      </element>
      <element name="TCustomListView.KeyDown.Shift">
        <short>Shift, Alt, or Ctrl modifier for the key code.</short>
      </element>

      <element name="TCustomListView.AllocBy">
        <short>
          Reduces allocation overhead in the widgetset class by increasing the internal buffer capacity by this block size.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.AutoSort">
        <short>
          Controls automatic updates to the sort column and order indicator for the control.
        </short>
        <descr>
          <p>
            <var>AutoSort</var> is a <var>Boolean</var> property used to determine whether the sort column and order indicator are automatically updated when a Report view column header on the control is clicked. The default value for the property is True.
          </p>
          <p>
            When enabled, the value in SortColumn is set to the position for the clicked column header. Use AutoSortIndicator to control whether the sort indicator is  automatically updated for the Columns defined for the control.
          </p>
          <p>
            AutoSort has no effect when SortType is set to stNone.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.SortType"/>
          <link id="TCustomListView.SortDirection"/>
          <link id="TCustomListView.AutoSortIndicator"/>
          <link id="TCustomListView.Columns"/>
          <link id="TCustomListView.ColClick"/>
          <link id="TCustomListView.OnColumnClick"/>
          <link id="TListColumn.SortIndicator"/>
        </seealso>
      </element>

      <element name="TCustomListView.AutoSortIndicator">
        <short>
          Indicates if the control automatically changes the column and/or order indicator when a column is clicked.
        </short>
        <descr>
          <p>
            <var>AutoSortIndicator</var> is a <var>Boolean</var> property which controls whether the sort column and order indicator are changed when a Report view column header is clicked. The default value for the property is <b>False</b>. When set to <b>True</b>, a clicked column causes the sort indicator to be updated to reflect the value in <var>SortDirection</var>.
          </p>
           <p>
             AutoSortIndicator is significant when <var>AutoSort</var> has been enabled and <var>SortType</var> is not set to <var>stNone</var>.
           </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ColClick"/>
          <link id="TCustomListView.OnColumnClick"/>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.SortDirection"/>
          <link id="TCustomListView.SortType"/>
          <link id="TListColumn.SortIndicator"/>
        </seealso>
      </element>

      <element name="TCustomListView.AutoWidthLastColumn">
        <short>
          Resizes the last visible column to fill the remaining display area for the control.
        </short>
        <descr>
          <p>
            <var>AutoWidthLastColumn</var> is a <var>Boolean</var> property which indicates if the last visible column is expanded to fill any unused display area for the list view control. When set to <b>True</b>, the affected column is located  its Width is calculated and applied.
          </p>
          <p>
            AutoWidthLastColumn is relevant when <var>ViewStyle</var> contains <var>vsList</var> or <var>vsReport</var>, and the <var>Columns</var> property has been populated for the list view control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ViewStyle"/>
          <link id="TCustomListView.Columns"/>
          <link id="TCustomListView.DoSetBounds"/>
        </seealso>
      </element>

      <element name="TCustomListView.ColumnClick">
        <short>
          Enables or disables OnColumnClick events for column headers on the control.
        </short>
        <descr>
          <p>
            <var>ColumnClick</var> is an indexed <var>Boolean</var> property which controls whether the <var>OnColumnClick</var> event handler is signalled when a Report view column is clicked. The default value for the property is <b>True</b>. Changing the value for the property causes the widgetset class to be updated with the new property value.
          </p>
          <p>
            ColumnClick is used in the <var>ColClick</var> method, which is called when the LVN_COLUMNCLICK control notification message is handled for the list view control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OnColumnClick"/>
          <link id="TCustomListView.ColClick"/>
        </seealso>
      </element>

      <element name="TCustomListView.Columns">
        <short>
          Collection with the column definitions for the list view control (size, alignment, image index, etc.).
        </short>
        <descr>
          <p>
            Columns is a TListColumns property which contains the column definitions for the list view control. The TListItem instances in the collection contain information about the caption for the column header, column width, image, and sort indicator value. Assigning a new collection to the property causes the designer for the parent form to be updated at design-time.
          </p>
          <p>
            Column is significant when the ViewStyle for the control is set to vsReport. Report view is the only style where the columns are used or displayed. Set the value in ShowColumnHeaders to True to display the column header defined in the collection.
          </p>
          <p>
            Columns are used at run-time to handle column click notifications and changes to the sort indicator. Use AutoSort, AutoSortIndicator, SortColumn, SortType, and SortDirection to access or maintain values for items in the collection.
          </p>
          <p>
            The Count property in Columns also provides the value for the ColumnCount property in the list view control.
          </p>
          <p>
            Use the indexed Column property to access a column definition by its ordinal position in the Columns collection.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ViewStyle"/>
          <link id="TCustomListView.ColumnCount"/>
          <link id="TCustomListView.Column"/>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.AutoSort"/>
          <link id="TCustomListView.AutoSortIndicator"/>
          <link id="TCustomListView.AutoWidthLastColumn"/>
          <link id="TListColumns"/>
          <link id="TListColumn"/>
        </seealso>
      </element>

      <element name="TCustomListView.DefaultItemHeight">
        <short>Default height for items displayed on the list view control.</short>
        <descr>
          <p>
            Used in the widgetset class to render the items on the list view control. If the property is set to zero (0) or a negative value, the value defaults to 20 pixels. Changing the value for the property causes the widgetset class to be updated when its Handle has been assigned.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.HideSelection">
        <short>
          If control looses focus, don't paint selection background for selected item(s).
        </short>
        <descr>
          <p>
            <var>HideSelection</var> is a <var>Boolean</var> property which indicates if the selected item(s) for the list view are highlighted when the control loses focus. When set to True, the selected item(s) are redrawn to remove the selection highlighting. When set to False, the selection hightlighting is retained when the control loses focus.
          </p>
          <p>
            The default value for the property is True. Changing the value for the property causes the widgetset class to be updated with the new value.
          </p>
          <remark>
            The Windows API documentation recommends setting HideSelection to False if the application uses Accessiblity roles and descriptions.
          </remark>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.HoverTime">
        <short>
          Time (in milliseconds) that the mouse cursor must hover over an item before its tool tip is shown.
        </short>
        <descr>
          <p>
            The default value for the property is -1, and indicates that a non-default value has not been assigned and that the default for the platform or operating system is used. Changing the property value causes the widgetset class to be updated when its Handle has been allocated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.LargeImages">
        <short>
          ImageList object, which contains "big" icons for one if ListView layouts.
        </short>
        <descr>
          <p>
            A typical application might have two ImageLists: one of <var>LargeImages</var> and one of <var>SmallImages</var> containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list.
        </p>
        <p>
          SmallImages could be displayed beside the text strings in the list view and the programmer would supply code to ensure that when an item with its associated SmallImage was selected, the corresponding LargeImage would be displayed in another window.
        </p>
        <p>
          A <var>TImageList</var> control needs to be selected and pasted on to the Form Designer and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.
        </p>
        </descr>
      </element>

      <element name="TCustomListView.LargeImagesWidth">
        <short>Contains the Width for the large images used in the list view.</short>
        <descr>
          <p>
            <var>LargeImagesWidth</var> is an <var>Integer</var> property with the width for large images in the list view. The value indicates the image resolution requested from the LargeImages image list. If a resoution using the requested width does not already exist, it is created by scaling a candidate resolution for the image list.
          </p>
          <p>
            The default value for the property is zero (<b>0</b>), and causes the width stored in LargeImages to be used for the large images.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.OwnerDraw">
        <short>
          Indicates if owner-draw mode is used for the control.
        </short>
        <descr>
          <p>
            <var>OwnerDraw</var> is a <var>Boolean</var> property which indicates if the control implements is own drawing routines instead of using the default drawing routines for list items on the control. The default value for the property is <b>False</b>.
          </p>
          <p>
            When set to <b>True</b>, the OnDrawItem event handler is signalled to draw list items when the control is using the Report view style (ViewStyle = vsReport). The handler is signalled (when assigned) from the DrawItem method, and occurs when the CN_DRAWITEM control notification message is handled for the control. It should  handle all aspects of drawing the list item to the control Canvas. If OnDrawItem has not been assigned, a basic default drawing routine is used.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OnDrawItem"/>
          <link id="TCustomListView.DrawItem"/>
          <link id="TCustomListView.ViewStyle"/>
        </seealso>
      </element>

      <element name="TCustomListView.ScrollBars">
        <short>Specifies the scroll bars visible for the control.</short>
        <descr>
          <p>
            <var>ScrollBars</var> is a <var>TScrollStyle</var> property which specifies the scroll bars visible for the control. The default value for the property is <var>ssBoth</var>, and indicates that both horizontal and vertical scroll bars are always visible on the control.
          </p>
          <p>
            See <var>TScrollStyle</var> for the values available in the property and their meanings.
          </p>
          <p>
            Changing the value for the property causes the widgetset class to be updated when its Handle has been assigned.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TScrollStyle">TScrollStyle</link>
        </seealso>
      </element>

      <element name="TCustomListView.ShowColumnHeaders">
        <short>Show header area in ListView, which shows captions of columns.</short>
        <descr>
          <p>
            <var>ShowColumnHeaders</var> is a <var>Boolean</var> property which indicates whether column headers are displayed for the Report view style (ViewStyle = vsReport). When enabled, the captions for the list <var>Items</var> are displayed as column headers.
          </p>
          <p>
            The default value for the property is <b>True</b>. Changing the value for the property causes the widgetset class to be updated when its Handle has been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Items"/>
          <link id="TListItem.Caption"/>
        </seealso>
      </element>

      <element name="TCustomListView.ShowWorkAreas">
        <short>
          Indicates if work area captions and highlights are enabled for the control.
        </short>
        <descr>
          <p>
            ShowWorkAreas is an indexed Boolean property used to configure whether work areas are displayed on the control.
          </p>
          <remark>
            Work areas are not implemented (for any platform) in the current LCL version.
          </remark>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.SmallImages">
        <short>
          ImageList object, which contains "small" icons for one if ListView layouts.
        </short>
        <descr>
          <p>
            A typical application might have two ImageLists: one of <var>LargeImages</var> and one of <var>SmallImages</var> containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list.
          </p>
          <p>
            SmallImages could be displayed beside the text strings in the list view and the programmer would supply code to ensure that when an item with its associated SmallImage was selected, the corresponding LargeImage would be displayed in another window.
          </p>
          <p>
            A <var>TImageList</var> control needs to be selected and pasted on to the Form Designer and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.SmallImagesWidth">
        <short>Width for the images in the SmallImages property.</short>
        <descr>
          <p>
            <var>SmallImagesWidth</var> is an <var>Integer</var> property that indicates the width for the small images displayed in the list view. The value indicates the image resolution requested from the SmallImages image list. If a resoution using the requested width does not already exist, it is created by scaling a candidate resolution for the image list.
          </p>
          <p>
            The default value for the property is zero (<b>0</b>), and causes the width stored in the image list to be used for its images.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.SortType">
        <short>Specifies the sorting mechanism used for the current SortColumn.</short>
        <descr>
          <p>
            <var>SortType</var> is a <var>TSortType</var> property which specifies the sort mechanism used for the items in the list view control.
          </p>
          <p>
            The default value for the property is stNone, and indicates that sorting is not performed for the list items on the control. See TSortType for the values available for the property and their meanings.
          </p>
          <p>
            Changing the value in SortType causes the Sort method to be called.
          </p>
          <p>
            SortType is used in the ColClick method to determine if SortColumn and SortDirection are updated when a column header is clicked for the control. Values in SortType, SortColumn, and SortDirection are also passed to the widgetset class when its Handle is allocated or updated.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ColClick"/>
          <link id="TCustomListView.Sort"/>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.SortDirection"/>
          <link id="TCustomListView.AutoSort"/>
          <link id="TCustomListView.AutoSortIndicator"/>
          <link id="TCustomListView.AlphaSort"/>
        </seealso>
      </element>

      <element name="TCustomListView.SortColumn">
        <short>
          Ordinal position for the column used to sort the list items, or -1 when not assigned.
        </short>
        <descr>
          <p>
            <var>SortColumn</var> is an <var>Integer</var> property with the ordinal position for the column used to sort the list items for the control. The default value for the property is <b>-1</b>, and indicates that an explicit column position has not been assigned.
          </p>
          <p>
            Changing the value for the property causes the <var>Sort</var> method to be called.
          </p>
          <p>
            SortColumn is updated in the <var>ColClick</var> method when a column header for the control has been clicked. It also indicates which entry in <var>Columns</var> has the sort indicator when <var>AutoSortIndicator</var> is enabled.
          </p>
          <p>
            Values in <var>SortType</var>, <var>SortColumn</var>, and <var>SortDirection</var> are passed to the widgetset class when its Handle is allocated or updated.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Sort"/>
          <link id="TCustomListView.SortDirection"/>
          <link id="TCustomListView.SortType"/>
          <link id="TCustomListView.AutoSort"/>
          <link id="TCustomListView.AutoSortIndicator"/>
        </seealso>
      </element>

      <element name="TCustomListView.SortDirection">
        <short>Sorting direction (order) for the current SortColumn.</short>
        <descr>
          <p>
            <var>SortDirection</var> is a <var>TSortDirection</var> property which indicates the sort direction (or order) for the column in the <var>SortColumn</var> property. The value can be <var>sdAscending</var> for ascending sort order, or <var>sdDescending</var> for descending sort order. The default value for the property is <var>sdAscending</var>.
          </p>
          <p>
            Changing the value for the property causes the <var>Sort</var> method to be called to display the items on the control in the selected sort order.
          </p>
          <p>
            Use SortType to specify whether the text values, data values, or both are used to sort the list items. Set SortType to stNone to disable sorting in the control. Use SortColumn to set the column number with the values that are sorted.
          </p>
          <p>
            Use AutoSort and AutoSortIndicator to automatically change the sort column and indicator when a column header is clicked on the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Sort"/>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.SortType"/>
          <link id="TCustomListView.AutoSort"/>
          <link id="TCustomListView.AutoSortIndicator"/>
        </seealso>
      </element>

      <element name="TCustomListView.StateImages">
        <short>Image list with the state images for the items on the control.</short>
        <descr>
          <p>
            <var>StateImages</var> is a <var>TCustomImageList</var> property which contains the images used to display the state for the list items on the control. A state image is displayed to the left of the icon for a list item. Its meaning or usage is application specific.
          </p>
          <p>
            Assigning a new image list to the property causes the widgetset control to be updated.
          </p>
          <p>
            Use StateImagesWidth to override the width for the images in StateImages. If StateImagesWidth has not been assigned, the width in the image list is used.
          </p>
          <p>
            Use the OnChange, OnItemChecked, or OnDataStateChange event handlers to perform actions like setting the state image index for a list item when a list item is modified.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.StateImagesWidth">
        <short>Width of the images in the StateImages property.</short>
        <descr>
          <p>
            StateImagesWidth is an Integer property the represents width used for state images displayed in the list view. The default value for the property is zero (0) and indicates that a default image width has not been specified.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.ToolTips">
        <short>
          Indicates if a hint (tool tip) is automatically displayed for an item under the mouse cursor.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomListView.HoverTime"/>
          <link id="TCustomListView.OnDataHint"/>
          <link id="#lcl.controls.TControl.Hint">TControl.Hint</link>
        </seealso>
      </element>

      <element name="TCustomListView.ViewStyle">
        <short>
          Sets one of ListView layouts: List (simple column), Report (few columns with full width), Icon (big icons), Small Icon (small icons, 16x16).
        </short>
        <descr>
          <p>
            ViewStyle is a TViewStyle which controls the appearance and layout for the list items on the control. The default value for the property is vsList, and causes an icon and caption to displayed for each list item. List items are arranged in columns, filled from top to bottom and then left to right.
          </p>
          <p>
            See TViewStyle for a description of the view style values and their meanings.
          </p>
          <p>
            Changing the value for the property causes the widgetset control to be updated when its handle has been allocated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.OnChange">
        <short>Event handler signalled when the content for a list item is changed.</short>
        <descr>
          <p>
            <var>OnChange</var> is a <var>TLVChangeEvent</var> property with the event handler signalled when property values for a list item have been changed. OnChange is signalled from the <var>Change</var> method, which is called when a LVN_ITEMCHANGED control notification message is handled for the control.
          </p>
          <p>
            Argument passed to the event handler identify the list view control, the list item updated in the message, and a change constant that identifies the value updated in the list item. The constant represents whether the text, image, or state for the list item has been altered.
          </p>
          <p>
            Use the <var>OnSelectItem</var> event handler to perform actions needed when the selected list item has changed for the control. Use <var>OnItemChecked</var> to perform actions needed when the checked state for a list item has been changed.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.OnColumnClick">
        <short>Event handler signalled when a column header for the control is clicked.</short>
        <descr>
          <p>
            <var>OnColumnClick</var> is a <var>TLVColumnClickEvent</var> property with the event handler signalled  when a column header for the list view control has been clicked. OnColumnClick is signalled (when assigned) from the <var>ColClick</var> method when <var>ColumnClick</var> has been enabled for the control.
          </p>
          <p>
            Arguments passed to the event handler identify the list view control and the <var>TListColumn</var> instance clicked in the control.  It is signalled before values in <var>SortType</var>, <var>SortColumn</var>, and <var>SortDirection</var> are checked or updated. It is commonly used to enabled or disable <var>AutoSort</var> or <var>AutoSortIndicator</var> when a specific column is clicked.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.ColumnClick"/>
          <link id="TCustomListView.ColClick"/>
          <link id="TCustomListView.AutoSort"/>
          <link id="TCustomListView.AutoSortIndicator"/>
          <link id="TCustomListView.SortType"/>
          <link id="TCustomListView.SortColumn"/>
          <link id="TCustomListView.SortDirection"/>
          <link id="TCustomListView.Columns"/>
          <link id="TListItem"/>
          <link id="TLVColumnClickEvent"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnCompare">
        <short>Event handler signalled to compare list items in the CustomSort method.</short>
        <descr>
          <p>
            <var>OnCompare</var> is a <var>TLVCompareEvent</var> property with the event handler signalled to compare the values for list items. Arguments passed to the event handler identify the list view control, the items compared in the handler. The relative sort order for the compared items is returned in a variable parameter passed to the handler.
          </p>
          <p>
            OnCompare is signalled (when assigned) when the Sort method is called, or when CustomSort is called without specifying a custom sort function.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Sort"/>
          <link id="TCustomListView.CustomSort"/>
          <link id="TLVCompareEvent"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnCreateItemClass">
        <short>
          Event handler signalled to get the class reference used to create new list view items.
        </short>
        <descr>
          <p>
            <var>OnCreateItemClass</var> is a <var>TLVCreateItemClassEvent</var> property with the event handler signalled when a new list item is created in the <var>CreateListItem</var> method. It is signalled (when assigned) to allow a custom list item class type to be used in the list view control.
          </p>
          <p>
            Arguments passed to the event handler identify the list view control and the default class type used for the list items in the control. <var>TListItem</var> is the default class type used to create and store the values in the Items property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.CreateListItem"/>
          <link id="TCustomListView.Items"/>
          <link id="TListItem"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnData">
        <short>
          Event handler signalled to the value(s) for a list item when OwnerData (virtual mode) has been enabled.
        </short>
        <descr>
          <p>
            <var>OnData</var> is a <var>TLVDataEvent</var> property with the event handler signalled to get the values for a list item when OwnerData (virtual mode) has been enabled for the list view control.
          </p>
          <p>
            An application must implement and assign an object procedure using the signature in TLVDataEvent to respond to the event notification. Arguments passed to the event handler identify the list view control (Sender) and the list item (Item). The Index property in Item is pre-populated with the ordinal position for the requested data. The event handler is responsible for setting values for any of the other properties in Item.
          </p>
          <p>
            OnData is signalled from the DoGetOwnerData method, and is called when the virtual list item accesses its property values.
          </p>
          <p>
            When OwnerData is enabled, the Items property is not used. Only the most recently accessed item in ItemIndex is available.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OwnerData"/>
          <link id="TCustomListView.ItemIndex"/>
          <link id="TListItem"/>
          <link id="TOwnerDataListItem"/>
          <link id="TOwnerDataListItems"/>
          <link id="TLVDataEvent"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnDataFind">
        <short>
          Event handler signalled to locate list item data in OwnerData (virtual) mode.
        </short>
        <descr>
          <p>
            OnDataFind is a TLVDataFindEvent property with the event handler signalled to locate the data for a list item when OwnerData (or virtual mode) has been enabled.
          </p>
          <remark>
            The current LCL version does not signal the OnDataFind event handler. Use the OnData event handler instead.
          </remark>
        </descr>
        <seealso>
          <link id="TCustomListView.OwnerData"/>
          <link id="TCustomListView.OnData"/>
          <link id="TLVDataFindEvent"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnDataHint">
        <short>The event handler is not signalled in the current LCL implementation.</short>
        <descr>
          <p>
            <var>OnDataHint</var> is not used in the current LCL implementation. In virtual mode (OwnerData = True), only the most recently accessed virtual list item exists in the list view control. The data hinting, or pre-fetch caching, feature is not used in the current implementation.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDataStateChange">
        <short>Not used in the current LCL version.</short>
        <descr>Not used in the current LCL version.</descr>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDeletion">
        <short>
          Event handler signalled when a list item is deleted from the Items container.
        </short>
        <descr>
          <p>
            OnDeletion is a TLVDeletedEvent property with the event handler signalled when a list item is deleted from the Items container. It provides better compatibility with the Delete method as implemented in Delphi.
          </p>
          <p>
            In Delphi, the Delete method is called when the Items.Delete method is called. But calling the method directly will also delete the item and then call the OnDeletion handler.
          </p>
          <p>
            In that case we simply call Items.Delete and this will then call Delete again and in the second run we call the OnDeletion handler. Not 100% Delphi compatible, but more compatible then it was before. (BB)
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Delete"/>
          <link id="TCustomListView.DoDeletion"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnEdited">
        <short>
          Event handler signalled when editing has been completed for a list item in the control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnEditing">
        <short>
          Event handler signalled to determine if editing can be started for a list item in the control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnInsert">
        <short>Called when a list item is inserted in program code.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnItemChecked">
        <short>
          Event handler signalled when the Checked property for a list item has been changed.
        </short>
        <descr>
          <p>
            Signalled (when assigned) from the <var>DoItemChecked</var> method when the <var>Checked</var> property for a list item has been changed. It occurs when the <var>LVN_ITEMCHANGED</var> list view notification message is handled for the control..
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.DoItemChecked"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnSelectItem">
        <short>
          Event handler signalled when the selected list item for the control is changed.
        </short>
        <descr>
          <p>
            <var>OnSelectItem</var> is signalled when a LVIS_SELECTED message is handled for the control, and occurs after the OnChange event handler has been executed (when assigned). The value in Item may be Nil when Selected has been cleared for the list view control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCustomDraw">
        <short>Called for owner-draw mode.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCustomDrawItem">
        <short>Called for owner-draw mode.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCustomDrawSubItem">
        <short>Called for owner-draw mode.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDrawItem">
        <short>Event handler signalled to render an owner drawn item.</short>
        <descr>
          <p>
            <var>OnDrawItem</var> is a <var>TLVDrawItemEvent</var>  property which is the event handler signalled to render an owner drawn item. The event is triggered (when assigned) in the <var>DrawItem</var> method only when <var>OwnerDraw</var> is set to <b>True</b> and <var>ViewStyle</var> contains <var>vsReport</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OwnerDraw"/>
          <link id="TCustomListView.ViewStyle"/>
          <link id="TCustomListView.DrawItem"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnAdvancedCustomDraw">
        <short>Called for owner-draw mode.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnAdvancedCustomDrawItem">
        <short>Called for owner-draw mode.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnAdvancedCustomDrawSubItem">
        <short>Called for owner-draw mode.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for <var>TCustomListView</var>. It calls the inherited <var>Create</var> method, and allocates resources needed for the class instance.
          </p>
          <p>
            Create sets the default values for properties and the control style flags. It creates a TChangeLink instance for the image lists in SmallImages, LargeImages, and StateImages. The change links are configured to use the ImageChange and ImageResolutionHandleDestroyed methods in their event handlers. It also creates the TCustomListViewEditor instance used to edit values in the list view control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomListView.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomListView.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <var>Destroy</var> is the destructor for <var>TCustomListView</var>. It frees the Canvas, calls the inherited <var>Destroy</var>, and frees the columns and list items.
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomListView.AddItem">
        <short>Adds a list item with the specified caption and optional object.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.AddItem.Item">
        <short>Caption for the new list item.</short>
      </element>
      <element name="TCustomListView.AddItem.AObject">
        <short>Optional object instance for the list item.</short>
      </element>

      <element name="TCustomListView.AlphaSort">
        <short>Sorts the first column for the list view in ascending order.</short>
        <descr>
          Always sorts column 0 in sdAscending order.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.AlphaSort.Result">
        <short/>
      </element>

      <element name="TCustomListView.Sort">
        <short>
          Sorts the values in Items when SortType is not stNone and SortColumn is valid.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.CustomSort">
        <short>
          Sorts the Items for the list view control using the specified procedure or the OnCompare event handler.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CustomSort.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomSort.ASortProc">
        <short/>
      </element>
      <element name="TCustomListView.CustomSort.AOptionalParam">
        <short/>
      </element>

      <element name="TCustomListView.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start updating the list view.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Clear">
        <short>
          Clears the Items for the list view.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.EndUpdate">
        <short>
          Finishes an active update for the list view control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Repaint">
        <short>Updates the OwnerData (when used), and repaints the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.FindCaption">
        <short>
          <var>FindCaption</var>- search for and return the list item that contains the nominated caption.
        </short>
        <descr>
          <p>
            <var>FindCaption</var>- search for and return the list item that contains the nominated caption.
          </p>
          <p>
            Starting from item at <var>StartIndex</var>
          </p>
          <p>
            Looking for the string with the content in <var>Value</var>
          </p>
          <p>
            <var>Partial, Inclusive, Wrap, PartStart</var>: Boolean arguments that allow matches with part of the string, permitting the string to wrap over a line, etc.
          </p>
        </descr>
      </element>

      <element name="TCustomListView.FindData">
        <short>Locates the specified list item data in the Items for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.FindData.Result">
        <short/>
      </element>
      <element name="TCustomListView.FindData.StartIndex">
        <short/>
      </element>
      <element name="TCustomListView.FindData.Value">
        <short/>
      </element>
      <element name="TCustomListView.FindData.Inclusive">
        <short/>
      </element>
      <element name="TCustomListView.FindData.Wrap">
        <short/>
      </element>

      <element name="TCustomListView.GetHitTestInfoAt">
        <short>
          Gets hit test information from the widgetset class when its Handle has been assigned.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TCustomListView.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TCustomListView.GetItemAt">
        <short>
          <var>GetItemAt</var> - find and return the list item at the specified coordinates.
        </short>
      </element>
      <element name="TCustomListView.GetItemAt.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetItemAt.x">
        <short/>
      </element>
      <element name="TCustomListView.GetItemAt.y">
        <short/>
      </element>

      <element name="TCustomListView.GetNearestItem">
        <short>Locates the list item closest to the specified position.</short>
        <descr>
          <p>
            GetNearestItem is used to locate a list item from a position specified in pixel coordinates relative to the top left corner of the list view. It starts looking at the position specified by the Point parameter, and moves in the direction indicated by the Direction parameter until it locates a list item.If no item is found Nil is returned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.GetNearestItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetNearestItem.APoint">
        <short/>
      </element>
      <element name="TCustomListView.GetNearestItem.Direction">
        <short/>
      </element>

      <element name="TCustomListView.GetNextItem">
        <short>Gets the next list item in the given direction from the starting item.</short>
        <descr>
          <p>
            GetNextItem is a TListItem function used to find the next list item after StartItem in the direction given by the Direction parameter. Only items in the state indicated by the States parameter are considered. If no item is found, Nil is returned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.GetNextItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetNextItem.StartItem">
        <short/>
      </element>
      <element name="TCustomListView.GetNextItem.Direction">
        <short/>
      </element>
      <element name="TCustomListView.GetNextItem.States">
        <short/>
      </element>

      <element name="TCustomListView.ClearSelection">
        <short>Clears single or multi-selections in the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.SelectAll">
        <short>Selects all Items in the control when MultiSelect has been enabled.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.IsEditing">
        <short>Indicates if the editor is active in the list view control.</short>
        <descr>
          Delphi compatible function which returns if our listview editor is active.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.IsEditing.Result">
        <short/>
      </element>

      <element name="TCustomListView.BoundingRect">
        <short>Coordinates of the rectangle containing the list view control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.BorderStyle">
        <short>Line style drawn as a border around the control.</short>
        <descr>
          <p>
            <var>BorderStyle</var> is a <var>TBorderStyle</var> property which indicates the line style used to draw the borders for the control. The default value for the property is <var>bsSingle</var> in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.BorderStyle">TWinControl.BorderStyle</link>
          <link id="#lcl.controls.TBorderStyle">TBorderStyle</link>
          <link id="#lcl.controls.TFormBorderStyle">TFormBorderStyle</link>
        </seealso>
      </element>

      <element name="TCustomListView.Canvas">
        <short>TCanvas instance used to draw the control.</short>
        <descr>
          <p>
            <var>Canvas</var> is a read-only <var>TCanvas</var> property with the canvas used to perform drawing operations for the control. At run-time, a <var>TControlCanvas</var> instance is created and assigned to the property.
          </p>
          <p>
            Canvas is used in the <var>DrawItem</var> method, and when the <var>CN_DRAWITEM</var> control notification message is handled for the control. It is also used to get text metrics when the editor for the control is displayed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Create"/>
          <link id="TCustomListView.DrawItem"/>
          <link id="#lcl.controls.TControlCanvas">TControlCanvas</link>
        </seealso>
      </element>

      <element name="TCustomListView.Checkboxes">
        <short>
          Displays a check box column for the list items on the control.
        </short>
        <descr>
          <p>
            <var>Checkboxes</var> is a <var>Boolean</var> property which indicates if check boxes are displayed next to list items on the control. The default value for the property is False. Changing the value for the property causes the widgetset class to be updated.
          </p>
          <p>
            Use the OnItemChecked event handler to perform actions needed when the check state for a list item has been changed.
          </p>
          <p>
            CheckBoxes is used when a LVN_ITEMCHANGED notification message is handled for the control with a LVIF_STATE change flag.
          </p>
          <p>
            The value in CheckBoxes is ignored when OwnerData is set to True. Check box display cannot be enabled for virtual mode.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.Column">
        <short>Provides indexed access to the columns defined for the control.</short>
        <descr>
          <p>
            <var>Column</var> is an indexed read-only <var>TListColumn</var> property which provides access to the information for a given column by its position. The column whose information is to be retrieved is determined by an index (AIndex). As with nearly all indexes, this index is 0 based.
          </p>
          <p>
            Use the <var>Columns</var> property to add, change or delete a column definition.
          </p>
          <p>
            Use the <var>Items</var> property to access the <var>TListItem</var> instances with the data displayed using the column definitions. The Caption in a given list item is the value display in Column[0]. Subsequent column values use the values in  SubItems; i. e. Column[1] is SubItem[0], etc.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Columns"/>
          <link id="TCustomListView.Items"/>
          <link id="TListColumns"/>
          <link id="TListColumn"/>
          <link id="TListItems"/>
          <link id="TListItem"/>
        </seealso>
      </element>
      <element name="TCustomListView.Column.AIndex">
        <short>
          Ordinal position in Columns for the column instance.
        </short>
      </element>

      <element name="TCustomListView.ColumnCount">
        <short>The number of defined Columns for the control.</short>
        <descr>
          <p>
            <var>ColumnCount</var> is a read-only <var>Integer</var> property which indicates the number of columns displayed for the list view. The property value is read from the <var>Count</var> property in <var>Columns</var>.
          </p>
          <p>
            Use methods in Columns to maintain the column definitions in the collection, such as Add, Insert, Delete, and Clear.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.DropTarget">
        <short>The list item that is the drop target on the control.</short>
        <descr>
          <p>
            <var>DropTarget</var> is a <var>TListItem</var> property with the list item that is the drop target for the control. Read and write access for the property value is redirected to the widgetset class, where the DropTarget property in the TListItem instances are maintained.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Items"/>
          <link id="TListItem.DropTarget"/>
        </seealso>
      </element>

      <element name="TCustomListView.FlatScrollBars">
        <short>
          Enables scroll bars using a "flat" display style when available for the widgetset.
        </short>
        <descr>
          <p>
            FlatScrollBars is a Boolean property which indicates if scroll bars are drawn using a "flat" display style. Flat scroll bars are not drawn using raised 3-D relief with shadowing normally used for borders or edges on the control. It also applies color inversion when elements in the control are hovered under the mouse pointer.
          </p>
          <p>
            The default value for the property is False. Changing the value for the property causes the widgetset class to be updated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.FullDrag">
        <short>
          Indicates whether column headers are redrawn during a drag / resizing operation.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.GridLines">
        <short>Enables or disables grid lines between rows and columns on the control.</short>
        <descr>
          <p>
            <var>GridLines</var> is a <var>Boolean</var> property used to enable or disable drawing of a 1-pixel grid line between rows and columns on the control. The default value for the property is False, and hides the grid lines. Changing the value for the property causes the widgetset class to be updated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.HotTrack">
        <short>
          Enables or disables hot tracking selection when the mouse is hovered over an item.
        </short>
        <descr>
          <p>
            <var>HotTrack</var> is a <var>Boolean</var> property used to enable or disable the hot tracking selection feature for the items in the list view control. HotTrack is one of the extended list view styles represented by the LVS_EX_TRACKSELECT constant.
          </p>
          <p>
            When enabled, a list item is automatically selected (or de-selected) when the mouse pointer is hovered over a list item for a short period of time. It can be used in MultiSelect mode when the Shift, Ctrl, or Shift+Ctrl  keys are held while moving and hovering the mouse pointer.
          </p>
          <p>
            Use HoverTime to specify the hover duration (in milliseconds) before a list item toggles its selected state.
          </p>
          <p>
            Use HotTrackStyles to set the cursor shape or font attributes for hot tracked items in the control.
          </p>
          <p>
            This feature can be used in List View and in Tab controls.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.HotTrackStyles"/>
          <link id="TListHotTrackStyle"/>
          <link id="TListHotTrackStyles"/>
        </seealso>
      </element>

      <element name="TCustomListView.HotTrackStyles">
        <short>Hot tracking styles enabled for the control.</short>
        <descr>
          <p>
            <var>HotTrackStyles</var> is a <var>TListHotTrackStyles</var> property which contains the extended list view style options for hot tracking. It contains zero or more values from the the TListHotTrackStyle enumeration. The values control the cursor shape or the font attributes applied to list items when the mouse pointer is hovered over the items.
          </p>
          <p>
            See TListHotTrackStyle for more information about the values in the enumeration and their meanings.
          </p>
          <p>
            The default value for the property is an empty set ([]). Changing the value for the property causes the widgetset class to be updated. The property value is posted to the widgetset class when its Handle is allocated or updated.
          </p>
          <p>
            Use the HotTrack property to enable or disable the hot tracking selection feature for the list view control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.IconOptions">
        <short>
          Options for layouts, which show icons. Sets arrangement of icons, text-wrapping state.
        </short>
        <descr>
          <p>
            <var>IconOptions</var> is a <var>TIconOptions</var> property with the icon options used when the list view uses the vsIcon or vsSmallIcon view style. Values in IconOptions are passed to the widgetset class to render the control using the native style for the platform. Set values in its properties to control the icon placement, auto-arrange features, and caption text wrapping for a list item on then control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.ItemFocused">
        <short>The list item which has focus on the control.</short>
        <descr>
          <p>
            <var>ItemFocused</var> is a <var>ItemFocused</var> property which contains the list that has focus on the list view control. The property value is <b>Nil</b> if a list item has not been focued on the control. Changing the value in the property to a valid list item causes the widgetset class to be updated when its Handle has been assigned.
          </p>
          <p>
            ItemFocused is updated when a LVN_ITEMCHANGED notification message with a focus state change is handled for the list view control.
          </p>
          <p>
            Use <var>Selected</var>  to access the list item which is selected on the list view control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.ItemIndex">
        <short>Ordinal position for the selected list item on the control.</short>
        <descr>
          <p>
            <var>ItemIndex</var> is an <var>Integer</var> property which contains the ordinal position for the selected item on the list view control.
          </p>
          <p>
            When OwnerData is False, the property value contains the value received from the widgetset class when the LVN_ITEMCHANGED notification message is handled for the control. If OwnerData is True, an internal member is locally maintained to track the selected item. In OwnerData (virtual) mode, only the most recently accessed item is stored for the control.
          </p>
          <p>
            Setting a new value for the property causes the Selected property to be updated. In OwnerData mode, this causes the internal member to be updated and the virtual item is retrieved to set its Selected property to True. If Virtual mode is not enabled, the Selected property is set to corresponding value in Items.
          </p>
          <p>
            If the new property value is -1, the value in Selected is set to Nil. Setting a new property value when MultiSelect is enabled also causes Selected to be set to Nil.
          </p>
          <p>
            An Exception is raised if the new property value is not a value index position in Items, or -1.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Selected"/>
          <link id="TCustomListView.Items"/>
          <link id="TCustomListView.OwnerData"/>
        </seealso>
      </element>

      <element name="TCustomListView.Items">
        <short>Collection of list items displayed on the list view control.</short>
        <descr>
          <p>
            <var>Items</var> - the list of entries in the list. Held as a linked list with a cached index of the last accessed item.
          </p>
          <p>
            <var>Items</var> is of type <var>TListitems</var> which has a built-in cache of the last accessed item. This speeds up interface updates since <var>Item.Index</var> is often used for the same item updating more properties. If <var>FCacheIndex</var> = -1 then the cache is not valid.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.MultiSelect">
        <short>
          Allows simultaneous selection of one or more list items using Ctrl+Click, Shift+Click, Ctrl+Shift+Click, or using program code.
        </short>
        <descr>
          <p>
            <var>MultiSelect</var> is a <var>Boolean</var> property which indicates if multiple simultaneous item selections are allows in the list view control. The default value for the property is False, and allows a single selection as reflected in the Selected property.
          </p>
          <p>
            When set to True, multiple entries in the Items property can bemarked as Selected. This can be achieved in program code by iterating over the TListItem instances in Items, and setting the Selected property for the appropriate items. At run-time, the mouse can be use toggle the selected state for one or more of the list items.
          </p>
          <dl>
            <dt>Click</dt>
            <dd>Toggles the selected state for the list item under the mouse pointer.</dd>
            <dt>Shift+Click</dt>
            <dd>
              Toggles the selected state for a contiguous block of list items from the mouse pointer to the previous item selection.
            </dd>
            <dt>Ctrl+Click</dt>
            <dd>
              Toggles the selected state list item under the mouse pointer without altering the previously selected list items.
            </dd>
            <dt>Ctrl+Shift+Click</dt>
            <dd>
              Toggles the selected state for a contiguous block of list items from the mouse pointer to the previously focused list item.
            </dd>
          </dl>
          <p>
            Use SelCount to get the number of selected items when MultiSelect is enabled. Use Items to access the list items to check the values in their Selected properties.
          </p>
          <p>
            Use SelectAll to set the selected state to True for all of the Items on the control.
          </p>
          <p>
            Use ClearSelection to clear the selected state for all of the Items on the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Items"/>
          <link id="TCustomListView.SelCount"/>
          <link id="TCustomListView.Selected"/>
          <link id="TCustomListView.SelectAll"/>
          <link id="TCustomListView.ClearSelection"/>
          <link id="TListItem.Selected"/>
        </seealso>
      </element>

      <element name="TCustomListView.OwnerData">
        <short>
          Enables or disables owner data (virtual) mode for the list view control.
        </short>
        <descr>
          <p>
            <var>OwnerData</var> is a <var>Boolean</var> property which enables or disables virtual mode for the list view control.
          </p>
          <p>
            When set to <b>True</b>, the Items property does not contain the actual data displayed on the control. The display values are retrieved using the OnData, OnDataFind, and OnDataHint event handlers. Only the most recently accessed owner data item exists  in the list view control. This allows the list view to be used to display a large number of items with a minimal amount of overhead.
          </p>
          <p>
            Set the value for the Count property in Items to indicate the number of owner data items available to the list view control. Assign a routine to OnData to populate an individual list item (and sub-items if needed) from the source for the owner data.
          </p>
          <p>
            When OwnerData is set to <b>False</b>, all values displayed on the list view control are maintained in the Items property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Items"/>
          <link id="TCustomListView.OnData"/>
          <link id="TCustomListView.OnDataFind"/>
          <link id="TCustomListView.OnDataHint"/>
          <link id="TListItems.Count"/>
        </seealso>
      </element>

      <element name="TCustomListView.ReadOnly">
        <short>Disables editing of list items on the control when set to True.</short>
        <descr>
          <p>
            <var>ReadOnly</var> is a <var>Boolean</var> property used to enable or disable editing of captions for list items at run-time. When ReadOnly is set to <b>True</b>, the editor for the control cannot be activated using a mouse double Click or by pressing the F2 function key.
          </p>
          <p>
            The default value for the property is <b>False</b>, and indicates that item editing is allowed.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.RowSelect">
        <short>
          In Report view, this highlights the entire selected row to the right edge of the list view control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.SelCount">
        <short>Number of currently selected Items when MultiSelect is enabled.</short>
        <descr>
          <p>
            <var>SelCount</var> is a read-only <var>Integer</var> property with the number selected entries in <var>Items</var>. SelCount is relevant when <var>MultiSelect</var> is set to <b>True</b>; otherwise, the single selected item is found in the Selected property.
          </p>
          <p>
            If the <var>Handle</var> has been allocated for the widgetset class, the value from the <var>GetSelCount</var> method is used as the property value. Otherwise, the property value is calculated by counting the number of <var>TListItem</var> instances in Items that have their <var>Selected</var> property set to True. The return value is 0 when none of the Items have a selected property set to <b>True</b>.
          </p>
          <p>
            Use GetNextItem with the lisSelected item state to retrieve a multi-selected item that is adjacent to another selected item.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.MultiSelect"/>
          <link id="TCustomListView.Selected"/>
          <link id="TCustomListView.Items"/>
          <link id="TCustomListView.GetNextItem"/>
          <link id="TListItem.Selected"/>
          <link id="TListItems"/>
        </seealso>
      </element>

      <element name="TCustomListView.Selected">
        <short>Contains the selected list item in the list view control.</short>
        <descr>
          <p>
            <var>Selected</var> is a <var>TListItem</var> property which contains the selected list item in the list view control. Assign a value from the Items property to select the list item.
          </p>
          <p>
            When MultiSelect is enabled, Selected represents the first entry in Items that has its Selected property set to <b>True</b>. If none of the list items has its Selected property set to <b>True</b>, or SelCount is <b>0</b>, the property value is <b>Nil</b>.
          </p>
          <p>
            When OwnerData (or Virtual Mode) is enabled, Selected refers to the most recent owner data item retrieved when the value in ItemIndex was changed. If the item index was set to <b>-1</b>, the property value is <b>Nil</b>.
          </p>
          <p>
            When both OwnerData and MultiSelect are enabled, Selected refers to the first entry in Items with its Selected property set to <b>True</b>. If none of the list items has its Selected property set to <b>True</b>,  the property value is <b>Nil</b>.
          </p>
          <p>
            Setting a new value for Selected causes the affected list item(s) in the Items property to be updated. In single select mode (MultiSelect = <b>False</b>), the Selected property in the current list item is set to <b>False</b> prior to updating the property value. In MultiSelect mode, a list item assigned as the new property value causes its Selected property to be set to <b>True</b> in the Items for the control.
          </p>
          <p>
           Set Selected to <b>Nil</b> to clear the current selection(s) in the control. When MultiSelect is enabled, this causes all of the entries in Items to reset their Selected properties to <b>False</b>. In short, setting Selected to <b>Nil</b> clears any existing multi-selections in Items.
          </p>
          <p>
            Setting a new value for the property causes the OnChange and OnSelectItem event handlers to be signalled (when assigned) when the LVN_ITEMCHANGED notification message is handled for the control. If both handlers are assigned, both handlers are signalled.
          </p>
          <p>
            Assigning a list item to Selected that is not owned by the current list view control causes an exception to be raised.
          </p>
          <p>
            Use ClearSelection to clear the Selected attribute for all single or multi-selected Items in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OwnerData"/>
          <link id="TCustomListView.MultiSelect"/>
          <link id="TCustomListView.ItemIndex"/>
          <link id="TCustomListView.Items"/>
          <link id="TCustomListView.ClearSelection"/>
          <link id="TCustomListView.SelectAll"/>
          <link id="TListItem.Selected"/>
          <link id="TListItems.Count"/>
          <link id="TOwnerDataListItem.SetDataIndex"/>
        </seealso>
      </element>

      <element name="TCustomListView.LastSelected">
        <short>
          Contains the list item that was the most recently selected item on the control.
        </short>
        <descr>
          <p>
            <var>LastSelected</var> is a read-only <var>TListItem</var> property with the most recently selected item on the control. Its value references the internal member used for the <var>Selected</var> property. It is updated when a value is assigned to the Selected property, or a list item is selected using the keyboard or mouse at run-time. Setting Selected to <b>Nil</b> or calling ClearSelection causes LastSelected to return <b>Nil</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.Selected"/>
          <link id="TCustomListView.ClearSelection"/>
        </seealso>
      </element>

      <element name="TCustomListView.TabStop">
        <short>
          Allows the user to navigate to the control by pressing the Tab or Shift_Tab keys.
        </short>
        <descr>
          <p>
            The default value for the property is True in TCustomListView,
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
        </seealso>
      </element>

      <element name="TCustomListView.TopItem">
        <short>Listview item, which is shown at the top edge of ListView.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ViewOrigin">
        <short>
          Coordinate with the left/top visible points in the control, updates when Listview scrolls.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.VisibleRowCount">
        <short>
          Number of visible rows using the size, position, and layout for the list view control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListView">
        <short>
          <var>TListView </var> - a window showing a list of <var>Items</var> which may or may not have associated icons.
        </short>
        <descr>
          <p>
            <var>TListView </var>- a window showing a list of items which may or may not have associated icons.
          </p>
          <p>
            At first this control looks very like <link id="#lcl.stdctrls.TListBox">TListBox</link> but it has a much higher degree of complexity. It is capable of displaying Items in <var>Columns</var> of <var>Rows</var> and it can have images associated with the list <var>Items</var>.
          </p>
          <p>
            The important information is held in <var>Items</var>, a string-list that can be created using the string-list editor obtained by right-clicking on the ListView in the Form Editor or by clicking on the ellipsis (<b>...</b>) next to the <var>Items</var> entry in the Object Inspector.
          </p>
          <p>
            A typical application might have two ImageLists: one of <var>LargeImages</var> and one of <var>SmallImages</var>, containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list.
          </p>
          <p>
            <var>SmallImages</var> (if assigned to a string-list) can be displayed beside the text strings in the list view and the programmer would supply code to ensure that when an item with its associated Small Image was selected, the corresponding Large Image would be displayed in another window.
          </p>
          <p>
            One or more <var>TImageList</var> controls need to be added to the Form Designer and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. The image list can be populated by reading from files. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be assigned to each entry in the list.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView"/>
        </seealso>
      </element>

      <element name="TListView.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TListView.AllocBy" link="#lcl.comctrls.TCustomListView.AllocBy"/>
      <element name="TListView.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TListView.AutoSort" link="#lcl.comctrls.TCustomListView.AutoSort"/>
      <element name="TListView.AutoSortIndicator" link="#lcl.comctrls.TCustomListView.AutoSortIndicator"/>
      <element name="TListView.AutoWidthLastColumn" link="#lcl.comctrls.TCustomListView.AutoWidthLastColumn"/>
      <element name="TListView.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TListView.BorderStyle" link="#lcl.comctrls.TCustomListView.BorderStyle"/>
      <element name="TListView.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
      <element name="TListView.Checkboxes" link="#lcl.comctrls.TCustomListView.Checkboxes"/>
      <element name="TListView.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TListView.Columns" link="#lcl.comctrls.TCustomListView.Columns"/>
      <element name="TListView.ColumnClick" link="#lcl.comctrls.TCustomListView.ColumnClick"/>
      <element name="TListView.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TListView.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TListView.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TListView.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TListView.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TListView.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TListView.GridLines" link="#lcl.comctrls.TCustomListView.GridLines"/>
      <element name="TListView.HideSelection" link="#lcl.comctrls.TCustomListView.HideSelection"/>
      <element name="TListView.IconOptions" link="#lcl.comctrls.TCustomListView.IconOptions"/>
      <element name="TListView.Items" link="#lcl.comctrls.TCustomListView.Items"/>
      <element name="TListView.LargeImages" link="#lcl.comctrls.TCustomListView.LargeImages"/>
      <element name="TListView.LargeImagesWidth" link="#lcl.comctrls.TCustomListView.LargeImagesWidth"/>
      <element name="TListView.MultiSelect" link="#lcl.comctrls.TCustomListView.MultiSelect"/>
      <element name="TListView.OwnerData" link="#lcl.comctrls.TCustomListView.OwnerData"/>
      <element name="TListView.OwnerDraw" link="#lcl.comctrls.TCustomListView.OwnerDraw"/>

      <element name="TListView.ParentColor">
        <short>Uses the Color from the Parent control, when enabled.</short>
        <descr>
          <p>
            ParentColor determines if the control should use the Color from the Parent control, when enabled. The default value for the property is False in TListView.
          </p>
          <p>
            When this property is True, all changes to the Color of the parent will also be applied to the Color of the control, ensuring that they both contain same value. If the Color of the control is changed by the application, then ParentColor will be automatically set to False.
          </p>
         <p>
           Using ParentColor when the Color value is clDefault can cause problems in resolving the actual color value. To obtain the Color property of a control while taking into account clDefault and ParentColor, use the GetColorResolvingParent method. This method might return a non-RGB color, but will never return clDefault. To obtain a purely RGB result use the GetRGBColorResolvingParent method.
         </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
          <link id="#lcl.controls.TControl.Color">TControl.Color</link>
          <link id="#lcl.controls.TControl.GetColorResolvingParent">TControl.GetColorResolvingParent</link>
          <link id="#lcl.controls.TControl.GetRGBColorResolvingParent">TControl.GetRGBColorResolvingParent</link>
        </seealso>
      </element>

      <element name="TListView.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TListView.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TListView.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TListView.ReadOnly" link="#lcl.comctrls.TCustomListView.ReadOnly"/>
      <element name="TListView.RowSelect" link="#lcl.comctrls.TCustomListView.RowSelect"/>
      <element name="TListView.ScrollBars" link="#lcl.comctrls.TCustomListView.ScrollBars"/>
      <element name="TListView.ShowColumnHeaders" link="#lcl.comctrls.TCustomListView.ShowColumnHeaders"/>
      <element name="TListView.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TListView.SmallImages" link="#lcl.comctrls.TCustomListView.SmallImages"/>
      <element name="TListView.SmallImagesWidth" link="#lcl.comctrls.TCustomListView.SmallImagesWidth"/>
      <element name="TListView.SortColumn" link="#lcl.comctrls.TCustomListView.SortColumn"/>
      <element name="TListView.SortDirection" link="#lcl.comctrls.TCustomListView.SortDirection"/>
      <element name="TListView.SortType" link="#lcl.comctrls.TCustomListView.SortType"/>
      <element name="TListView.StateImages" link="#lcl.comctrls.TCustomListView.StateImages"/>
      <element name="TListView.StateImagesWidth" link="#lcl.comctrls.TCustomListView.StateImagesWidth"/>
      <element name="TListView.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TListView.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TListView.ToolTips" link="#lcl.comctrls.TCustomListView.ToolTips"/>
      <element name="TListView.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TListView.ViewStyle" link="#lcl.comctrls.TCustomListView.ViewStyle"/>
      <element name="TListView.OnAdvancedCustomDraw" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDraw"/>
      <element name="TListView.OnAdvancedCustomDrawItem" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDrawItem"/>
      <element name="TListView.OnAdvancedCustomDrawSubItem" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDrawSubItem"/>
      <element name="TListView.OnChange" link="#lcl.comctrls.TCustomListView.OnChange"/>
      <element name="TListView.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TListView.OnColumnClick" link="#lcl.comctrls.TCustomListView.OnColumnClick"/>
      <element name="TListView.OnCompare" link="#lcl.comctrls.TCustomListView.OnCompare"/>
      <element name="TListView.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TListView.OnCreateItemClass" link="#lcl.comctrls.TCustomListView.OnCreateItemClass"/>
      <element name="TListView.OnCustomDraw" link="#lcl.comctrls.TCustomListView.OnCustomDraw"/>
      <element name="TListView.OnCustomDrawItem" link="#lcl.comctrls.TCustomListView.OnCustomDrawItem"/>
      <element name="TListView.OnCustomDrawSubItem" link="#lcl.comctrls.TCustomListView.OnCustomDrawSubItem"/>
      <element name="TListView.OnData" link="#lcl.comctrls.TCustomListView.OnData"/>
      <element name="TListView.OnDataFind" link="#lcl.comctrls.TCustomListView.OnDataFind"/>
      <element name="TListView.OnDataHint" link="#lcl.comctrls.TCustomListView.OnDataHint"/>
      <element name="TListView.OnDataStateChange" link="#lcl.comctrls.TCustomListView.OnDataStateChange"/>
      <element name="TListView.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TListView.OnDeletion" link="#lcl.comctrls.TCustomListView.OnDeletion"/>
      <element name="TListView.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TListView.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TListView.OnDrawItem" link="#lcl.comctrls.TCustomListView.OnDrawItem"/>
      <element name="TListView.OnEdited" link="#lcl.comctrls.TCustomListView.OnEdited"/>
      <element name="TListView.OnEditing" link="#lcl.comctrls.TCustomListView.OnEditing"/>
      <element name="TListView.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TListView.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TListView.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TListView.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TListView.OnInsert" link="#lcl.comctrls.TCustomListView.OnInsert"/>
      <element name="TListView.OnItemChecked" link="#lcl.comctrls.TCustomListView.OnItemChecked"/>
      <element name="TListView.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TListView.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TListView.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TListView.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TListView.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TListView.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TListView.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TListView.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TListView.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TListView.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TListView.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TListView.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TListView.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TListView.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TListView.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TListView.OnSelectItem" link="#lcl.comctrls.TCustomListView.OnSelectItem"/>
      <element name="TListView.OnShowHint" link="#lcl.controls.TControl.OnShowHint"/>
      <element name="TListView.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TListView.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TListView.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

      <element name="TProgressBarOrientation">
        <short>Represents the orientations used for a progress bar.</short>
        <descr>
          <p>
            <var>TProgressBarOrientation</var> is an enumerated type with values that represent the orientations used for a progress bar. TProgressBarOrientation is the type used to implement the <var>TCustomProgressBar.Orientation</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Orientation"/>
        </seealso>
      </element>
      <element name="TProgressBarOrientation.pbHorizontal">
        <short>
          Progress bar is oriented horizontally, and displays progress from left to right.
        </short>
      </element>
      <element name="TProgressBarOrientation.pbVertical">
        <short>
          Progress bar is oriented vertically, and displays progress from bottom to top.
        </short>
      </element>
      <element name="TProgressBarOrientation.pbRightToLeft">
        <short>
          Progress bar is oriented horizontally, and displays progress from right to left.
        </short>
      </element>
      <element name="TProgressBarOrientation.pbTopDown">
        <short>
          Progress bar is oriented vertically, and displays progress from top to bottom.
        </short>
      </element>

      <element name="TProgressBarStyle">
        <short>Represents the visual display styles used for a progress bar.</short>
        <descr>
          <p>
            <var>TProgressBarStyle</var> is an enumerated type with values that represent visual display styles for a progress bar. TProgressBarStyle is the type used to implement the <var>TCustomProgressBar.Style</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Style"/>
          <link id="TCustomProgressBar.Smooth"/>
        </seealso>
      </element>
      <element name="TProgressBarStyle.pbstNormal">
        <short>
          Progress bar indicator is displayed as a static bar using the native drawing style or theme for the platform.
        </short>
      </element>
      <element name="TProgressBarStyle.pbstMarquee">
        <short>
          Progress bar indicator is displayed as an animated marquee, where movement indicates activity but does not reflect the completed portion of a task.
        </short>
      </element>

      <element name="TCustomProgressBar">
        <short>Implements the base class for progress bar controls.</short>
        <descr>
          <p>
            <var>TCustomProgressBar</var> is a <var>TWinControl</var> descendant which implements a progress bar control.
          </p>
          <p>
            A progress bar is used to indicate the progress for a lengthy operation. It contains an indicator bar that is updated with the completion percentage for the task. A progress bar can use either horizontal or vertical orientations. The visual appearance of the control can be configured using drawing styles, themes, and other property settings.
          </p>
          <p>
            TCustomProgressBar is the ancestor for <var>TProgressBar</var>.
          </p>
        </descr>
        <seealso>
          <link id="TProgressBar"/>
          <link id="#lcl.controls.TWinControl">TWinControl</link>
        </seealso>
      </element>

      <element name="TCustomProgressBar.FMin"/>
      <element name="TCustomProgressBar.FMax"/>
      <element name="TCustomProgressBar.FStep"/>
      <element name="TCustomProgressBar.FPosition"/>
      <element name="TCustomProgressBar.FSmooth"/>
      <element name="TCustomProgressBar.FBarShowText"/>
      <element name="TCustomProgressBar.FBarTextFormat"/>
      <element name="TCustomProgressBar.FOrientation"/>
      <element name="TCustomProgressBar.FStyle"/>

      <element name="TCustomProgressBar.GetMin">
        <short>Gets the value for the Min property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Min"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.GetMin.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomProgressBar.GetMax">
        <short>Gets the value for the Max property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Max"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.GetMax.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomProgressBar.GetPosition">
        <short>Gets the value for the Position property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Position"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.GetPosition.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetParams">
        <short>Sets the values for the Min and Max properties.</short>
        <descr>
          <p>
            <var>SetParams</var> is a convenience method used to set new values for both the <var>Min</var> and the <var>Max</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Max"/>
          <link id="TCustomProgressBar.Min"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetParams.AMin">
        <short>New value for the Min property.</short>
      </element>
      <element name="TCustomProgressBar.SetParams.AMax">
        <short>New value for the Max property.</short>
      </element>

      <element name="TCustomProgressBar.SetMin">
        <short>Sets the value for the Min property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Min"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetMin.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetMax">
        <short>Sets the value for the Max property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Max"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetMax.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetPosition">
        <short>Sets the value for the Position property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Position"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetPosition.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetStep">
        <short>Sets the value for the Step property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Step"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetStep.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetSmooth">
        <short>Sets the value for the Smooth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Smooth"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetSmooth.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetBarShowText">
        <short>Sets the value for the BarShowText property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.BarShowText"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetBarShowText.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetOrientation">
        <short>Sets the value for the Orientation property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Orientation"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetOrientation.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.SetStyle">
        <short>Sets the value for the Style property.</short>
        <descr/>
        <seealso>
          <link id="TCustomProgressBar.Style"/>
        </seealso>
      </element>
      <element name="TCustomProgressBar.SetStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomProgressBar.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomProgressBar.ApplyChanges">
        <short>
          <var>ApplyChanges</var> - apply any changes that have occurred.
        </short>
        <descr>
          <p>
            <var>ApplyChanges</var> is a method used to apply property values from the progress bar to the widgetset class.
          </p>
          <p>
            Values in the <var>Min</var>, <var>Max</var>, and <var>Position</var> properties are normalized; i. e. Min &lt;= Position &lt;= Max. When the <var>Handle</var> has been allocated for the control, the values are applied to the widgetset class by calling its <var>ApplyChanges</var> method.
          </p>
          <p>
            No actions are performed in the method when the component is being loaded using the LCL streaming mechanism.
          </p>
          <p>
            ApplyChanges is called when the Handle is created (or re-created) in <var>InitializeWnd</var>, and from the <var>Loaded</var> method when component streaming has been completed. It is also called when values in properties are changed, including: <var>Min</var>, <var>Max</var>, <var>Position</var>, <var>Step</var>, <var>Orientation</var>, <var>Smooth</var>, and <var>BarShowText</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Min"/>
          <link id="TCustomProgressBar.Max"/>
          <link id="TCustomProgressBar.Position"/>
          <link id="TCustomProgressBar.InitializeWnd"/>
          <link id="TCustomProgressBar.Loaded"/>
        </seealso>
      </element>

      <element name="TCustomProgressBar.InitializeWnd">
        <short>
          Applies property values to the widgetset class when the Handle is (re-)created.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Loaded">
        <short>
          Applies property values to the widgetset class when component streaming is completed.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TCustomProgressBar.GetControlClassDefaultSize">
        <short>Gets the default size for new instances of the class.</short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            Create is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create sets component style flags needed for the control, and sets the default values for properties in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomProgressBar.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomProgressBar.StepIt">
        <short>Increments the Position for the progress bar by the value in Step.</short>
        <descr>
          <p>
            <var>StepIt</var> is a procedure used to move the progress bar indicator from its current <var>Position</var> using the increment specified in the <var>Step</var> property. The value is Step is added to the value in Position. Position is range limited to the values in <var>Min</var> or <var>Max</var> if needed.
          </p>
          <p>
            If the Handle for the control has been allocated, the SetPosition method in the widgetset class is called to apply the change in the Position property.
          </p>
          <p>
            Use <var>StepBy</var> to apply an arbitrary increment value to Position.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Step"/>
          <link id="TCustomProgressBar.StepBy"/>
          <link id="TCustomProgressBar.Position"/>
        </seealso>
      </element>

      <element name="TCustomProgressBar.StepBy">
        <short>
          Applies an arbitrary increment value to the Position for the progress bar.
        </short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.StepBy.Delta">
        <short>Increment applied to the value in Position.</short>
      </element>

      <element name="TCustomProgressBar.Max">
        <short>Specifies the maximum value for the Position in the progress bar.</short>
        <descr>
          <p>
            <var>Max</var> is an <var>Integer</var> property which specifies the maximum value allowed in the <var>Position</var> property. The default value for the property is <b>100</b>.
          </p>
          <p>
            Set values for the <var>Min</var> and <var>Max</var> properties as needed to represent the task or operation. Or, use the <var>SetParams</var> method to set both Min and Max values at the same time.
          </p>
          <p>
            Changing the value for the property causes the <var>ApplyChanges</var> method to be called.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Min"/>
          <link id="TCustomProgressBar.Position"/>
          <link id="TCustomProgressBar.ApplyChanges"/>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Min">
        <short>Specifies the minimum value for the Position in the progress bar.</short>
        <descr>
          <p>
            <var>Min</var> is an <var>Integer</var> property which specifies the minimum value allowed in the <var>Position</var> property. The default value for the property is <b>0</b>.
          </p>
          <p>
            Set values for the <var>Min</var> and <var>Max</var> properties as needed to represent the task or operation. Or, use the <var>SetParams</var> method to set both Min and Max values at the same time.
          </p>
          <p>
            Changing the value for the property causes the <var>ApplyChanges</var> method to be called.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Max"/>
          <link id="TCustomProgressBar.Position"/>
          <link id="TCustomProgressBar.ApplyChanges"/>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Orientation">
        <short>
          Specifies the orientation and direction for the progress bar.
        </short>
        <descr>
          <p>
            <var>Orientation</var> is a <var>TProgressBarOrientation</var> property which indicates the orientation and direction for the progress bar. The default value is <var>pbHorizontal</var>, and orients the progress bar horizontally. As the value in <var>Position</var> is increased, the progress bar is moved from left to right.
          </p>
          <p>
            See <var>TProgressBarOrientation</var> for the available values and their meanings.
          </p>
          <p>
            Changing the value for the property causes the <var>ApplyChanges</var> method to be called.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Max"/>
          <link id="TCustomProgressBar.Min"/>
          <link id="TCustomProgressBar.Position"/>
          <link id="TCustomProgressBar.ApplyChanges"/>
          <link id="TProgressBarOrientation"/>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Position">
        <short>The current position for the progress bar.</short>
        <descr>
          <p>
            <var>Position</var> is an <var>Integer</var> property which contains the current position for the progress bar. The values in Position, <var>Min</var>, and <var>Max</var> determine the completion percentage and the length for the progress bar indicator when <var>Style</var> is set to <var>pbstNormal</var>.
          </p>
          <p>
            Position must be in the range specified by the <var>Min</var> and <var>Max</var> properties. Setting a new value for the property causes the <var>ApplyChanges</var> method to be called. It validates and range limits property values before they are applied to the widgetset class.
          </p>
          <p>
            Use <var>StepIt</var> and <var>Step</var> to increment the value in Position by a fixed value.
          </p>
          <p>
            Use <var>StepBy</var> to increment the value in Position by an arbitrary value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Min"/>
          <link id="TCustomProgressBar.Max"/>
          <link id="TCustomProgressBar.Style"/>
          <link id="TCustomProgressBar.StepBy"/>
          <link id="TCustomProgressBar.Step"/>
          <link id="TCustomProgressBar.StepIt"/>
          <link id="TCustomProgressBar.ApplyChanges"/>
          <link id="TProgressBarStyle"/>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Smooth">
        <short>
          Indicates if the progress bar indicator is drawn as a smooth solid bar, as opposed to individual bar segments.
        </short>
        <descr>
          <p>
            The implementation of <var>Smooth</var> drawing is platform-dependent. Some widgetsets do not use the segmented drawing style for their progress bars. For those platforms, the value in the property is not used.
          </p>
          <p>
            Use <var>Style</var> to control whether a normal progress bar is drawn, or if an animated marquee is used in the progress bar indicator.
          </p>
        </descr>
        <seealso>
          <link id="TCustomProgressBar.Style"/>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Step">
        <short>
          Increment applied to the value in Position in the StepIt method.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.Style">
        <short>
          Drawing style for the progress bar.
        </short>
        <descr>
          <p>
            The default value for the property is <var>pbstNormal</var>, and causes a solid (or segmented bar) to be displayed. <var>pbstMarquee</var> causes the animated marquee-style progress bar to be displayed.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.BarShowText">
        <short>
          Indicates if status text is draw over the progress bar.
        </short>
        <descr>
          <p>
            <var>BarShowText</var> some widgetsets allow text to be displayed on the bar to indicate its position and range of values. The implementation of BarShowText is platform-specific. If the widgetset does not display text on the progress bar, the value in the property is not used.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TProgressBar">
        <short>
          <var>TProgress Bar</var> - a bar that depicts what proportion of a process has been completed.
        </short>
        <descr>
          <p>
            <var>TProgress Bar</var> is a <var>TCustomProgressBar</var> descendant that implements a control which depicts the progress of a process, or the proportion of the process that has been completed. A series of colored rectangles appears in the control filling it from left to right or from top to bottom to represent the progress for the process.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <element name="TProgressBar.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TProgressBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TProgressBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TProgressBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
      <element name="TProgressBar.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TProgressBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TProgressBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TProgressBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TProgressBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TProgressBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TProgressBar.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TProgressBar.Hint" link="#lcl.controls.TControl.Hint"/>
      <element name="TProgressBar.Max" link="#lcl.comctrls.TCustomProgressBar.Max"/>
      <element name="TProgressBar.Min" link="#lcl.comctrls.TCustomProgressBar.Min"/>
      <element name="TProgressBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TProgressBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TProgressBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TProgressBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TProgressBar.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TProgressBar.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TProgressBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TProgressBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TProgressBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TProgressBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TProgressBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TProgressBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TProgressBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TProgressBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TProgressBar.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TProgressBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TProgressBar.Orientation" link="#lcl.comctrls.TCustomProgressBar.Orientation"/>
      <element name="TProgressBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TProgressBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TProgressBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TProgressBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TProgressBar.Position" link="#lcl.comctrls.TCustomProgressBar.Position"/>
      <element name="TProgressBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TProgressBar.Smooth" link="#lcl.comctrls.TCustomProgressBar.Smooth"/>
      <element name="TProgressBar.Step" link="#lcl.comctrls.TCustomProgressBar.Step"/>
      <element name="TProgressBar.Style" link="#lcl.comctrls.TCustomProgressBar.Style"/>
      <element name="TProgressBar.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TProgressBar.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TProgressBar.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TProgressBar.BarShowText" link="#lcl.comctrls.TCustomProgressBar.BarShowText"/>

      <element name="TUDAlignButton">
        <short>
          <var>TUDAlignButton</var> - enumerated type contains constants for alignment of an UpDown button.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDAlignButton.udLeft">
        <short/>
      </element>
      <element name="TUDAlignButton.udRight">
        <short/>
      </element>
      <element name="TUDAlignButton.udTop">
        <short/>
      </element>
      <element name="TUDAlignButton.udBottom">
        <short/>
      </element>

      <element name="TUDOrientation">
        <short>
          <var>TUDOrientation</var> - enumerated type with constants for orientation of UpDown button (Horizontal or Vertical).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDOrientation.udHorizontal">
        <short/>
      </element>
      <element name="TUDOrientation.udVertical">
        <short/>
      </element>

      <element name="TUpDownDirection">
        <short>
          Indicates whether a value is being increased, decreased, or not changed.
        </short>
        <descr>
            <p>
              <var>TUpDownDirection</var> is an enumerated type with values that indicates whether a value is being increased, decreased, or not changed in a <var>TCustomUpDown</var> control. TUpDownDirection is the type passed as an argument to <var>TUDChangingEventEx</var> event handlers.
            </p>
        </descr>
        <seealso/>
      </element>
      <element name="TUpDownDirection.updNone">
        <short>The value is not changed in the control.</short>
      </element>
      <element name="TUpDownDirection.updUp">
        <short>The value is increased in the control.</short>
      </element>
      <element name="TUpDownDirection.updDown">
        <short>The value is decreased in the control.</short>
      </element>

      <element name="TUDBtnType">
        <short>Represents the buttons used in a TCustomUpDown control.</short>
        <descr>
          <p>
            <var>TUDBtnType</var> is an enumerated type with values that represent the buttons used in a <var>TCustomUpDown</var> control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TUDBtnType.btNext">
        <short>Represents the Next (Up, Increase Value) button.</short>
      </element>
      <element name="TUDBtnType.btPrev">
        <short>Represents the Previous (Down, Decrease Value) button.</short>
        <short/>
      </element>

      <element name="TUDClickEvent">
        <short>
          <var>TUDClickEvent</var> - generic event handling procedure for clicking on an UpDown button.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDClickEvent.Sender">
        <short/>
      </element>
      <element name="TUDClickEvent.Button">
        <short/>
      </element>

      <element name="TUDChangingEvent">
        <short>
          <var>TUDChangingEvent</var> - generic event handling procedure for changes in UpDown button.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDChangingEvent.Sender">
        <short/>
      </element>
      <element name="TUDChangingEvent.AllowChange">
        <short/>
      </element>

      <element name="TUDChangingEventEx">
        <short>
          Specifies an event handler signalled with additional information when the value for a TUpDown control is about to change.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDChangingEventEx.Sender">
        <short/>
      </element>
      <element name="TUDChangingEventEx.AllowChange">
        <short/>
      </element>
      <element name="TUDChangingEventEx.NewValue">
        <short/>
      </element>
      <element name="TUDChangingEventEx.Direction">
        <short/>
      </element>

      <element name="TCustomUpDown">
        <short>
          <var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display.
        </short>
        <descr>
          <p>
            <var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display.
          </p>
          <p>
            The control definition itself does not specify the variable upon which the buttons operate. The application programmer is responsible for supplying an event handler for <var>OnClick</var> to determine which button has been selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing or decrementing the variable in the control with which the UpDown is associated.
          </p>
          <p>
            The amount by which the variable is changed is set by the integer property <var>Increment</var> with the optional multiplier <var>Thousands</var> (a boolean property).
          </p>
          <p>
            For example the UpDown control may be used to move a slider up and down a scale by a specified amount for each click; alternatively a number may be displayed in a text box and clicking the buttons of the UpDown control may increment or decrement the number displayed by a specified amount.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomUpDown.FAlignButton"/>
      <element name="TCustomUpDown.FArrowKeys"/>
      <element name="TCustomUpDown.FAssociate"/>
      <element name="TCustomUpDown.FCanChangeDir"/>
      <element name="TCustomUpDown.FCanChangePos"/>
      <element name="TCustomUpDown.FIncrement"/>
      <element name="TCustomUpDown.FMax"/>
      <element name="TCustomUpDown.FMaxBtn"/>
      <element name="TCustomUpDown.FMin"/>
      <element name="TCustomUpDown.FMinBtn"/>
      <element name="TCustomUpDown.FMinRepeatInterval"/>
      <element name="TCustomUpDown.FMouseDownBounds"/>
      <element name="TCustomUpDown.FMouseTimerEvent"/>
      <element name="TCustomUpDown.FMouseInsideComp"/>
      <element name="TCustomUpDown.FOnChanging"/>
      <element name="TCustomUpDown.FOnChangingEx"/>
      <element name="TCustomUpDown.FOnClick"/>
      <element name="TCustomUpDown.FOrientation"/>
      <element name="TCustomUpDown.FPosition"/>
      <element name="TCustomUpDown.FThousands"/>
      <element name="TCustomUpDown.FWrap"/>

      <element name="TCustomUpDown.FUseWS">
        <short>Indicates if the control depends on access to its WidgetSet class.</short>
        <descr>
          <p>
            FUseWS is a private Boolean member used to indicate if the control depends on  access to its WidgetSet class instance. The value in FUseWS is set in the constructor for the class instance.
          </p>
          <p>
            FUseWS is used in the constructor to ensure that buttons are created for Prev and Next values when they are not part of the widgetset class implementation.
          </p>
          <p>
            FUseWS is used in the InitializeWnd method to determine if the property values must be set in the widgetset class, including: MinPosition, MaxPosition, Position, Increment, Wrap, Orientation, and UseArrowKeys.
          </p>
          <p>
            FUseWS is used in the UpdateOrientation method to determine whether the action is implemented in the widgetset class, or handled in TCustomUpDown.
          </p>
          <p>
            FUseWS is used in the AdjustPos method to determine whether a change in the control value using its buttons is handled in the current class instance, or forwarded to the appropriate button click method in the widgetset class. Similarly, handling for mouse wheel events are determined using the FUseWS member.
          </p>
        </descr>
        <version>Introduced in LCL version 2.1.0.</version>
        <seealso/>
      </element>

      <element name="TCustomUpDown.CheckMouseEntering">
        <short>Indicates if the mouse pointer has entered the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CheckMouseEntering.Result">
        <short>True when the mouse pointer in within the bounds for the control.</short>
      </element>

      <element name="TCustomUpDown.CheckMouseLeaving">
        <short>Indicates if the mouse pointer has exited the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CheckMouseLeaving.Result">
        <short>True when the mouse pointer is not in the client rectangle for the control.</short>
      </element>

      <element name="TCustomUpDown.GetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.GetPosition.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.BTimerExec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.BTimerExec.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.GetFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.GetFlat.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.SetAlignButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetAlignButton.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetArrowKeys">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetArrowKeys.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetAssociate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetAssociate.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetIncrement">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetIncrement.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetMax.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetMin.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetMinRepeatInterval">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetMinRepeatInterval.AValue">
        <short/>
      </element>

      <element name="TCustomUpDown.SetOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetOrientation.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetPosition.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetThousands">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetThousands.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetFlat.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetWrap.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.UpdateAlignButtonPos">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.UpdateOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.UpdateUpDownPositionText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomUpDown.AdjustPos">
        <short>
          Applies changes to the control value using its increment and decrement buttons.
        </short>
        <descr>
          <p>
            AdjustPos is a method used to apply changes to the value for the control when the increment or decrement buttons are clicked. AdjustPos uses the value in the FUseWS member to determine if the change in value is handled in the widgetset class, or handled in TCustomUpDown.
          </p>
        </descr>
        <version>Introduced in LCL version 2.1.0.</version>
        <seealso>
          <link id="TCustomUpDown.AssociateKeyDown"/>
          <link id="TCustomUpDown.AssociateMouseWheel"/>
        </seealso>
      </element>
      <element name="TCustomUpDown.AdjustPos.incPos">
        <short>
          True when the position value is being incremented. False when being decremented.
        </short>
      </element>

      <element name="TCustomUpDown.InitializeWnd">
        <short/>
        <descr>
          <p>
            InitializeWnd is an overridden method used to initialize the widgetset class  for the control. InitializeWnd calls the inherited method. When the FUseWS member contains False, no additional actions are performed in the method. When it contains True, methods in its widgetset class are called to synchronize values in the Min, Max, Position, Increment, Wrap, Orientation, and UseArrowKeys properties.
          </p>
        </descr>
        <version>Introduced in LCL version 2.1.0.</version>
        <seealso/>
      </element>

      <element name="TCustomUpDown.AssociateKeyDown">
        <short>
          <var>AssociateKeyDown</var> - protected procedure for dealing with action to be taken if an associate key (Shift, Ctrl or Alt) is pressed while the control is active.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.AssociateKeyDown.Sender">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateKeyDown.Key">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateKeyDown.ShiftState">
        <short/>
      </element>

      <element name="TCustomUpDown.AssociateMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.Sender">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.WheelDelta">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.MousePos">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.Handled">
        <short/>
      </element>

      <element name="TCustomUpDown.OnAssociateChangeBounds">
        <short>
          <var>OnAssociateChangeBounds</var> - event handler for a change in bounds of the associate control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.OnAssociateChangeBounds.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.OnAssociateChangeEnabled">
        <short>
          Event handler signalled when Enabled is changed for the associated control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.OnAssociateChangeEnabled.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.OnAssociateChangeVisible">
        <short>
          Event handler signalled when Visible is changed for the associated control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.OnAssociateChangeVisible.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelDown">
        <short>
          Performs actions when a mouse wheel down event occurs for the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelDown.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelDown.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelDown.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelUp">
        <short>
          Performs actions when a mouse wheel up event occurs for the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelUp.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelUp.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelUp.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelLeft">
        <short>
          Performs actions when a mouse wheel left event occurs for the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelLeft.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelLeft.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelLeft.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelRight">
        <short>
          Performs actions when a mouse wheel right event occurs for the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelRight.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelRight.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelRight.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.MouseEnter">
        <short>
          Performs actions when the mouse pointer enters the control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.MouseLeave">
        <short>
          Performs actions when the mouse pointer leaves the control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.DoSetBounds">
        <short>
          Applies the specified bounds to the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.ALeft">
        <short/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.ATop">
        <short/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.AWidth">
        <short/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.AHeight">
        <short/>
      </element>

      <element name="TCustomUpDown.SetEnabled">
        <short>Sets the value for the Enabled property.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.SetEnabled.Value">
        <short>New value for the Enabled property.</short>
      </element>

      <element name="TCustomUpDown.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values.
        </short>
        <seealso>
          <link id="#LCL.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.CalculatePreferredSize">
        <short>Calculates the preferred width and height for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomUpDown.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomUpDown.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TCustomUpDown.CanChange">
        <short>
          <var>CanChange</var> - if True, control can be changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CanChange.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.Notification">
        <short>
          <var>Notification</var> calls inherited method; if the operation requires removal of the associate control, this is performed.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomUpDown.Notification.Operation">
        <short/>
      </element>

      <element name="TCustomUpDown.Click">
        <short>
          <var>Click</var> - calls <var>OnClick</var> event handler if it is assigned.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.Click">TControl.Click</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.Click.Button">
        <short/>
      </element>

      <element name="TCustomUpDown.AlignButton">
        <short>
          <var>AlignButton</var> - how to align the button: left or right.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.ArrowKeys">
        <short>
          <var>ArrowKeys</var> - if True, the control can be operated by the keyboard's arrow keys which would simulate a click on the Next or Previous button.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Associate">
        <short>
          <var>Associate</var> - the associated control whose properties (controlled variable) are to be changed by the UpDown control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Increment">
        <short>
          The amount by which the controlled variable is to be increased or decreased on each click.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Max">
        <short>
          <var>Max</var> - greatest value of controlled variable.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Min">
        <short>
          <var>Min</var> - least value of controlled variable.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.MinRepeatInterval">
        <short>
          Minimum interval that must elapse before the action for the control is repeated.
        </short>
        <descr>
          MinRepeatInterval is a Byte property.
          The default value for the property is 100.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomUpDown.OnChanging">
        <short>
          <var>OnChanging</var> - event handler for a change in the value of the controlled variable.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.OnChangingEx">
        <short>Event handler signalled to determine if the control can change its value.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.OnClick">
        <short>
          <var>OnClick</var> - special event handler for a click on up or down button.
        </short>
        <descr>
          <p>
            <var>OnClick</var> - special event handler for a click on up or down button.
          </p>
          <p>
            The event handler must determine whether the [next] or [prev] button was clicked and therefore whether to increment or decrement the controlled variable and adjust the display.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Orientation">
        <short>Whether horizontal or vertical.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Position">
        <short>The <var>Position</var> of the UpDown control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Thousands">
        <short>If True, multiply all displayed values and the Increment by 1000.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Flat">
        <short>
          Indicates of the speed buttons for the control are drawn using a flat appearance.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Wrap">
        <short>
          If True, displayed control or value starts again from minimum or maximum value if  clicking a button would cause incrementing or decrementing beyond the extreme value.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomUpDown</var>: calls inherited <var>Create</var>, initializes orientation, max and min, bounds, size and alignment.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomUpDown.Destroy">
        <short>
          <var>Destroy</var>  - destructor for <var>TCustomUpDown</var>: removes connection with associate control and calls inherited <var>Destroy</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TUpDown">
        <short>
          <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display.
        </short>
        <descr>
          <p>
            <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display
          </p>
          <p>
            The control definition itself does not specify the variable upon which the buttons operate. The application programmer is responsible for supplying an event handler for <var>OnClick</var> to determine which button has been selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing or decrementing the variable in the control with which the UpDown is associated.
          </p>
          <p>
            The amount by which the variable is changed is set by the integer property <var>Increment</var> with the optional multiplier <var>Thousands</var> (a boolean property).
          </p>
          <p>
            For example the UpDown control may be used to move a slider up and down a scale by a specified amount for each click; alternatively a number may be displayed in a text box and clicking the buttons of the UpDown control may increment or decrement the number displayed by a specified amount.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TUpDown.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TUpDown.AlignButton" link="#lcl.comctrls.TCustomUpDown.AlignButton"/>
      <element name="TUpDown.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TUpDown.ArrowKeys" link="#lcl.comctrls.TCustomUpDown.ArrowKeys"/>
      <element name="TUpDown.Associate" link="#lcl.comctrls.TCustomUpDown.Associate"/>
      <element name="TUpDown.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TUpDown.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TUpDown.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TUpDown.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TUpDown.Hint" link="#lcl.controls.TControl.Hint"/>
      <element name="TUpDown.Increment" link="#lcl.comctrls.TCustomUpDown.Increment"/>
      <element name="TUpDown.Max" link="#lcl.comctrls.TCustomUpDown.Max"/>
      <element name="TUpDown.Min" link="#lcl.comctrls.TCustomUpDown.Min"/>
      <element name="TUpDown.MinRepeatInterval" link="#lcl.comctrls.TCustomUpDown.MinRepeatInterval"/>
      <element name="TUpDown.OnChanging" link="#lcl.comctrls.TCustomUpDown.OnChanging"/>
      <element name="TUpDown.OnChangingEx" link="#lcl.comctrls.TCustomUpDown.OnChangingEx"/>
      <element name="TUpDown.OnClick" link="#lcl.comctrls.TCustomUpDown.OnClick"/>
      <element name="TUpDown.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TUpDown.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TUpDown.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TUpDown.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TUpDown.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TUpDown.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TUpDown.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TUpDown.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TUpDown.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TUpDown.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TUpDown.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TUpDown.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TUpDown.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TUpDown.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TUpDown.Orientation" link="#lcl.comctrls.TCustomUpDown.Orientation"/>
      <element name="TUpDown.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TUpDown.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TUpDown.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TUpDown.Position" link="#lcl.comctrls.TCustomUpDown.Position"/>
      <element name="TUpDown.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TUpDown.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TUpDown.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TUpDown.Thousands" link="#lcl.comctrls.TCustomUpDown.Thousands"/>
      <element name="TUpDown.Flat" link="#lcl.comctrls.TCustomUpDown.Flat"/>
      <element name="TUpDown.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TUpDown.Wrap" link="#lcl.comctrls.TCustomUpDown.Wrap"/>

      <element name="CN_DROPDOWNCLOSED">
        <short>Control notification message constant.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButtonStyle">
        <short>
          <var>TToolButtonStyle</var> - enumerated type that determines the style of the tool buttons.
        </short>
        <descr>
          <p>These are the possible values of Style:</p>
          <ul>
            <li>
              <b>tbsButton</b> - The button appears and functions like a normal button.
            </li>
            <li>
              <b>tbsCheck</b> - Clicking the button toggles the Down property. Once selected, the button remains selected until clicked again.
            </li>
            <li>
              <b>tbsDivider</b> - The button appears as a vertical line on the toolbar (used to separate other controls).
            </li>
            <li>
              <b>tbsDropDown</b> - The button displays a downwards-pointing arrow (suitable for accessing a drop-down menu).
            </li>
            <li>
              <b>tbsSeparator</b> - The button appears as an empty space on the toolbar (used to separate other controls).
            </li>
          </ul>
        </descr>
        <seealso>
          <link id="TToolButton"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <element name="TToolButtonStyle.tbsButton">
        <descr>The button appears and functions like a normal button.</descr>
      </element>
      <element name="TToolButtonStyle.tbsCheck">
        <descr>Clicking the button toggles the Down property. Once selected, the button remains selected until clicked again.</descr>
      </element>
      <element name="TToolButtonStyle.tbsDropDown">
        <descr>The button displays a downwards-pointing arrow (suitable for accessing a drop-down menu).</descr>
      </element>
      <element name="TToolButtonStyle.tbsSeparator">
        <descr>The button appears as an empty space on the toolbar (used to separate other controls).</descr>
      </element>
      <element name="TToolButtonStyle.tbsDivider">
        <descr>The button appears as a vertical line on the toolbar (used to separate other controls).</descr>
      </element>

      <element name="TToolButtonFlag">
        <short>
          Represents flag values that can be used in a TToolButton instance.
        </short>
        <descr>
          <p>
            Values from TToolButton are stored in the TToolButtonFlags set type.
          </p>
        </descr>
        <seealso>
          <link id="TToolButtonFlags"/>
          <link id="TToolButton"/>
        </seealso>
      </element>
      <element name="TToolButtonFlag.tbfPressed">
        <short>The tool button is in a pressed or down state.</short>
      </element>
      <element name="TToolButtonFlag.tbfArrowPressed">
        <short>The drop-down indicator is in a pressed or down state.</short>
      </element>
      <element name="TToolButtonFlag.tbfMouseInArrow">
        <short>The mouse cursor is hovered over the drop-down indicator.</short>
      </element>
      <element name="TToolButtonFlag.tbfDropDownMenuShown">
        <short>The the drop-down menu for the tool button is visible.</short>
      </element>

      <element name="TToolButtonFlags">
        <short>
          Set type used to store values from the TToolButtonFlag enumeration.
        </short>
        <descr/>
        <seealso>
          <link id="TToolButtonFlag"/>
        </seealso>
      </element>

      <element name="TToolButtonActionLink">
        <short>
          <var>TToolButtonActionLink</var> - links a ToolButton on the ToolBar to an Action on an ActionList.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButtonActionLink.AssignClient">
        <short>
          <var>AssignClient</var> calls inherited method then sets client as ToolButton.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TBasicActionLink">TBasicActionLink</link>
        </seealso>
      </element>
      <element name="TToolButtonActionLink.AssignClient.AClient">
        <short/>
      </element>

      <element name="TToolButtonActionLink.SetChecked">
        <short>
          <var>SetChecked</var> - stores the Checked status (True or False).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.SetChecked.Value">
        <short/>
      </element>

      <element name="TToolButtonActionLink.SetImageIndex">
        <short>
          <var>SetImageIndex</var> - stores the index value of the associated image.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.SetImageIndex.Value">
        <short/>
      </element>

      <element name="TToolButtonActionLink.IsCheckedLinked" link="#LCL.ActnList.TActionLink.IsCheckedLinked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.IsCheckedLinked.Result">
        <short/>
      </element>

      <element name="TToolButtonActionLink.IsImageIndexLinked" link="#LCL.ActnList.TActionLink.IsImageIndexLinked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.IsImageIndexLinked.Result">
        <short/>
      </element>

      <element name="TToolButtonActionLinkClass">
        <short>
          <var>TToolButtonActionLinkClass</var> - class of <var>TToolButtonActionLink</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton">
        <short>
          <var>TToolButton</var> is a button control used in a <var>TToolBar</var> object.
        </short>
        <descr>
          <p>
            Use <var>TToolButton</var> to implement buttons on a toolbar. While other controls (including <var>TButton</var> and <var>TSpeedButton</var>) can be placed on toolbars, <var>TToolButton</var> utilizes special toolbar features to simplify the configuration of buttons and offers added display options such as edge borders and transparency.
          </p>
          <p>
            To place tool buttons on a toolbar at design time, select the toolbar, right-click, and choose New Button.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar"/>
          <link id="#lcl.stdctrls.TButton">TButton</link>
          <link id="#lcl.buttons.TSpeedButton">TSpeedButton</link>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>

      <element name="TToolButton.FAllowAllUp"/>
      <element name="TToolButton.FDown"/>
      <element name="TToolButton.FDropdownMenu"/>
      <element name="TToolButton.FGrouped"/>
      <element name="TToolButton.FImageIndex"/>
      <element name="TToolButton.FIndeterminate"/>
      <element name="TToolButton.FMarked"/>
      <element name="TToolButton.FMenuItem"/>
      <element name="TToolButton.FMouseInControl"/>
      <element name="TToolButton.FOnArrowClick"/>
      <element name="TToolButton.FShowCaption"/>
      <element name="TToolButton.FStyle"/>
      <element name="TToolButton.FToolButtonFlags"/>
      <element name="TToolButton.FUpdateCount"/>
      <element name="TToolButton.FWrap"/>
      <element name="TToolButton.FLastDropDownTick"/>
      <element name="TToolButton.FLastDown"/>

      <element name="TToolButton.GetGroupBounds"/>
      <element name="TToolButton.GetGroupBounds.StartIndex"/>
      <element name="TToolButton.GetGroupBounds.EndIndex"/>

      <element name="TToolButton.GetIndex"/>
      <element name="TToolButton.GetIndex.Result"/>

      <element name="TToolButton.GetTextSize"/>
      <element name="TToolButton.GetTextSize.Result"/>

      <element name="TToolButton.IsCheckedStored"/>
      <element name="TToolButton.IsCheckedStored.Result"/>

      <element name="TToolButton.IsHeightStored"/>
      <element name="TToolButton.IsHeightStored.Result"/>

      <element name="TToolButton.IsImageIndexStored"/>
      <element name="TToolButton.IsImageIndexStored.Result"/>

      <element name="TToolButton.IsWidthStored"/>
      <element name="TToolButton.IsWidthStored.Result"/>

      <element name="TToolButton.SetDown"/>
      <element name="TToolButton.SetDown.Value"/>

      <element name="TToolButton.SetDropdownMenu"/>
      <element name="TToolButton.SetDropdownMenu.Value"/>

      <element name="TToolButton.SetGrouped"/>
      <element name="TToolButton.SetGrouped.Value"/>

      <element name="TToolButton.SetImageIndex"/>
      <element name="TToolButton.SetImageIndex.Value"/>

      <element name="TToolButton.SetIndeterminate"/>
      <element name="TToolButton.SetIndeterminate.Value"/>

      <element name="TToolButton.SetMarked"/>
      <element name="TToolButton.SetMarked.Value"/>

      <element name="TToolButton.SetMenuItem"/>
      <element name="TToolButton.SetMenuItem.Value"/>

      <element name="TToolButton.SetShowCaption"/>
      <element name="TToolButton.SetShowCaption.AValue"/>

      <element name="TToolButton.SetStyle"/>
      <element name="TToolButton.SetStyle.Value"/>

      <element name="TToolButton.SetWrap"/>
      <element name="TToolButton.SetWrap.Value"/>

      <element name="TToolButton.SetMouseInControl"/>
      <element name="TToolButton.SetMouseInControl.NewMouseInControl"/>

      <element name="TToolButton.CMEnabledChanged"/>
      <element name="TToolButton.CMEnabledChanged.Message"/>

      <element name="TToolButton.CMVisibleChanged"/>
      <element name="TToolButton.CMVisibleChanged.Message"/>

      <element name="TToolButton.CMHitTest"/>
      <element name="TToolButton.CMHitTest.Message"/>

      <element name="TToolButton.cDefSeparatorWidth">
        <short>Default width for tool buttons using the separator style.</short>
      </element>
      <element name="TToolButton.cDefDividerWidth">
        <short>Default width for tool buttons using the divider style.</short>
      </element>
      <element name="TToolButton.cDefButtonDropDecArrowWidth">
        <short>Default width the drop-down indicator in tools buttons.</short>
      </element>

      <element name="TToolButton.FToolBar">
        <short>Member variable with the tool bar where the button is used.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TToolButton.CopyPropertiesFromMenuItem">
        <short>Copies properties from the specified menu item.</short>
        <descr>
          <p>
            <var>CopyPropertiesFromMenuItem</var> is a method used to copy property value from the menu item in <var>Value</var> into the current class instance. This ensures that the button has the same settings and behavior as the menu item assigned to the button.
          </p>
          <p>
            No actions are performed in the method when Value has not been assigned (<b>Nil</b>). Calls <var>BeginUpdate</var> on entry, and <var>EndUpdate</var> when the method is completed.
          </p>
          <p>
            The following properties are copied from the menu item in Value:
          </p>
          <table>
            <th>
              <td>Source Property (in TMenuItem)</td>
              <td>Target Property (in TToolButton)</td>
            </th>
            <tr>
              <td>Action</td>
              <td>Action </td>
            </tr>
            <tr>
              <td>Caption</td>
              <td>Caption </td>
            </tr>
            <tr>
              <td>Checked</td>
              <td>Down </td>
            </tr>
            <tr>
              <td>Enabled</td>
              <td>Enabled</td>
            </tr>
            <tr>
              <td>Enabled</td>
              <td>Enabled</td>
            </tr>
            <tr>
              <td>Hint</td>
              <td>Hint</td>
            </tr>
            <tr>
              <td>ImageIndex</td>
              <td>ImageIndex</td>
            </tr>
            <tr>
              <td>Visible</td>
              <td>Visible</td>
            </tr>
        </table>
        <p>
          CopyPropertiesFromMenuItem is called from the <var>Loaded</var> method when LCL component streaming has been completed, and when a new value is assigned to the <var>MenuItem</var> property.
        </p>
        </descr>
        <seealso>
          <link id="TToolButton.MenuItem"/>
          <link id="TToolButton.Loaded"/>
          <link id="TToolButton.BeginUpdate"/>
          <link id="TToolButton.EndUpdate"/>
          <link id="#lcl.menus.TMenuItem">TMenuItem</link>
        </seealso>
      </element>
      <element name="TToolButton.CopyPropertiesFromMenuItem.Value">
        <short>Menu item with the properties copied in the method.</short>
      </element>

      <element name="TToolButton.GetActionLinkClass">
        <short>Gets the class type for the ActionLink in the tool button.</short>
        <descr>
          <p>
            GetActionLinkClass is overridden in TWToolButton to return the <var>TToolButtonActionLink</var> type in <var>TToolButton</var>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.GetActionLinkClass">TControl.GetActionLinkClass</link>
          <link id="#lcl.controls.TControlActionLinkClass">TControlActionLinkClass</link>
        </seealso>
      </element>
      <element name="TToolButton.GetActionLinkClass.Result">
        <short>Class type for the ActionLink in the tool button.</short>
      </element>

      <element name="TToolButton.ActionChange">
        <short>
          Implements the handler signalled when the Action for the tool button is changed.
        </short>
        <descr>
          <p>
            <var>ActionChange</var> is an overridden method which implements an event handler signalled when the <var>Action</var> for the tool button is changed.
          </p>
          <p>
            The <var>Sender</var> argument is the new <var>TCustomAction</var> instance assigned to the Action property for the tool button.
          </p>
          <p>
            <var>CheckDefaults</var> indicates when values from the action are copied into the control. When set to True, the values in the Action are applied only when its  property value has been assigned.
          </p>
          <p>
            ActionChange calls the inherited method on entry to copy properties from Sender to the control. It provides support for translating the <var>Checked</var> property in the action to the <var>Down</var> property used in the tool button. It also changes the value in <var>ImageIndex</var> only when a valid image index has been assigned in the Action.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Down"/>
          <link id="TToolButton.ImageIndex"/>
          <link id="#lcl.actnlist.TCustomAction.Checked"/>
          <link id="#lcl.controls.TControl.ActionChange">TControl.ActionChange</link>
        </seealso>
      </element>
      <element name="TToolButton.ActionChange.Sender">
        <short>New action for the control, or Nil.</short>
      </element>
      <element name="TToolButton.ActionChange.CheckDefaults">
        <short>Indicates if the property in the action must be assigned (not empty).</short>
      </element>

      <element name="TToolButton.AssignTo">
        <short>
          Implements object persistence used to assign properties from the class instance to another persistent object.
        </short>
        <descr>
          <p>
            <var>AssignTo</var> is an overridden method used to implement object persistence for the <var>TToolButton</var> class type. It allows properties in the class instance to be stored to  the persistent object in <var>Dest</var> when it is a <var>TCustomAction</var> instance.
          </p>
          <p>
            AssignTo calls the inherited method on entry to transfer common TCustomAction values to Dest. Additional properties in the tool button, like Down and ImageIndex, are handled as well.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.AssignTo">TControl.AssignTo</link>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
          <link id="#lcl.actnlist.TCustomAction">TCustomAction</link>
        </seealso>
      </element>
      <element name="TToolButton.AssignTo.Dest">
        <short>Persistent object where the property values are stored.</short>
      </element>

      <element name="TToolButton.BeginUpdate">
        <short>Starts an update process for the tool button.</short>
        <descr>
          <p>
            Increments the internal counter used to consolidate calls to methods which layout or draw the control, or signal event handlers.
          </p>
          <p>
            Use <var>EndUpdate</var> to end an update process for the control. The consolidated process(es) are performed when the internal counter reaches 0 (zero).
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.EndUpdate"/>
        </seealso>
      </element>

      <element name="TToolButton.EndUpdate">
        <short>Ends an update process for the tool button.</short>
        <descr>
          <p>
            Decrements the internal update counter used to consolidate calls to methods which layout or draw the control, or signal event handlers. The consolidated process(es) are performed when the internal counter reaches 0 (zero).
          </p>
          <p>
            Use BeginUpdate to start an update process for the control.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.BeginUpdate"/>
        </seealso>
      </element>

      <element name="TToolButton.MouseMove">
          <short>
            Detects whether the mouse is hovered over the drop-down indicator for the tool button.
          </short>
          <descr>
            <p>
              <var>MouseMove</var> is an overridden method in <var>TToolButton</var> used to handle mouse movement messages for the control. It provides support for detecting when the mouse pointer is hovered over the drop-down indicator for a tool bar button.
            </p>
            <p>
              It calls the inherited method on entry to handle drag messages, and to signal the <var>OnMouseMove</var> event handler (when assigned).
            </p>
            <p>
              If <var>MouseCapture</var> is not enabled for the control, and the button uses <var>tbsDropDown</var> in its <var>Style</var> property, the <var>PointInArrow</var> method is called is called to detect whether the mouse in inside the display area for the drop-down indicator. The value <var>tbfMouseInArrow</var> is include in or excluded from the flags for the tool button based on the return value from PointInArrow.
            </p>
            <p>
              <var>Invalidate</var> is called to redraw the button if the flag values were modified.
            </p>
            <p>
              MouseMove is called from the <var>WMMouseMove</var> message handler.
            </p>
          </descr>
          <seealso>
            <link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
          </seealso>
        </element>
      <element name="TToolButton.MouseMove.Shift">
        <short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
      </element>
      <element name="TToolButton.MouseMove.X">
        <short>Horizontal coordinate for the mouse message.</short>
      </element>
      <element name="TToolButton.MouseMove.Y">
        <short>Vertical coordinate for the mouse message.</short>
      </element>

      <element name="TToolButton.MouseDown">
        <short>Handles mouse click events for the tool button.</short>
        <descr>
          <p>
            <var>MouseDown</var> is an overridden method in <var>TToolButton</var> used to perform actions needed when a mouse down (or click) event is handled for the button control.
          </p>
          <p>
            MouseDown updates flags for the button control to indicate whether a left mouse button event occurred over the Button or its drop-down indicator (when used). The inherited method is called to handle a control or a form focus change, and to signal the OnMouseDown event handler (when assigned).
          </p>
          <p>
            If the mouse event is over the drop-down indicator, the DropDownMenu when its AutoPopUp property is enabled. This requires sending a LM_LBUTTONUP message to ensure that the feature works for all widgetsets.
          </p>
          <p>
            If the mouse event is over the button, the Down property is set to True.
          </p>
          <p>
            MouseDown is called from window message handlers for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
        </seealso>
      </element>
      <element name="TToolButton.MouseDown.Button">
        <short>Mouse button for the mouse message.</short>
      </element>
      <element name="TToolButton.MouseDown.Shift">
        <short>Shift, Alt, or Ctrl modifier for the mouse message.</short>
      </element>
      <element name="TToolButton.MouseDown.X">
        <short>Horizontal coordinate for the mouse message.</short>
      </element>
      <element name="TToolButton.MouseDown.Y">
        <short>Vertical coordinate for the mouse message.</short>
      </element>

      <element name="TToolButton.MouseUp">
        <short>Handles mouse up events for the tool button.</short>
        <descr>
          <p>
            <var>MouseUp</var> is an overridden method in TToolButton used to handle mouse up message events.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.MouseUp">TControl.MouseUp</link>
        </seealso>
      </element>
      <element name="TToolButton.MouseUp.Button">
        <short>Mouse button for the event.</short>
      </element>
      <element name="TToolButton.MouseUp.Shift">
        <short>Shift, Ctrl, or Alt modifier for the message.</short>
      </element>
      <element name="TToolButton.MouseUp.X">
        <short>Horizontal coordinate for the mouse message.</short>
      </element>
      <element name="TToolButton.MouseUp.Y">
        <short>Vertical coordinate for the mouse message.</short>
      </element>

      <element name="TToolButton.MouseEnter">
        <short>Handles a message sent when the mouse enters a control.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.MouseEnter">TControl.MouseEnter</link>
        </seealso>
      </element>

      <element name="TToolButton.MouseLeave">
        <short>Handles a message sent when the mouse lesaves a control.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.MouseLeave">TControl.MouseLeave</link>
        </seealso>
      </element>

      <element name="TToolButton.Notification">
        <short>
          Handles the notification sent when a component is added to or removed from the control.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Notification">TComponent.Notification</link>
        </seealso>
      </element>
      <element name="TToolButton.Notification.AComponent">
        <short>Component for the notification message.</short>
      </element>
      <element name="TToolButton.Notification.Operation">
        <short>Operation performed for the component.</short>
      </element>

      <element name="TToolButton.Paint">
        <short>Draws the tool bar button to the Canvas for the control.</short>
        <descr>
          <p>
            <var>Paint</var> is an overridden method in <var>TToolButton</var>, and provides nested routines used to draw the the tool button using the style, caption, and image for the control. Paint requires <var>ToolBar</var> to be assigned before it can render the button control using the routines in the overridden method. When ToolBar is unassigned, only the inherited Paint method is called.
          </p>
          <p>
            Paint calculates the area display area for the button, and calls GetButtonDrawDetail to get the Theme Element Details for the control.
          </p>
          <p>
            When an OnPaintButton event handler has been assigned for the ToolBar, it is used to render the button using the theme details. No additional actions are performed in the method.
          </p>
          <p>
            When OnPaintButton is unassigned, the default drawing routines are used to render the button on the Canvas for the control. This includes decorations like a drop-down indicator, an image using the required state, the Caption text, button relief, and dividers or separators. Methods in ThemeServices are called to render the control to the Handle for the Canvas.
          </p>
          <p>
            Paint calls the inherited method prior to exit to signal the OnPaint event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TGraphicControl.Canvas">TGraphicControl.Canvas</link>
          <link id="#lcl.controls.TGraphicControl.Paint">TGraphicControl.Paint</link>
          <link id="#lcl.controls.TGraphicControl.OnPaint">TGraphicControl.OnPaint</link>
        </seealso>
      </element>

      <element name="TToolButton.TextChanged">
        <short>
          Performs actions needed when the caption text for the tool button has been changed.
        </short>
        <descr>
          <p>
            <var>TextChanged</var> is an overridden method in <var>TToolButton</var> used to perform actions needed when the caption text for the tool button has been changed. No actions are performed in the method if the parent tool bar has not been assigned for the tool button.
          </p>
          <p>
            When <var>ShowCaptions</var> is enabled, the <var>Invalidate</var> method is called to force the tool button to be redrawn.
          </p>
          <p>
            TextChanged is called when the <var>CM_TEXTCHANGED</var> control message is handled for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.TextChanged">TControl.TextChanged</link>
          <link id="#lcl.controls.TControl.TextChanged">TControl.CMTextChanged</link>
        </seealso>
      </element>

      <element name="TToolButton.CalculatePreferredSize" link="#lcl.controls.TControl.CalculatePreferredSize"/>

      <element name="TToolButton.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values.
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>

      <element name="TToolButton.Loaded">
        <short>Performs actions needed when LCL component streaming has been completed.</short>
        <descr>
          <p>
            Calls the inherited method on entry. Calls CopyPropertiesFromMenuItem to apply values from MenuItem to the properties in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.MenuItem"/>
          <link id="TToolButton.CopyPropertiesFromMenuItem"/>
          <link id="#lcl.controls.TControl.Loaded">TControl.Loaded</link>
          <link id="#lcl.menus.TMenuItem">TMenuItem</link>
        </seealso>
      </element>

      <element name="TToolButton.RefreshControl">
        <short>Refreshes the button control by updating it parent tool bar.</short>
        <descr/>
        <seealso>
          <link id="TToolButton.UpdateControl"/>
          <link id="TToolBar"/>
        </seealso>
      </element>

      <element name="TToolButton.SetToolBar">
        <short>
          Sets the value for the internal member with the TToolBar instance for the button.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetToolBar.NewToolBar">
        <short>New value for the internal member.</short>
      </element>

      <element name="TToolButton.UpdateControl">
        <short>
          Causes the tool bar to adjust the size and position for its Buttons and Controls.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.GetButtonDrawDetail">
        <short>
          Gets the Theme Element Details used for the tool button.
        </short>
        <descr>
          <p>
            Uses values in <var>Style</var>, <var>Enabled</var>, and <var>Down</var> to determine the theme elements requested in the method. Calls <var>ThemeElement.GetElementDetails</var> to retrieve the theming details.
          </p>
          <p>
            Called from the <var>Paint</var> method before the control is drawn.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolButton.SetParent">
        <short>Sets the value for the Parent property.</short>
        <descr>
          <p>
            <var>SetParent</var> is an overridden method in <var>TToolButton</var> used to set the value for the <var>Parent</var> property.
          </p>
          <p>
            SetParent ensures that the control in AParent is assigned, and allows child classes using the TToolButton class type. An EInvalidOperation exception is raised if the class instance cannot be a child control on AParent, or AParent is also the current class instance.
          </p>
          <p>
            When the parent tool bar has been assigned, the tool button must be re-parented. The RemoveButton method in the tool bar is called to remove the button from its existing Parent. If AParent is a TToolBar instance, its properties are used to set the ButtonWidth and ButtonHeight for the control. The inherited method is called to update both the old and new Parent references and their control flags.
          </p>
          <p>
            The value in the internal tool bar member is set to the value in AParent, and the AddButton method in the tool bar is called. The UpdateVisibleToolbar method is calls to align and re-display the button control (and its tool bar).
          </p>
        </descr>
        <errors>
          Raises an EInvalidOperation exception if the class instance cannot be a child control on the new Parent, or the new AParent is also the current class instance.
        </errors>
        <seealso>
          <link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
          <link id="#lcl.controls.TControl.SetParent">TControl.SetParent</link>
        </seealso>
      </element>
      <element name="TToolButton.SetParent.AParent">
        <short>New value for the Parent property.</short>
      </element>

      <element name="TToolButton.UpdateVisibleToolbar">
        <short>
          Calls the corresponding method in the tool bar for the button.
        </short>
        <descr>
          <p>
            Calls a private method in the Parent control to update the tool bar buttons. No actions are performed if Parent is not a TToolBar instance, or unassigned.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar"/>
          <link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
        </seealso>
      </element>

      <element name="TToolButton.GroupAllUpAllowed">
        <short>
          Indicates if all buttons in the group are allowed to be in the 'Up' position.
        </short>
        <descr>
          <p>
            Adjacent check box-style buttons (and their separators / dividers) with their Grouped property set to True are considered to be in the same group. GroupAllUpAllowed examines the adjacent tool buttons on the Parent tool bar to determine whether any of the grouped buttons have the AllowAllUp property set to True. When one grouped check-box button has AllowAllUp set, the remaining buttons in the group are treated in the same manner.
          </p>
          <remark>
            Change the Grouped property to False on a separator or divider to force the preceding or subsequent check-box buttons to be treated as a different group.
          </remark>
        </descr>
        <seealso>
          <link id="TToolButton.Style"/>
          <link id="TToolButton.Grouped"/>
          <link id="TToolButton.AllowAllUp"/>
          <link id="TToolButtonStyle"/>
        </seealso>
      </element>
      <element name="TToolButton.GroupAllUpAllowed.Result">
        <short>
          True when the AllowAllUp property is set for any of the adjacent grouped check-box buttons on the tool bar.
          </short>
      </element>

      <element name="TToolButton.DialogChar">
        <short>
          Clicks the button when the message contains the accelerator key for the button control.
        </short>
        <descr>
          <p>
            Causes the tool button to be clicked when <var>Message</var> contains the accelerator key (shortcut) in the <var>Caption</var> for the button. <var>ShowCaptions</var> must be enabled in the <var>Parent</var> tool bar to allow the button to be clicked. If the message is not handled in the method, the inherited method is called.
          </p>
          <p>
            The return value is <b>True</b> if the key message was handled as an accelerator key for the button control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DialogChar">TControl.DialogChar</link>
        </seealso>
      </element>
      <element name="TToolButton.DialogChar.Result">
        <short>
          True If the message was handled as an accelerator key for the tool bar button.
        </short>
      </element>

      <element name="TToolButton.SetAutoSize">
        <short>
          Sets the value the AutoSize property and adjusts the control size when needed.
        </short>
        <descr>
          <p>
            <var>SetAutoSize</var> is an overridden method in <var>TToolButton</var> used to set the value for the <var>AutoSize</var> property. It calls the inherited method to apply the new value for the property. It calls RequestAlign to adjust the size and alignment for the button control (and its siblings) on the Parent control.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.AutoSize"/>
          <link id="#lcl.controls.TControl.SetAutoSize">TControl.SetAutoSize</link>
          <link id="#lcl.controls.TControl.RequestAlign">TControl.RequestAlign</link>
          <link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
        </seealso>
      </element>
      <element name="TToolButton.SetAutoSize.Value">
        <short>New value for the AutoSize property.</short>
      </element>

      <element name="TToolButton.RealSetText" link="#lcl.controls.TControl.RealSetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.RealSetText.AValue">
        <short/>
      </element>

      <element name="TToolButton.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TToolButton</var>. It calls the inherited <var>Create</var> method, and sets the initial bounds for the control.  Default values for style-related properties are also assigned.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TGraphicControl.Create">TGraphicControl.Create</link>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TToolButton.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TToolButton.CheckMenuDropdown">
        <short>Checks for and executes a drop-down menu for the tool button.</short>
        <descr>
          <p>
            <var>CheckMenuDropdown</var> is a <var>Boolean</var> function used to check whether a drop-down menu can be displayed and executed for the tool button.  The menu can be represented using either the <var>DropDownMenu</var> property (with  its <var>AutoPopUp</var> property set to <b>True</b>) or the <var>MenuItem</var> property.
          </p>
          <p>
            No actions are performed in the method at design-time, when the parent tool bar has not been assigned, or when neither DropDownMenu nor MenuItem has been assigned.
          </p>
          <p>
            When a menu is available, the flags for the tool button are updated to include the value <var>tbfDropDownMenuShown</var>. The CheckMenuDropdown method in the parent tool bar is called to display and execute the drop-down menu, and get the return value for the method. The return value is <b>True</b> if the menu was successfully display and executed by the parent tool bar. The button flags are reverted prior to exiting from the method.
          </p>
          <p>
            CheckMenuDropdown is called from the <var>MouseDown</var> method when the left mouse button is clicked on a button (or its drop-down indicator).
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.DropDownMenu"/>
          <link id="TToolButton.MenuItem"/>
          <link id="TToolButton.Style"/>
          <link id="TToolButton.MouseDown"/>
          <link id="TToolBar.CheckMenuDropdown"/>
        </seealso>
      </element>
      <element name="TToolButton.CheckMenuDropdown.Result">
        <short>
          True if the drop-down menu for the button was successfully displayed and executed.
        </short>
      </element>

      <element name="TToolButton.Click" link="#lcl.controls.TControl.Click"/>

      <element name="TToolButton.ArrowClick">
        <short>Signals the OnArrowClick event handler for the tool button.</short>
        <descr>
          <p>
            <var>ArrowClick</var> is a method used to execute the <var>OnArrowClick</var> event handler (when assigned) for the tool button. ArrowClick is called from the <var>MouseDown</var> method when the left mouse button has been clicked on the drop-down indicator and the <var>DropDownMenu</var> for the button is not already visible.
          </p>
          <p>
            See <var>Click</var> for information about the actions performed when the button has been clicked, instead of its drop-down indicator.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.OnArrowClick"/>
          <link id="TToolButton.Click"/>
          <link id="TToolButton.MouseDown"/>
          <link id="TToolButton.Style"/>
          <link id="TToolButton.DropDownMenu"/>
          <link id="TToolButton.MenuItem"/>
        </seealso>
      </element>

      <element name="TToolButton.GetCurrentIcon">
        <short>
          Gets the image list, index, and drawing effect for the icon on the tool button.
        </short>
        <descr>
          <p>
            GetCurrentIcon is a method used to get information for the icon drawn on the tool button. It returns values in the variable parameters with the scaled image list for the icon, its position in the image list, and the drawing effect for the image.
          </p>
          <p>
            ImageList is the scaled image list with the images from the parent tool bar. It is re-created in the method and uses the image size from the parent tool bar scaled to the run-time display density (PPI). The images in the list are retrieved from the Images, HotImages, or DisabledImages properties in the parent tool bar and reflect the values in the Enabled property and the tool button flags. The default value is Nil (unassigned).
          </p>
          <p>
            TheIndex is the position in the image list for the icon image. It defaults to the value in the ImageIndex property.
          </p>
          <p>
            TheEffect is a TGraphicsDrawEffect value that indicates the drawing effect to apply to the tool button. It reflects the values in the Enabled property, flags for the tool button, and the toUseGlyphEffects setting in ThemeServices. The following values are used in TheEffect:
          </p>
          <dl>
            <dt>gdeNormal</dt>
            <dd>
              Images are drawn using the normal, undecorated drawing effect. This is the default value.
            </dd>
            <dt>gdeShadowed</dt>
            <dd>
              Images are drawn using the shadowed effect when the button or drop-down indicator is  pressed.
            </dd>
            <dt>gdeHighlighted</dt>
            <dd>
              Images are drawn using highlighting when the button is Enabled and auto-effects are used in theme services. Otherwise, the tool bar HotImages or DisabledImages are used.
            </dd>
            <dt>gdeDisabled</dt>
            <dd>
              Images are drawn using the dimmed effect when the button is not Enabled, or tool bar DisabledImages are not available.
            </dd>
          </dl>
          <p>
            GetCurrentIcon is called from the Paint method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolButton.GetCurrentIcon.ImageList">
        <short>Scaled Image list with the available images for the icon.</short>
      </element>
      <element name="TToolButton.GetCurrentIcon.TheIndex">
        <short>Ordinal position in the image list for the icon image.</short>
      </element>
      <element name="TToolButton.GetCurrentIcon.TheEffect">
        <short>Graphic drawing effect needed for the button state.</short>
      </element>

      <element name="TToolButton.GetPreferredSize">
        <short>Returns default/preferred height and width, for use in auto-sizing.</short>
        <descr>
          <p>
            Called during AutoSize calculations. Only positive values are valid. Negative or 0 are treated as undefined, and the LCL uses other sizes instead.
          </p>
          <p>
            When WithThemeSpace is True, additional space is reserved for stacking.
          </p>
          <p>
            Calls the inherited method on entry. Values from the ButtonWidth and ButtonHeight properties in the parent tool bar may be used in the PreferredWidth and PreferredHeight arguments, depending on the orientation for the tool bar. No additional actions are performed in the method if the parent tool bar has not been assigned.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.GetPreferredSize">TControl.GetPreferredSize</link>
        </seealso>
      </element>
      <element name="TToolButton.GetPreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TToolButton.GetPreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TToolButton.GetPreferredSize.Raw">
        <short/>
      </element>
      <element name="TToolButton.GetPreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TToolButton.Index">
        <short>
          <var>Index </var>- is the sequence number for the button in ButtonList.
        </short>
        <descr>
          <p>
            <var>Index</var> is a read-only <var>Integer</var> property with the sequence number for the current button in the list of buttons. When the internal toolbar button list has been assigned, its <var>IndexOf</var> method is called to get the position for the current class instance in the toolbar control. When the internal toolbar is unassigned (contains <b>Nil</b>), the value <b>-1</b> is used as the return value.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="TToolBar.ButtonList"/>
        </seealso>
      </element>

      <element name="TToolButton.PointInArrow">
        <short>
          Indicates if the specified position is within the bounds for the arrow drawn on a drop-down button.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.PointInArrow.Result">
        <short>True when the coordinates are within the arrow for the drop-down.</short>
      </element>
      <element name="TToolButton.PointInArrow.X">
        <short>Horizontal coordinate examined in the method.</short>
      </element>
      <element name="TToolButton.PointInArrow.Y">
        <short>Vertical coordinate examined in the method.</short>
      </element>

      <element name="TToolButton.Action" link="#lcl.controls.TControl.Action"/>

      <element name="TToolButton.AllowAllUp">
        <short>
          Indicates if all buttons in a group can have their Down property set to False.
        </short>
        <descr>
          <p>
            <var>AllowAllUp</var>, when True, indicates that all buttons in a group are allowed to be  'Up' at the same time. The default value for the property is False, and indicates that one of the grouped buttons must have its Down property set to True.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Grouped"/>
          <link id="TToolButton.Down"/>
        </seealso>
      </element>

      <element name="TToolButton.AutoSize">
        <short>Allows the control to grow to the size for its content.</short>
        <descr>
          <p>
            Allows automatic adjustment of the size for the control, according to its content.
            The action performed depends on the control type. For example, a label or button can become bigger or smaller to accommodate a longer or shorter caption.
          </p>
          <p>
            Default value for the property is False, and disables auto-sizing for the control instance.
          </p>
          <p>
            The write access specifier is overridden in TToolButton to resize and align the tool button and its parent tool bar when needed.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.SetAutoSize"/>
          <link id="#lcl.controls.TControl.AutoSize">TControl.AutoSize</link>
        </seealso>
      </element>

      <element name="TToolButton.Caption" link="#lcl.controls.TControl.Caption"/>

      <element name="TToolButton.Down">
        <short>
          Is this button <var>Down</var> (i.e. has it been selected)? Default false.
        </short>
        <descr>
          <p>
            <var>Down</var> is a <var>Boolean</var> property which indicates if the tool button is in a "pressed" or "down" state. The default value for the property is <b>False</b>.
          </p>
          <p>
            When the value for the property is changed to <b>True</b> in a check-box button (<var>Style</var> = <var>tbsCheck</var>), other buttons on the parent tool bar are also updated. Adjacent buttons with their <var>Grouped</var> property set to <b>True</b> are checked to ensure that their Down property is set to <b>False</b>. The button(s) are redrawn if their Down property was changed. The <var>ToolButtonDown</var> method in the parent tool bar is called to set the button state in the tool bar to the new property value. The button and the tool bar are redrawn following the change.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolButton.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TToolButton.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TToolButton.DragMode" link="#lcl.controls.TControl.DragMode"/>

      <element name="TToolButton.DropdownMenu">
        <short>The drop-down menu that appears when the button is pressed.</short>
        <descr>
          <p>
            A <var>DropDownMenu</var> that appears when this button is selected.
          </p>
          <p>
            It uses the same code as a <link id="#lcl.menus.TPopupMenu">TPopupMenu</link> and offers a series of additional menu choices.
        </p>
        </descr>
      </element>

      <element name="TToolButton.Enabled">
        <short>
          Determines whether the button can respond to click events, and how it is displayed.
        </short>
        <descr>
          <p>
            <var>Enabled</var> is a <var>Boolean</var> property which determines whether the tool button can respond to mouse click events at run-time. Enabled, along with <var>Down</var>, <var>Style</var>,  and values in the tool bar flags influence how the button is rendered in the <var>Paint</var> method.
          </p>
          <p>
            The value for the property may be changed in the <var>CopyPropertiesFromMenuItem</var> method, or when the <var>CM_ENABLEDCHANGED</var> control message is handled for the button.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
        </seealso>
      </element>

      <element name="TToolButton.Grouped">
        <short>
          Indicates if the tool button is a member of a group. The default value is False.
        </short>
        <descr>
          <p>Is this button a member of a group?</p>
          <p>
            This would mean behavior similar to the radio buttons in a <link id="#lcl.extctrls.TRadioGroup">TRadioGroup</link> where only one button in the group can be selected, or the check boxes in a <link id="#lcl.extctrls.TCheckGroup">TCheckGroup</link> where more than one item can be selected but the members of the group interact in some way.
          </p>
        </descr>
      </element>

      <element name="TToolButton.Height">
        <short>Contains the height for the control in pixels.</short>
        <descr>
          <p>
            <var>Height</var> is an <var>Integer</var> property with the vertical size in pixels for the tool button. Height is normally set to the value in the ButtonHeight property for the parent tool bar.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.ButtonHeight"/>
          <link id="TToolBar.ButtonWidth"/>
          <link id="TToolButton.Width"/>
          <link id="#lcl.controls.TControl.Height">TControl.Height</link>
        </seealso>
      </element>

      <element name="TToolButton.ImageIndex">
        <short>
          Ordinal position in an image list for the icon displayed on the tool button.
        </short>
        <descr>
          <p>
            <var>ImageIndex</var> is a <var>TImageIndex</var> property with the ordinal position in an image list for the icon displayed on the tool button. It refers to a position in <var>Images</var>, <var>HotImages</var>, or <var>DisabledImages</var> in the parent tool bar. The default value for the property is <b>-1</b>, and indicates that an image has not been specified for the tool button. Changing the value for the property causes the tool button to be redrawn.
          </p>
          <p>
            The property value may be changed in the <var>CopyPropertiesFromMenuItem</var> method when a <var>MenuItem</var> is assigned to the tool button.
          </p>
          <p>
            ImageIndex is used in the <var>Paint</var> method to select the icon drawn on the tool button.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Paint"/>
          <link id="TToolButton.GetCurrentIcon"/>
          <link id="TToolButton.MenuItem"/>
          <link id="TToolButton.CopyPropertiesFromMenuItem"/>
          <link id="TToolBar.Images"/>
          <link id="TToolBar.HotImages"/>
          <link id="TToolBar.DisabledImages"/>
        </seealso>
      </element>

      <element name="TToolButton.Indeterminate">
        <short>Indicates if the tool button is in an undetermined state.</short>
        <descr>
          <p>
            <var>Indeterminate</var> is a <var>Boolean</var> property which indicates if the tool button is in an undetermined state and may not be applicable to the current context. Indeterminate means that the button is neither selected nor unselected, and normally causes it to be displayed with a "grayed" or "dimmed" appearance.
          </p>
          <p>
            The default value for the property is <b>False</b>. When the property value is changed to <b>True</b>, the <var>Down</var> property is automatically set to <b>False</b> and the tool button is redrawn.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolButton.Marked">
        <short>Indicates if the tool button is marked.</short>
        <descr>
          <p>
            <var>Marked</var> is a <var>Boolean</var> property which indicates if the tool button is marked. The default value for the property is False.
          </p>
          <p>
            Marked is  provided for Delphi code compatibility; it is not used in the implementation of <var>TToolButton</var> or <var>TToolBar</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolButton.MenuItem">
        <short>Contains a menu item associated with the tool button.</short>
        <descr>
          <p>
            <var>MenuItem</var> is a <var>TMenuItem</var> property which contains a menu item associated with the tool button.
          </p>
          <p>
            Normally, a button on an application tool bar is associated with a menu item in the application. When a TMenuItem instance is assigned to the property, its property values are copied into the <var>TToolButton</var> instance using the <var>CopyPropertiesFromMenuItem</var> method. If MenuItem is set to <b>Nil</b>, a free notification is performed for the tool button instance.
          </p>
          <p>
            When MenuItem has sub-menu <var>Items</var>, they are displayed as a drop-down when the tool button uses a drop-down <var>Style</var>.
          </p>
          <p>
            Use <var>DropDownMenu</var> to specify a <var>TPopupMenu</var> instance that is displayed when the button (or drop-down indicator) for the tool button is clicked.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolButton.OnArrowClick">
        <short>
          Event handler signalled when the drop-down indicator for a tool button is clicked.
        </short>
        <descr>
          <p>
            <var>OnArrowClick</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the drop-down indicator is clicked on a tool button using a drop-down <var>Style</var>.
          </p>
          <p>
            OnArrowClick is signalled from the <var>ArrowClick</var> method (when assigned), and occurs when the left mouse button was clicked on the drop-down indicator. It is not executed if the <var>DropDownMenu</var> has already been displayed.
          </p>
          <p>
            Use <var>OnClick</var> (or OnExecute in the Action) for the event handler signalled when the tool button was clicked.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Style"/>
          <link id="TToolButton.ArrowClick"/>
          <link id="TToolButton.Click"/>
          <link id="TToolButton.DropDownMenu"/>
          <link id="#lcl.controls.TControl.OnClick">OnClick</link>
        </seealso>
      </element>

      <element name="TToolButton.OnClick">
        <short>Event handler signalled when the tool button has been clicked.</short>
        <descr>
          <p>
            <var>OnClick</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the left mouse button is clicked on the tool button.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Style"/>
          <link id="TToolButton.OnArrowClick"/>
          <link id="#lcl.controls.TControl.OnClick">TControl.OnClick</link>
        </seealso>
      </element>

      <element name="TToolButton.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TToolButton.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TToolButton.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TToolButton.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TToolButton.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TToolButton.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TToolButton.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TToolButton.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TToolButton.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TToolButton.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TToolButton.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TToolButton.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TToolButton.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TToolButton.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TToolButton.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TToolButton.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TToolButton.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

      <element name="TToolButton.ShowCaption">
        <short>Indicates if the Caption text is displayed on the tool button.</short>
        <descr>
          <p>
            The <var>ShowCaptions</var> property in the parent tool bar takes precedence. Setting <var>ShowCaption</var> to <var>False</var> is relevant only when the <var>List</var> property in the tool bar is set to <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.ShowCaptions"/>
          <link id="TToolBar.List"/>
        </seealso>
      </element>

      <element name="TToolButton.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

      <element name="TToolButton.Style">
        <short>Determines the display style of the tool button.</short>
        <descr>
          <p>
            See TToolButtonStyle for the possible Style values.
          </p>
        </descr>
        <seealso>
          <link id="TToolButtonStyle"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>

      <element name="TToolButton.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TToolButton.Width" link="#lcl.controls.TControl.Width"/>

      <element name="TToolButton.Wrap">
        <short>
          Indicates whether the tool button is forced onto the next row on the parent tool bar.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBarEnumerator">
        <short>Implements an enumerator for the buttons defined on a tool bar.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBarEnumerator.FToolBar"/>
      <element name="TToolBarEnumerator.FPosition"/>

      <element name="TToolBarEnumerator.GetCurrent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarEnumerator.GetCurrent.Result">
        <short/>
      </element>

      <element name="TToolBarEnumerator.Create">
        <short>Constructor for the class instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarEnumerator.Create.AToolBar">
        <short>Tool bar for the enumerator.</short>
      </element>

      <element name="TToolBarEnumerator.MoveNext">
        <short>Moves to the next button instance for the enumerator.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarEnumerator.MoveNext.Result">
        <short/>
      </element>

      <element name="TToolBarEnumerator.Current">
        <short>Current button instance for the enumerator.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBarOnPaintButton">
        <short>
          Specifies an event handler signalled to draw a button on a tool bar with a given state.
        </short>
        <descr>
          <p>
            <var>TToolBarOnPaintButton</var> is an object procedure type that specifies an event handler signalled to draw a button on a tool bar with a given state. TToolBarOnPaintButton is the type used for the <var>OnPaintButton</var> property in <var>TToolBar</var>.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Paint"/>
          <link id="TToolBar.OnPaintButton"/>
        </seealso>
      </element>
      <element name="TToolBarOnPaintButton.Sender">
        <short>Object (TToolButton instance) for the event notification.</short>
      </element>
      <element name="TToolBarOnPaintButton.State">
        <short>Drawing state for the button.</short>
      </element>

      <element name="TToolBarFlag">
        <short>
          Contains values used as status flags in the TToolBar control.
        </short>
        <descr/>
        <seealso>
          <link id="TToolBarFlags"/>
          <link id="TToolBar"/>
        </seealso>
      </element>
      <element name="TToolBarFlag.tbfUpdateVisibleBarNeeded">
        <short>Indicates the tool bar control needs to be redrawn.</short>
      </element>
      <element name="TToolBarFlag.tbfPlacingControls">
        <short>Indicates a button or other control has been moved on a tool bar control.</short>
      </element>

      <element name="TToolBarFlags">
        <short>Set type used to store values from the TToolBarFlag enumeration.</short>
        <descr/>
        <seealso>
          <link id="TToolBarFlag"/>
        </seealso>
      </element>

      <element name="TToolBar">
        <short>
          Implements an application tool bar with buttons or other visual controls.
        </short>
        <descr>
          <p>
            <var>TToolBar</var> is <var>TToolWindow</var> descendant which implements a control used to arrange and  display buttons and other controls. The buttons are used to provide direct access to features or functions in the application, much like a menu.
          </p>
          <p>
            A tool bar is normally aligned to an edge for the parent control so that it spans its width or height. The default alignment places the tool bar along the top edge of the parent control.
          </p>
          <p>
            In basic usage, TToolBar allows TToolButton instances with the same height and width to be added to the control. The buttons can be displayed as check boxes, drop downs (combo-boxes), or drop down buttons as well. The tool bar can be configured to display images and/or captions, as well as dividers (thin) or separators (dividers with extra spacing) between buttons.
          </p>
          <p>
            Other visual controls can be created using the tool bar as the parent control. These controls are resized to the width or height (depending on alignment) for the tool bar.
          </p>
          <p>
            The tool bar can be configured to wrap buttons or child controls when the controls will not fit within the dimension for the tool bar alignment. Other visual aspects can be controlled, like use of edges around the tool bar or a flat appearance.
          </p>
          <p>
            Use the Buttons property to access and maintain the tool buttons on the control. Use Controls to access other visual control types on the tool bar.
          </p>
          <p>
            Use the OnPaint event handler to perform custom drawing on the tool bar control when the Paint method is called. Use the OnPaintButton event handler to perform custom drawing for individual tool buttons on the control.
          </p>
          <p>
            TToolBar is the ancestor for the TExtendedTabToolBar in the LazControls package.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton"/>
          <link id="#lcl.toolwin.TToolWindow">TToolWindow</link>
        </seealso>
      </element>

      <element name="TToolBar.FOnPaint"/>
      <element name="TToolBar.FOnPaintButton"/>
      <element name="TToolBar.FButtonHeight"/>
      <element name="TToolBar.FRealizedButtonHeight"/>
      <element name="TToolBar.FRealizedButtonWidth"/>
      <element name="TToolBar.FRealizedDropDownWidth"/>
      <element name="TToolBar.FRealizedButtonDropWidth"/>
      <element name="TToolBar.FButtons"/>
      <element name="TToolBar.FButtonWidth"/>
      <element name="TToolBar.FDisabledImageChangeLink"/>
      <element name="TToolBar.FDisabledImages"/>
      <element name="TToolBar.FDropDownWidth"/>
      <element name="TToolBar.FThemeDropDownWidth"/>
      <element name="TToolBar.FThemeButtonDropWidth"/>
      <element name="TToolBar.FDropDownButton"/>
      <element name="TToolBar.FFlat"/>
      <element name="TToolBar.FHotImageChangeLink"/>
      <element name="TToolBar.FHotImages"/>
      <element name="TToolBar.FImageChangeLink"/>
      <element name="TToolBar.FImages"/>
      <element name="TToolBar.FIndent"/>
      <element name="TToolBar.FList"/>
      <element name="TToolBar.FNewStyle"/>
      <element name="TToolBar.FRowCount"/>
      <element name="TToolBar.FShowCaptions"/>
      <element name="TToolBar.FCurrentMenu"/>
      <element name="TToolBar.FCurrentMenuAutoFree"/>
      <element name="TToolBar.FSrcMenu"/>
      <element name="TToolBar.FSrcMenuItem"/>
      <element name="TToolBar.FToolBarFlags"/>
      <element name="TToolBar.FWrapable"/>
      <element name="TToolBar.FImagesWidth"/>

      <element name="TToolBar.ApplyFontForButtons">
        <short>Assigns the Font for the control to each of its Buttons.</short>
        <descr>
          <p>
            Called from the <var>FontChanged</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.ButtonCount"/>
          <link id="TToolBar.Buttons"/>
          <link id="TToolBar.FontChanged"/>
          <link id="TToolBarButton"/>
          <link id="#lcl.controls.TControl.Font">TControl.Font</link>
        </seealso>
      </element>

      <element name="TToolBar.CloseCurrentMenu"/>

      <element name="TToolBar.GetButton"/>
      <element name="TToolBar.GetButton.Result"/>
      <element name="TToolBar.GetButton.Index"/>

      <element name="TToolBar.GetButtonCount"/>
      <element name="TToolBar.GetButtonCount.Result"/>

      <element name="TToolBar.GetButtonDropWidth"/>
      <element name="TToolBar.GetButtonDropWidth.Result"/>

      <element name="TToolBar.GetButtonWidth"/>
      <element name="TToolBar.GetButtonWidth.Result"/>

      <element name="TToolBar.GetButtonHeight"/>
      <element name="TToolBar.GetButtonHeight.Result"/>

      <element name="TToolBar.GetDropDownWidth"/>
      <element name="TToolBar.GetDropDownWidth.Result"/>

      <element name="TToolBar.GetTransparent"/>
      <element name="TToolBar.GetTransparent.Result"/>

      <element name="TToolBar.SetButtonHeight"/>
      <element name="TToolBar.SetButtonHeight.AValue"/>

      <element name="TToolBar.SetButtonWidth"/>
      <element name="TToolBar.SetButtonWidth.AValue"/>

      <element name="TToolBar.SetDisabledImages"/>
      <element name="TToolBar.SetDisabledImages.AValue"/>

      <element name="TToolBar.SetDropDownWidth"/>
      <element name="TToolBar.SetDropDownWidth.ADropDownWidth"/>

      <element name="TToolBar.SetFlat"/>
      <element name="TToolBar.SetFlat.AValue"/>

      <element name="TToolBar.SetHotImages"/>
      <element name="TToolBar.SetHotImages.AValue"/>

      <element name="TToolBar.SetImages"/>
      <element name="TToolBar.SetImages.AValue"/>

      <element name="TToolBar.SetImagesWidth"/>
      <element name="TToolBar.SetImagesWidth.AImagesWidth"/>

      <element name="TToolBar.SetIndent"/>
      <element name="TToolBar.SetIndent.AValue"/>

      <element name="TToolBar.SetList"/>
      <element name="TToolBar.SetList.AValue"/>

      <element name="TToolBar.SetShowCaptions"/>
      <element name="TToolBar.SetShowCaptions.AValue"/>

      <element name="TToolBar.SetTransparent"/>
      <element name="TToolBar.SetTransparent.AValue"/>

      <element name="TToolBar.SetWrapable"/>
      <element name="TToolBar.SetWrapable.AValue"/>

      <element name="TToolBar.ToolButtonDown"/>
      <element name="TToolBar.ToolButtonDown.AButton"/>
      <element name="TToolBar.ToolButtonDown.NewDown"/>

      <element name="TToolBar.ImageListChange"/>
      <element name="TToolBar.ImageListChange.Sender"/>

      <element name="TToolBar.DisabledImageListChange"/>
      <element name="TToolBar.DisabledImageListChange.Sender"/>

      <element name="TToolBar.HotImageListChange"/>
      <element name="TToolBar.HotImageListChange.Sender"/>

      <element name="TToolBar.UpdateVisibleBar"/>

      <element name="TToolBar.MoveSubMenuItems"/>
      <element name="TToolBar.MoveSubMenuItems.SrcMenuItem"/>
      <element name="TToolBar.MoveSubMenuItems.DestMenuItem"/>

      <element name="TToolBar.AddButton"/>
      <element name="TToolBar.AddButton.Button"/>

      <element name="TToolBar.RemoveButton"/>
      <element name="TToolBar.RemoveButton.Button"/>

      <element name="TToolBar.cDefButtonWidth">
        <short>Default width for tool buttons on the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.cDefButtonHeight">
        <short>Default height for tool buttons on the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.FPrevVertical">
        <short>Member which indicates if the previous tool bar orientation was vertical.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.IsVertical">
        <short>
          Indicates if the tool bar is oriented to display buttons and controls vertically.
        </short>
        <descr>
          <p>
            <var>IsVertical</var> is a <var>Boolean</var> function in <var>TToolBar</var> used to determine if the tool bar displays its buttons or controls using a vertical orientation. The return value is determined by the value in the Align property, as follows:
          </p>
          <dl>
            <dt>alLeft, alRight</dt>
            <dd>The return value is True.</dd>
            <dt>alNone, alClient, alCustom</dt>
            <dd>The return value is True when Height is larger than Width.</dd>
          </dl>
          <p>
            If the tool bar is parented by a <var>TCoolBar</var> control, the value in its <var>Vertical</var> property is used as the return value.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolBar.IsVertical.Result">
        <short>True when the buttons on the control are displayed vertically.</short>
      </element>

      <element name="TToolBar.WSRegisterClass">
        <short>Registers the tool bar class in the widgetset.</short>
        <descr>
          <p>
            Calls the inherited method on entry. Calls RegisterToolBar in the widgetset class to ensure that the TToolBar component is registered with the factory methods (when needed).
          </p>
        </descr>
        <seealso>
          <link id="#lcl.lclclasses.TLCLComponent.WSRegisterClass">TLCLComponent.WSRegisterClass</link>
        </seealso>
      </element>

      <element name="TToolBar.AdjustClientRect">
        <short>Adjusts the client rectangle when the tool bar is drawn.</short>
        <descr>
          <p>
            <var>AdjustClientRect</var> is an overridden method in <var>TToolBar</var> used to adjust the display area in <var>ARect</var> for the tool bar when the control is drawn.
          </p>
          <p>
            It calls the inherited method on entry to shrink ARect when values have been specified in the <var>EdgeBorders</var>, <var>EdgeInner</var>, and <var>EdgeOuter</var> properties. It also increases the left coordinate for the rectangle by the value specified in the <var>Indent</var> property.
          </p>
          <p>
            AdjustClientRect is called from the <var>AlignControls</var> and <var>WrapButtons</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.EdgeBorders"/>
          <link id="TToolBar.EdgeInner"/>
          <link id="TToolBar.EdgeOuter"/>
          <link id="TToolBar.Indent"/>
          <link id="TToolBar.AlignControls"/>
          <link id="TToolBar.WrapButtons"/>
          <link id="#lcl.controls.TWinControl.AdjustClientRect">TWinControl.AdjustClientRect</link>
        </seealso>
      </element>
      <element name="TToolBar.AdjustClientRect.ARect">
        <short>Rectangle with the client display area.</short>
      </element>

      <element name="TToolBar.ButtonHeightIsStored">
        <short>Implements the storage specifier for the ButtonHeight property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ButtonHeightIsStored.Result">
        <short>True when ButtonHeight is 0 or larger.</short>
      </element>

      <element name="TToolBar.ButtonWidthIsStored">
        <short>Implements the storage specifier for the ButtonWidth property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ButtonWidthIsStored.Result">
        <short>True when ButtonWidth is 0 or larger.</short>
      </element>

      <element name="TToolBar.DropDownWidthIsStored">
        <short>Implements the storage specifier for the DropDownWidth property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.DropDownWidthIsStored.Result">
        <short>True when DropDownWidth is 0 or larger.</short>
      </element>

      <element name="TToolBar.GetControlClassDefaultSize">
        <short>Gets the default size for new instances of the class type.</short>
        <descr>
          <p>
            Uses a default size of 150 pixels (Width) by 26 pixels (Height).
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>

      <element name="TToolBar.DoAutoSize">
        <short>Defers auto-sizing actions to the AlignControls method.</short>
        <descr/>
        <seealso>
          <link id="TToolBar.AlignControls"/>
          <link id="TToolBar.AutoSize"/>
        </seealso>
      </element>

      <element name="TToolBar.CalculatePreferredSize" link="#lcl.controls.TControl.CalculatePreferredSize"/>

      <element name="TToolBar.CheckMenuDropdown">
        <short>
          Determines whether the specified button has a drop-down menu item which must be checked.
        </short>
        <descr>
          <p>
            Called from the <var>TToolButton.CheckMenuDropdown</var> method when the tool button is clicked.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.CheckMenuDropdown"/>
        </seealso>
      </element>
      <element name="TToolBar.CheckMenuDropdown.Result">
        <short>True if the menu item for the button was checked (clicked) in the method.</short>
      </element>
      <element name="TToolBar.CheckMenuDropdown.Button">
        <short>Tool button examined in the method.</short>
      </element>

      <element name="TToolBar.ClickButton">
        <short>Calls the Click method for the specified tool button.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ClickButton.Button">
        <short>Tool bar button executed in the method.</short>
      </element>

      <element name="TToolBar.CreateWnd">
        <short>Performs actions needed when the Handle for the control is created.</short>
        <descr>
          <p>
            Disables auto-sizing on entry, and re-enables auto-sizing prior to exiting from the method.
          </p>
          <p>
            Calls the inherited method to update creation parameters and flags, and to initialize the window handle for the control. Calls UpdateVisibleToolbar to size and align the buttons and controls on the tool bar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
        </seealso>
      </element>

      <element name="TToolBar.AlignControls">
        <short>
          Performs actions to align the tool bar buttons in the specified rectangle.
        </short>
        <descr>
          <p>
            <var>AlignControls</var> is an overridden method in <var>TToolBar</var> and re-implements the method from the ancestor class. It does not call the inherited method.
          </p>
          <p>
            No actions are performed in the method when <var>tbfPlacingControls</var> has already been included in the flags for the tool bar. This indicates that AlignControls has already been called, but not yet completed.
          </p>
          <p>
            <var>DisableAlign</var> is called to prevent automatic alignment while the method is active. <var>WrapButtons</var> is called to position the buttons and controls in <var>RemainingClientRect</var> using the setting in <var>Wrapable</var> and the value from <var>IsVertical</var>. <var>EnableAlign</var> is called to re-enable alignment when the buttons have been positioned.
          </p>
          <p>
            <var>tbfPlacingControls</var> is removed from the tool bar flags prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.IsVertical"/>
          <link id="TToolBar.Wrapable"/>
          <link id="TToolBar.WrapButtons"/>
          <link id="#lcl.controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
        </seealso>
      </element>
      <element name="TToolBar.AlignControls.AControl">
        <short>Not used in the overridden method</short>
      </element>
      <element name="TToolBar.AlignControls.RemainingClientRect">
        <short>Rectangle with the bounds where the tool bar and its buttons are aligned.</short>
      </element>

      <element name="TToolBar.FindButtonFromAccel">
        <short>Gets the tool bar button with the specified accelerator key.</short>
        <descr>
          <p>
            <var>FindButtonFromAccel</var> is a <var>TToolButton</var> function used to find the tool button with the accelerator key (virtual key code) value specified in <var>Accel</var>. FindButtonFromAccel visits the Visible and Enabled <var>Buttons</var> to find the TToolButton instance using the specified accelerator key in its caption. The return value is <b>Nil</b> if a tool button is not found using the specified accelerator key.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Enabled"/>
          <link id="TToolButton.Visible"/>
          <link id="#lcl.forms.IsAccel">IsAccel</link>
        </seealso>
      </element>
      <element name="TToolBar.FindButtonFromAccel.Result">
        <short>Tool button using the specified shortcut, or Nil when not found.</short>
      </element>
      <element name="TToolBar.FindButtonFromAccel.Accel">
        <short>Shortcut or accelerator key to locate in the tool bar buttons.</short>
      </element>

      <element name="TToolBar.FontChanged">
        <short>
          Performs actions needed when the Font has changed for the control.
        </short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden procedure which performs action needed when the <var>Font</var> for the control has been changed. FontChanged calls the inherited FontChanged method, and applies the new font to the Buttons in the tool bar. Values are reset in internal members used to track the realized height and width for buttons and drop downs in the tool bar.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="#lcl.controls.TCustomControl.FontChanged">TCustomControl.FontChanged</link>
        </seealso>
      </element>

      <element name="TToolBar.Loaded">
        <short>
          Performs actions needed when the control has finished loading from the LCL streaming mechanism.
        </short>
        <descr>
          <p>
            Calls the inherited method on entry. Calls UpdateVisibleBar to adjust the size and layout for Buttons on the tool bar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TToolBar.Notification">
        <short>
          Handles notifications for components added or removed from the control.
        </short>
        <descr>
          <p>
            Calls the inherited method on entry. Ensures that the <var>DisabledImages</var>, <var>HotImages</var>, and <var>Images</var> properties are Nil'd if their image list is removed from the control.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.DisabledImages"/>
          <link id="TToolBar.HotImages"/>
          <link id="TToolBar.Images"/>
          <link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TToolBar.Notification.AComponent">
        <short>Component of the notification message.</short>
      </element>
      <element name="TToolBar.Notification.Operation">
        <short>Action which triggered the notification.</short>
      </element>

      <element name="TToolBar.Paint">
        <short>Draws the tool bar on the Canvas for the control.</short>
        <descr>
          <p>
            <var>Paint</var> is an overridden procedure used to display the tool bar.  At design-time, a Red rectangle is drawn as a frame for the control. Paint calls the inherited Paint method to draw the inner and outer borders defined for the control. Paint signals the <var>OnPaint</var> event handler (when assigned) to perform drawing operations required for the tool bar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Paint"/>
        </seealso>
      </element>

      <element name="TToolBar.RepositionButton">
        <short>Repositions the tool button at the specified position in Buttons.</short>
        <descr>
          <p>
            Forces the entire tool bar to be redrawn. Not used in the current implementation.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolBar.RepositionButton.Index">
        <short>Ordinal position in Buttons for the tool button moved in the method.</short>
      </element>

      <element name="TToolBar.RepositionButtons">
        <short>
          Repositions the tool buttons on the tool bar.
        </short>
        <descr>
          <p>
            Forces the entire tool bar to be redrawn. Not used in the current implementation.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolBar.RepositionButtons.Index">
        <short>Not used in the method.</short>
      </element>

      <element name="TToolBar.WrapButtons">
        <short>
          Adjusts tool button sizes and positions, and handles wrapping to new rows or columns.
        </short>
        <descr>
          <p>
            <var>WrapButtons</var> is a <var>Boolean</var> function used to resize and position buttons on the tool bar. WrapButtons positions buttons from left to right in the client display area, and repositions any child control with its <var>Align</var> property set to <var>clNone</var>.
          </p>
          <p>
            When <var>Simulate</var> is <b>True</b>, the child control sizes and positions are calculated but not applied to the tool bar.
          </p>
          <p>
            Set Wrapable to <b>text</b> to allow a new row or column to be created when the cumulative button width is larger than the width for the tool bar. Or set the <var>Wrap</var> property in a specific tool button to <b>True</b> to force it and subsequent controls onto a new row or column.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolBar.WrapButtons.Result">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.UseSize">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.NewWidth">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.NewHeight">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.Simulate">
        <short/>
      </element>

      <element name="TToolBar.CNDropDownClosed">
        <short>Handles the CN_DROPDOWNCLOSED control notification message.</short>
        <descr>
          <p>
            Calls <var>CloseCurrentMenu</var> to hide an active drop-down menu displayed for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolBar.CNDropDownClosed.Message">
        <short>
          The CN_DROPDOWNCLOSED message and parameters handled in the method.
        </short>
      </element>

      <element name="TToolBar.DoAutoAdjustLayout" link="#lcl.controls.TControl.DoAutoAdjustLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TToolBar.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TToolBar.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TToolBar.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TToolBar</var>: calls inherited <var>Create</var> and sets many formatting and size defaults.
          </p>
          <p>
            Among the variables initialized and defaults set are the list of buttons, button width and height, style, indentation, alignment, links for image change, the bounds and the edge borders.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TToolBar.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TToolBar.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TToolBar</var>: frees buttons and links then calls inherited <var>Destroy</var>.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TToolBar.EndUpdate">
        <short>Finishes an update process for the tool bar.</short>
        <descr>
          <p>
            Calls the inherited method on entry. Updates the size and layout for <var>Buttons</var> when the internal update counter is <b>0</b> (<b>zero</b>) and <var>tbfUpdateVisibleBarNeeded</var>  has been included in the flags for the control.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="TToolBar.AlignControls"/>
          <link id="TToolBarFlag"/>
          <link id="#lcl.toolwin.TToolWindow.EndUpdate">TToolWindow.EndUpdate</link>
          <link id="#lcl.toolwin.TToolWindow.BeginUpdate">TToolWindow.BeginUpdate</link>
        </seealso>
      </element>

      <element name="TToolBar.FlipChildren">
        <short>Disables reversing right and left alignment for child controls.</short>
        <descr/>
        <seealso>
          <link id="TToolBar.AlignControls"/>
          <link id="#lcl.controls.TWinControl.FlipChildren">TWinControl.FlipChildren</link>
        </seealso>
      </element>
      <element name="TToolBar.FlipChildren.AllLevels">
        <short>Not used in the overridden method.</short>
      </element>

      <element name="TToolBar.GetEnumerator">
        <short>Gets a TToolBarEnumerator enumerator for the class instance.</short>
        <descr>
          <p>
            Creates a new <var>TToolBarEnumerator</var> instance using the current control as the owner.
          </p>
        </descr>
        <seealso>
          <link id="TToolBarEnumerator"/>
        </seealso>
      </element>
      <element name="TToolBar.GetEnumerator.Result">
        <short>Tool bar enumerator created in the method.</short>
      </element>

      <element name="TToolBar.SetButtonSize">
        <short>
          Sets the width and height for Buttons on the control to the specified values.
        </short>
        <descr>
          <p>
            SetButtonSize is a convenience method used to assign values for the ButtonWidth and ButtonHeight properties in a single method call. It is called when a new value is assigned to the <var>ButtonWidth</var> or  <var>ButtonHeight</var> properties.
          </p>
          <p>
            For example:
          </p>
<code>
AToolbar.SetButtonSize(32, 30);
</code>
          <p>
            is equivalent to:
          </p>
<code>
AToolbar.ButtonWidth := 32;
AToolbar.ButtonHeight := 30;
</code>
          <p>
            The existing value in the property is kept when it is the same as the new value. No actions are performed in the method when neither value has been changed, or when BeginUpdate has already been called.
          </p>
          <p>
            SetButtonSize visits each of the Buttons on the control to apply the changed values to the corresponding TToolButton properties. The button might not be updated if any of the following conditions are found.
          </p>
          <p>
            For button width:
          </p>
          <ul>
            <li>The new value is 0.</li>
            <li>
              The new value is too small for the width needed in a check box or drop-down style button.
            </li>
            <li>The tool button has AutoSize enabled.</li>
            <li>The control is not derived from TToolButton.</li>
          </ul>
          <p>
            For button height:
          </p>
          <ul>
            <li>
              In horizontal toolbars the height is set by the toolbar independent of the assigned size.
            </li>
          </ul>
          <p>
            SetButtonSize calls the SetBounds method in each tool bar button to apply the values in NewButtonWidth and NewButtonHeight.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.ButtonWidth"/>
          <link id="TToolBar.ButtonHeight"/>
          <link id="TToolBar.Buttons"/>
        </seealso>
      </element>
      <element name="TToolBar.SetButtonSize.NewButtonWidth">
        <short>New value for the ButtonWidth property.</short>
      </element>
      <element name="TToolBar.SetButtonSize.NewButtonHeight">
        <short>New value for the ButtonHeight property.</short>
      </element>

      <element name="TToolBar.CanFocus">
        <short>Always returns False for TToolBar.</short>
        <descr>
          <p>
            The tool bar cannot be given focus, but its buttons or controls can.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.CanFocus">TWinControl.CanFocus</link>
        </seealso>
      </element>
      <element name="TToolBar.CanFocus.Result">
        <short>Always returns False for TToolBar.</short>
      </element>

      <element name="TToolBar.ButtonCount">
        <short>Number of Buttons defined for the tool bar control.</short>
        <descr>
          <p>
            The property value is read from the <var>Count</var> property in <var>ButtonList</var>.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.ButtonList"/>
          <link id="#rtl.classes.TList.Count">TList.Count</link>
        </seealso>
      </element>

      <element name="TToolBar.Buttons">
        <short>Lists with the tool buttons on the tool bar.</short>
        <descr>
          <p>
            <var>Buttons</var> maintains a list of <var>TToolButton</var> instances. All tool buttons that share a <var>TToolBar</var> parent have the same height and (except for separators and dividers) the same width. Other controls on a toolbar are held in place by invisible separators, which are automatically created and destroyed.
          </p>
          <p>
            To add tool buttons to the toolbar at design time, select the toolbar, right-click, and choose New Button. To create a space (separator) between one button and the next, select New Separator. To create a divider between buttons, add a button and set its <var>Style</var> property to <var>tbsDivider</var>. Other controls may be added to the toolbar directly from the Component palette.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Style"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <element name="TToolBar.Buttons.Index">
        <short/>
      </element>

      <element name="TToolBar.ButtonList">
        <short>
          Contains the Buttons defined for the tool bar control.
        </short>
        <descr>
          <p>
            <var>ButtonList</var> is a read-only <var>TList</var> property which contains the <var>TToolButton</var> instances for the tool bar. It contains the values for the indexed <var>Buttons</var> property. It is also used in widgetset classes to access the buttons defined for the tool bar.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="TToolButton"/>
        </seealso>
      </element>

      <element name="TToolBar.RowCount">
        <short>Number of rows needed to display the buttons for the control.</short>
        <descr>
          <p>
            <var>RowCount</var> is a read-only <var>Integer</var> property with the number of rows needed to display the <var>Buttons</var> and <var>Controls</var> on the tool bar using its display settings. The value in RowCount is calculated in the <var>WrapButtons</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="TToolBar.ButtonHeight"/>
          <link id="TToolBar.ButtonWidth"/>
          <link id="TToolBar.WrapButtons"/>
          <link id="TToolBar.Wrapable"/>
        </seealso>
      </element>

      <element name="TToolBar.ButtonDropWidth">
        <short>Width for the drop-down button indicator.</short>
        <descr>
          <p>
            <var>ButtonDropWidth</var> is a read-only <var>Integer</var> property with the number of pixels needed for a drop-down button and its drop-down indicator.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.DropDownWidth"/>
          <link id="TToolBar.FontChanged"/>
          <link id="TToolButton.Paint"/>
          <link id="TToolButton.PointInArrow"/>
          <link id="TToolButton.CalculatePreferredSize"/>
        </seealso>
      </element>

      <element name="TToolBar.Align">
        <short>Specifies the placement of the control inside its Parent.</short>
        <descr>
          <p>
            Align is a TAlign property which specifies how the control is aligned to its parent control. The default value for the property is alTop in TToolBar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Align">TControl.Align</link>
        </seealso>
      </element>

      <element name="TToolBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TToolBar.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
      <element name="TToolBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TToolBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>

      <element name="TToolBar.ButtonHeight">
        <short>Contains the height for buttons on the tool bar control.</short>
        <descr>
          <p>Use 0 for auto-sized value.</p>
          <p>
            An internal member with the real height for buttons is maintained when reading or writing the value for the property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.ButtonWidth">
        <short>Contains the width for buttons on the tool bar control.</short>
        <descr>
          <p>Use 0 for auto-sized value</p>
          <p>
            An internal member is maintained when reading or writing the value for the property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.Caption" link="#lcl.controls.TControl.Caption"/>
      <element name="TToolBar.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
      <element name="TToolBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TToolBar.Color" link="#lcl.controls.TControl.Color"/>

      <element name="TToolBar.DisabledImages">
        <short>List with images displayed when a tool button is not enabled.</short>
        <descr>
          <p>
            <var>DisabledImages </var> is a <var>TCustomImageList</var> property with icon images displayed on tool buttons when they are not Enabled. Use <var>Images</var> for the images displayed when the tool button are enabled but not hovered. Use <var>HotImages</var> for the images displayed when tool buttons are hovered under the mouse cursor.
          </p>
          <p>
            The image position for a tool button is stored in the ImageIndex property in the TToolButton instance.This requires the image at a given position in the image lists to target the same button on the tool bar control.
          </p>
          <p>
            The image list should contain images which uses the sames width and height, and appropriately sized for the ButtonWidth and ButtonHeight for the tool bar. Use <var>ImagesWidth</var> to specify the size needed for tool button icons independent of the actual image size stored in the image lists.
          </p>
          <p>
            When a new image list is assigned to the property, the tool bar is redrawn.
          </p>
          <p>
            The image lists are used when the tool buttons get the current icon drawn in the Paint method.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Images"/>
          <link id="TToolBar.HotImages"/>
          <link id="TToolBar.ImagesWidth"/>
          <link id="TToolButton.GetCurrentIcon"/>
          <link id="TToolButton.Paint"/>
          <link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
        </seealso>
      </element>

      <element name="TToolBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TToolBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TToolBar.DragMode" link="#lcl.controls.TControl.DragMode"/>

      <element name="TToolBar.DropDownWidth">
        <short>Width of the drop down arrow button.</short>
        <descr>
          <p>Use 0 for auto-sized value.</p>
        </descr>
      </element>

      <element name="TToolBar.EdgeBorders">
        <short>
          Indicates which edges on the tool bar are drawn with a border.
        </short>
        <descr>
          <p>
            <var>EdgeBorders</var> is a <var>TEdgeBorders</var> property which indicates the edges to be drawn with a border on the control. It is redeclared in TToolBar to use the default value <b>[ebTop]</b>.
          </p>
          <p>
            Use <var>EdgeInner</var> and <var>EdgeOuter</var> to control the drawing style for the visible borders.
          </p>
          <p>
            EdgeBorders is used in the inherited <var>Paint</var> method to render the control with borders in the specified positions using the drawing style in EdgeInner and EdgeOuter.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Paint"/>
          <link id="#lcl.toolwin.TToolWindow.Paint">TToolWindow.Paint</link>
          <link id="#lcl.toolwin.TToolWindow.EdgeBorders">TToolWindow.EdgeBorders</link>
          <link id="#lcl.toolwin.TEdgeBorders">TEdgeBorders</link>
          <link id="#lcl.toolwin.TEdgeBorder">TEdgeBorder</link>
        </seealso>
      </element>

      <element name="TToolBar.EdgeInner" link="#lcl.toolwin.TToolWindow.EdgeInner"/>
      <element name="TToolBar.EdgeOuter" link="#lcl.toolwin.TToolWindow.EdgeOuter"/>
      <element name="TToolBar.Enabled" link="#lcl.controls.TControl.Enabled"/>

      <element name="TToolBar.Flat">
        <short>
          Indicates if the control is drawn with a flat appearance.
        </short>
        <descr>
          <p>
            <var>Flat</var> is a <var>Boolean</var> property which indicates if the control is drawn using a flat appearance (when <b>True</b>), or a raised drawing style (when <b>False</b>). The default value for the property is <b>True</b>.
         </p>
         <p>
           Changing the value for the property causes the inherited <var>Invalidate</var> method to be called to refresh the control.
         </p>
        </descr>
        <seealso>
          <link id="#lcl.Controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
        </seealso>
      </element>

      <element name="TToolBar.Font" link="#lcl.controls.TControl.Font"/>

      <element name="TToolBar.Height">
        <short>Height for the tool bar control.</short>
        <descr>
          <p>
            <var>Height</var> is an <var>Integer</var> property re-declared in <var>TToolBar</var> to use a default value. The default value for the property is 32 (pixels).
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Height">TControl.Height</link>
        </seealso>
      </element>

      <element name="TToolBar.HotImages">
        <short>List with images displayed when a button is "hot" or hovered.</short>
        <descr>
          <p>
            <var>HotImages</var> is a <var>TCustomImageList</var> property with icon images displayed on tool buttons when the mouse is hovered over the controls. Use <var>Images</var> for the images displayed when the tool button are enabled but not hovered. Use <var>DisabledImages</var> for the images displayed when tool buttons are not enabled.
          </p>
          <p>
            The image position for a tool button is stored in the ImageIndex property in the TToolButton instance.This requires the image at a given position in the image lists to target the same button on the tool bar control.
          </p>
          <p>
            The image list should contain images which uses the sames width and height, and appropriately sized for the ButtonWidth and ButtonHeight for the tool bar. Use <var>ImagesWidth</var> to specify the size needed for tool button icons independent of the actual image size stored in the image lists.
          </p>
          <p>
            When a new image list is assigned to the property, the tool bar is redrawn.
          </p>
          <p>
            The image lists are used when the tool buttons get the current icon drawn in the Paint method.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.DisabledImages"/>
          <link id="TToolBar.Images"/>
          <link id="TToolBar.ImagesWidth"/>
          <link id="TToolButton.GetCurrentIcon"/>
          <link id="TToolButton.Paint"/>
          <link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
        </seealso>
      </element>

      <element name="TToolBar.Images">
        <short>List with images displayed when a tool button is enabled.</short>
        <descr>
          <p>
            <var>Images</var> is a <var>TCustomImageList</var> property with icon images displayed on tool buttons when they are enabled. Use <var>DisabledImages</var> for the images displayed when the tool button are not enabled. Use <var>HotImages</var> for the images displayed when tool buttons are enabled and hovered under the mouse cursor.
          </p>
          <p>
            The image position for a tool button is stored in the ImageIndex property in the TToolButton instance.This requires the image at a given position in the image lists to target the same button on the tool bar control.
          </p>
          <p>
            The image list should contain images which uses the sames width and height, and appropriately sized for the ButtonWidth and ButtonHeight for the tool bar. Use <var>ImagesWidth</var> to specify the size needed for tool button icons independent of the actual image size stored in the image lists.
          </p>
          <p>
            When a new image list is assigned to the property, the tool bar is redrawn.
          </p>
          <p>
            The image lists are used when the tool buttons get the current icon drawn in the Paint method.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.DisabledImages"/>
          <link id="TToolBar.HotImages"/>
          <link id="TToolBar.ImagesWidth"/>
          <link id="TToolButton.GetCurrentIcon"/>
          <link id="TToolButton.Paint"/>
          <link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
        </seealso>
      </element>

      <element name="TToolBar.ImagesWidth">
        <short>Width for the images displayed on the tool bar.</short>
        <descr>
          <p>
            <var>ImagesWidth</var> is an <var>Integer</var> property which indicates the width  for images displayed on the tool bar.  The default value for the property is zero (0).
          </p>
          <p>
            Changing the value in the property causes the private <var>UpdateVisibleBar</var> method to be called to update control flags, and to resize both the control and its <var>Buttons</var>.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="TToolButton"/>
        </seealso>
      </element>

      <element name="TToolBar.Indent">
        <short>
          Number of pixels reserved as indentation spacing before buttons and controls on the tool bar.
        </short>
        <descr>
          <p>
            <var>Indent</var> is an <var>Integer</var> property with the number of pixels reserved as indentation spacing before buttons and controls on the tool bar. The default value for the property is <b>1</b>.
          </p>
          <p>
            When the value for the property is changed, the tool bar is redrawn.
          </p>
          <p>
            Indent is used in the <var>AdjustClientRect</var> method to increment the left edge of the display area for tool buttons on the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.List">
        <short>
          Indicates whether buttons on the tool bar are displayed using a list style.
        </short>
        <descr>
          <p>
            <var>List</var> is a <var>Boolean</var> property which indicates if the buttons on the tool bar are displayed using a list style.
          </p>
          <p>
            When List is set to True, the icon for a tool button is displayed on the left edge of the button immediately before the Caption text (when enabled). When set to False, the icon is centered in the button width and above the Caption text for the button.
          </p>
          <p>
            The default value for the property is <b>False</b>. Changing the value for the property causes the tool bar to be resized and redrawn.
          </p>
          <p>
            Set <var>ShowCaptions</var> to <b>True</b> to enable Caption text on the tool bar buttons.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TToolBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TToolBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TToolBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

      <element name="TToolBar.ShowCaptions">
        <short>Indicates whether captions are displayed on tool bar buttons.</short>
        <descr>
          <p>
            <var>ShowCaptions</var> is a <var>Boolean</var> property which indicates whether  caption text is displayed on tool bar buttons. The default value for the property is False. Changing the value for the property causes the tool bar to be redrawn.
          </p>
          <p>
            ShowCaptions is used in the <var>Paint</var> method for the tool buttons on the control. When set to <b>True</b>, the caption text for a button is centered aligned at the bottom edge of the button. The icon for a button is drawn center aligned at the top edge of the button.
          </p>
          <p>
            Use the <var>List</var> property (along with <var>ShowCaption</var> in the tool buttons) to display captions and icons using a list-style format where the icon and caption are on a single line.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.DisabledImages"/>
          <link id="TToolBar.HotImages"/>
          <link id="TToolBar.Images"/>
          <link id="TToolBar.List"/>
          <link id="TToolButton.Paint"/>
          <link id="TToolButton.Caption"/>
          <link id="TToolButton.ImageIndex"/>
          <link id="TToolButton.ShowCaption"/>
        </seealso>
      </element>

      <element name="TToolBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TToolBar.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TToolBar.TabStop" link="#lcl.controls.TWinControl.TabStop"/>

      <element name="TToolBar.Transparent">
        <short>
          Indicates whether the control is drawn with transparency.
        </short>
        <descr>
          <p>
            <var>Transparent</var> is a <var>Boolean</var> property which indicates whether the tool bar is drawn with transparency. The default value for the property is <b>False</b>.
          </p>
          <p>
            When set to <b>True</b>, the content for the <var>Parent</var> control can be seen beneath the unused areas on tool bar. Changing the value for the property causes control flags to be updated to add or remove <var>csOpaque</var> as needed, and the tool bar to be redrawn.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.Visible" link="#lcl.controls.TControl.Visible"/>

      <element name="TToolBar.Wrapable">
        <short>
          Controls wrapping of tool buttons to the next row when they are too long for the
          orientation on the tool bar.
        </short>
        <descr>
          <p>
            <var>Wrapable</var> is a <var>Boolean</var> property which indicates if tool buttons can be wrapped to a new line when they are too long for the Align setting in the tool bar. The default value for the property is <b>True</b>. Changing the property value causes the child controls to be re-aligned, and the tool bar is redrawn.
          </p>
          <p>
            Wrapable is used in the <var>WrapButtons</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.WrapButtons"/>
          <link id="TToolBar.AlignControls"/>
          <link id="#lcl.controls.TWinControl.ReAlign">TWinControl.ReAlign</link>
        </seealso>
      </element>

      <element name="TToolBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TToolBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TToolBar.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TToolBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TToolBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>

      <element name="TToolBar.OnPaintButton">
        <short>Event handler signalled to draw a button on the tool bar.</short>
        <descr>
          <p>
            <var>OnPaintButton</var> is a <var>TToolBarOnPaintButton</var> property which contains the event handler signalled when one of the <var>Buttons</var> on the tool bar is drawn.
          </p>
          <p>
            OnPaintButton is signalled (when assigned) from the <var>Paint</var> method in <var>TToolButton</var>, and is used instead of the default drawing routines for the tool button. The <var>Sender</var> argument contains the TToolButton instance for the event notification. It is assumed that the event handler handles all aspects of drawing the button on the tool bar using the theme element details passed as an argument.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Paint"/>
          <link id="TToolBar.Paint"/>
          <link id="TToolBar.OnPaint"/>
          <link id="TToolBarOnPaintButton"/>
        </seealso>
      </element>

      <element name="TToolBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TToolBar.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TToolBar.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TToolBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TToolBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TToolBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TToolBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TToolBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TToolBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TToolBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TToolBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>

      <element name="TToolBar.OnPaint">
        <short>Event handler signalled when the Paint method is called for the control.</short>
        <descr>
          <p>
            Signalled after the inherited <var>Paint</var> method has been performed. The <var>Sender</var> argument contains the <var>TToolBar</var> instance for the notification.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TToolBar.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
      <element name="TToolBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

      <element name="TGrabStyle">
        <short>Represent drawing styles available for the grab bar in TCustomCoolBar.</short>
        <descr>
          <p>
            <var>TGrabStyle</var> is an enumerated type with values used to represent drawing styles used for the grab bar (or gripper) in <var>TCustomCoolBar</var>. TGrabStyle is the type used to implement the <var>GrabStyle</var> property in TCustomCoolBar.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCoolBar.GrabStyle"/>
        </seealso>
      </element>
      <element name="TGrabStyle.gsSimple">
        <short>Drawn as a simple raised block.</short>
      </element>
      <element name="TGrabStyle.gsDouble">
        <short>Drawn as two thin raised blocks.</short>
      </element>
      <element name="TGrabStyle.gsHorLines">
        <short>Drawn as equidistant horizontal lines.</short>
      </element>
      <element name="TGrabStyle.gsVerLines">
        <short>Drawn as equidistant vertical lines.</short>
      </element>
      <element name="TGrabStyle.gsGripper">
        <short>Drawn as parallel rows of raised dots.</short>
      </element>
      <element name="TGrabStyle.gsButton">
        <short>Drawn with a push button appearance.</short>
      </element>

      <element name="TDragBand">
        <short>Represents the drag actions for TCoolBar.</short>
        <descr>
          <var>TDragBand</var> is an enumerated type with values that indicates the action performed when a <var>TCoolBar</var> band control is dragged. TDragBand is used in the implementation of <var>TCustomCoolBar</var> / <var>TCoolBar</var>.
        </descr>
        <seealso>
          <link id="TCustomCoolBar.MouseDown"/>
          <link id="TCustomCoolBar.MouseMove"/>
          <link id="TCustomCoolBar.RemoveControl"/>
        </seealso>
      </element>
      <element name="TDragBand.dbNone">
        <short>No action. Do not allow dragging.</short>
      </element>
      <element name="TDragBand.dbMove">
        <short>Move or re-order the band.</short>
      </element>
      <element name="TDragBand.dbResize">
        <short>Resize the band.</short>
      </element>

      <element name="TCoolBand">
        <short>Implements a band displayed on the TCoolBar control.</short>
        <descr>
          <p>
            <var>TCoolBand</var> is a <var>TCollectionItem</var> descendant which implements a band displayed on the <var>TCoolBar</var> control.
          </p>
          <p>
            A band contains a single Control that is displayed as a movable, sizable area on the TCoolBar control. It has a Grabber (sizing grip) that is used to move and resize the band. It can also have a bitmap image and text displayed at the start of the band prior its Control. The band be configured with a fixed size, and may occupy the entire width for the TCoolBar.
          </p>
          <p>
            TCoolBand is the type used for the items in the TCoolBands collection.
          </p>
        </descr>
        <seealso>
          <link id="TCoolBands"/>
          <link id="TCoolBar.Bands"/>
        </seealso>
      </element>

      <element name="TCoolBand.FCoolBar"/>
      <element name="TCoolBand.FControl"/>
      <element name="TCoolBand.FBitmap"/>
      <element name="TCoolBand.FBorderStyle"/>
      <element name="TCoolBand.FBreak"/>
      <element name="TCoolBand.FColor"/>
      <element name="TCoolBand.FFixedBackground"/>
      <element name="TCoolBand.FFixedSize"/>
      <element name="TCoolBand.FHeight"/>
      <element name="TCoolBand.FHorizontalOnly"/>
      <element name="TCoolBand.FImageIndex"/>
      <element name="TCoolBand.FMinHeight"/>
      <element name="TCoolBand.FMinWidth"/>
      <element name="TCoolBand.FParentBitmap"/>
      <element name="TCoolBand.FParentColor"/>
      <element name="TCoolBand.FRealLeft"/>
      <element name="TCoolBand.FRealWidth"/>
      <element name="TCoolBand.FText"/>
      <element name="TCoolBand.FVisible"/>
      <element name="TCoolBand.FWidth"/>
      <element name="TCoolBand.FLeft"/>
      <element name="TCoolBand.FTop"/>

      <element name="TCoolBand.IsBitmapStored">
        <short>Implements the storage specifier for the Bitmap property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.IsBitmapStored.Result">
        <short>True when ParentBitmap is not set.</short>
      </element>

      <element name="TCoolBand.IsColorStored">
        <short>Implements the storage specifier for the Color property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.IsColorStored.Result">
        <short>True when ParentColor is not set.</short>
      </element>

      <element name="TCoolBand.GetRight">
        <short>Gets the value for the Right property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Right"/>
        </seealso>
      </element>
      <element name="TCoolBand.GetRight.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCoolBand.GetVisible">
        <short>Gets the value for the Visible property.</short>
        <short/>
        <descr/>
        <seealso>
          <link id="TCoolBand.Visible"/>
        </seealso>
      </element>
      <element name="TCoolBand.GetVisible.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCoolBand.SetBitmap">
        <short>Sets the value for the Bitmap property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Bitmap"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetBitmap.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetBorderStyle">
        <short>Sets the value for the BorderStyle property.</short>
        <short/>
        <descr/>
        <seealso>
          <link id="TCoolBand.BorderStyle"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetBorderStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetBreak">
        <short>Sets the value for the Break property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Break"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetBreak.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetColor">
        <short>Sets the value for the Color property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Color"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetControl">
        <short>Sets the value for the Control property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Control"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetControl.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetFixedBackground">
        <short>Sets the value for the FixedBackground property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.FixedBackground"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetFixedBackground.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetHorizontalOnly">
        <short>Sets the value for the HorizontalOnly property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.HorizontalOnly"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetHorizontalOnly.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetImageIndex">
        <short>Sets the value for the ImageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.ImageIndex"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetImageIndex.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetMinHeight">
        <short>Sets the value for the MinHeight property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.MinHeight"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetMinHeight.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetMinWidth">
        <short>Sets the value for the MinWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.MinWidth"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetMinWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetParentBitmap">
        <short>Sets the value for the ParentBitmap property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.ParentBitmap"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetParentBitmap.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetParentColor">
        <short>Sets the value for the ParentColor property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.ParentColor"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetParentColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetText">
        <short>Sets the value for the Text property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Text"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetText.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetVisible">
        <short>Sets the value for the Visible property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Visible"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetVisible.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.SetWidth">
        <short>Sets the value for the Width property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBand.Width"/>
        </seealso>
      </element>
      <element name="TCoolBand.SetWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCoolBand.cDefMinHeight">
        <short>Default value for the MinHeight property.</short>
      </element>

      <element name="TCoolBand.cDefMinWidth">
        <short>Default value for the MinWidth property.</short>
      </element>

      <element name="TCoolBand.cDefWidth">
        <short>Default value for the Width property.</short>
      </element>

      <element name="TCoolBand.cDivider">
        <short>Default width used for dividers on the control.</short>
      </element>

      <element name="TCoolBand.cGrabIndent">
        <short>Default indentation used for the grabber (sizing grip).</short>
      </element>

      <element name="TCoolBand.FControlLeft">
        <short>Left coordinate for the Control in the band.</short>
      </element>

      <element name="TCoolBand.FControlTop">
        <short>Top coordinate for the Control in the band.</short>
      </element>

      <element name="TCoolBand.FTextWidth">
        <short>Width (pixels) for  the value in the Text property.</short>
      </element>

      <element name="TCoolBand.CalcControlLeft">
        <short>Calculates the left coordinate for the Control in the band.</short>
        <descr>
          <p>
            Reserves space needed for elements in the TCoolBand instance, including:
          </p>
          <ul>
            <li>Indent spacing for the Grabber (Sizing Grip)</li>
            <li>Horizontal spacing</li>
            <li>The space needed for the Text</li>
            <li>The space needed for the Image (scaled to the current PPI)</li>
          </ul>
          <p>
            The return value contains the offset in the band where the Control is displayed.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcControlLeft.Result">
        <short>Offset in the band where the Control is displayed.</short>
      </element>

      <element name="TCoolBand.CalcPreferredHeight">
        <short>
          Calculates the band height using the orientation and settings in the parent control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcPreferredHeight.Result">
        <short/>
      </element>

      <element name="TCoolBand.CalcPreferredWidth">
        <short>
          Calculates the band width using the orientation and settings in the parent control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcPreferredWidth.Result">
        <short/>
      </element>

      <element name="TCoolBand.CalcTextWidth">
        <short>
          Gets the number of pixels needed for Text using the Font in the parent control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcTextWidth.Result">
        <short/>
      </element>

      <element name="TCoolBand.GetDisplayName">
        <short>Gets the display name for the collection item.</short>
        <descr>
          <p>
            Uses the value in Text (when assigned). Otherwise, the ClassName is used as the display name.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBand.GetDisplayName.Result">
        <short/>
      </element>

      <element name="TCoolBand.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            Create is the overridden constructor for the class instance. Create sets the default values for properties in the collection item, including:
          </p>
          <ul>
            <li>Break (True)</li>
            <li>Color (clDefault)</li>
            <li>Control (set to Nil)</li>
            <li>FixedBackground (True)</li>
            <li>ImageIndex (-1)</li>
            <li>MinHeight (cDefMinHeight)</li>
            <li>MinWidth (cDefMinWidth)</li>
            <li>ParentBitmap (True)</li>
            <li>ParentColor (True)</li>
            <li>Visible (True)</li>
            <li>Width (cDefWidth)</li>
          </ul>
          <p>
            Create calls the inherited method using aCollection as the owner of the collection item. An exception is raised if ACollection is not a TCoolBands descendant.
          </p>
          <p>
            The internal TCoolBar reference in the class instance is set to the reference used in aCollection.
          </p>
          <p>
            Create allocates resource needed for the Bitmap property, and sets its OnChange event handler to the InvalidateCoolBar method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBand.Create.ACollection">
        <short>Collection which owns the items in the class instance.</short>
      </element>

      <element name="TCoolBand.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            Frees resources allocated for the Bitmap property, and calls the inherited destructor.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.Assign">
        <short>
          Copies property values from the specified persistent object to the current class instance.
        </short>
        <descr>
          <p>
            Assign is an overridden method which implements object persistence for the TCoolBand type. When ASource is a TCoolBand instance, the following properties in ASource are copied:
          </p>
          <ul>
            <li>Bitmap</li>
            <li>Break</li>
            <li>Color</li>
            <li>FixedBackground</li>
            <li>FixedSize</li>
            <li>HorizontalOnly</li>
            <li>ImageIndex</li>
            <li>MinHeight</li>
            <li>MinWidth</li>
            <li>ParentBitmap</li>
            <li>ParentColor</li>
            <li>Text</li>
            <li>Visible</li>
            <li>Control (when it exists in the parent control)</li>
          </ul>
          <p>
            If ASource is not a TCoolBar instance, the inherited method is called to copy values in ASource.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TCoolBand.Assign.ASource">
        <short>Persistent object with property values copied in the method.</short>
      </element>

      <element name="TCoolBand.AutosizeWidth">
        <short>Gets the width needed for the band when its Control is auto-sized.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.InvalidateCoolBar">
        <short>
          Causes the parent control to be redrawn when the collection item is changed.
        </short>
        <descr>
          <p>
            Calls the inherited Changed method to update the current collection item, and to notify the parent control of a change to the collection.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBand.InvalidateCoolBar.Sender">
        <short/>
      </element>

      <element name="TCoolBand.Height">
        <short>Height needed for the band and its visual elements.</short>
        <descr>
          <p>
            <var>Height</var> is a read-only <var>Integer</var> property with the height needed for the band and its visual elements including the Control. The value in Height is updated when the <var>TCoolBar</var> instance calls its <var>CalculateAndAlign</var> method, which occurs when the <var>Update</var> method for the collection is called.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.Left">
        <short>Left coordinate for the band.</short>
        <descr>
          <p>
            <var>Left</var> is a read-only <var>Integer</var> property with the horizontal coordinate for the band. Its value is relative to corresponding coordinate in the TCoolBar control. The value is assigned when the <var>CalculateAndAlign</var> method in the <var>TCoolBar</var> control is called, which occurs when the <var>Update</var> method for the collection is called.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.Right">
        <short>Right coordinate for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Top">
        <short>Top coordinate for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Bitmap">
        <short>Bitmap image displayed  for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.BorderStyle">
        <short>Border style drawn around the band.</short>
        <descr>
          <p>
            The default value for the property is bsNone, and indicates that borders are not drawn around the band.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.Break">
        <short>
          Indicates whether the band starts a new row (or column) in the TCoolBar control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Color">
        <short>Color for the band.</short>
        <descr>
          <p>
            The default value for the property is clDefault. Please note that the default value for ParentColor is True, and causes the color defined for the TCoolBar control to be used.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.Control">
        <short>Control displayed on the band.</short>
        <descr>
          <p>
            Setting a new value for the property causes the Collection for the class to be updated. The existing control on the band is Nil'd and the new value is assigned. The Parent property in the control is set to the TCoolBar instance.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.FixedBackground">
        <short>Indicates if a fixed background is drawn for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.FixedSize">
        <short>Indicates whether the band is drawn with a fixed size.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.HorizontalOnly">
        <short>Indicates if the band is limited to the horizontal orientation.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.ImageIndex">
        <short>Ordinal position for the image displayed for the band.</short>
        <descr>
          <p>
            Contains ordinal position in the TCoolBar.Images property with the image for the band.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.MinHeight">
        <short>Minimum height for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.MinWidth">
        <short>Minimum width for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.ParentColor">
        <short>
          Indicates if the Color in the Parent control (TCoolBar) is used for the band.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.ParentBitmap">
        <short>
          Indicates if the Bitmap in the TCoolBar control is used as the background for the band.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Text">
        <short>Text displayed as an identifier for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Visible">
        <short>Indicates if the band is visible.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Width">
        <short>Width for the band.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBands">
        <short>Implements a collection for TCoolBand items.</short>
        <descr>
          <p>
            <var>TCoolBands</var> is a <var>TCollection</var> descendant used to store <var>TCoolBand</var> instances used the <var>TCoolBar</var> control. TCoolBands is the type used for the <var>TCoolBar.Bands</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCoolBand"/>
          <link id="TCoolBar.Bands"/>
          <link id="#rtl.classes.TCollection">TCollection</link>
        </seealso>
      </element>

      <element name="TCoolBands.FCoolBar"/>

      <element name="TCoolBands.GetItem">
        <short>Gets the value for the indexed Items property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBands.Items"/>
        </seealso>
      </element>
      <element name="TCoolBands.GetItem.Result">
        <short>Value for the indexed property.</short>
      </element>
      <element name="TCoolBands.GetItem.Index">
        <short>Ordinal position for the collection item in the property value.</short>
      </element>

      <element name="TCoolBands.SetItem">
        <short>Sets the value for the indexed Items property.</short>
        <descr/>
        <seealso>
          <link id="TCoolBands.Items"/>
        </seealso>
      </element>
      <element name="TCoolBands.SetItem.Index">
        <short>Ordinal position in the collection for the property value.</short>
      </element>
      <element name="TCoolBands.SetItem.Value">
        <short>New value for the indexed Items property.</short>
      </element>

      <element name="TCoolBands.GetOwner">
        <short>Gets the owner for the persistent object.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TCoolBands.GetOwner.Result">
        <short>Persistent object which owns the collection.</short>
      </element>

      <element name="TCoolBands.Update">
        <short>
          Updates the specified item in the collection, and updates the cool bar when needed.
        </short>
        <descr>
          <p>
            <var>Update</var> is an overridden method in <var>TCoolBands</var>. It calls the inherited method on entry to notify observers that the collection item has  changed. If a TCoolBar instance was assigned as the owner for the collection, its CalculateAndAlign method is called to layout and resize the visible bands for the control. The cool bar control is redrawn prior to exiting from the method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBands.Update.AItem">
        <short>Collection item updated in the collection.</short>
      </element>

      <element name="TCoolBands.Notify">
        <short>
          Handles the notification that occurs when a collection item is added, extracted, or deleted.
        </short>
        <descr>
          <p>
            <var>Notify</var> is an overridden method in TCoolBands, and calls the inherited method on entry to notify observers of the change to the  collection item. If the collection item was added, its owner is set to the TCoolBar instance that owns the collection.
          </p>
        </descr>
        <seealso>
          <link id="TCoolBand"/>
          <link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
          <link id="#rtl.classes.TCollection">TCollection</link>
          <link id="#rtl.classes.TCollectionNotification">TCollectionNotification</link>
        </seealso>
      </element>
      <element name="TCoolBands.Notify.AItem">
        <short>Collection item for the notification.</short>
      </element>
      <element name="TCoolBands.Notify.AAction">
        <short>Action performed for the collection item.</short>
      </element>

      <element name="TCoolBands.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance. It calls the inherited method using <var>TCoolBand</var> as the <var>ItemClass</var> for the collection. It sets the owner of the collection to the value passed in the <var>ACoolBar</var> argument.
          </p>
        </descr>
        <seealso>
          <link id="TCoolBand"/>
          <link id="TCoolBar"/>
          <link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
          <link id="#rtl.classes.TCollection.ItemClass">TCollection.ItemClass</link>
        </seealso>
      </element>
      <element name="TCoolBands.Create.ACoolBar">
        <short>Control which owns the class instance.</short>
      </element>

      <element name="TCoolBands.Add">
        <short>Creates a new collection item and adds it to the collection.</short>
        <descr>
          <p>
            <var>Add</var> is a <var>TCoolBand</var> function used to create and store a new collection item in the collection. The return value is the TCoolBand created and stored in the method. Add re-implements the method from the ancestor class to ensure that the collection item is a TCoolBand instance.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBands.Add.Result">
        <short>Collection item created and stored in the method.</short>
      </element>

      <element name="TCoolBands.FindBand">
        <short>Gets the collection item which contains the specified control.</short>
        <descr>
          <p>
            <var>FindBand</var> iterates over the values in <var>Items</var> to locate the <var>TCoolBand</var> instance which contains the control specified in <var>AControl</var>. The return value is the TCoolBand instance in the collection, or <b>Nil</b> if AControl is not used in one of the collection Items.
          </p>
          <p>
            Use <var>FindBandIndex</var> to get the ordinal position in the collection for the collection item which contains a specified control.
          </p>
        </descr>
        <seealso>
          <link id="TCoolBands.Items"/>
          <link id="TCoolBands.FindBandIndex"/>
          <link id="TCoolBand"/>
        </seealso>
      </element>
      <element name="TCoolBands.FindBand.Result">
        <short>
          TCoolBand instance with the specified control, or Nil when not found.
        </short>
      </element>
      <element name="TCoolBands.FindBand.AControl">
        <short>Control to locate in the collection items.</short>
      </element>

      <element name="TCoolBands.FindBandIndex">
        <short>
          Gets the ordinal position for the collection item which contains the specified control.
        </short>
        <descr>
          <p>
            <var>FindBandIndex</var> is an Integer function used to get the ordinal position for the collection item which contains the control specified in AControl. FindBandIndex iterates over the values in <var>Items</var> to locate the <var>TCoolBand</var> instance whose Control property is the control specified in <var>AControl</var>. The return value is the position in the Items, or <b>-1</b> if AControl is not used in one of the collection Items.
          </p>
          <p>
            Use <var>FindBand</var> to get the collection item which contains a specified control.
          </p>
        </descr>
        <seealso>
          <link id="TCoolBands.Items"/>
          <link id="TCoolBands.FindBand"/>
          <link id="TCoolBand"/>
        </seealso>
      </element>
      <element name="TCoolBands.FindBandIndex.Result">
        <short>
          Ordinal position for the collection item with the specified control, or -1 when not found.
        </short>
      </element>
      <element name="TCoolBands.FindBandIndex.AControl">
        <short>Control to locate in the collection items.</short>
      </element>

      <element name="TCoolBands.Items">
        <short>Provides indexed access to the TCoolBand instances in the collection.</short>
        <descr>
           <p>
             <var>Items</var> is a <var>TCoolBand</var> property which provides indexed access to the class instances in the collection. Values in the collection are accessed by their ordinal position. Items is the default property for the collection.
           </p>
           <p>
             Use Add to create a new TCoolBand instance in the collection.
           </p>
           <p>
             Use Delete and Clear to remove one or all items in the collection.
           </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBands.Items.Index">
        <short>Ordinal position for the collection item.</short>
      </element>

      <element name="TCoolBandMaximize">
        <short>Not used in the current LCL implementation.</short>
        <descr>
          <p>
            BandMaximize is not used now but is needed for Delphi compatibility.
            It is not used in Delphi's TCoolBar implementation either.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBandMaximize.bmNone">
        <short/>
      </element>
      <element name="TCoolBandMaximize.bmClick">
        <short/>
      </element>
      <element name="TCoolBandMaximize.bmDblClick">
        <short/>
      </element>

      <element name="TCustomCoolBar">
        <short>Defines a Rebar-like control with resizable bands.</short>
        <descr>
          <p>
            <var>TCustomCoolBar</var> is a <var>TToolWindow</var> descendant which defines a control like the Windows Rebar control. It provides a collection of windowed controls which are displayed in movable, resizable bands.
          </p>
          <p>
            Each band (or <var>TCoolBand</var>) on the control can have a configurable sizing grip (or grabber), a bitmap, a text label, and a single windowed control. The CoolBar handles the size and position for the control when its band is moved.  Each band can have a fixed size, or can automatically re-size to the contained control. Bands can be displayed one band per line, or re-sized and positioned to fill the available width or height for the CoolBar control.
          </p>
          <p>
            A common use case is hosting multiple toolbars in an application. Separate TToolbar instance are created and configured with event handlers or actions as needed. Each toolbar is assigned as the control for a band. A perfect example is the Lazarus IDE, which uses TCoolbar to host the file, view and run toolbars in its interface.
          </p>
          <p>
            Do not create instances of TCustomCoolBar; use the TCoolBar descendant which sets the visibility for the properties in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCoolBar"/>
          <link id="TCoolBand"/>
          <link id="TCoolBands"/>
        </seealso>
      </element>

      <element name="TCustomCoolBar.FBands"/>
      <element name="TCustomCoolBar.FBandBorderStyle"/>
      <element name="TCustomCoolBar.FBandMaximize"/>
      <element name="TCustomCoolBar.FBitmap"/>
      <element name="TCustomCoolBar.FFixedSize"/>
      <element name="TCustomCoolBar.FFixedOrder"/>
      <element name="TCustomCoolBar.FGrabStyle"/>
      <element name="TCustomCoolBar.FGrabWidth"/>
      <element name="TCustomCoolBar.FHorizontalSpacing"/>
      <element name="TCustomCoolBar.FImages"/>
      <element name="TCustomCoolBar.FImageChangeLink"/>
      <element name="TCustomCoolBar.FOnChange"/>
      <element name="TCustomCoolBar.FShowText"/>
      <element name="TCustomCoolBar.FThemed"/>
      <element name="TCustomCoolBar.FVertical"/>
      <element name="TCustomCoolBar.FVerticalSpacing"/>
      <element name="TCustomCoolBar.FImagesWidth"/>

      <element name="TCustomCoolBar.GetAlign">
        <short>Gets the value for the Align property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Align"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.GetAlign.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomCoolBar.RowEndHelper">
        <short>Determines if a band should wrap during alignment.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.RowEndHelper.Result">
        <short/>
      </element>
      <element name="TCustomCoolBar.RowEndHelper.ALeft">
        <short/>
      </element>
      <element name="TCustomCoolBar.RowEndHelper.AVisibleIdx">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetBandBorderStyle">
        <short>Sets the value for the BandBorderStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.BandBorderStyle"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetBandBorderStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomCoolBar.SetBands">
        <short>Sets the value for the Bands property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Bands"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetBands.aValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomCoolBar.SetBitmap">
        <short>Sets the value for the Bitmap property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Bitmap"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetBitmap.aValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomCoolBar.SetGrabStyle">
        <short>Sets the value for the GrabStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.GrabStyle"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetGrabStyle.aValue">
        <short>New value for the GrabStyle property.</short>
      </element>

      <element name="TCustomCoolBar.SetGrabWidth">
        <short>Sets the value for the GrabWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.GrabWidth"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetGrabWidth.aValue">
        <short>New value for the GrabWidth property.</short>
      </element>

      <element name="TCustomCoolBar.SetHorizontalSpacing">
        <short>Sets the value for the HorizontalSpacing property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.HorizontalSpacing"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetHorizontalSpacing.aValue">
        <short>New value for the HorizontalSpacing property.</short>
      </element>

      <element name="TCustomCoolBar.SetImages">
        <short>Sets the value for the Images property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Images"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetImages.aValue">
        <short>New value for the Images property.</short>
      </element>

      <element name="TCustomCoolBar.SetImagesWidth">
        <short>Sets the value for the ImagesWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.ImagesWidth"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetImagesWidth.AImagesWidth">
        <short>New value for the ImagesWidth property.</short>
      </element>

      <element name="TCustomCoolBar.SetShowText">
        <short>Sets the value for the ShowText property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.ShowText"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetShowText.aValue">
        <short>New value for the ShowText property.</short>
      </element>

      <element name="TCustomCoolBar.SetThemed">
        <short>Sets the value for the Themed property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Themed"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetThemed.aValue">
        <short>New value for the Themed property.</short>
      </element>

      <element name="TCustomCoolBar.SetVertical">
        <short>Sets the value for the Vertical property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Vertical"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetVertical.aValue">
        <short>Sets the value for the Vertical property.</short>
      </element>

      <element name="TCustomCoolBar.SetVerticalSpacing">
        <short>Sets the value for the VerticalSpacing property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.VerticalSpacing"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetVerticalSpacing.aValue">
        <short>New value for the VerticalSpacing property.</short>
      </element>

      <element name="TCustomCoolBar.cDefGrabStyle">
        <short>Default value for the GrabStyle property.</short>
      </element>
      <element name="TCustomCoolBar.cDefGrabWidth">
        <short>Default value for the GrabWidth property.</short>
      </element>
      <element name="TCustomCoolBar.cDefHorSpacing">
        <short>Default value for the HorizontalSpacing property.</short>
      </element>
      <element name="TCustomCoolBar.cDefVertSpacing">
        <short>Default value for the VerticalSpacing property.</short>
      </element>
      <element name="TCustomCoolBar.cNewRowBelow">
        <short>Free space below the last row.</short>
      </element>
      <element name="TCustomCoolBar.cNewRowAbove">
        <short>Free space above the first row.</short>
      </element>

      <element name="TCustomCoolBar.FBorderEdges">
        <short>Members used for the realized EdgeBorders for the control.</short>
      </element>
      <element name="TCustomCoolBar.FBorderLeft">
        <short>Member used for the realized left border on the control.</short>
      </element>
      <element name="TCustomCoolBar.FBorderTop">
        <short>Member used for the realized top border on the control.</short>
      </element>
      <element name="TCustomCoolBar.FBorderRight">
        <short>Member used for the realized right border on the control.</short>
      </element>
      <element name="TCustomCoolBar.FBorderBottom">
        <short>Member used for the realized bottom border on the control.</short>
      </element>
      <element name="TCustomCoolBar.FBorderWidth">
        <short>Member used for the total width of realized borders on the control.</short>
      </element>
      <element name="TCustomCoolBar.FCursorBkgnd">
        <short>Member with the cursor shape when the mouse is over the cool bar background.</short>
      </element>
      <element name="TCustomCoolBar.FDragBand">
        <short>Member with the band being dragged in the control.</short>
      </element>
      <element name="TCustomCoolBar.FDraggedBandIndex">
        <short>
          -1 indicates the space below the last row; other negative values are an invalid area.
        </short>
      </element>
      <element name="TCustomCoolBar.FDragInitPos">
        <short>Initial mouse X - position (for resizing Bands).</short>
      </element>
      <element name="TCustomCoolBar.FLockCursor">
        <short>
          Member which indicates if the cursor shape can be changed for the control.
        </short>
      </element>
      <element name="TCustomCoolBar.FRightToLeft">
        <short>
          Member which indicates is bands are aligned in reverse (right-to-left) order.
        </short>
      </element>
      <element name="TCustomCoolBar.FTextHeight">
        <short>Member with the calculated text height used on the control.</short>
      </element>
      <element name="TCustomCoolBar.FVisiBands">
        <short>Member with the visible bands for the control.</short>
      </element>

      <element name="TCustomCoolBar.AlignControls">
        <short>
          Aligns the bands (and their controls) using the orientation, layout order, and anchors for the control.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
        </seealso>
      </element>
      <element name="TCustomCoolBar.AlignControls.AControl">
        <short/>
      </element>
      <element name="TCustomCoolBar.AlignControls.RemainingClientRect">
        <short/>
      </element>

      <element name="TCustomCoolBar.BitmapOrImageListChange">
        <short>Implements the OnChange handler used for Bitmap and Images.</short>
        <descr>
          <p>
            Causes the control to be redrawn when an image or an image list is changed for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.BitmapOrImageListChange.Sender">
        <short>Object (TCoolBar) for the event notification.</short>
      </element>

      <element name="TCustomCoolBar.CalculatePreferredSize">
        <short>Calculates the preferred width and height for the control.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.CalculatePreferredSize">TWinControl.CalculatePreferredSize</link>
        </seealso>
      </element>
      <element name="TCustomCoolBar.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomCoolBar.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomCoolBar.CalculatePreferredSize.WithThemeSpace">
        <short>True to reserve additional space for theme elements.</short>
      </element>

      <element name="TCustomCoolBar.CalculateAndAlign">
        <short>
          Calculates the size and position for visible bands using the orientation, layout, and order for the control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.CalculateRealIndex">
        <short>Gets the real position for the band at the specified visible position.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.CalculateRealIndex.Result">
        <short/>
      </element>
      <element name="TCustomCoolBar.CalculateRealIndex.AVisibleIndex">
        <short/>
      </element>

      <element name="TCustomCoolBar.ChangeCursor">
        <short>
          Changes the cursor shape when a band, a grabber, or the control background is active.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.ChangeCursor.ABand">
        <short>True is a band is under the mouse pointer.</short>
      </element>
      <element name="TCustomCoolBar.ChangeCursor.AGrabber">
        <short>True is the grabber is under the mouse pointer.</short>
      </element>

      <element name="TCustomCoolBar.CMBiDiModeChanged">
        <short>Handles the CM_BIDIMODECHANGED message for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.CMBiDiModeChanged.Message">
        <short>Message examined in the method.</short>
      </element>

      <element name="TCustomCoolBar.CreateWnd">
        <short>
          Creates the window handle for the control, and sets the cursor shape for the control background.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.DoFontChanged">
        <short>
          Calculates the text height and width in each of the bands when the font has been changed.
        </short>
        <descr>
          <p>
            Uses the Canvas to get the text height for the control. No actions are performed in the method if the handle has not been allocated for the control Canvas.
          </p>
          <p>
            Calls the CalcTextWidth method for each of the Bands on the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.DrawTiledBitmap">
        <short>
          Tile draws the specified bitmap on the control Canvas to fill the area in ARect.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.DrawTiledBitmap.ARect">
        <short>Rectangle where the bitmap is tiled.</short>
      </element>
      <element name="TCustomCoolBar.DrawTiledBitmap.ABitmap">
        <short>Bitmap image drawn on the Canvas for the control.</short>
      </element>

      <element name="TCustomCoolBar.FontChanged">
        <short>Re-implements the OnChange event handler for the Font in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.FontChanged.Sender">
        <short>Object (TCustomCoolBar) for the event notification.</short>
      </element>

      <element name="TCustomCoolBar.IsFirstAtRow">
        <short>
          Checks whether the band at the specified position is the first one on a row.
        </short>
        <descr>
          <p>
            IsFirstAtRow is a Boolean function which indicates if the visible band at the specified position is the first band on its row.
          </p>
          <p>
            ABand is the ordinal position for the requested band in the visible bands for the control. It represents an element in the internal array of visible TCoolBand instances populated in the CalculateAndAlign method.
          </p>
          <p>
            IsFirstAtRow uses values from Vertical and IsRightToLeft to determine the orientation and order for the bands. The return value is True when the band at the specified position is the first one visually displayed on a given row.
          </p>
          <p>
            IsFirstAtRow is used in MouseDown and MouseMove when handling drag messages to order the bands in the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.IsFirstAtRow.Result">
        <short>
          True is the requested band is the left edge of the visible display area for the control.
        </short>
      </element>
      <element name="TCustomCoolBar.IsFirstAtRow.ABand">
        <short>Ordinal position for the visible band examined in the method.</short>
      </element>

      <element name="TCustomCoolBar.IsRowEnd">
        <short>
          Indicates whether the band at the specified position is the last one on a row.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.IsRowEnd.Result">
        <short/>
      </element>
      <element name="TCustomCoolBar.IsRowEnd.ALeft">
        <short/>
      </element>
      <element name="TCustomCoolBar.IsRowEnd.AVisibleIndex">
        <short/>
      </element>

      <element name="TCustomCoolBar.MouseDown">
        <short>Handles mouse down messages for the control.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
        </seealso>
      </element>
      <element name="TCustomCoolBar.MouseDown.Button">
        <short>Mouse button for the message.</short>
      </element>
      <element name="TCustomCoolBar.MouseDown.Shift">
        <short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
      </element>
      <element name="TCustomCoolBar.MouseDown.X">
        <short>Horizontal coordinate for the mouse pointer.</short>
      </element>
      <element name="TCustomCoolBar.MouseDown.Y">
        <short>Vertical coordinate for the mouse pointer.</short>
      </element>

      <element name="TCustomCoolBar.MouseMove">
        <short>Handles mouse move messages for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.MouseMove.Shift">
        <short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
      </element>
      <element name="TCustomCoolBar.MouseMove.X">
        <short>Horizontal coordinate for the mouse pointer.</short>
      </element>
      <element name="TCustomCoolBar.MouseMove.Y">
        <short>Vertical coordinate for the mouse pointer.</short>
      </element>

      <element name="TCustomCoolBar.MouseUp">
        <short>Handles mouse up messages for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.MouseUp.Button">
        <short>Mouse button for the message.</short>
      </element>
      <element name="TCustomCoolBar.MouseUp.Shift">
        <short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
      </element>
      <element name="TCustomCoolBar.MouseUp.X">
        <short>Horizontal coordinate for the mouse pointer.</short>
      </element>
      <element name="TCustomCoolBar.MouseUp.Y">
        <short>Vertical coordinate for the mouse pointer.</short>
      </element>

      <element name="TCustomCoolBar.Notification">
        <short>
          Handles the notification when a component is added to or removed from the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.Notification.AComponent">
        <short>Component for the notification.</short>
      </element>
      <element name="TCustomCoolBar.Notification.Operation">
        <short>Operation performed for the component.</short>
      </element>

      <element name="TCustomCoolBar.Paint">
        <short>Draws the visible bands for the control on its Canvas.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Bands"/>
          <link id="TCustomCoolBar.Bitmap"/>
          <link id="TCustomCoolBar.Images"/>
          <link id="TCustomCoolBar.BandBorderStyle"/>
          <link id="TCustomCoolBar.GrabStyle"/>
          <link id="TCustomCoolBar.ShowText"/>
          <link id="TCustomCoolBar.Vertical"/>
          <link id="#lcl.toolwin.TToolWindow.Paint">TToolWindow.Paint</link>
        </seealso>
      </element>

      <element name="TCustomCoolBar.SetAlign">
        <short>Sets the value for the Align property.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.Align"/>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetAlign.aValue">
        <short>New value for the Align property.</short>
      </element>

      <element name="TCustomCoolBar.SetAutoSize">
        <short>Sets the value for the AutoSize property.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.AutoSize">TControl.AutoSize</link>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetAutoSize.Value">
        <short>New value for the AutoSize property.</short>
      </element>

      <element name="TCustomCoolBar.SetCursor">
        <short>Sets the value for the Cursor property.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.Cursor">TControl.Cursor</link>
        </seealso>
      </element>
      <element name="TCustomCoolBar.SetCursor.Value">
        <short>New value for the Cursor property.</short>
      </element>

      <element name="TCustomCoolBar.WMSize">
        <short>Handles the LM_SIZE window message for the control.</short>
        <descr>
          <p>
            Calls the inherited method on entry to realize the bounds and parent for the control. Calls CalculateAndAlign to layout and position the visible bands for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.WMSize.Message">
        <short>Window message handled in the method.</short>
      </element>

      <element name="TCustomCoolBar.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            Allocates resources for the Bands property, and calls the inherited method. Sets the default values for properties in the class instance. Updates the control style flags to the values needed for the widgetset class. Methods in the class instance are assigned to the OnChange handlers for the Bitmap and Images in the class instance.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomCoolBar.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            Frees resources allocate in the Create constructor, and calls the inherited method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.AutosizeBands">
        <short>Indicates if a band is automatically resized to its Control.</short>
        <descr/>
        <seealso>
          <link id="TCustomCoolBar.FixedSize"/>
          <link id="TCustomCoolBar.Bands"/>
          <link id="TCoolBand.Control"/>
        </seealso>
      </element>

      <element name="TCustomCoolBar.EndUpdate">
        <short>Ends an update process for the control.</short>
        <descr>
          <p>
            EndUpdate is an overridden method in TCustomCoolBar. It calls the inherited method to decrement the internal update counter for the control. When the update counter reaches 0, the CalculateAndAlign method is called to size and layout the visible bands on the control. Temporarily disables auto-sizing while the control recalculates and aligns its bands. Calls Invalidate to force the control to be redrawn.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.toolwin.TToolWindow.EndUpdate">TToolWindow.EndUpdate</link>
        </seealso>
      </element>

      <element name="TCustomCoolBar.Invalidate">
        <short>Causes the control to be redrawn.</short>
        <descr>
          <p>
            <var>Invalidate</var> is an overridden method in <var>TCustomCoolBar</var> which forces the control to be redrawn using the settings in the <var>EdgeInner</var>, <var>EdgeOuter</var>, and <var>EdgeBorders</var> properties. <var>CalculateAndAlign</var> is called to size and layout the visible bands on the control. The inherited <var>Invalidate</var> method is called to update the widgetset class when its <var>Handle</var> has been allocated.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
        </seealso>
      </element>

      <element name="TCustomCoolBar.InsertControl">
        <short>
          Inserts a band for the specified control at the ordinal position in Index.
        </short>
        <descr>
          <p>
            <var>InsertControl</var> is an overridden method in <var>TCustomCoolBar</var>. It calls the inherited method on entry to align and parent the control in <var>AControl</var>.
          </p>
          <p>
            No additional actions are performed in the method if AControl is not a <var>TWinControl</var> descendant.
          </p>
          <p>
            InsertControl checks for an existing band in the <var>Bands</var> collection which uses the control in AControl. If one does not already exist, a <var>TCoolBand</var> instance is created for the control and stored in the collection.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.InsertControl">TWinControl.InsertControl</link>
        </seealso>
      </element>
      <element name="TCustomCoolBar.InsertControl.AControl">
        <short>Control for the TCoolBand instance created and stored in the method.</short>
      </element>
      <element name="TCustomCoolBar.InsertControl.Index">
        <short>Ordinal position in Bands where the new band is stored.</short>
      </element>

      <element name="TCustomCoolBar.MouseToBandPos">
        <short>Gets the position for the band under the mouse pointer.</short>
        <descr>
          <p>
            MouseToBandPos is a method used to get the position for the band under the specified mouse coordinates.
          </p>
          <p>
            ABand is an Integer output parameter with the position for the band under the mouse pointer. It can contain an ordinal position in the visible bands for the control, and can be in the range 0..Bands.Count-1. The upper limit may be smaller if any of the bands have their Visible property set to False.
          </p>
          <p>
            ABand may contain a negative value, defined in the cNewRowAbove and cNewRowBelow constants, that represent the unused space above or below the bands on the control.
          </p>
          <p>
            ABand is set to -2147483648 (the lowest value for an Integer) if the mouse pointer is positioned over the background for the control and not one of its bands.
          </p>
          <p>
            AGrabber is a Boolean output parameter which indicates if the mouse pointer is positioned over the grabber (or gripper) for the band in ABand.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCoolBar.Bands"/>
          <link id="TCoolBar.Visible"/>
          <link id="#rtl.classes.TCollection.Count">TCollection.Count</link>
        </seealso>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.X">
        <short>Horizontal coordinate for the mouse.</short>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.Y">
        <short>Vertical coordinate for the mouse.</short>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.ABand">
        <short>
          Position for the band under the mouse pointer, or -2147483648 when not over a band.
        </short>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.AGrabber">
        <short>Indicates if the mouse pointer is over the grabber for the band.</short>
      </element>

      <element name="TCustomCoolBar.RemoveControl">
        <short>Removes the band with the specified control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.RemoveControl.AControl">
        <short>Control to locate in Bands.</short>
      </element>

      <element name="TCustomCoolBar.Align">
        <short>Contains the edge in the Parent where the control is aligned.</short>
        <descr>
          <p>
            <var>Align</var> is a <var>TAlign</var> property which is re-introduced in <var>TCustomCoolBar</var> to change its default value. The default value for the property is <var>alTop</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.BandBorderStyle">
        <short>Border style used around bands on the control.</short>
        <descr>
          <p>
            <var>BandBorderStyle</var> is a <var>TBorderStyle</var> property with the border style used around the bands on the control. The default value for the property is <var>bsSingle</var>. Changing the value for the property causes the control to be redrawn.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TBorderStyle">TBorderStyle</link>
        </seealso>
      </element>

      <element name="TCustomCoolBar.BandMaximize">
        <short>
          Indicates the action used to maximize the width for a band on the control.
        </short>
        <descr>
          <p>
            The default value for the property is <var>bmClick</var>, and indicates that single clicking on the background for a band causes it to be maximized.
          </p>
        </descr>
        <notes>
          <note>
            Code comments say its not used. It is used in MouseUp.
            Also says it is defined but not used in VCL. It is documented, so apparently used in VCL.
          </note>
        </notes>
        <seealso>
          <link id="TCoolBandMaximize"/>
        </seealso>
      </element>

      <element name="TCustomCoolBar.Bands">
        <short>Collection with the bands defined for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Bitmap">
        <short>Optional image displayed as the background for the cool bar control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.FixedSize">
        <short>Indicates if bands on the control have a fixed size.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.FixedOrder">
        <short>Indicates if the order of the bands on the control is fixed or locked.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.GrabStyle">
        <short>Drawing style used for a grabber or gripper displayed on the control.</short>
        <descr>
          <p>
            <var>GrabStyle</var> is a <var>TGrabStyle </var>property with the drawing style used for a grabber or gripper displayed for the control. The default value for the property is defined in the <var>cDefGrabStyle</var> constant.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.GrabWidth">
        <short>Width for the grabber on the control.</short>
        <descr>
          <p>
            <var>GrabWidth</var> is an <var>Integer</var> property with the width for a grabber or gripper on the control. The default value for the property is <var>cDefGrabWidth</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.HorizontalSpacing">
        <short>Horizontal space reserved between visual elements on the control.</short>
        <descr>
          <p>
            HorizontalSpacing is an Integer property with the space reserved between visual elements on the control when the horizontal orientation is used. The default value for the property is defined in the cDefHorSpacing constant.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Images">
        <short>Contains images displayed on the bands for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.ImagesWidth">
        <short>Width for the Images used in the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.ShowText">
        <short>Indicates if text captions are displayed for the bands on the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Themed">
        <short>Enables or disables themed rendering for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Vertical">
        <short>Indicates if the control is displayed vertically instead of horizontally.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.VerticalSpacing">
        <short>Vertical space reserved between visual elements in the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.OnChange">
        <short>
          Event handler signalled when Bands are re-sized or re-ordered using the mouse.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBar">
        <short>Implements a Rebar-like control with resizable bands.</short>
        <descr>
          <p>
            TCoolBar is a TCustomCoolBar descendant which implements a control like the Windows Rebar control. It provides a collection of windowed controls which are displayed in movable, resizable bands.
          </p>
          <p>
            Each band (or <var>TCoolBand</var>) on the control can have a configurable sizing grip (or grabber), a bitmap, a text label, and a single windowed control. The CoolBar handles the size and position for the control when its band is moved.  Each band can have a fixed size, or can automatically re-size to the contained control. Bands can be displayed one band per line, or re-sized and positioned to fill the available width or height for the CoolBar control.
          </p>
          <p>
            A common use case is hosting multiple toolbars in an application. Separate TToolbar instance are created and configured with event handlers or actions as needed. Each toolbar is assigned as the Control for a band on the cool bar control. A perfect example is the Lazarus IDE, which uses TCoolbar to host the file, view and run toolbars in its interface.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCoolBar"/>
        </seealso>
      </element>

      <element name="TCoolBar.Align" link="#lcl.comctrls.TCustomCoolBar.Align"/>
      <element name="TCoolBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TCoolBar.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
      <element name="TCoolBar.BandBorderStyle" link="#lcl.comctrls.TCustomCoolBar.BandBorderStyle"/>
      <element name="TCoolBar.BandMaximize" link="#lcl.comctrls.TCustomCoolBar.BandMaximize"/>
      <element name="TCoolBar.Bands" link="#lcl.comctrls.TCustomCoolBar.Bands"/>
      <element name="TCoolBar.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TCoolBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
      <element name="TCoolBar.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TCoolBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TCoolBar.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
      <element name="TCoolBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TCoolBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TCoolBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TCoolBar.EdgeBorders" link="#lcl.toolwin.TToolWindow.EdgeBorders"/>
      <element name="TCoolBar.EdgeInner" link="#lcl.toolwin.TToolWindow.EdgeInner"/>
      <element name="TCoolBar.EdgeOuter" link="#lcl.toolwin.TToolWindow.EdgeOuter"/>
      <element name="TCoolBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TCoolBar.FixedSize" link="#lcl.comctrls.TCustomCoolBar.FixedSize"/>
      <element name="TCoolBar.FixedOrder" link="#lcl.comctrls.TCustomCoolBar.FixedOrder"/>
      <element name="TCoolBar.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TCoolBar.GrabStyle" link="#lcl.comctrls.TCustomCoolBar.GrabStyle"/>
      <element name="TCoolBar.GrabWidth" link="#lcl.comctrls.TCustomCoolBar.GrabWidth"/>
      <element name="TCoolBar.HorizontalSpacing" link="#lcl.comctrls.TCustomCoolBar.HorizontalSpacing"/>
      <element name="TCoolBar.Images" link="#lcl.comctrls.TCustomCoolBar.Images"/>
      <element name="TCoolBar.ImagesWidth" link="#lcl.comctrls.TCustomCoolBar.ImagesWidth"/>
      <element name="TCoolBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TCoolBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TCoolBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TCoolBar.Bitmap" link="#lcl.comctrls.TCustomCoolBar.Bitmap"/>
      <element name="TCoolBar.PopupMenu" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TCoolBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TCoolBar.ShowText" link="#lcl.comctrls.TCustomCoolBar.ShowText"/>
      <element name="TCoolBar.Themed" link="#lcl.comctrls.TCustomCoolBar.Themed"/>
      <element name="TCoolBar.Vertical" link="#lcl.comctrls.TCustomCoolBar.Vertical"/>
      <element name="TCoolBar.VerticalSpacing" link="#lcl.comctrls.TCustomCoolBar.VerticalSpacing"/>
      <element name="TCoolBar.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TCoolBar.OnChange" link="#lcl.comctrls.TCustomCoolBar.OnChange"/>
      <element name="TCoolBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TCoolBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TCoolBar.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TCoolBar.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
      <element name="TCoolBar.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
      <element name="TCoolBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TCoolBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TCoolBar.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TCoolBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TCoolBar.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
      <element name="TCoolBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TCoolBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TCoolBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TCoolBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TCoolBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TCoolBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TCoolBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TCoolBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TCoolBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TCoolBar.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TCoolBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TCoolBar.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>

      <element name="TTrackBarOrientation">
        <short>
          Enumerated type with values that represent the orientation for a track bar.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTrackBarOrientation.trHorizontal">
        <short>Represents the horizontal orientation.</short>
      </element>
      <element name="TTrackBarOrientation.trVertical">
        <short>Represents the vertical orientation.</short>
      </element>

      <element name="TTickMark">
        <short>
          <var>TTickMark</var> - enumerated type denoting position of tick marks relative to the track bar.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTickMark.tmBottomRight">
        <short>
          Tick marks are displayed on the bottom or right edge for the track bar orientation.
        </short>
      </element>
      <element name="TTickMark.tmTopLeft">
        <short>
          Tick marks are displayed on the top or left edge for the track bar orientation.
        </short>
      </element>
      <element name="TTickMark.tmBoth">
        <short>
          Tick marks are displayed on both edges of the track bar orientation.
        </short>
      </element>

      <element name="TTickStyle">
        <short>
          <var>TTickStyle</var> - enumerated type denoting style of tick marks.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTickStyle.tsNone">
        <short>Tick marks are disabled.</short>
      </element>
      <element name="TTickStyle.tsAuto">
        <short>
          The tick mark count is determined using the Min, Max, and Frequency for a track bar control.
        </short>
      </element>
      <element name="TTickStyle.tsManual">
        <short>
          The number of tick marks is manually calculated. Used for the Mac OS Cocoa widgetset.
        </short>
      </element>

      <element name="TTrackBarScalePos">
        <short>
          <var>TTrackBarScalePos</var> - enumerated type denoting position of the scale for a track bar.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTrackBarScalePos.trLeft">
        <short/>
      </element>
      <element name="TTrackBarScalePos.trRight">
        <short/>
      </element>
      <element name="TTrackBarScalePos.trTop">
        <short/>
      </element>
      <element name="TTrackBarScalePos.trBottom">
        <short/>
      </element>

      <element name="TCustomTrackBar">
        <short>
          <var>TCustomTrackBar</var> - the base class for <var>TTrackBar</var>.
        </short>
        <descr>
          <p>
            <var>TCustomTrackBar</var> defines many of the properties inherited by <var>TTrackBar</var>, a device that allows the user to determine the value of a variable using a quasi-analog slider.
          </p>
        </descr>
      </element>

      <!-- private -->
      <element name="TCustomTrackBar.FOrientation"/>
      <element name="TCustomTrackBar.FReversed"/>
      <element name="TCustomTrackBar.FSelEnd"/>
      <element name="TCustomTrackBar.FSelStart"/>
      <element name="TCustomTrackBar.FShowSelRange"/>
      <element name="TCustomTrackBar.FTickMarks"/>
      <element name="TCustomTrackBar.FTickStyle"/>
      <element name="TCustomTrackBar.FLineSize"/>
      <element name="TCustomTrackBar.FPageSize"/>
      <element name="TCustomTrackBar.FMin"/>
      <element name="TCustomTrackBar.FMax"/>
      <element name="TCustomTrackBar.FFrequency"/>
      <element name="TCustomTrackBar.FPosition"/>
      <element name="TCustomTrackBar.FScalePos"/>
      <element name="TCustomTrackBar.FScaleDigits"/>
      <element name="TCustomTrackBar.FOnChange"/>

      <element name="TCustomTrackBar.SetFrequency">
        <short>Sets the value for the Frequency property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTrackBar.Frequency"/>
        </seealso>
      </element>
      <element name="TCustomTrackBar.SetFrequency.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetLineSize">
        <short>Sets the value for the LineSize property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTrackBar.LineSize"/>
        </seealso>
      </element>
      <element name="TCustomTrackBar.SetLineSize.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetMax">
        <short>Sets the value for the Max property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetMax.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetMin">
        <short>Sets the value for the Min property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetMin.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetOrientation">
        <short>Sets the value for the Orientation property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetOrientation.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetPageSize">
        <short>Sets the value for the PageSize property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetPageSize.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetParams">
        <short>Sets the values in the Position, Min, and Max properties.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetParams.APosition">
        <short>New value for the Position property.</short>
      </element>
      <element name="TCustomTrackBar.SetParams.AMin">
        <short>New value for the Min property.</short>
      </element>
      <element name="TCustomTrackBar.SetParams.AMax">
        <short>New value for the Max property.</short>
      </element>

      <element name="TCustomTrackBar.SetPosition">
        <short>Sets the value for the Position property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetPosition.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetReversed">
        <short>Sets the value for the Reversed property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetReversed.aValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetScalePos">
        <short>Sets the value for the ScalePos property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetScalePos.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetSelEnd">
        <short>Sets the value for the SelEnd property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetSelEnd.aValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetSelStart">
        <short>Sets the value for the SelStart property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetSelStart.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetShowSelRange">
        <short>Sets the value for the ShowSelRange property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetShowSelRange.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetTickMarks">
        <short>Sets the value for the TabStop property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetTickMarks.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.SetTickStyle">
        <short>Sets the value for the TickStyle property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetTickStyle.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTrackBar.UpdateSelection">
        <short>Not used in the current LCL implementation.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomTrackBar.ApplyChanges">
        <short>
            Sends message to update the visual appearance of the object.
          </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.Changed">
        <short>
          Signals the OnChange event handler (when assigned).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.DoChange">
        <short>
          Performs actions needed to update the position for the track bar and signal the OnChange event.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.DoChange.msg">
        <short/>
      </element>

      <element name="TCustomTrackBar.FixParams">
        <short>
          Normalizes values in Min and Max, and ensures that Position is in range.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.FixParams.APosition">
        <short/>
      </element>
      <element name="TCustomTrackBar.FixParams.AMin">
        <short/>
      </element>
      <element name="TCustomTrackBar.FixParams.AMax">
        <short/>
      </element>

      <element name="TCustomTrackBar.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults, overriding the inherited values.
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTrackBar.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomTrackBar.InitializeWnd" link="#lcl.controls.TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.Loaded" link="#lcl.controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.ShouldAutoAdjust">
        <short>
          Determines whether the width and height for the control are automatically resized.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.ShouldAutoAdjust.AWidth">
        <short>True if the value in Width should be resized.</short>
      </element>
      <element name="TCustomTrackBar.ShouldAutoAdjust.AHeight">
        <short>True if the value in Height should be resized.</short>
      </element>

      <element name="TCustomTrackBar.Create">
        <short>
          Constructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for <var>TCustomTrackBar</var>, and calls the inherited method on entry.
          </p>
          <p>
            Create sets the default values for properties and members in the class instance, including the component and control style flags. The initial bounds for the control are set to the values from the <var>GetControlClassDefaultSize</var> method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomTrackBar.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomTrackBar.SetTick">
        <short>
          Sets the position for the tick mark displayed on the track bar control.
        </short>
      </element>
      <element name="TCustomTrackBar.SetTick.Value">
        <short>Position for the tick mark (between Min and Max).</short>
      </element>

      <element name="TCustomTrackBar.AutoSize" link="#lcl.controls.TControl.AutoSize"/>

      <element name="TCustomTrackBar.Frequency">
        <short>
          Indicates the frequency of tick marks displayed for the control.
        </short>
      </element>

      <element name="TCustomTrackBar.LineSize">
        <short>
          Increment applied to the slider position when an arrow key is pressed.
        </short>
      </element>

      <element name="TCustomTrackBar.Max">
        <short>
          Maximum value or position for the track bar slider.
        </short>
      </element>

      <element name="TCustomTrackBar.Min">
        <short>
          Minimum value or position for the track bar slider.
        </short>
      </element>

      <element name="TCustomTrackBar.OnChange">
        <short>
          Event handler signalled when the Position in the control has been changed.
        </short>
      </element>

      <element name="TCustomTrackBar.Orientation">
        <short>
          Indicates the horizontal or vertical orientation for the track bar control.
        </short>
      </element>

      <element name="TCustomTrackBar.PageSize">
        <short>
          The increment for the slider position when PageUp or PageDown key is pressed.
        </short>
      </element>

      <element name="TCustomTrackBar.Position">
        <short>
          Location of the slider on the track bar between the Min and Max values.
        </short>
      </element>

      <element name="TCustomTrackBar.Reversed">
        <short>
          True if the values are displayed in ascending order from right-to-left.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.ScalePos">
        <short>
          Position where the scale is displayed.
        </short>
        <descr>
          This is a GTK-specific property.
        </descr>
      </element>

      <element name="TCustomTrackBar.SelEnd">
        <short>Ending value for the selection range in the track bar control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.SelStart">
        <short>Starting value for the selection range in the track bar control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.ShowSelRange">
        <short>
          Displays a selection range and indicators using the values in SelStart and SelEnd.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.TabStop">
        <short>Enables or disables navigatiopn using the Tab key.</short>
        <descr>
          <p>
            The default value for the property is True in TCustomTrackBar.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
        </seealso>
      </element>

      <element name="TCustomTrackBar.TickMarks">
        <short>
          Position for the tick marks relative to the slider in the track bar.
        </short>
        <descr>
          <p>
            <var>Tickmarks </var> indicates where the ticks appear relative to the slider in the track bar control.
          </p>
          <dl>
            <dt>tmBottomRight</dt>
            <dd>
              Tick marks are displayed on the bottom for the horizontal orientation, and on the right for the vertical orientation.
            </dd>
            <dt>tmTopLeft</dt>
            <dd>
              Tick marks are displayed on the top for the horizontal orientation, and on the left for the vertical orientation.
            </dd>
            <dt>tmBoth</dt>
            <dd>
              Tick marks are displayed on both sides for the selected orientation.
            </dd>
          </dl>
        </descr>
      </element>

      <element name="TCustomTrackBar.TickStyle">
        <short>
          Indicates the tick mark drawing style for the control.
        </short>
        <descr>
          <dl>
            <dt>tsNone</dt>
            <dd>
              Disables display of tick marks.
            </dd>
            <dt>tsAuto</dt>
            <dd>
              Tick mark count is automatically calculated using Min, Max, and Frequency.
            </dd>
            <dt>tsManual</dt>
            <dd>
              Used for Mac OS Cocoa. For other widgetsets, it displays the Selection Range markers but no other tick marks.
            </dd>
          </dl>
        </descr>
      </element>

      <element name="TTrackBar">
        <short>
          <var>TTrackBar</var>: a device which allows the user to determine the value of a variable using a quasi-analog slider.
        </short>
        <descr>
          <p>
            <var>TTrackBar</var>: a device which allows the user to determine the value of a variable using a quasi-analog slider.
          </p>
          <p>
            The device looks like a slider-potentiometer control on a hi-fi amplifier and consists of a slider which can be moved along a bar using the mouse. Tick marks can be displayed along one or both edges, giving an indication of the proportion of the maximum value of the controlled variable that is being selected.
          </p>
          <p>
            The <var>Position</var> property indicates the distance along the bar that the slider has been placed, either by the program or by mouse capture and movement.
          </p>
          <p>
            In the example, movement of the slider is detected and shown in the associated <link id="#lcl.comctrls.TProgressBar">TProgressBar</link>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
        <example file="comctrls/TrackBarEx.pas"/>
      </element>

      <element name="TTrackBar.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TTrackBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TTrackBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TTrackBar.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TTrackBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TTrackBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TTrackBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TTrackBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TTrackBar.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TTrackBar.Frequency" link="#lcl.comctrls.TCustomTrackBar.Frequency"/>
      <element name="TTrackBar.Hint" link="#lcl.controls.TControl.Hint"/>
      <element name="TTrackBar.LineSize" link="#lcl.comctrls.TCustomTrackBar.LineSize"/>
      <element name="TTrackBar.Max" link="#lcl.comctrls.TCustomTrackBar.Max"/>
      <element name="TTrackBar.Min" link="#lcl.comctrls.TCustomTrackBar.Min"/>
      <element name="TTrackBar.OnChange" link="#lcl.comctrls.TCustomTrackBar.OnChange"/>
      <element name="TTrackBar.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
      <element name="TTrackBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TTrackBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TTrackBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TTrackBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TTrackBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TTrackBar.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TTrackBar.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TTrackBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TTrackBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TTrackBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TTrackBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TTrackBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TTrackBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TTrackBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TTrackBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TTrackBar.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TTrackBar.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TTrackBar.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TTrackBar.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TTrackBar.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TTrackBar.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TTrackBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TTrackBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TTrackBar.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TTrackBar.Orientation" link="#lcl.comctrls.TCustomTrackBar.Orientation"/>
      <element name="TTrackBar.PageSize" link="#lcl.comctrls.TCustomTrackBar.PageSize"/>
      <element name="TTrackBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TTrackBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TTrackBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TTrackBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TTrackBar.Position" link="#lcl.comctrls.TCustomTrackBar.Position"/>
      <element name="TTrackBar.Reversed" link="#lcl.comctrls.TCustomTrackBar.Reversed"/>
      <element name="TTrackBar.ScalePos" link="#lcl.comctrls.TCustomTrackBar.ScalePos"/>
      <element name="TTrackBar.SelEnd" link="#lcl.comctrls.TCustomTrackBar.SelEnd"/>
      <element name="TTrackBar.SelStart" link="#lcl.comctrls.TCustomTrackBar.SelStart"/>
      <element name="TTrackBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TTrackBar.ShowSelRange" link="#lcl.comctrls.TCustomTrackBar.ShowSelRange"/>
      <element name="TTrackBar.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TTrackBar.TabStop" link="#lcl.comctrls.TCustomTrackBar.TabStop"/>
      <element name="TTrackBar.TickMarks" link="#lcl.comctrls.TCustomTrackBar.TickMarks"/>
      <element name="TTrackBar.TickStyle" link="#lcl.comctrls.TCustomTrackBar.TickStyle"/>
      <element name="TTrackBar.Visible" link="#lcl.controls.TControl.Visible"/>

      <element name="TTreeNodeClass">
        <short>Class type used to create new TTreeNode instances.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeState">
        <short>Enumerated type denoting the state for a TreeNode.</short>
        <descr>
          <p>
            <var>TNodeState</var> is an enumerated type with values representing the state a tree node. The values reflect the settings in property values in a TTreeNode instance, or the use a node in a tree structure. Value(s) from the enumeration are stored in the TNodeStates type.
          </p>
        </descr>
        <seealso>
          <link id="TNodeStates"/>
          <link id="TTreeNode.States"/>
        </seealso>
      </element>
      <element name="TNodeState.nsCut">
        <short>Cut has been set in the the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsDropHilited">
        <short>DropTarget has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsFocused">
        <short>Focused has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsSelected">
        <short>Selected has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsMultiSelected">
        <short>MultiSelected has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsExpanded">
        <short>Expanded has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsHasChildren">
        <short>HasChildren has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsDeleting">
        <short>Deleting has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsVisible">
        <short>Visible has been set in the TTreeNode.</short>
      </element>
      <element name="TNodeState.nsBound">
        <short>The tree node is bound to a tree (has a Parent) or is a top-level node.</short>
      </element>
      <element name="TNodeState.nsValidHasChildren">
        <short>
          The  tree node has child nodes and a value assigned to its HasChildren property.
        </short>
      </element>

      <element name="TNodeStates">
        <short>Set type used to store TNodeState value(s).</short>
        <descr>
          <var>TNodeStates</var> is a set type used to store zero or more values from the <var>TNodeState</var> enumeration. TNodeStates is the type used to implement the <var>TTreeNode.States</var> property.
        </descr>
        <seealso>
          <link id="TTreeNode.States"/>
        </seealso>
      </element>

      <element name="TNodeAttachMode">
        <short>
          Location where a new tree node is attached to its Parent, Child, or Sibling nodes.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNodeAttachMode.naAdd">
        <short>Add as the last sibling in a destination.</short>
      </element>
      <element name="TNodeAttachMode.naAddFirst">
        <short>Add as the first sibling in a destination.</short>
      </element>
      <element name="TNodeAttachMode.naAddChild">
        <short>Add as the last child in a destination.</short>
      </element>
      <element name="TNodeAttachMode.naAddChildFirst">
        <short>Add as the first child in a Destination.</short>
      </element>
      <element name="TNodeAttachMode.naInsert">
        <short>Insert as the prior sibling for the specified node.</short>
      </element>
      <element name="TNodeAttachMode.naInsertBehind">
        <short>Insert as the next sibling for the specified node.</short>
      </element>

      <element name="TAddMode">
        <short>
          <var>TAddMode</var> - enumerated type containing a series of constants to determine the place where a node should be placed in a tree.
        </short>
        <descr>
          <p>
            This set is used in <var>TTreeNode.InternalMove</var> and <var>TTreeNodes.InternalAddObject</var>.
          </p>
        </descr>
      </element>
      <element name="TAddMode.taAddFirst">
        <short>Adds the node as the first child.</short>
      </element>
      <element name="TAddMode.taAdd">
        <short>Adds the node as the last child.</short>
      </element>
      <element name="TAddMode.taInsert">
        <short>Adds the node in front another node.</short>
      </element>

      <element name="TMultiSelectStyles">
        <short>Represents available multi-select styles.</short>
        <descr/>
        <seealso>
          <link id="TMultiSelectStyle"/>
          <link id="TCustomTreeView.MultiSelectStyle"/>
        </seealso>
      </element>
      <element name="TMultiSelectStyles.msControlSelect">
        <short>
          Enables multi-select using Ctrl+Click to select an additional item.
        </short>
      </element>
      <element name="TMultiSelectStyles.msShiftSelect">
        <short>
          Enables multi-select for a range of items from the current selection using Shift+Click.
        </short>
      </element>
      <element name="TMultiSelectStyles.msVisibleOnly">
        <short>
          Enables multi-select for visible (expanded) items only using Shift+Click.
        </short>
      </element>
      <element name="TMultiSelectStyles.msSiblingOnly">
        <short>
          Enables range multi-select for sibling items using Shift+Click.
        </short>
      </element>

      <element name="TMultiSelectStyle">
        <short>Set type used to store value(s) from TMultiSelectStyles.</short>
        <descr>
          <p>
            <var>TMultiSelectStyle</var> is a set type used to store zero or more values from the <var>TMultiSelectStyles</var> enumeration. TMultiSelectStyle is the type used to implement the <var>TCustomTreeView.MultiSelectStyle</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TMultiSelectStyles"/>
          <link id="TCustomTreeView.MultiSelectStyle"/>
        </seealso>
      </element>

      <element name="TTreeNodeArray">
        <short>
          Pointer to a TTreeNode type which is the first instance in an allocated block of memory.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="ETreeNodeError">
        <short>Exception type raised for an error retrieving a tree node.</short>
        <descr>
          <p>
            <var>ETreeNodeError</var> is an <var>Exception</var> descendant with the base exception type raised for errors that occur when <var>TTreeNode</var> instances are retrieved. It is the ancestor for the <var>ETreeViewError</var> exception.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="ETreeViewError">
        <short>Exception type raised for errors in a tree view.</short>
        <descr>
          <p>
            <var>ETreeViewError</var> is a <var>ETreeNodeError</var> descendant and the exception raised for errors in a tree structure.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNodeChangeReason">
        <short>
          Represents reason codes passed to event handlers when a tree node has been changed.
        </short>
        <descr>
          <p>
            <var>TTreeNodeChangeReason</var> is an enumerated type with values that represent the reason code passed to event handlers when a tree node has been changed. TTreeNodeChangeReason is passed as an argument to the <var>TTVNodeChangedEvent</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TTVNodeChangedEvent"/>
          <link id="TTreeNode.Changed"/>
          <link id="TCustomTreeView.NodeChanged"/>
        </seealso>
      </element>
      <element name="TTreeNodeChangeReason.ncTextChanged">
        <short>The Node Text has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncDataChanged">
        <short>The Node Data has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncHeightChanged">
        <short>The Node Height has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncImageEffect">
        <short>The Node Image Effect has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncImageIndex">
        <short>The Node Image Index has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncParentChanged">
        <short>The Node Parent has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncVisibility">
        <short>The Node Visibility has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncOverlayIndex">
        <short>The Node Overlay Index has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncStateIndex">
        <short>The Node State Index has changed.</short>
      </element>
      <element name="TTreeNodeChangeReason.ncSelectedIndex">
        <short>The Node Selected Index has changed.</short>
      </element>

      <element name="LCLStreamID">
        <short>A constant with the identifier for a LCL stream.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTVChangingEvent">
        <short>
          Specifies an event handler signalled when a tree node is about to be changed.
        </short>
        <descr>
          <p>
            <var>TTVChangingEvent</var> is an object procedure type which specifies an event handler signalled when a tree node is about to be changed. TTVChangingEvent is the type used to implement the <var>TCustomTreeView.OnChanging</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.OnChanging"/>
          <link id="TTVChangedEvent"/>
        </seealso>
      </element>
      <element name="TTVChangingEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TTVChangingEvent.Node">
        <short/>
      </element>
      <element name="TTVChangingEvent.AllowChange">
        <short/>
      </element>

      <element name="TTVChangedEvent">
        <short>
          Specifies an event handler signalled when a tree node has been changed.
        </short>
        <descr>
          <p>
            <var>TTVChangedEvent</var> is an object procedure type which specifies an event handler signalled when a node has been changed in a <var>TCustomTreeView</var> / <var>TTreeView</var> control.
          </p>
          <p>
            <var>Sender</var> is the <var>TObject</var> instance for the change notification event.
          </p>
          <p>
            <var>Node</var> is the <var>TTreeNode</var> instance that has been modified.
          </p>
          <p>
            TTVChangedEvent is the type used for the <var>TCustomTreeView.OnChange</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.OnChange"/>
          <link id="TTreeNode"/>
          <link id="TTVChangingEvent"/>
        </seealso>
      </element>
      <element name="TTVChangedEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TTVChangedEvent.Node">
        <short>Tree node for the event notification.</short>
      </element>

      <element name="TTVNodeChangedEvent">
        <short>
          Specifies an event handler signalled when values in a tree node have been changed.
        </short>
        <descr>
          <p>
            <var>TTVNodeChangedEvent</var> is an object procedure type which specifies an event handler signalled when values in a tree node have been changed.
          </p>
          <p>
            <var>Sender</var> contains the tree view control for the change notification.
          </p>
          <p>
            <var>Node</var> is the <var>TTreeNode</var> instance with the modified value.
          </p>
          <p>
            <var>ChangeReason</var> is a <var>TTreeNodeChangeReason</var> enumeration value that indicates the property changed in the tree node.
          </p>
          <p>
            TTVNodeChangedEvent is the type used for the <var>TCustomTreeView.OnNodeChanged</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.OnNodeChanged"/>
          <link id="TTreeNode"/>
          <link id="TTreeNodeChangeReason"/>
        </seealso>
      </element>
      <element name="TTVNodeChangedEvent.Sender">
        <short>Object (tree view control) for the event notification.</short>
      </element>
      <element name="TTVNodeChangedEvent.Node">
        <short>Tree node with the modified value.</short>
      </element>
      <element name="TTVNodeChangedEvent.ChangeReason">
        <short>Indicates the value that was changed in the tree node.</short>
      </element>

      <element name="TTVEditingEvent">
        <short>
          <var>TTVEditingEvent</var> - generic event handling method for editing a specified node if <var>AllowEdit</var> is True.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVEditingEvent.Sender">
        <short/>
      </element>
      <element name="TTVEditingEvent.Node">
        <short/>
      </element>
      <element name="TTVEditingEvent.AllowEdit">
        <short/>
      </element>

      <element name="TTVEditingEndEvent">
        <short>
          Specifies an event handler signalled when an edit action for a tree view control has been completed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVEditingEndEvent.Sender">
        <short/>
      </element>
      <element name="TTVEditingEndEvent.Node">
        <short/>
      </element>
      <element name="TTVEditingEndEvent.Cancel">
        <short/>
      </element>

      <element name="TTVEditedEvent">
        <short>
          <var>TTVEditedEvent</var> - generic event handling method for a node that has been edited.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVEditedEvent.Sender">
        <short/>
      </element>
      <element name="TTVEditedEvent.Node">
        <short/>
      </element>
      <element name="TTVEditedEvent.S">
        <short/>
      </element>

      <element name="TTVExpandingEvent">
        <short>
          <var>TTVExpandingEvent</var> - generic event handling method for expanding a tree node if <var>AllowExpansion</var> is True.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVExpandingEvent.Sender">
        <short/>
      </element>
      <element name="TTVExpandingEvent.Node">
        <short/>
      </element>
      <element name="TTVExpandingEvent.AllowExpansion">
        <short/>
      </element>

      <element name="TTVCollapsingEvent">
        <short>
          <var>TTVCollapsingEvent</var> - generic event handling method for collapsing a Tree Node if AllowCollapse is True.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCollapsingEvent.Sender">
        <short/>
      </element>
      <element name="TTVCollapsingEvent.Node">
        <short/>
      </element>
      <element name="TTVCollapsingEvent.AllowCollapse">
        <short/>
      </element>

      <element name="TTVExpandedEvent">
        <short>
          <var>TTVExpandedEvent</var> - generic event handling method for a Tree Node that has been expanded.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVExpandedEvent.Sender">
        <short/>
      </element>
      <element name="TTVExpandedEvent.Node">
        <short/>
      </element>

      <element name="TTVCompareEvent">
        <short>
          <var>TTVCompareEvent</var> - generic event handling method for comparing two Tree Nodes.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCompareEvent.Sender">
        <short/>
      </element>
      <element name="TTVCompareEvent.Node1">
        <short/>
      </element>
      <element name="TTVCompareEvent.Node2">
        <short/>
      </element>
      <element name="TTVCompareEvent.Compare">
        <short/>
      </element>

      <element name="TTVCustomDrawEvent">
        <short>
          <var>TTVCustomDrawEvent</var> - generic event handling method for Tree View custom drawing.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TTVCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVCustomDrawItemEvent">
        <short>
          <var>TTVCustomDrawItemEvent</var> - generic event handling method for Tree View Item custom drawing.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomDrawItemEvent.Node">
        <short/>
      </element>
      <element name="TTVCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TTVCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVCustomDrawArrowEvent">
        <short>
          Specifies an event handler signalled to draw a custom arrow (expand/collapse indicator) for a node on a tree view control.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.OnCustomDrawArrow"/>
        </seealso>
      </element>
      <element name="TTVCustomDrawArrowEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomDrawArrowEvent.ARect">
        <short/>
      </element>
      <element name="TTVCustomDrawArrowEvent.ACollapsed">
        <short/>
      </element>

      <element name="TTVAdvancedCustomDrawEvent">
        <short>
          <var>TTVAdvancedCustomDrawEvent</var> - generic event handler method for Tree View advanced custom drawing.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.Stage">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVAdvancedCustomDrawItemEvent">
        <short>
          <var>TTVAdvancedCustomDrawItemEvent</var> - generic event handler method for Tree View Item advanced custom drawing.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.Node">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.Stage">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.PaintImages">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVCustomCreateNodeEvent">
        <short>
          <var>TTVCustomCreateNodeEvent</var> - generic event handling method for Tree View node creation.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCustomCreateNodeEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomCreateNodeEvent.ATreeNode">
        <short/>
      </element>

      <element name="TTVCreateNodeClassEvent">
        <short>
          Specifies an event handler signalled to get the class type used to create a new node for a tree view control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCreateNodeClassEvent.Sender">
        <short/>
      </element>
      <element name="TTVCreateNodeClassEvent.NodeClass">
        <short/>
      </element>

      <element name="TTVHasChildrenEvent">
        <short>
          Specifies an event handler signalled to determine if a given tree node has child nodes.
        </short>
        <descr>
          <p>
            <var>TTVHasChildrenEvent</var> is the type used for the <var>OnHasChildren</var> property in <var>TCustomTreeView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.OnHasChildren"/>
          <link id="TTreeNode.HasChildren"/>
        </seealso>
      </element>
      <element name="TTVHasChildrenEvent.Result">
        <short>True if the specified node has child nodes.</short>
      </element>
      <element name="TTVHasChildrenEvent.Sender">
        <short>Object (TCustomTreeView ) for the event notification.</short>
      </element>
      <element name="TTVHasChildrenEvent.ANode">
        <short>Tree node examined in the routine.</short>
      </element>

      <element name="TTreeNodeCompare">
        <short>
          <var>TTreeNodeCompare</var> - generic function to compare Tree Nodes: returns -1 if Node1 is less than Node2, zero if equal, +1 if Node1 is greater.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeCompare.Result">
        <short/>
      </element>
      <element name="TTreeNodeCompare.Node1">
        <short/>
      </element>
      <element name="TTreeNodeCompare.Node2">
        <short/>
      </element>

      <element name="TOldTreeNodeInfo">
        <short>
          <var>TOldTreeNodeInfo</var> - record type (old version) for Tree Node information.
        </short>
      </element>

      <element name="TOldTreeNodeInfo.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.SelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.OverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Expanded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.TextLen">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo">
        <short>
          <var>TTreeNodeInfo</var> - record structure for (new) Tree Node information.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.ImageIndex">
        <short>Ordinal position of the image displayed for the tree node.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.SelectedIndex">
        <short>
          Ordinal position of the tree node in the list of selected nodes, or -1 when it is not selected.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.StateIndex">
        <short>
          Ordinal position for the image displayed to indicate the tree node state.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.OverlayIndex">
        <short>
          Ordinal position for the image displayed an overlay on the icon for the tree node.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.Count">
        <short>Number of lines of text for the tree node.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.Height">
        <short>Height (in pixels) for the rendered tree node.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.Expanded">
        <short>
          True if the node is expanded to show its child nodes, or False when it is collapsed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.TextLen">
        <short>
          Total length (in bytes) for the text lines in the tree node.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="PDelphiNodeInfo">
        <short>
          A pointer to <var>TDelphiNodeInfo</var>.
        </short>
      </element>

      <element name="TDelphiNodeInfo">
        <short>
          <var>TDelphiNodeInfo</var> - record structure for Tree Node information (for Delphi compatibility).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.SelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.OverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode">
        <short>
          Contains data for an item displayed in a TTreeView control.
        </short>
        <descr>
          <p>
            A <var>TTreeNode</var> is part of a <var>TTreeView</var> and is used to store the data displayed in the control. This can be done by using the <var>Text</var> property or for more complex data the <var>Data</var> property can be used. Each node can have sibling or child items associated with it.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <!-- private -->
      <element name="TTreeNode.FOwner"/>
      <element name="TTreeNode.FCapacity"/>
      <element name="TTreeNode.FCount"/>
      <element name="TTreeNode.FData"/>
      <element name="TTreeNode.FHeight"/>
      <element name="TTreeNode.FNodeEffect"/>
      <element name="TTreeNode.FImageIndex"/>
      <element name="TTreeNode.FIndex"/>
      <element name="TTreeNode.FItems"/>
      <element name="TTreeNode.FNextBrother"/>
      <element name="TTreeNode.FNextMultiSelected"/>
      <element name="TTreeNode.FOverlayIndex"/>
      <element name="TTreeNode.FParent"/>
      <element name="TTreeNode.FPrevBrother"/>
      <element name="TTreeNode.FPrevMultiSelected"/>
      <element name="TTreeNode.FSelectedIndex"/>
      <element name="TTreeNode.FStateIndex"/>
      <element name="TTreeNode.FStates"/>
      <element name="TTreeNode.FSubTreeCount"/>
      <element name="TTreeNode.FText"/>
      <element name="TTreeNode.FTop"/>

      <element name="TTreeNode.AreParentsExpandedAndVisible"/>
      <element name="TTreeNode.AreParentsExpandedAndVisible.Result"/>
      <element name="TTreeNode.BindToMultiSelected"/>
      <element name="TTreeNode.CompareCount"/>
      <element name="TTreeNode.CompareCount.Result"/>
      <element name="TTreeNode.CompareCount.CompareMe"/>
      <element name="TTreeNode.DoCanExpand"/>
      <element name="TTreeNode.DoCanExpand.Result"/>
      <element name="TTreeNode.DoCanExpand.ExpandIt"/>
      <element name="TTreeNode.DoExpand"/>
      <element name="TTreeNode.DoExpand.ExpandIt"/>
      <element name="TTreeNode.ExpandItem"/>
      <element name="TTreeNode.ExpandItem.ExpandIt"/>
      <element name="TTreeNode.ExpandItem.Recurse"/>
      <element name="TTreeNode.GetAbsoluteIndex"/>
      <element name="TTreeNode.GetAbsoluteIndex.Result"/>
      <element name="TTreeNode.GetDeleting"/>
      <element name="TTreeNode.GetDeleting.Result"/>
      <element name="TTreeNode.GetCount"/>
      <element name="TTreeNode.GetCount.Result"/>
      <element name="TTreeNode.GetCut"/>
      <element name="TTreeNode.GetCut.Result"/>
      <element name="TTreeNode.GetDropTarget"/>
      <element name="TTreeNode.GetDropTarget.Result"/>
      <element name="TTreeNode.GetExpanded"/>
      <element name="TTreeNode.GetExpanded.Result"/>
      <element name="TTreeNode.GetFocused"/>
      <element name="TTreeNode.GetFocused.Result"/>
      <element name="TTreeNode.GetHasChildren"/>
      <element name="TTreeNode.GetHasChildren.Result"/>
      <element name="TTreeNode.GetHeight"/>
      <element name="TTreeNode.GetHeight.Result"/>
      <element name="TTreeNode.GetIndex"/>
      <element name="TTreeNode.GetIndex.Result"/>
      <element name="TTreeNode.GetItems"/>
      <element name="TTreeNode.GetItems.Result"/>
      <element name="TTreeNode.GetItems.AnIndex"/>
      <element name="TTreeNode.GetLevel"/>
      <element name="TTreeNode.GetLevel.Result"/>
      <element name="TTreeNode.GetMultiSelected"/>
      <element name="TTreeNode.GetMultiSelected.Result"/>
      <element name="TTreeNode.GetSelected"/>
      <element name="TTreeNode.GetSelected.Result"/>
      <element name="TTreeNode.GetState"/>
      <element name="TTreeNode.GetState.Result"/>
      <element name="TTreeNode.GetState.NodeState"/>
      <element name="TTreeNode.GetTreeNodes"/>
      <element name="TTreeNode.GetTreeNodes.Result"/>
      <element name="TTreeNode.GetTreeView"/>
      <element name="TTreeNode.GetTreeView.Result"/>
      <element name="TTreeNode.GetTop"/>
      <element name="TTreeNode.GetTop.Result"/>
      <element name="TTreeNode.GetVisible"/>
      <element name="TTreeNode.GetVisible.Result"/>
      <element name="TTreeNode.InternalMove"/>
      <element name="TTreeNode.InternalMove.ANode"/>
      <element name="TTreeNode.InternalMove.AddMode"/>
      <element name="TTreeNode.IsEqual"/>
      <element name="TTreeNode.IsEqual.Result"/>
      <element name="TTreeNode.IsEqual.Node"/>
      <element name="TTreeNode.IsNodeVisible"/>
      <element name="TTreeNode.IsNodeVisible.Result"/>
      <element name="TTreeNode.IsNodeHeightFullVisible"/>
      <element name="TTreeNode.IsNodeHeightFullVisible.Result"/>
      <element name="TTreeNode.ReadData"/>
      <element name="TTreeNode.ReadData.Stream"/>
      <element name="TTreeNode.ReadData.StreamVersion"/>
      <element name="TTreeNode.ReadData.Info"/>
      <element name="TTreeNode.ReadDelphiData"/>
      <element name="TTreeNode.ReadDelphiData.Stream"/>
      <element name="TTreeNode.ReadDelphiData.Info"/>

      <element name="TTreeNode.SetCut"/>
      <element name="TTreeNode.SetCut.AValue"/>
      <element name="TTreeNode.SetData"/>
      <element name="TTreeNode.SetData.AValue"/>
      <element name="TTreeNode.SetDropTarget"/>
      <element name="TTreeNode.SetDropTarget.AValue"/>
      <element name="TTreeNode.SetExpanded"/>
      <element name="TTreeNode.SetExpanded.AValue"/>
      <element name="TTreeNode.SetFocused"/>
      <element name="TTreeNode.SetFocused.AValue"/>
      <element name="TTreeNode.SetHasChildren"/>
      <element name="TTreeNode.SetHasChildren.AValue"/>
      <element name="TTreeNode.SetHeight"/>
      <element name="TTreeNode.SetHeight.AValue"/>
      <element name="TTreeNode.SetImageEffect"/>
      <element name="TTreeNode.SetImageEffect.AValue"/>
      <element name="TTreeNode.SetImageIndex"/>
      <element name="TTreeNode.SetImageIndex.AValue"/>
      <element name="TTreeNode.SetItems"/>
      <element name="TTreeNode.SetItems.AnIndex"/>
      <element name="TTreeNode.SetItems.AValue"/>
      <element name="TTreeNode.SetMultiSelected"/>
      <element name="TTreeNode.SetMultiSelected.AValue"/>
      <element name="TTreeNode.SetOverlayIndex"/>
      <element name="TTreeNode.SetOverlayIndex.AValue"/>
      <element name="TTreeNode.SetSelected"/>
      <element name="TTreeNode.SetSelected.AValue"/>
      <element name="TTreeNode.SetSelectedIndex"/>
      <element name="TTreeNode.SetSelectedIndex.AValue"/>
      <element name="TTreeNode.SetStateIndex"/>
      <element name="TTreeNode.SetStateIndex.AValue"/>
      <element name="TTreeNode.SetText"/>
      <element name="TTreeNode.SetText.S"/>
      <element name="TTreeNode.SetVisible"/>
      <element name="TTreeNode.SetVisible.AValue"/>
      <element name="TTreeNode.Unbind"/>
      <element name="TTreeNode.UnbindFromMultiSelected"/>
      <element name="TTreeNode.WriteData"/>
      <element name="TTreeNode.WriteData.Stream"/>
      <element name="TTreeNode.WriteData.Info"/>
      <element name="TTreeNode.WriteDelphiData"/>
      <element name="TTreeNode.WriteDelphiData.Stream"/>
      <element name="TTreeNode.WriteDelphiData.Info"/>

      <element name="TTreeNode.Changed">
        <short>Performs a change notification for the node with the specified reason.</short>
        <descr>
          <p>
            Calls the <var>NodeChanged</var> method in the associated <var>TreeView</var> control.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.TreeView"/>
          <link id="TCustomTreeView.NodeChanged"/>
        </seealso>
      </element>
      <element name="TTreeNode.Changed.ChangeReason">
        <short>Indicates the property value that was changed in the tree node.</short>
      </element>

      <element name="TTreeNode.GetOwner">
        <short>Gets the owner of the object instance.</short>
        <descr>
          <p>
            The return value contains the TTreeNodes container which owns the class instance.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.GetOwner.Result">
        <short>Persistent object which owns the object instance.</short>
      </element>

      <element name="TTreeNode.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TTreeNode</var>, and calls the inherited <var>Create</var> on entry. Create sets the default values for properties and members in the class instance. The value in <var>SubTreeCount</var> is set to <b>1</b>. The owner of the class instance is set to the <var>TTreeNodes</var> instance in <var>AnOwner</var>.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTreeNode.Create.AnOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TTreeNode.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for <var>TTreeNode</var>.
          </p>
          <p>
            It notifies the owner ( the TTreeNodes container) that the tree node and its accessibility object are being deleted. The Unbind method is called to remove any references to the node in the parent and sibling nodes, or as a selection in TreeNodes.
          </p>
          <p>
            Child nodes are removed by setting HasChildren to False. Child nodes in Items are freed, and its storage is set to Nil.
          </p>
          <p>
            The Pointer in the Data property is set to Nil.
          </p>
          <p>
            Destroy calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TTreeNode.AlphaSort">
        <short>
          Sorts the top-level child nodes in Items.
        </short>
        <descr>
          <p>
            Calls the <var>CustomSort</var> method to perform the default sort algorithm (alphabetic).
          </p>
          <p>
            The return value is the result from the CustomSort method, and contains <b>True</b> on success.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.CustomSort"/>
          <link id="TTreeNode.DefaultTreeViewSort"/>
        </seealso>
      </element>
      <element name="TTreeNode.AlphaSort.Result">
        <short>True on success.</short>
      </element>

      <element name="TTreeNode.Bottom">
        <short>
          Gets the vertical coordinate for the bottom of the tree node.
        </short>
        <descr>
          <p>
            <var>Bottom</var> is an <var>Integer</var> function used to get the vertical coordinate for the bottom of the tree node. The return value is calculated as the sum of the <var>Top</var> and <var>Height</var> properties.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.Bottom.Result">
        <short>Bottom coordinate for the tree node.</short>
      </element>

      <element name="TTreeNode.BottomExpanded">
        <short>
          Gets the bottom coordinate for the last visible, expanded child node in the subtree.
        </short>
        <descr>
          <p>
            <var>BottomExpanded</var> is an <var>Integer</var> function used to get the bottom coordinate for the node subtree when it is expanded.
          </p>
          <p>
            If the tree node has a visible sibling, the value in its Top property is used as the return value. When a sibling node does not exist, the bottom coordinate for the last visible and expanded child node is used. If the current node does not have child nodes, the value in the Bottom property is used as the return value.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.BottomExpanded.Result">
        <short>Bottom coordinate for the last node in the subtree.</short>
      </element>

      <element name="TTreeNode.CustomSort">
        <short><var>CustomSort</var> - Sorts the child nodes using SortProc.</short>
        <descr>
          <p>
            The child nodes (but not the grand-children) are sorted. If SortProc is Nil the method DefaultTreeViewSort is used. The default implementation always returns True.
         </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.CustomSort.Result">
        <short>Always returns True.</short>
      </element>
      <element name="TTreeNode.CustomSort.SortProc">
        <short>
          Sorting algorithm executed in the method, or Nil to use the default procedure.
        </short>
      </element>

      <element name="TTreeNode.DefaultTreeViewSort">
        <short>
          <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2
        </short>
        <descr>
          <p>
            <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2.
          </p>
          <p>
            <var>DefaultTreeViewSort</var> compares the text of two TreeNodes and returns the following result:
          </p>
          <dl>
            <dt>&lt; 0</dt>
            <dd>if <var>Node1.Text&lt;Node2.Text</var>.</dd>
            <dt>0</dt>
            <dd>if <var>Node1.Text=Node2.Text</var>.</dd>
            <dt>&gt; 0</dt>
            <dd>if <var>Node1.Text&gt;Node2.Text</var>.</dd>
          </dl>
          <p>
            The comparison takes into account ANSI characters, i.e. it takes care of strange accented characters. Contrary to AnsiCompareText, the comparison is case sensitive.
           </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.DefaultTreeViewSort.Result">
        <short/>
      </element>
      <element name="TTreeNode.DefaultTreeViewSort.Node1">
        <short/>
      </element>
      <element name="TTreeNode.DefaultTreeViewSort.Node2">
        <short/>
      </element>

      <element name="TTreeNode.DisplayExpandSignLeft">
        <short>
          <var>DisplayExpandSignLeft</var> - returns the position of the left edge of the expand / collapse indicator.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayExpandSignLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayExpandSignRect">
        <short>
          <var>DisplayExpandSignRect</var> - returns the coordinates of the rectangle within which the expand sign are displayed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayExpandSignRect.Result">
        <short>Rectangle with the display area for the expand / collapse indicator.</short>
      </element>

      <element name="TTreeNode.DisplayExpandSignRight">
        <short>
          <var>DisplayExpandSignRight</var> - returns the position of the right edge of the expand sign (i.e. takes into account the width of the icon etc).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayExpandSignRight.Result">
        <short>Rectangle with the display area for the expand / collapse indicator.</short>
      </element>

      <element name="TTreeNode.DisplayIconLeft">
        <short>
          <var>DisplayIconLeft</var> - returns the position of the actual icon for the expand sign (usually 1 pixel greater than <var>DisplayExpandSignLeft</var>).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayIconLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayRect">
        <short>
          <var>DisplayRect</var> - returns the coordinates of the rectangle containing the current entry; if <var>TextOnly </var>is True, returns the coordinates for the text.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayRect.Result">
        <short/>
      </element>
      <element name="TTreeNode.DisplayRect.TextOnly">
        <short/>
      </element>

      <element name="TTreeNode.DisplayStateIconLeft">
        <short>
          <var>DisplayStateIconLeft</var> - returns the position of the State Icon.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayStateIconLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayTextLeft">
        <short>
          <var>DisplayTextLeft</var> - returns the position of the left edge of the text.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayTextLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayTextRight">
        <short>
          <var>DisplayTextRight</var> - returns the position of the right edge of the text.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayTextRight.Result">
        <short/>
      </element>

      <element name="TTreeNode.EditText">
        <short>
          Edits the text for the node in the associated TreeView control.
        </short>
        <descr>
          <p>
            <var>EditText</var> is a <var>Boolean</var> function used to start editing the <var>Text</var> for the tree node in the associated <var>TreeView</var> control. The return value is <b>True</b> when TreeView has been assigned and the value <var>tvsIsEditing</var> is present in the <var>States</var> property for the tree view control.
          </p>
          <p>
            EditText calls the <var>BeginEditing</var> method in TreeView to configure, display, and activate the editor for the node.
          </p>
          <p>
            Use <var>EndEdit</var> to close and optionally cancel the editing process in the associated TreeView control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.EditText.Result">
        <short>True if editing was enabled for the tree node in the method.</short>
      </element>

      <element name="TTreeNode.FindNode">
        <short>Gets the child node in Items with the specified text.</short>
        <descr>
          <p>
            <var>FindNode</var> is a <var>TTreeNode</var> function used to get the child node with the text specified in <var>NodeText</var>.
          </p>
          <p>
            FindNode examines the child nodes found in the <var>Items</var> property for the class instance. The <var>GetFirstChild</var> method is called to get the first child node in Items. Each tree node in Items is examined after calling <var>GetNextSibling</var> until a node with the requested value is located. The return value is the TTreeNode instance with a Text property that matches the value in NodeText, or <b>Nil</b> if a tree node is not found.
          </p>
          <p>
            Use methods in the <var>TTreeNodes</var> container to locate tree nodes not in the current subtree; i. e. <var>FindNodeWithText</var> or <var>FindNodeWithTextPath</var>.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.Text"/>
          <link id="TTreeNode.GetFirstChild"/>
          <link id="TTreeNode.GetNextSibling"/>
          <link id="TTreeNodes.FindNodeWithText"/>
          <link id="TTreeNodes.FindNodeWithTextPath"/>
        </seealso>
      </element>
      <element name="TTreeNode.FindNode.Result">
        <short>
          The TTreeNode instance in Items with the specified value, or Nil if not found.
        </short>
      </element>
      <element name="TTreeNode.FindNode.NodeText">
        <short>Text for the node to retrieve from Items.</short>
      </element>

      <element name="TTreeNode.GetFirstChild">
        <short>Gets the first child node in the Items property.</short>
        <descr>
          <p>
            <var>GetFirstChild</var> is a <var>TTreeNode</var> function used to get the first child node in the subtree for the current tree node. GetFirstChild returns the first TTreeNode instance stored in the <var>Items</var> property (index position 0). The return value is <b>Nil</b> if Items is empty (<var>Count</var> is 0).
          </p>
          <p>
            Use <var>GetFirstVisibleChild</var> to get the first child node with its <var>Visible</var> property set to <b>True</b>.
          </p>
          <p>
            Use <var>GetFirstSibling</var>, <var>GetNextSibling</var>, <var>GetPrevSibling</var>, or <var>GetLastSibling</var> to retrieve a tree node at the same level in the tree hierarchy.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.GetFirstChild.Result">
        <short>First tree node in the Items property, or Nil when Items is empty.</short>
      </element>

      <element name="TTreeNode.GetFirstSibling">
        <short>Gets the first tree node at the same level in the tree.</short>
        <descr>
          <p>
            <var>GetFirstSibling</var> is a <var>TTreeNode</var> function which returns the first tree node at the same <var>Level</var> in the tree node hierarchy. The return value may be the same as the current class instance when it is the first (or only) node at the current Level.
          </p>
          <p>
            When a <var>Parent</var> node has been assigned, its <var>GetFirstChild</var> method is used to get the return value. Otherwise, the internal linked list for the sub-tree is used to get the previous tree node as the return value.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.Level"/>
          <link id="TTreeNode.Parent"/>
          <link id="TTreeNode.GetFirstChild"/>
        </seealso>
      </element>
      <element name="TTreeNode.GetFirstSibling.Result">
        <short>First tree node at the same level.</short>
      </element>

      <element name="TTreeNode.GetFirstVisibleChild">
        <short>
          Gets the tree node that is the first visible child node in the subtree.
        </short>
        <descr>
          <p>
            <var>GetFirstVisibleChild</var> is a <var>TTreeNode</var> function used to get the tree node that is the first visible child node in the subtree.
          </p>
          <p>
            GetFirstVisibleChild calls <var>GetFirstChild</var> to retrieve the first child node in <var>Items</var>. If the first child node is not visible, each of the TTreeNode instances in Items is examined after calling <var>GetNextVisibleSibling</var>.
          </p>
          <p>
            The return value is the first TTreeNode instance with its Visible property set to <b>True</b>. The return value is <b>Nil</b> if no visible child node was found in Items.
          </p>
          <p>
            Use <var>GetLastVisibleChild</var> to retrieve the last visible child node in Items.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.GetFirstVisibleChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetHandle">
        <short>
          Gets the value for the Handle property.
        </short>
        <descr>
          <p>
            GetHandle is a THandle function used to get the value for the Handle property. It is the Handle allocated for the associated TreeView control.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.Handle"/>
        </seealso>
      </element>
      <element name="TTreeNode.GetHandle.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTreeNode.GetLastChild">
        <short>
          Gets the last node that is a top-level child node in the subtree.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastChild.Result">
        <short>TTreeNode instance that is the list node in Items.</short>
      </element>

      <element name="TTreeNode.GetLastSibling">
        <short>
          Gets the last node at the same level as the current node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetLastSubChild">
        <short>
          <var>GetLastSubChild</var> - returns the last sub-child node of this parent.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastSubChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetLastVisibleChild">
        <short>
          Gets the last child node in Items with its Visible property set to True.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastVisibleChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNext">
        <short>
          Gets the next node in the tree.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNext.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextChild">
        <short>
          <var>GetNextChild</var> - returns the next child node of the parent specified by <var>AValue</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextChild.Result">
        <short/>
      </element>
      <element name="TTreeNode.GetNextChild.AValue">
        <short/>
      </element>

      <element name="TTreeNode.GetNextExpanded">
        <short>
          <var>GetNextExpanded</var> - returns the next expanded node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextExpanded.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextMultiSelected">
        <short>
          <var>GetNextMultiSelected</var> - returns the next node in a multi-selection.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextMultiSelected.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextSibling">
        <short>
          <var>GetNextSibling</var> - returns the next node in the same level as the current node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextSkipChildren">
        <short>
          Gets the next sibling node for the current tree node, or Nil when a sibling does not exist.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextSkipChildren.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextVisible">
        <short>
          Gets the next visible node.
        </short>
        <descr>
          <p>
            <var>GetNextVisible</var> is a <var>TTreeNode</var> function used to get the next visible node for the current tree node.
          </p>
          <p>
            If the current tree node is <var>Expanded</var> and <var>Visible</var>, the next node is the first visible child node. Otherwise, the next visible sibling node is used as the next node. If a sibling node does not exist, the <var>Parent</var> is searched for a visible sibling (next visible ancestor?).
          </p>
          <p>
            The return value is <b>Nil</b> if a visible node is not found using the preceding logic, or when none of the ancestor nodes are visible and expanded.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextVisible.Result">
        <short>Next node in the tree node navigation order, or Nil.</short>
      </element>

      <element name="TTreeNode.GetNextVisibleSibling">
        <short>
          Gets the next visible node at the same level in the tree.
        </short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextVisibleSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel">
        <short>
          <var>GetParentNodeOfAbsoluteLevel</var> - returns the parent of all nodes at this absolute level.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel.Result">
        <short/>
      </element>
      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel.TheAbsoluteLevel">
        <short/>
      </element>

      <element name="TTreeNode.GetPrev">
        <short>
          Gets the previous node in the tree.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrev.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevChild">
        <short>
          Gets the previous child node starting at the specified child node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevChild.Result">
        <short>Node which is the previous child node.</short>
      </element>
      <element name="TTreeNode.GetPrevChild.AValue">
        <short>Node which is the previous sibling for the specified child, or Nil.</short>
      </element>

      <element name="TTreeNode.GetPrevExpanded">
        <short>
          <var>GetPrevExpanded</var> - returns the previous expanded node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevExpanded.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevMultiSelected">
        <short>
          <var>GetPrevMultiSelected</var> - returns the previous node in a multi-selection.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevMultiSelected.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevSibling">
        <short>
          <var>GetPrevSibling</var> - returns the previous node in the same level as the current node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevVisible">
        <short>
          <var>GetPrevVisible</var> - returns the previous visible (not hidden) node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevVisible.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevVisibleSibling">
        <short>Gets the previous visible sibling tree node for the current node.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevVisibleSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetTextPath">
        <short>
          <var>GetTextPath</var> - returns a string containing the path to the current node delimited by slash.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.HasAsParent">
        <short>
          <var>HasAsParent</var> - returns True if the node specified by <var>AValue </var> has a parent node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.HasAsParent.Result">
        <short/>
      </element>
      <element name="TTreeNode.HasAsParent.AValue">
        <short/>
      </element>

      <element name="TTreeNode.IndexOf">
        <short>
          Get the index position for the specified child tree node.
        </short>
        <descr>
          <p>
            The return value is -1 if the tree node in AValue is not a child node (its Parent node is not the current class instance). Calls GetIndex to calculate the position of the child node relative to previous sibling nodes. Roughly equivalent to calling IndexOf in the Items container, but using a TTreeNode search value instead of a String.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.IndexOf.Result">
        <short>
          Ordinal position for the specified child node, or -1 when not a child node.
        </short>
      </element>
      <element name="TTreeNode.IndexOf.AValue">
        <short>Child node to locate in Items.</short>
      </element>

      <element name="TTreeNode.IndexOfText">
        <short>
          <var>IndexOfText</var> - returns the index of the node containing the specified Text string.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.IndexOfText.Result">
        <short/>
      </element>
      <element name="TTreeNode.IndexOfText.NodeText">
        <short/>
      </element>

      <element name="TTreeNode.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies details directly, otherwise calls inherited <var>Assign</var> which probably raises an exception.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TTreeNode.Assign.Source">
        <short>Persistent object with properties copied in the method.</short>
      </element>

      <element name="TTreeNode.Collapse">
        <short>
          Collapses the current tree node, and optionally collapses any descendent  nodes.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.Collapse.Recurse">
        <short>True to collapses all descendent nodes in the subtree.</short>
      </element>

      <element name="TTreeNode.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - makes sure all references to and from the node are consistent.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Delete">
        <short>
          Frees  the current tree node when the Deleting property is not True.
        </short>
        <descr>
          <p>
            Delete is a method used to remove the tree node from the TTreeNodes container. Delete calls Free to destroy the object instance if the Deleting property is not set to True. No actions are performed when Deleting is True.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodes.Delete"/>
        </seealso>
      </element>

      <element name="TTreeNode.DeleteChildren">
        <short>
          <var>DeleteChildren</var> - remove the descendent Nodes in the tree structure.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.EndEdit">
        <short>
          Ends editing of the tree node in the associated tree view control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.EndEdit.Cancel">
        <short>True if the edited value for Text is discarded.</short>
      </element>

      <element name="TTreeNode.Expand">
        <short>
          Expands the current tree node, and optionally all descendent nodes.
        </short>
        <descr>
          <p>
            Calls the ExpandItem method to implement the expansion and optional recursion.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.Expand.Recurse">
        <short>True to expand all descendent nodes.</short>
      </element>

      <element name="TTreeNode.ExpandParents">
        <short>
          Expands any tree node which is an ancestor of the current node.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.FreeAllNodeData">
        <short>Frees the Pointer in Data, including any child nodes in Items.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.MakeVisible">
        <short>
          Forces the node tree node to become visible.
        </short>
        <descr>
          <p>
            Calls the EnsureNodeIsVisible method in the associated TreeView (when assigned). Otherwise, calls the ExpandParents method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.MoveTo">
        <short>
          <var>MoveTo</var> - method for relocating a node to the specified <var>Destination</var> using the specified mode of attachment.
        </short>
        <descr>
          <p>
            <var>MoveTo</var> - method for relocating a node to the specified <var>Destination</var> using the specified mode of attachment.
          </p>
          <p>
            Definition of the modes of attachment:
          </p>
          <dl>
            <dt>naAdd</dt>
            <dd>Add as last sibling of Destination</dd>
            <dt>naAddFirst</dt>
            <dd>Add as first sibling of Destination</dd>
            <dt>naAddChild</dt>
            <dd>Add as last child of Destination</dd>
            <dt>naAddChildFirst</dt>
            <dd>Add as first child of Destination</dd>
            <dt>naInsert</dt>
            <dd>Insert in front of Destination</dd>
            <dt>naInsertBehind</dt>
            <dd>Insert behind Destination</dd>
          </dl>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.MoveTo.Destination">
        <short/>
      </element>
      <element name="TTreeNode.MoveTo.Mode">
        <short/>
      </element>

      <element name="TTreeNode.MultiSelectGroup">
        <short>
          <var>MultiSelectGroup</var> - method for multi-selecting a group of nodes.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Update">
        <short>
          Redraws the associated TreeView control if an update is not already in progress.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - for debugging. If <var>Recurse</var> is True, report for all descendants as well.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.WriteDebugReport.Prefix">
        <short/>
      </element>
      <element name="TTreeNode.WriteDebugReport.Recurse">
        <short/>
      </element>

      <element name="TTreeNode.AbsoluteIndex">
        <short>
          <var>AbsoluteIndex</var> - the absolute index of the current node, i.e. without taking into account the level of ancestry.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Count">
        <short>
          The number of nodes where the current node is the parent node.
        </short>
        <descr>
          Contains the same value as the Count property in Items.
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Cut">
        <short>
          Indicates if the tree node has been cut from the tree structure.
        </short>
        <descr>
          <p>
            Cut is a Boolean property which indicates if the tree node has been cut from the tree structure. The property value is True when nsCut has been included in the States property for the tree node. Changing the value for the property causes the States property to be updated to include or exclude the node state value.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Data">
        <short>
          Pointer to the custom data for the node.
        </short>
        <descr>
          <p>
            Data is a Pointer property with a pointer to the custom data for the node. Data can contain any arbitrary data type, and must be cast to the correct types when used in an application.
          </p>
          <p>
            Setting a new value for the property causes the associated TreeView (when assigned) to sort the parent node or all of the TreeNodes when needed and allowed.  It is needed when the tree view uses SortType stData or stBoth. It is allowed if the node is not being deleted and is bound to other tree nodes (States).
          </p>
          <p>
            The Changed method is called with the ncDataChanged node change reason.
          </p>
        </descr>
        <example file="comctrls/ttreenode_data.pas"/>
      </element>

      <element name="TTreeNode.Deleting">
        <short>
          True if the node has been marked for deletion in the associated tree view control.
        </short>
        <descr>
          <p>
            <var>Deleting</var> is a read-only <var>Boolean</var> property which indicates is the node is marked for deletion. Its value is <b>True</b> when <var>ndDeleting</var> has been included in the <var>States</var> property for the node. nsDeleting is added to States in the <var>Destroy</var> method, and indicates that the node will be freed. The <var>Delete</var> method in the <var>TreeView</var> control is called to signal an <var>OnDeletion</var> event (when assigned) before references for the node are removed and the <var>TreeNodes</var> are refreshed. It prevents the Delete method from being executed more than once.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.DropTarget">
        <short>
          True if the node is a drop target in a drag and drop operation.
        </short>
        <descr>
          <p>
            <var>DropTarget</var> is a <var>Boolean</var> property which indicates if the node is a drop target in a drag and drop operation. The value for the property is <b>True</b> when <var>nsDropHilited</var> has been included in the <var>States</var> property.
          </p>
          <p>
            Setting a new value for the property causes States to be updated to reflect the new value. When set to True, nsDropHilited is included in State and the internal last drop target is updated in the associated <var>TreeView</var> control. When set to False, nsDropHilited is excluded from States and the last drop target is set to <b>Nil</b> in the TreeView control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Expanded">
        <short>
          True if the node has been expanded, False when collapsed.
        </short>
        <descr>
          <p>
            <var>Expanded</var> is a <var>Boolean</var> property which indicates if the node has been expanded in the associated <var>TreeView</var> control. The property value is <b>True</b> when <var>nsExpanded</var> has been included in the <var>States</var> property.
          </p>
          <p>
            The <var>Expand</var> method is called when the new value for the property is <b>True</b>. Otherwise, the <var>Collapse</var> method is called. States is updated in the Expand and Collapse methods.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Focused">
        <short>
          True if the node has focus in the TreeView control.
        </short>
        <descr>
          <p>
            <var>Focused</var> is a <var>Boolean</var> property which indicates if the node has focus in the associated <var>TreeView</var> control. The value for the property is <b>True</b> when <var>nsFocused</var> has been included in the <var>States</var> property.
          </p>
          <p>
            Setting a new value for the property causes the values in States to be updated. When set to <b>True</b>, nsFocused is included in States. When set to <b>False</b>, nsFocused is excluded from States. The <var>Update</var> method is called to force the TreeView control to be redrawn.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Handle">
        <short>
          Handle for the tree view control which owns the TreeNodes container and the tree node.
        </short>
        <descr>
          <p>
            <var>THandle</var> is a read-only <var>THandle</var> property with the handle assigned for the associated <var>TreeView</var> control. The property value is <b>0</b> (<b>zero</b>) if a handle has not been assigned for the TreeView control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.HasChildren">
        <short>
          Indicates whether the tree node has child nodes.
        </short>
        <descr>
          <p>
            HasChildren is a Boolean property which indicates whether the tree node has child nodes.
          </p>
          <p>
            The property value is True when States includes the value nsHasChildren. Items is not used to determine the property value.
          </p>
          <p>
            Setting a new value for the property causes States to be updated to include or exclude nsHasChildren to reflect the new value. When the value is False, child nodes in the Items property are freed.
          </p>
          <p>
            The Update method is called to refresh the associated TreeView control (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Height">
        <short>
          The height for the node including its text, images, and indicators.
        </short>
        <descr>
          <p>
            <var>Height</var> is an <var>Integer</var> property with the height for the node including its text, images, and indicators.
          </p>
          <p>
            Height uses a default value if it contains <b>0</b> (<b>zero</b>) or a negative integer value. If an associated <var>TreeView</var> control has been assigned, the value in its <var>DefaultItemHeight</var> property is used as the property value. If TreeView in unassigned, the value in the <var>DefaultTreeNodeHeight</var> constant is used.
          </p>
          <p>
            Setting a new value for the property causes the <var>States</var> property in the associated TreeView control to be updated (when assigned). The values <var>tvsScrollbarChanged</var> and <var>tvsTopsNeedsUpdate</var> are included in the control States. The <var>Update</var> method is called to force the TreeView to be redrawn. The <var>Changed</var> method is called with the <var>ncHeightChanged</var> node change reason.
          </p>
          <p>
            Height is used along with <var>Top</var> to calculate the return value for the <var>Bottom</var> method. It is also used in the implementation of methods like <var>DisplayRect</var> and  <var>DisplayExpandSignRect</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.ImageIndex">
        <short>
          Ordinal position for the image displayed for the node, or -1 when no image is assigned.
        </short>
        <descr>
          <p>
            <var>ImageIndex</var> is an <var>Integer</var> property with the ordinal position for the image displayed for the node. It refers to a bitmap stored in the <var>Images</var> property of the associated <var>TreeView</var> control.  The default value for the property is <b>-1</b>, and indicates that an image has not been assigned.
          </p>
          <p>
            Setting a new value for the property causes the <var>Update</var> method to be called to redraw the associated tree view control. The <var>Changed</var> method is called with the <var>ncImageIndex</var> node change reason.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.StateIndex"/>
          <link id="TTreeNode.OverlayIndex"/>
          <link id="TTreeNode.SelectedIndex"/>
        </seealso>
      </element>

      <element name="TTreeNode.Index">
        <short>
          Ordinal position for the node in its parent node.
        </short>
        <descr>
          Returns the number of previous siblings (nodes on same level in the parent node).
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.IsFullHeightVisible">
        <short>
          True if the entire node is visible in the display area for the associated TreeView control.
        </short>
        <descr>
          <p>
            <var>IsFullHeightVisible</var> is a read-only <var>Boolean</var> property which indicates if the entire tree node is visible in the display area for the associated <var>TreeView</var> control.
          </p>
          <p>
            The <var>IsNodeHeightFullVisible</var> method in TreeView is called to get the value for the property. If the TreeView control has not been assigned, the <var>AreParentsExpandedAndVisible</var> method is used to get the return value.
          </p>
          <p>
            IsFullHeightVisible is used in the SelectionVisible method in TCustomTreeView when MultiSelect has not been enabled for the tree view control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.IsVisible">
        <short>
          True if the node is visible.
        </short>
        <descr>
          <p>
            <var>IsVisible</var> is a read-only <var>Boolean</var> property which indicates if the tree node is visible in the associated <var>TreeView</var> control. IsVisible is <b>True</b> if the node can be seen in the display area for the control. The property value is <b>False</b> when an ancestor node is collapsed (not <var>Expanded</var>).
          </p>
          <p>
            The <var>IsNodeVisible</var> method in TreeView is called to get the value for the property. If TreeView has not been assigned, the <var>AreParentsExpandedAndVisible</var> method is called to get the property value.
          </p>
          <p>
            IsNodeVisible is used in the <var>Repaint</var> method in <var>TTreeNodes</var>, and in the <var>SelectionVisible</var> method in <var>TCustomTreeView</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Items">
        <short>
          Provides indexed access to the child nodes for the current node.
        </short>
        <descr>
          <p>
            <var>Items</var> is an indexed <var>TTreeNode</var> property which provides access to the child nodes for the current node by their ordinal position. <var>ItemIndex</var> contains the ordinal position for the tree node instance, and must be in the range <b>0..<var>Items.Count</var>-1</b>. An <var>ETreeNodeError</var> exception is raised if ItemIndex is not in the range needed for the Items property.
          </p>
          <p>
            Items is the default property for the class instance.
          </p>
          <p>
            Storing a new value to the indexed property causes the <var>Assign</var> method in the <var>TTreeNode</var> instance to be called to copy the properties values.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.Items.ItemIndex">
        <short>Ordinal position for a child node.</short>
      </element>

      <element name="TTreeNode.Level">
        <short>The number of ancestor nodes for the current tree node.</short>
        <descr>
          <p>
            Level is a read-only Integer property which contains the level in the tree structure for the node. It indicates the number of ancestor nodes in the structure, and implies the indentation for the node in the tree view control.
          </p>
          <p>
            The root of the tree is level 0. The value for the property is determined by counting the number of Parent nodes for each TTreeNode instance in the tree starting at the current node.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.MultiSelected">
        <short>
          <var>MultiSelected</var> - if True, several nodes have been selected simultaneously (e.g. using the Shift or Ctrl key while selecting).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.NodeEffect">
        <short>
          Graphic drawing effect applied to the node in the associated TreeView control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.OverlayIndex">
        <short>
          Ordinal position for the overlay image used for the node.
        </short>
        <descr>
          This icon is drawn above the normal icon. If Images.HasOverlays then it is fetched from Images via Images.Overlay(Node.Overlay) for Delphi compatibility.
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Owner">
        <short>
          Owner of the tree node instance.
        </short>
        <descr>
          <p>
            Owner is a read-only TTreeNodes property with the container that owns the current TTreeNode instance.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Parent">
        <short>
          Parent node for the current tree node.
        </short>
        <descr>
          <p>
            Parent is a read-only TTreeNode property which contains the parent node for the current tree node.
          </p>
          <p>
            Use Items to access and maintain the child nodes for the current tree node.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Selected">
        <short>
          True if the current node is selected in the tree view control.
        </short>
        <descr>
          <p>
            <var>Selected</var> is a <var>Boolean</var> property which indicates the current node is selected in the associated <var>TreeView</var> control. The property value is <b>True</b> when <var>nsSelected</var> or <var>nsMultiSelected</var> has been included in the <var>States</var> property. nsSelected indicates that the node is assigned to the <var>TCustomTreeView.Selected</var> property. nsMultiSelected indicates that the node is stored in the the <var>TCustomTreeView.Selections</var> property when it has <var>MultiSelect</var> enabled.
          </p>
          <p>
            Setting a new value for the property causes the values in States to be updated. Similarly, the TreeView control is updated to used the node in the Selected or Selections property.
          </p>
          <p>
            The <var>Update</var> method is called to force the TreeView control to be redrawn.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.Focused"/>
        </seealso>
      </element>

      <element name="TTreeNode.SelectedIndex">
        <short>
          Ordinal position for the image displayed when the tree node is Selected.
        </short>
        <descr>
          <p>
            <var>SelectedIndex</var> is an <var>Integer</var> property with the ordinal position for the image displayed when the node is <var>Selected</var>. It refers to a bitmap in the <var>Images</var> property for the <var>TreeView</var> control, and allows an alternate image to be displayed for the node when it is selected. The default value is <b>-1</b> and indicates that an image index has not been assigned.
          </p>
          <p>
            Changing the value in the property causes the <var>Update</var> method to be called to redraw the associated TreeView control. The <var>Changed</var> method is called with the <var>ncSelectedIndex</var> node change reason.
          </p>
          <p>
            Use <var>ImageIndex</var> to set the ordinal position for the image displayed when the tree node is not selected.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.ImageIndex"/>
        </seealso>
      </element>

      <element name="TTreeNode.StateIndex">
        <short>
          <var>StateIndex</var> the index of the state (within an enumerated type).
        </short>
        <descr>
          <p>
            <var>StateIndex</var> the index of the state (within an enumerated type).
          </p>
          <p>Definition of enumerated type NodeState:</p>
          <p>
            nsCut, nsDropHilited, nsFocused, nsSelected, nsMultiSelected, nsExpanded, nsHasChildren, nsDeleting, nsBound
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.States">
        <short>
          Contains active state flags for the tree node.
        </short>
        <descr>
          <p>
            <var>States</var> is a read-only <var>TNodeStates</var> properties which contains active state flags for the tree node. <var>TNodeState</var> enumeration values are included in or excluded from the set type as needed in methods for the tree node, the <var>TreeNodes</var> container, and the associated <var>TreeView</var> control.
          </p>
        </descr>
        <seealso>
          <link id="TTreeViewStates"/>
          <link id="TTreeViewState"/>
        </seealso>
      </element>

      <element name="TTreeNode.SubTreeCount">
        <short>
          The number of subtrees in the ancestor nodes for the class instance.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Text">
        <short>
          Text displayed for the tree node.
        </short>
        <descr>
          <p>
            <var>Text</var> is a <var>String</var> property which contains the text displayed as the caption for the tree node.
          </p>
          <p>
            Changing the value in the property causes the <var>TreeView</var> control to be updated. Its <var>States</var> property is modified to include the value <var>tvsMaxRightNeedsUpdate</var>, which causes the node sizes to be recalculated and the control to be re-displayed.
          </p>
          <p>
            If the <var>SortType</var> for the TreeView is set to <var>stText</var> or <var>stBoth</var>, the Parent node is re-sorted. If the TreeView has not been assigned, the <var>TreeNodes</var> container is re-sorted.
          </p>
          <p>
            The <var>Changed</var> method is called with the <var>ncTextChanged</var> node change reason.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Top">
        <short>
          Vertical coordinate for the top of the tree node.
        </short>
        <descr>
          <p>
            <var>Top</var> is a read-only <var>Integer</var> property with the vertical coordinate for the top of the tree node. Top contains an Y-axis offset where the tree node is located in the display area for the associated <var>TreeView</var> control.
          </p>
          <p>
            The property value is calculated by calling the <var>UpdateAllTops</var> method in the TreeView control.  The value contains the accumulated <var>Height</var> for all preceding <var>TreeNodes</var> starting at the first visible node in the control, and reflects their <var>Visible</var> and <var>Expanded</var> settings. The value is calculated in UpdateAllTops when <var>tvsTopsNeedsUpdate</var> has been included in the <var>States</var> property for the TreeView control.
          </p>
          <p>
            Use <var>Height</var> to get height for the text, images, and indicators used in a tree node. Use <var>Bottom</var> to get the vertical coordinate for the bottom of the tree node.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.Height"/>
          <link id="TTreeNode.Bottom"/>
        </seealso>
      </element>

      <element name="TTreeNode.TreeNodes">
        <short>
          The container where the tree node is stored, and the owner of the class instance.
        </short>
        <descr>
          <p>
            <var>TreeNodes</var> is a read-only <var>TTreeNodes</var> property with the container where the tree node is stored, and the owner of the <var>TTreeNode</var> instance. TreeNodes provides properties and methods needed to store, access, and maintain the tree nodes for the <var>TreeView</var> control. TreeNodes is a reference to the <var>Items</var> property found in TreeView.
          </p>
          <p>
            The property value is <b>Nil</b> if <var>Owner</var> has not been assigned or is not derived from TTreeNodes.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.TreeView"/>
          <link id="TTreeNode.Owner"/>
          <link id="TCustomTreeView.Items"/>
          <link id="TTreeNodes"/>
        </seealso>
      </element>

      <element name="TTreeNode.TreeView">
        <short>
          The tree view control where the node is displayed.
        </short>
        <descr>
          <p>
            <var>TreeView</var> is a read-only <var>TCustomTreeView</var> property with the tree view control where the tree node and other nodes in <var>TreeNodes</var> are displayed. It is a reference to the <var>Owner</var> assigned to the TreeNodes property.
          </p>
          <p>
            TreeView provides access to the properties, methods, and events in the control. It is used to get the position for the node in the display area for the control. It is also notified when property values in the node are changed.
          </p>
          <p>
            Use <var>TreeNodes</var> to access the <var>TTreeNode</var> instances stored in TreeView.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.TreeNodes"/>
          <link id="TCustomTreeView"/>
          <link id="TTreeNodes"/>
          <link id="TTreeNode"/>
        </seealso>
      </element>

      <element name="TTreeNode.Visible">
        <short>
          True if the tree node is visible in the associated TreeView control.
        </short>
        <descr>
          <p>
            <var>Visible</var> is a  <var>Boolean</var> property which indicates if the tree node is visible in the associated <var>TreeView</var> control. Its value is <b>True</b> when <var>nsVisible</var> has been included in the <var>States</var> property for the tree node. The default value for the property is <b>True</b>.
          </p>
          <p>
            Setting a new value for the property causes the States property to be updated. <var>Selected</var> is set to <b>False</b> when the value in Visible is changed.
          </p>
          <p>
            Values are included in the States property for the associated TreeView control (when assigned) to indicate that the size and layout for the tree nodes in the control have been changed. The <var>Update</var> method is called to force the control to be refreshed. The <var>Changed</var> method is called with the <var>ncVisibility</var> node change reason.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNodesEnumerator">
        <short>Implements an enumerator for items in the TTreeNodes container.</short>
        <descr>
          <p>
            Implements the Current property and MoveNext method used to navigate the tree nodes in the container.  The nodes in the container are passed as an argument to the Create constructor.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNodesEnumerator.FNodes"/>
      <element name="TTreeNodesEnumerator.FPosition"/>

      <element name="TTreeNodesEnumerator.GetCurrent">
        <short>Gets the value for the Current property.</short>
        <descr/>
        <seealso>
          <link id="TTreeNodesEnumerator.Current"/>
        </seealso>
      </element>
      <element name="TTreeNodesEnumerator.GetCurrent.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTreeNodesEnumerator.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited method on entry. Create stores the value in <var>ANodes</var> in the <var>TTreeNodes</var> member. Creates set the default value for the internal position counter used in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodes"/>
        </seealso>
      </element>
      <element name="TTreeNodesEnumerator.Create.ANodes">
        <short>Container with the tree nodes visited in the enumerator.</short>
      </element>

      <element name="TTreeNodesEnumerator.MoveNext">
        <short>Indicates if another tree node is available to the enumerator.</short>
        <descr>
          <p>
            <var>MoveNext</var> is a <var>Boolean</var> function which indicates if another tree node is available to the enumerator. MoveNext increments the internal position counter for the enumerator. The return value is <b>True</b> if the position counter is less than the number of entries in the internal <var>TTreeNodes</var> container (in the range <b>0..<var>TTreeNodes.Count</var>-1</b>).
          </p>
          <p>
            Use <var>Current</var> to access the <var>TTreeNode</var> instance when MoveNext returns <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodesEnumerator.Current"/>
          <link id="TTreeNodes.Count"/>
          <link id="TTreeNode"/>
        </seealso>
      </element>
      <element name="TTreeNodesEnumerator.MoveNext.Result">
        <short>True when more tree nodes are available in the internal container.</short>
      </element>

      <element name="TTreeNodesEnumerator.Current">
        <short>Gets the current tree node instance for the enumerator.</short>
        <descr>
          <p>
            Use <var>MoveNext</var> to navigate to the first or subsequent TTreeNode instance for the enumerator. Raises an exception if Current is accessed before the MoveNext method is called to retrieve the first value for the enumerator.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="PNodeCache">
        <short>
          <var>PNodeCache</var> - pointer to <var>TNodeCache</var> type.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeCache">
        <short>
          <var>TNodeCache</var> - a cache (temporary storage record) for a <var>TTreeNode</var> and its index.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeCache.CacheNode">
        <short>Member with the TTreeNode instance for the cache entry.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeCache.CacheIndex">
        <short>Ordinal position for the tree node in the cache storage.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes">
        <short>
          Implements a container for TTreeNode instances.
        </short>
        <descr>
          <p>
            <var>TTreeNodes</var> is a <var>TPersistent</var> descendant which implements a container used to store <var>TTreeNode</var> instances.  TTreeNodes provides properties and methods used to create, store, access, and maintain nodes with a hierarchical tree structure.
          </p>
          <p>
            The indexed <var>Item</var> property provides access to the nodes in the container by their ordinal position. An enumerator can also be used to access tree nodes in the container.
          </p>
          <p>
            TTreeNodes is the type used for the <var>Items</var> property in <var>TCustomTreeView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode"/>
          <link id="TCustomTreeView.Items"/>
          <link id="TTreeNodesEnumerator"/>
        </seealso>
      </element>

      <element name="TTreeNodes.FCount"/>
      <element name="TTreeNodes.FSelection"/>
      <element name="TTreeNodes.FStartMultiSelected"/>
      <element name="TTreeNodes.FFirstMultiSelected"/>
      <element name="TTreeNodes.FLastMultiSelected"/>
      <element name="TTreeNodes.FKeepCollapsedNodes"/>
      <element name="TTreeNodes.FNodeCache"/>
      <element name="TTreeNodes.FOwner"/>
      <element name="TTreeNodes.FTopLvlCapacity"/>
      <element name="TTreeNodes.FTopLvlCount"/>
      <element name="TTreeNodes.FTopLvlItems"/>
      <element name="TTreeNodes.FUpdateCount"/>
      <element name="TTreeNodes.FNewNodeToBeAdded"/>

      <!-- private -->
      <element name="TTreeNodes.ClearCache"/>
      <element name="TTreeNodes.GetHandle">
        <short>Gets the handle for the TreeView component using the collection of nodes.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetHandle.Result">
        <short>The handle for the TreeView, or 0 when TreeView is unassigned.</short>
      </element>

      <element name="TTreeNodes.GetNodeFromIndex"/>
      <element name="TTreeNodes.GetNodeFromIndex.Result"/>
      <element name="TTreeNodes.GetNodeFromIndex.Index"/>
      <element name="TTreeNodes.GetSelectionCount"/>
      <element name="TTreeNodes.GetSelectionCount.Result"/>
      <element name="TTreeNodes.GetTopLvlItems"/>
      <element name="TTreeNodes.GetTopLvlItems.Result"/>
      <element name="TTreeNodes.GetTopLvlItems.Index"/>
      <element name="TTreeNodes.GrowTopLvlItems"/>
      <element name="TTreeNodes.IndexOfTopLvlItem"/>
      <element name="TTreeNodes.IndexOfTopLvlItem.Result"/>
      <element name="TTreeNodes.IndexOfTopLvlItem.Node"/>
      <element name="TTreeNodes.MoveTopLvlNode"/>
      <element name="TTreeNodes.MoveTopLvlNode.TopLvlFromIndex"/>
      <element name="TTreeNodes.MoveTopLvlNode.TopLvlToIndex"/>
      <element name="TTreeNodes.MoveTopLvlNode.Node"/>
      <element name="TTreeNodes.ReadData"/>
      <element name="TTreeNodes.ReadData.Stream"/>
      <element name="TTreeNodes.ReadExpandedState"/>
      <element name="TTreeNodes.ReadExpandedState.Stream"/>
      <element name="TTreeNodes.Repaint"/>
      <element name="TTreeNodes.Repaint.ANode"/>
      <element name="TTreeNodes.ShrinkTopLvlItems"/>
      <element name="TTreeNodes.SetTopLvlItems"/>
      <element name="TTreeNodes.SetTopLvlItems.Index"/>
      <element name="TTreeNodes.SetTopLvlItems.AValue"/>
      <element name="TTreeNodes.WriteData"/>
      <element name="TTreeNodes.WriteData.Stream"/>
      <element name="TTreeNodes.WriteData.WriteDataPointer"/>
      <element name="TTreeNodes.WriteExpandedState"/>
      <element name="TTreeNodes.WriteExpandedState.Stream"/>

      <element name="TTreeNodes.InternalAddObject">
        <short>
          Creates or updates a tree node with the specified text and a pointer to data.
        </short>
        <descr>
          <p>
            Expands the parent for the Node (when assigned). Updates the accessibility role, description, and value when enabled in the tree view which owns the container. Updates the scroll bars for the tree view control prior to exit.
          </p>
          <p>
            Used in the implementation of methods like: AddNode, AddObject, Insert, AddChildObject, et. al.
          </p>
        </descr>
        <errors>
          Raises an ETreeNodeError exception if the Owner for the container (the tree view control) has not been assigned.
        </errors>
        <seealso/>
      </element>
      <element name="TTreeNodes.InternalAddObject.Result">
        <short>TTreeNode instance created or updated in the method.</short>
      </element>
      <element name="TTreeNodes.InternalAddObject.Node">
        <short>An existing tree node to update, or Nil to create a new tree node.</short>
      </element>
      <element name="TTreeNodes.InternalAddObject.S">
        <short>Text for the tree node.</short>
      </element>
      <element name="TTreeNodes.InternalAddObject.Data">
        <short>Pointer to the data for the tree node.</short>
      </element>
      <element name="TTreeNodes.InternalAddObject.AddMode">
        <short>Position in the tree hierarchy where the node is stored.</short>
      </element>

      <element name="TTreeNodes.DefineProperties" link="#rtl.classes.TPersistent.DefineProperties">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.DefineProperties.Filer">
        <short>
         TFiler instance used to read or write properties for the class instance during LCL streaming.
        </short>
      </element>

      <element name="TTreeNodes.GetCount">
        <short>Gets the value for the Count property.</short>
        <descr/>
        <seealso>
          <link id="TTreeNodes.Count"/>
        </seealso>
      </element>
      <element name="TTreeNodes.GetCount.Result">
        <short>Value for the Count property.</short>
      </element>

      <element name="TTreeNodes.GetOwner">
        <short>Gets the value for the Owner property.</short>
        <descr/>
        <seealso>
          <link id="TTreeNodes.Owner"/>
        </seealso>
      </element>
      <element name="TTreeNodes.GetOwner.Result">
        <short>Owner of the collection.</short>
      </element>

      <element name="TTreeNodes.SetItem">
        <short>
          Assigns values from the specified tree node to a node in the container.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.SetItem.Index">
        <short>Ordinal position for the node updated in the container.</short>
      </element>
      <element name="TTreeNodes.SetItem.AValue">
        <short>Tree node with the values assigned to an existing node in the container.</short>
      </element>

      <element name="TTreeNodes.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited method on entry. Create allocates resources for the internal selection list in the class instance. The value in <var>AnOwner</var> is stored in the <var>Owner</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodes.Owner"/>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTreeNodes.Create.AnOwner">
        <short>Owner for the class instance.</short>
      </element>

      <element name="TTreeNodes.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy calls <var>Clear</var> to remove <var>TTreeNode</var> instances stored in <var>Item</var> and values in the internal cache. The selection list for the class instance is also cleared, and its allocated resources are freed. Destroy calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodes.Clear"/>
          <link id="TTreeNodes.Item"/>
          <link id="TTreeNodes.BeginUpdate"/>
          <link id="TTreeNodes.EndUpdate"/>
          <link id="TTreeNode.Delete"/>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TTreeNodes.Add">
        <short>
          Adds a new tree node as a sibling of the specified node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.Add.Result">
        <short>Tree node created and added in the method.</short>
      </element>
      <element name="TTreeNodes.Add.SiblingNode">
        <short>Tree node that is a sibling of the new node.</short>
      </element>
      <element name="TTreeNodes.Add.S">
        <short>Text for the new tree node.</short>
      </element>
      <element name="TTreeNodes.Add.Data">
        <short>Pointer to the data for the new tree node.</short>
      </element>
      <element name="TTreeNodes.Add.AddMode">
        <short>Indicates the position for the new node relative to its sibling(s).</short>
      </element>

      <element name="TTreeNodes.AddChild">
        <short>
          Adds a tree node with the specified text as a child of the specified parent node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChild.Result">
        <short>TTreeNode instance created in the method.</short>
      </element>
      <element name="TTreeNodes.AddChild.ParentNode">
        <short>Parent node for the new node.</short>
      </element>
      <element name="TTreeNodes.AddChild.S">
        <short>Text for the new tree node.</short>
      </element>

      <element name="TTreeNodes.AddChildFirst">
        <short>
          <var>AddChildFirst</var> - adds a node with specified text as the first child of the parent node and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChildFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildFirst.ParentNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildFirst.S">
        <short/>
      </element>

      <element name="TTreeNodes.AddChildObject">
        <short>
          <var>AddChildObject</var> - adds a child node with specified text and data-pointer to the parent node and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChildObject.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObject.ParentNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObject.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObject.Data">
        <short/>
      </element>

      <element name="TTreeNodes.AddChildObjectFirst">
        <short>
          <var>AddChildObjectFirst</var> - adds a node with specified text and data as the first child of the parent node and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.ParentNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.Data">
        <short/>
      </element>

      <element name="TTreeNodes.AddFirst">
        <short>
          <var>AddFirst</var> - adds a node with specified text as the first node in the same level as <var>SiblingNode.</var> and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddFirst.SiblingNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddFirst.S">
        <short/>
      </element>

      <element name="TTreeNodes.AddNode">
        <short>Adds or inserts a tree node as a sibling to a specified relative node.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddNode.Result">
        <short>Tree node with an updated Parent node after the operation.</short>
      </element>
      <element name="TTreeNodes.AddNode.Node">
        <short>Node added or inserted to the node tree for the relative node.</short>
      </element>
      <element name="TTreeNodes.AddNode.Relative">
        <short>Tree node where the node will become a sibling.</short>
      </element>
      <element name="TTreeNodes.AddNode.S">
        <short>Accessibility value for the tree node.</short>
      </element>
      <element name="TTreeNodes.AddNode.Ptr">
        <short>Pointer to the accessibility data for the tree node.</short>
      </element>
      <element name="TTreeNodes.AddNode.Method">
        <short>Method used to store the node: add or insert.</short>
      </element>

      <element name="TTreeNodes.AddObject">
        <short>
          <var>AddObject</var> - adds a node with specified text and data-pointer in the same level as <var>SiblingNode.</var> and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddObject.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddObject.SiblingNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddObject.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddObject.Data">
        <short/>
      </element>

      <element name="TTreeNodes.AddObjectFirst">
        <short>
          <var>AddObjectFirst</var> - adds a node with specified text and data-pointer as the first node in the same level as <var>SiblingNode.</var> and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.SiblingNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.Data">
        <short/>
      </element>

      <element name="TTreeNodes.FindNodeWithData">
        <short>
          <var>FindNodeWithData</var> - returns a node containing the specified data pointer.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindNodeWithData.Result">
        <short/>
      </element>
      <element name="TTreeNodes.FindNodeWithData.NodeData">
        <short/>
      </element>

      <element name="TTreeNodes.FindNodeWithText">
        <short>
          Finds a node containing the specified text string.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindNodeWithText.Result">
        <short/>
      </element>
      <element name="TTreeNodes.FindNodeWithText.NodeText">
        <short/>
      </element>

      <element name="TTreeNodes.FindNodeWithTextPath">
        <short>
          Finds a node with the text ancestry specified in TextPath.
        </short>
        <descr>
          <p>
            Returns the TTreeNode instance found which matches the text ancestry in TextPath, or Nil if a tree node is not found matching the specified values.
          </p>
          <p>
            TextPath contains the delimited text values used to locate a tree node. The '/' (Slash) character is used as the delimiter between text values in TextPath. An initial slash character representing the root node is not needed or allowed. The search always starts at the top-level tree nodes in the container. The FindNode method is used to locate subsequent delimited text values in TextPath.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindNodeWithTextPath.Result">
        <short>Tree nodes matching the specified text values.</short>
      </element>
      <element name="TTreeNodes.FindNodeWithTextPath.TextPath">
        <short>Delimited text values used to locate the tree node.</short>
      </element>

      <element name="TTreeNodes.FindTopLvlNode">
        <short>
          Gets a top-level node containing the specified text.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindTopLvlNode.Result">
        <short>Tree node with the specified text, or Nil.</short>
      </element>
      <element name="TTreeNodes.FindTopLvlNode.NodeText">
        <short>Text to locate in the top-level siblings.</short>
      </element>

      <element name="TTreeNodes.GetEnumerator">
        <short>
          Gets the TTreeNodesEnumerator enumerator for the class instance.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetEnumerator.Result">
        <short>TTreeNodesEnumerator instance created in the method.</short>
      </element>

      <element name="TTreeNodes.GetFirstNode">
        <short>
          <var>GetFirstNode</var> - returns the first node in the collection.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetFirstNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetFirstVisibleNode">
        <short>
          Gets the first top-level tree node with its Visible property set to True.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetFirstVisibleNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastExpandedSubNode">
        <short>
          <var>GetLastExpandedSubNode</var> - absolute last node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastExpandedSubNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastNode">
        <short>
          Gets the last top-level tree node in the container.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastSubNode">
        <short>
          Gets the last child or descendent node in the last top-level node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastSubNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastVisibleNode">
        <short>
          Gets the last top-level tree node with its Visible property set to True.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastVisibleNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetSelections">
        <short>
          Gets the tree node at the specified position in the list of selected nodes.
        </short>
        <descr>
          <p>
            Raises an <var>ETreeNodeError</var> exception if <var>AIndex</var> is not a valid ordinal position in the internal selection list. AIndex must be in the range <b>0..<var>SelectionCount</var>-1</b>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetSelections.Result">
        <short>Tree node at the specified position in the selection list.</short>
      </element>
      <element name="TTreeNodes.GetSelections.AIndex">
        <short>Ordinal position in the selection list for the node.</short>
      </element>

      <element name="TTreeNodes.Insert">
        <short>
          Inserts a node with the specified text before the specified node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.Insert.Result">
        <short/>
      </element>
      <element name="TTreeNodes.Insert.NextNode">
        <short/>
      </element>
      <element name="TTreeNodes.Insert.S">
        <short/>
      </element>

      <element name="TTreeNodes.InsertBehind">
        <short>
          Inserts a new node with the specified text just after the specified node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.InsertBehind.Result">
        <short/>
      </element>
      <element name="TTreeNodes.InsertBehind.PrevNode">
        <short/>
      </element>
      <element name="TTreeNodes.InsertBehind.S">
        <short/>
      </element>

      <element name="TTreeNodes.InsertObject">
        <short>
          <var>InsertObject</var> - inserts a new node with specified text and data just before the specified Next node and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.InsertObject.Result">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObject.NextNode">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObject.S">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObject.Data">
        <short/>
      </element>

      <element name="TTreeNodes.InsertObjectBehind">
        <short>
          <var>InsertObjectBehind</var> - inserts a new node with specified text and data-pointer just behind specified Previous node and returns the new node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.Result">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.PrevNode">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.S">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.Data">
        <short/>
      </element>

      <element name="TTreeNodes.IsMultiSelection">
        <short>
          True if the node is part of a multi-selection in the internal selection list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.IsMultiSelection.Result">
        <short>
          True if the node is part of a multi-selection in the internal selection list.
        </short>
      </element>

      <element name="TTreeNodes.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies properties directly, otherwise calls inherited <var>Assign</var> which probably raises an exception.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TTreeNodes.Assign.Source">
        <short/>
      </element>

      <element name="TTreeNodes.BeginUpdate">
        <short>
          Starts an update process for the tree nodes in the container.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Clear">
        <short>
          Removes tree nodes in the container and its internal cache.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.ClearMultiSelection">
        <short>
          <var>ClearMultiSelection</var> - clears a series of nodes in a multi-selection (provided the selection has not already been cleared).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - makes sure all references to and from the nodes are consistent.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Delete">
        <short>
          Removes the specified tree node from the container.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.Delete.Node">
        <short>Tree node deleted in the method.</short>
      </element>

      <element name="TTreeNodes.EndUpdate">
        <short>
          Finishes an update process for the tree nodes in the container.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.FreeAllNodeData">
        <short>
          Frees the pointer in the Data property for all nodes in the container.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.SelectionsChanged">
        <short>
          Adds or removes the specified tree node to / from the internal selections list when its Selected property is changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.SelectionsChanged.ANode">
        <short>Tree node added to or removed from the selections list.</short>
      </element>
      <element name="TTreeNodes.SelectionsChanged.AIsSelected">
        <short>
          True to add the node, False to remove the node in the selection list.
        </short>
      </element>

      <element name="TTreeNodes.SelectOnlyThis">
        <short>
          Clears any existing multi-selections and selects the specified node.
        </short>
        <descr/>
      </element>
      <element name="TTreeNodes.SelectOnlyThis.Node">
        <short>Node selected in the method.</short>
      </element>

      <element name="TTreeNodes.MultiSelect">
        <short>
          Adds nodes relative the specified node to the multi-selection list.
        </short>
        <descr>
          <p>
            <var>MultiSelect</var> is a method used add nodes to the internal selection list relative to the node specified in <var>Node</var>. MultiSelect uses values in the <var>MultiSelectStyle</var> property for the tree view control in <var>Owner</var> to determine the nodes added. Specifically:
          </p>
          <dl>
            <dt>msSiblingOnly</dt>
            <dd>
              When present, only sibling nodes are selected for the specified node. When omitted, child nodes are added to the multi-selection.
            </dd>
            <dt>msVisibleOnly</dt>
            <dd>
              When present, only visible nodes are included in the multi-selection. When omitted, all nodes are eligible regardless of their visibility.
            </dd>
          </dl>
          <p>
            <var>ClearWholeSelection</var> indicates whether all existing nodes in the multi-selection are cleared before added new node(s) to the selection list. When set to <b>True</b>, the <var>ClearMultiSelection</var> method is called. Otherwise, the last node in the selection list is removed.
          </p>
          <p>
            Nodes in the internal selection list are visited to set their <var>MultiSelected</var> property to <b>True</b>. Members used to track the first and last nodes in the multi-selection are updated prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodes.ClearMultiSelection"/>
          <link id="TTreeNodes.Owner"/>
          <link id="TTreeNode.MultiSelected"/>
          <link id="TCustomTreeView.MultiSelectStyle"/>
          <link id="TMultiSelectStyle"/>
        </seealso>
      </element>
      <element name="TTreeNodes.MultiSelect.Node">
        <short>Tree node with the child or sibling nodes added to the selection list.</short>
      </element>
      <element name="TTreeNodes.MultiSelect.ClearWholeSelection">
        <short>
          True to remove all existing nodes in the selection list, False to remove the most recent node.
        </short>
      </element>

      <element name="TTreeNodes.SortTopLevelNodes">
        <short>
          Sorts the top-level nodes using the specified sorting procedure.
        </short>
      </element>
      <element name="TTreeNodes.SortTopLevelNodes.SortProc">
        <short/>
      </element>

      <element name="TTreeNodes.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - for debugging.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.WriteDebugReport.Prefix">
        <short/>
      </element>
      <element name="TTreeNodes.WriteDebugReport.AllNodes">
        <short/>
      </element>

      <element name="TTreeNodes.Count">
        <short>
          Contains the number of nodes in the container.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Item">
        <short>
          Provides indexed access to the TTreeNode instances in the container.
        </short>
      </element>
      <element name="TTreeNodes.Item.Index">
        <short>Ordinal position for the TTreeNode instance in the property value.</short>
      </element>

      <element name="TTreeNodes.KeepCollapsedNodes">
        <short>
          <var>KeepCollapsedNodes</var> - if True, preserves the nodes that have been collapsed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Owner">
        <short>
          The TCustomTreeView control that is the owner of the container.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.SelectionCount">
        <short>Number of tree nodes included in the internal selection list.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.TopLvlCount">
        <short>
          The number of tree nodes at the top level of the tree structure.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.TopLvlItems">
        <short>
          Provides indexed access to tree nodes at the top level of the tree structure.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.TopLvlItems.Index">
        <short>Ordinal position for the TTreeNode instance in the property value.</short>
      </element>

      <element name="TTreeViewState">
        <short>
          <var>TTreeViewState</var> - enumerated type containing the permissible values for state of a <var>TTreeView</var>.
        </short>
        <descr>
          <p>
            <var>TTreeViewState</var> is an enumerated type containing the permissible state values for <var>TCustomTreeView</var> and <var>TTreeView</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeViewState.tvsScrollbarChanged">
        <short>
          Scroll bar visibility or position has been changed in the control.
        </short>
      </element>
      <element name="TTreeViewState.tvsMaxRightNeedsUpdate">
        <short>
          The maximum width for expanded nodes needs to be recalculated.
        </short>
      </element>
      <element name="TTreeViewState.tvsTopsNeedsUpdate">
        <short>
          The top coordinate for visible, expanded nodes needs to be recalculated.
        </short>
      </element>
      <element name="TTreeViewState.tvsMaxLvlNeedsUpdate">
        <short>The maximum level for all nodes needs to be recalculated.</short>
      </element>
      <element name="TTreeViewState.tvsTopItemNeedsUpdate">
        <short>The first visible node on the control has changed.</short>
      </element>
      <element name="TTreeViewState.tvsBottomItemNeedsUpdate">
        <short>The last visible node on the control has changed.</short>
      </element>
      <element name="TTreeViewState.tvsCanvasChanged">
        <short>The canvas for the control has been changed.</short>
      </element>
      <element name="TTreeViewState.tvsDragged">
        <short>A node has been dragged to a new location in the tree.</short>
      </element>
      <element name="TTreeViewState.tvsIsEditing">
        <short>The BeginEditing method has been called for the control.</short>
      </element>
      <element name="TTreeViewState.tvsStateChanging">
        <short>Values in the States property for the control have been changed.</short>
      </element>
      <element name="TTreeViewState.tvsManualNotify">
        <short>A tree node has been expanded or collapsed using code.</short>
      </element>
      <element name="TTreeViewState.tvsUpdating">
        <short>This tree view state is deprecated, and has no functionality after r64855.</short>
      </element>
      <element name="TTreeViewState.tvsPainting">
        <short>The control has called it Paint method.</short>
      </element>
      <element name="TTreeViewState.tvoFocusedPainting">
        <short>Node is drawn with a selection rectangle and focus highlighting.</short>
        <notes>
          <note>
            Uses the wrong prefix (tvo instead of tvs). Deprecate and add tvsFocusedPainting. Requires changes in treeview.inc to include both state values until removed.
          </note>
        </notes>
      </element>
      <element name="TTreeViewState.tvsFocusedPainting">
        <short>Node is drawn with a selection rectangle and focus highlighting.</short>
      </element>
      <element name="TTreeViewState.tvsMouseCapture">
        <short>Not used in the current LCL implementation.</short>
      </element>
      <element name="TTreeViewState.tvsWaitForDragging">
        <short>A Drag operation and its timer has been started.</short>
      </element>
      <element name="TTreeViewState.tvsDblClicked">
        <short>A mouse double click event has been handled for the control.</short>
      </element>
      <element name="TTreeViewState.tvsTripleClicked">
        <short>A mouse triple click event has been handled for the control.</short>
      </element>
      <element name="TTreeViewState.tvsQuadClicked">
        <short>A mouse quadruple click event has been handled for the control.</short>
      </element>
      <element name="TTreeViewState.tvsSelectionChanged">
        <short>The selected node(s) have been changed in the control.</short>
      </element>

      <element name="TTreeViewStates">
        <short>
          Set type used to store values from the TTreeViewState enumeration.
        </short>
        <descr>
          TTreeViewStates is a set type used to store zero or more values from the TTreeViewState enumeration. TTreeViewStates is the type used for the States property in TCustomTreeView.
        </descr>
        <seealso>
          <link id="TCustomTreeView.States"/>
          <link id="TTreeViewState"/>
        </seealso>
      </element>

      <element name="TTreeViewOption">
        <short>
          <var>TTreeViewOption</var> - enumerated type containing the permissible values for Options in TreeViews.
        </short>
        <descr>
          <p>
            <var>TTreeViewOption</var> - enumerated type containing the permissible values for Options in TreeViews.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeViewOption.tvoAllowMultiselect">
        <short>
          Allows selection of several tree-items, e.g. using Ctrl+click and Shift+click. Has the same affect as setting the MultiSelect property to True.
        </short>
      </element>
      <element name="TTreeViewOption.tvoAutoExpand">
        <short>
          Automatically expands child nodes for a tree-item when user clicks it, or the item is activated by code. Has the same affect as setting the AutoExpand property to True.
        </short>
      </element>
      <element name="TTreeViewOption.tvoAutoInsertMark">
        <short>
          Allows painting a horizontal line below a tree-item under cursor when mouse moves. Good for drag-drop.
        </short>
      </element>
      <element name="TTreeViewOption.tvoAutoItemHeight">
        <short>Detect height of a tree-item based on current font and icons.</short>
      </element>
      <element name="TTreeViewOption.tvoHideSelection">
        <short>
          If a control looses focus, then don't paint selection for selected tree-item. Same as HideSelection property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoHotTrack">
        <short>Additionally highlight/underline a tree-item when mouse is over it. Same as HotTrack property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoKeepCollapsedNodes">
        <short>
          When some items change, keep previously folded tree-items in folded state.
        </short>
      </element>
      <element name="TTreeViewOption.tvoReadOnly">
        <short>
          Don't allow to change item captions by clicking on items with a delay. Same as ReadOnly property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoRightClickSelect">
        <short>
          Right-click also selects a tree-item. Otherwise it only calls PopupMenu. Same as RightClickSelect property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoRowSelect">
        <short>
          When a tree-item is selected, paint selection background with full width. Same as RowSelect property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowButtons">
        <short>
          Show expand/collapse (fold/unfold) icons at left side for nodes with sub-nodes. Same as ShowButtons property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowLines">
        <short>
          Show vertical lines at left side which paint tree structure for nested nodes. Same as ShowLines property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowRoot">
        <short>
          Show the root tree-item which is always present in code but may be hidden for user. Same as ShowRoot property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowSeparators">
        <short>Show horizontal lines below all tree-items.</short>
      </element>
      <element name="TTreeViewOption.tvoToolTips">
        <short>
          Show tooltip (hint) for a tree-item when the item is too long to fit by width and mouse is over it. Same as ToolTips property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoNoDoubleClickExpand">
        <short>Prevents toggling the expanded state for the tree view item when it is double clicked.</short>
      </element>
      <element name="TTreeViewOption.tvoThemedDraw">
        <short>Tree view item is drawn using settings from theme services.</short>
      </element>
      <element name="TTreeViewOption.tvoEmptySpaceUnselect">
        <short>Indicates if empty space can be be drawn below unselected items in the tree view.</short>
      </element>

      <element name="TTreeViewOptions">
        <short>
          Set type used to store values from the TTreeViewOption enumeration.
        </short>
        <descr>
          <p>
            <var>TTreeViewOptions</var> is a set type used to store zero (0) or more values from the TTreeViewOption enumeration. Values included in the set indicate that a  feature or behavior is enabled for a tree view control.
          </p>
          <p>
            TTreeViewOptions is the type used for the <var>TCustomTreeView.Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Options"/>
        </seealso>
      </element>

      <element name="DefaultTreeViewOptions">
        <short>A set of TreeViewOptions which are set be default.</short>
        <descr>
          <p>
            A set of default values used to set the options of a TreeView object when first placed on a form. This set consists of the following items:
          </p>
          <ul>
            <li>tvoShowRoot</li>
            <li>tvoShowLines</li>
            <li>tvoShowButtons</li>
            <li>tvoHideSelection</li>
            <li>tvoToolTips</li>
            <li>tvoKeepCollapsedNodes</li>
            <li>tvoAutoItemHeight</li>
          </ul>
          <p>
            For the meaning of these options, see the <var>TTreeViewOption</var> documentation.
          </p>
        </descr>
        <seealso>
          <link id="TTreeViewOption"/>
          <link id="TTreeViewOptions"/>
          <link id="TCustomTreeView.Options"/>
        </seealso>
      </element>

      <element name="DefaultMultiSelectStyle">
        <short>
          Default value(s) used for the MultiSelectStyle property in TCustomTreeView.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.MultiSelectStyle"/>
        </seealso>
      </element>

      <element name="DefaultTreeNodeHeight">
        <short>Default value used as the height for a TTreeNode instance.</short>
        <descr/>
        <seealso>
          <link id="TTreeNode.Height"/>
        </seealso>
      </element>

      <element name="DefaultTreeNodeExpandSignSize">
        <short>Default size used for expand and collapse indicators in TCustomTreeView.</short>
        <descr>
          <p>
            DefaultTreeNodeExpandSignSize contains thew default value used in the TCustomTreeView.ExpandSignSize property. The value may be scaled at run-time in TCustomTreeView if the PPI (Pixels Per Inch) setting in the control differs from the value used at design-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.ExpandSignSize"/>
        </seealso>
      </element>

      <element name="TTreeViewExpandSignType">
        <short>
          Represents symbols types used for expanded or collapsed tree nodes.
        </short>
        <descr>
          <p>
            <var>TTreeViewExpandSignType</var> is an enumerated type which specifies the symbol displayed in a Treeview to denote the expanded or collapsed state for a given tree node. TTreeViewExpandSignType is the type used to implement the <var>TCustomTreeView.ExpandSignType</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.ExpandSignType"/>
        </seealso>
      </element>
      <element name="TTreeViewExpandSignType.tvestTheme">
        <short>Uses the mechanism provided by Theme Services.</short>
      </element>
      <element name="TTreeViewExpandSignType.tvestPlusMinus">
        <short>Uses a Plus or Minus sign.</short>
      </element>
      <element name="TTreeViewExpandSignType.tvestArrow">
        <short>Uses an unfilled Arrow.</short>
      </element>
      <element name="TTreeViewExpandSignType.tvestArrowFill">
        <short>Uses a filled Arrow.</short>
      </element>

      <element name="TTreeViewInsertMarkType">
        <short>Represents insert mark locations used in TCustomTreeView.</short>
        <descr>
          <p>
            <var>TTreeViewInsertMarkType</var> is an enumerated type with values representing insert mark locations used for nodes in the <var>TCustomTreeView</var> control. TTreeViewInsertMarkType is the type used to implement the <var>InsertMarkType</var> property in TCustomTreeView.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.InsertMarkType"/>
        </seealso>
      </element>
      <element name="TTreeViewInsertMarkType.tvimNone">
        <short>No insert mark is used in a tree view.</short>
      </element>
      <element name="TTreeViewInsertMarkType.tvimAsFirstChild">
        <short>Uses an insert mark for the root or first child node in a tree view.</short>
      </element>
      <element name="TTreeViewInsertMarkType.tvimAsNextSibling">
        <short/>
      </element>
      <element name="TTreeViewInsertMarkType.tvimAsPrevSibling">
        <short/>
      </element>

      <element name="TCustomTreeView">
        <short>
          Ancestor class for <var>TTreeView</var>.
        </short>
        <descr>
          <p>
            <var>TCustomTreeView</var> - ancestor class for <var>TTreeView</var>, which displays a collection of items in a hierarchical tree form. This class defines many properties which are inherited by descendent classes, including loading the data from files or streams, saving to files or streams, updating, sorting alphabetically, editing, making visible or invisible, expanding or collapsing the tree display, and many more.
          </p>
          <p>
            Please note that Accessibility support in TCustomTreeView might make this control slower if there are a very large number of items, for example: 10,000+ items. If the performance impact is unacceptable, it is possible to turn accessibility off for tree view items by setting the <var>AccessibilityOn</var> property to <b>False</b>. The default value is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TTreeView"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.FAccessibilityOn"/>
      <element name="TCustomTreeView.FBottomItem"/>
      <element name="TCustomTreeView.FCallingChange"/>
      <element name="TCustomTreeView.FEditingItem"/>
      <element name="TCustomTreeView.FExpandSignType"/>
      <element name="TCustomTreeView.FExpandSignSize"/>
      <element name="TCustomTreeView.FThemeExpandSignSize"/>
      <element name="TCustomTreeView.FDefItemHeight"/>
      <element name="TCustomTreeView.FDefItemSpace"/>
      <element name="TCustomTreeView.FDragImage"/>
      <element name="TCustomTreeView.FDragNode"/>
      <element name="TCustomTreeView.FIndent"/>
      <element name="TCustomTreeView.FImageChangeLink"/>
      <element name="TCustomTreeView.FImages"/>
      <element name="TCustomTreeView.FImagesWidth"/>
      <element name="TCustomTreeView.FInsertMarkNode"/>
      <element name="TCustomTreeView.FInsertMarkType"/>
      <element name="TCustomTreeView.FLastDropTarget"/>
      <element name="TCustomTreeView.FLastHorzScrollInfo"/>
      <element name="TCustomTreeView.FLastVertScrollInfo"/>
      <element name="TCustomTreeView.FMaxLvl"/>
      <element name="TCustomTreeView.FMaxRight"/>
      <element name="TCustomTreeView.FMouseDownPos"/>
      <element name="TCustomTreeView.FMultiSelectStyle"/>
      <element name="TCustomTreeView.FHotTrackColor"/>
      <element name="TCustomTreeView.FDisabledFontColor"/>
      <element name="TCustomTreeView.FOnAddition"/>
      <element name="TCustomTreeView.FOnAdvancedCustomDraw"/>
      <element name="TCustomTreeView.FOnAdvancedCustomDrawItem"/>
      <element name="TCustomTreeView.FOnChange"/>
      <element name="TCustomTreeView.FOnChanging"/>
      <element name="TCustomTreeView.FOnCollapsed"/>
      <element name="TCustomTreeView.FOnCollapsing"/>
      <element name="TCustomTreeView.FOnCompare"/>
      <element name="TCustomTreeView.FOnCreateNodeClass"/>
      <element name="TCustomTreeView.FOnCustomCreateItem"/>
      <element name="TCustomTreeView.FOnCustomDraw"/>
      <element name="TCustomTreeView.FOnCustomDrawItem"/>
      <element name="TCustomTreeView.FOnCustomDrawArrow"/>
      <element name="TCustomTreeView.FOnDeletion"/>
      <element name="TCustomTreeView.FOnEditing"/>
      <element name="TCustomTreeView.FOnEditingEnd"/>
      <element name="TCustomTreeView.FOnEdited"/>
      <element name="TCustomTreeView.FOnExpanded"/>
      <element name="TCustomTreeView.FOnExpanding"/>
      <element name="TCustomTreeView.FOnGetImageIndex"/>
      <element name="TCustomTreeView.FOnGetSelectedIndex"/>
      <element name="TCustomTreeView.FOnHasChildren"/>
      <element name="TCustomTreeView.FOnNodeChanged"/>
      <element name="TCustomTreeView.FOnSelectionChanged"/>
      <element name="TCustomTreeView.FOptions"/>
      <element name="TCustomTreeView.FRClickNode"/>
      <element name="TCustomTreeView.FSaveItems"/>
      <element name="TCustomTreeView.FScrollBars"/>
      <element name="TCustomTreeView.FScrolledLeft"/>
      <element name="TCustomTreeView.FScrolledTop"/>
      <element name="TCustomTreeView.FSBHorzShowing"/>
      <element name="TCustomTreeView.FSBVertShowing"/>
      <element name="TCustomTreeView.FSelectedColor"/>
      <element name="TCustomTreeView.FSelectedFontColor"/>
      <element name="TCustomTreeView.FSelectedFontColorUsed"/>
      <element name="TCustomTreeView.FSelectedNode"/>
      <element name="TCustomTreeView.FSelectionChangeEventLock"/>
      <element name="TCustomTreeView.FSeparatorColor"/>
      <element name="TCustomTreeView.FSortType"/>
      <element name="TCustomTreeView.FStateChangeLink"/>
      <element name="TCustomTreeView.FStateImages"/>
      <element name="TCustomTreeView.FStateImagesWidth"/>
      <element name="TCustomTreeView.FStates"/>
      <element name="TCustomTreeView.FTopItem"/>
      <element name="TCustomTreeView.FTreeLineColor"/>
      <element name="TCustomTreeView.FTreeLinePenStyle"/>
      <element name="TCustomTreeView.FTreeLinePenPattern"/>
      <element name="TCustomTreeView.FExpandSignColor"/>
      <element name="TCustomTreeView.FTreeNodes"/>
      <element name="TCustomTreeView.FHintWnd"/>
      <element name="TCustomTreeView.FNodeUnderCursor"/>
      <element name="TCustomTreeView.FPrevToolTips"/>
      <element name="TCustomTreeView.FDragScrollMargin"/>
      <element name="TCustomTreeView.FDragScrollTimer"/>

      <element name="TCustomTreeView.DragScrollTimerTick">
        <short>Implements the OnTimer event handler for the internal Drag/Scroll timer.</short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.Create"/>
          <link id="#lcl.extctrls.TTimer.OnTimer">TTimer.OnTimer</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.DragScrollTimerTick.Sender">
        <short>Timer object for the event notification.</short>
      </element>

      <element name="TCustomTreeView.CanvasChanged">
        <short>Performs actions needed when the control Canvas has been changed.</short>
        <descr>
          <p>
            Updates the <var>States</var> property to include the value <var>tvsCanvasChanged</var>.
          </p>
          <remark>
            CanvasChanged is not used in the current LCL implementation.
          </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanvasChanged.Sender">
        <short/>
      </element>

      <element name="TCustomTreeView.GetAutoExpand">
        <short>Gets the value for the AutoExpand property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.AutoExpand"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.GetAutoExpand.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTreeView.GetBackgroundColor">
        <short>Gets the value for the BackgroundColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.BackgroundColor"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.GetBackgroundColor.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTreeView.GetBottomItem">
        <short>Gets the value for the BottomItem property.</short>
      </element>
      <element name="TCustomTreeView.GetBottomItem.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomTreeView.GetDropTarget">
        <short>Gets the value for the DropTarget property.</short>
      </element>
      <element name="TCustomTreeView.GetDropTarget.Result">
        <short>Value for the property.</short>
      </element>

      <!-- private -->
      <element name="TCustomTreeView.GetExpandSignSize"/>
      <element name="TCustomTreeView.GetExpandSignSize.Result"/>
      <element name="TCustomTreeView.GetHideSelection"/>
      <element name="TCustomTreeView.GetHideSelection.Result"/>
      <element name="TCustomTreeView.GetHotTrack"/>
      <element name="TCustomTreeView.GetHotTrack.Result"/>
      <element name="TCustomTreeView.GetIndent"/>
      <element name="TCustomTreeView.GetIndent.Result"/>
      <element name="TCustomTreeView.GetKeepCollapsedNodes"/>
      <element name="TCustomTreeView.GetKeepCollapsedNodes.Result"/>
      <element name="TCustomTreeView.GetMultiSelect"/>
      <element name="TCustomTreeView.GetMultiSelect.Result"/>
      <element name="TCustomTreeView.GetReadOnly"/>
      <element name="TCustomTreeView.GetReadOnly.Result"/>
      <element name="TCustomTreeView.GetRightClickSelect"/>
      <element name="TCustomTreeView.GetRightClickSelect.Result"/>
      <element name="TCustomTreeView.GetRowSelect"/>
      <element name="TCustomTreeView.GetRowSelect.Result"/>
      <element name="TCustomTreeView.GetSelection"/>
      <element name="TCustomTreeView.GetSelection.Result"/>
      <element name="TCustomTreeView.GetSelectionCount"/>
      <element name="TCustomTreeView.GetSelectionCount.Result"/>
      <element name="TCustomTreeView.GetSelections"/>
      <element name="TCustomTreeView.GetSelections.Result"/>
      <element name="TCustomTreeView.GetSelections.AIndex"/>
      <element name="TCustomTreeView.GetShowButtons"/>
      <element name="TCustomTreeView.GetShowButtons.Result"/>
      <element name="TCustomTreeView.GetShowLines"/>
      <element name="TCustomTreeView.GetShowLines.Result"/>
      <element name="TCustomTreeView.GetShowRoot"/>
      <element name="TCustomTreeView.GetShowRoot.Result"/>
      <element name="TCustomTreeView.GetShowSeparators"/>
      <element name="TCustomTreeView.GetShowSeparators.Result"/>
      <element name="TCustomTreeView.GetToolTips"/>
      <element name="TCustomTreeView.GetToolTips.Result"/>
      <element name="TCustomTreeView.GetTopItem"/>
      <element name="TCustomTreeView.GetTopItem.Result"/>
      <element name="TCustomTreeView.IsStoredBackgroundColor"/>
      <element name="TCustomTreeView.IsStoredBackgroundColor.Result"/>
      <element name="TCustomTreeView.HintMouseLeave"/>
      <element name="TCustomTreeView.HintMouseLeave.Sender"/>
      <element name="TCustomTreeView.ImageListChange"/>
      <element name="TCustomTreeView.ImageListChange.Sender"/>
      <element name="TCustomTreeView.NodeIsSelected"/>
      <element name="TCustomTreeView.NodeIsSelected.Result"/>
      <element name="TCustomTreeView.NodeIsSelected.ANode"/>
      <element name="TCustomTreeView.OnChangeTimer"/>
      <element name="TCustomTreeView.OnChangeTimer.Sender"/>
      <element name="TCustomTreeView.SetAutoExpand"/>
      <element name="TCustomTreeView.SetAutoExpand.Value"/>
      <element name="TCustomTreeView.SetBackgroundColor"/>
      <element name="TCustomTreeView.SetBackgroundColor.Value"/>
      <element name="TCustomTreeView.SetBottomItem"/>
      <element name="TCustomTreeView.SetBottomItem.Value"/>
      <element name="TCustomTreeView.SetDefaultItemHeight"/>
      <element name="TCustomTreeView.SetDefaultItemHeight.Value"/>
      <element name="TCustomTreeView.SetExpandSignType"/>
      <element name="TCustomTreeView.SetExpandSignType.Value"/>
      <element name="TCustomTreeView.SetDropTarget"/>
      <element name="TCustomTreeView.SetDropTarget.Value"/>
      <element name="TCustomTreeView.SetHideSelection"/>
      <element name="TCustomTreeView.SetHideSelection.Value"/>
      <element name="TCustomTreeView.SetHotTrack"/>
      <element name="TCustomTreeView.SetHotTrack.Value"/>
      <element name="TCustomTreeView.SetIndent"/>
      <element name="TCustomTreeView.SetIndent.Value"/>
      <element name="TCustomTreeView.SetImages"/>
      <element name="TCustomTreeView.SetImages.Value"/>
      <element name="TCustomTreeView.SetImagesWidth"/>
      <element name="TCustomTreeView.SetImagesWidth.AImagesWidth"/>
      <element name="TCustomTreeView.SetInsertMarkNode"/>
      <element name="TCustomTreeView.SetInsertMarkNode.AValue"/>
      <element name="TCustomTreeView.SetInsertMarkType"/>
      <element name="TCustomTreeView.SetInsertMarkType.AValue"/>
      <element name="TCustomTreeView.SetKeepCollapsedNodes"/>
      <element name="TCustomTreeView.SetKeepCollapsedNodes.Value"/>
      <element name="TCustomTreeView.SetMultiSelect"/>
      <element name="TCustomTreeView.SetMultiSelect.AValue"/>
      <element name="TCustomTreeView.SetMultiSelectStyle"/>
      <element name="TCustomTreeView.SetMultiSelectStyle.AValue"/>
      <element name="TCustomTreeView.SetReadOnly"/>
      <element name="TCustomTreeView.SetReadOnly.Value"/>
      <element name="TCustomTreeView.SetRightClickSelect"/>
      <element name="TCustomTreeView.SetRightClickSelect.Value"/>
      <element name="TCustomTreeView.SetRowSelect"/>
      <element name="TCustomTreeView.SetRowSelect.Value"/>
      <element name="TCustomTreeView.SetScrollBars"/>
      <element name="TCustomTreeView.SetScrollBars.Value"/>
      <element name="TCustomTreeView.SetScrolledLeft"/>
      <element name="TCustomTreeView.SetScrolledLeft.AValue"/>
      <element name="TCustomTreeView.SetScrolledTop"/>
      <element name="TCustomTreeView.SetScrolledTop.AValue"/>
      <element name="TCustomTreeView.SetSelectedColor"/>
      <element name="TCustomTreeView.SetSelectedColor.Value"/>
      <element name="TCustomTreeView.SetSelectedFontColor"/>
      <element name="TCustomTreeView.SetSelectedFontColor.Value"/>
      <element name="TCustomTreeView.SetSelection"/>
      <element name="TCustomTreeView.SetSelection.Value"/>
      <element name="TCustomTreeView.SetSeparatorColor"/>
      <element name="TCustomTreeView.SetSeparatorColor.AValue"/>
      <element name="TCustomTreeView.SetShowButton"/>
      <element name="TCustomTreeView.SetShowButton.Value"/>
      <element name="TCustomTreeView.SetShowLines"/>
      <element name="TCustomTreeView.SetShowLines.Value"/>
      <element name="TCustomTreeView.SetShowRoot"/>
      <element name="TCustomTreeView.SetShowRoot.Value"/>
      <element name="TCustomTreeView.SetShowScrollbar"/>
      <element name="TCustomTreeView.SetShowScrollbar.Which"/>
      <element name="TCustomTreeView.SetShowScrollbar.AShow"/>
      <element name="TCustomTreeView.SetShowSeparators"/>
      <element name="TCustomTreeView.SetShowSeparators.Value"/>
      <element name="TCustomTreeView.SetSortType"/>
      <element name="TCustomTreeView.SetSortType.Value"/>
      <element name="TCustomTreeView.SetStateImages"/>
      <element name="TCustomTreeView.SetStateImages.Value"/>
      <element name="TCustomTreeView.SetStateImagesWidth"/>
      <element name="TCustomTreeView.SetStateImagesWidth.AStateImagesWidth"/>
      <element name="TCustomTreeView.SetToolTips"/>
      <element name="TCustomTreeView.SetToolTips.Value"/>
      <element name="TCustomTreeView.SetTreeLineColor"/>
      <element name="TCustomTreeView.SetTreeLineColor.Value"/>
      <element name="TCustomTreeView.SetTreeNodes"/>
      <element name="TCustomTreeView.SetTreeNodes.Value"/>
      <element name="TCustomTreeView.SetTopItem"/>
      <element name="TCustomTreeView.SetTopItem.Value"/>
      <element name="TCustomTreeView.UpdateAllTops"/>
      <element name="TCustomTreeView.UpdateBottomItem"/>
      <element name="TCustomTreeView.UpdateHotTrack"/>
      <element name="TCustomTreeView.UpdateHotTrack.X"/>
      <element name="TCustomTreeView.UpdateHotTrack.Y"/>
      <element name="TCustomTreeView.UpdateMaxLvl"/>
      <element name="TCustomTreeView.UpdateMaxRight"/>
      <element name="TCustomTreeView.UpdateTopItem"/>
      <element name="TCustomTreeView.UpdateScrollbars"/>
      <element name="TCustomTreeView.UpdateTooltip"/>
      <element name="TCustomTreeView.UpdateTooltip.X"/>
      <element name="TCustomTreeView.UpdateTooltip.Y"/>
      <element name="TCustomTreeView.InternalSelectionChanged"/>
      <element name="TCustomTreeView.AllowMultiSelectWithCtrl"/>
      <element name="TCustomTreeView.AllowMultiSelectWithCtrl.Result"/>
      <element name="TCustomTreeView.AllowMultiSelectWithCtrl.AState"/>
      <element name="TCustomTreeView.AllowMultiSelectWithShift"/>
      <element name="TCustomTreeView.AllowMultiSelectWithShift.Result"/>
      <element name="TCustomTreeView.AllowMultiSelectWithShift.AState"/>
      <element name="TCustomTreeView.SetExpandSignSize"/>
      <element name="TCustomTreeView.SetExpandSignSize.AExpandSignSize"/>

      <!-- protected -->
      <element name="TCustomTreeView.FChangeTimer">
        <short>Member with the OnChange timer for the control.</short>
      </element>

      <element name="TCustomTreeView.FEditor">
        <short>TEdit used as the editor in the tree view control.</short>
      </element>

      <element name="TCustomTreeView.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomTreeView.GetControlClassDefaultSize">
        <short>Gets the default dimensions used for new instances of the class.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetControlClassDefaultSize.Result">
        <short>Size for the new control instance.</short>
      </element>

      <element name="TCustomTreeView.Added">
        <short>
          Performs actions needed when the specified tree node is added to Items.
        </short>
        <descr>
          <p>
            Signals the OnAddition event handler (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Added.Node">
        <short>Tree nodes added to the Items for the control.</short>
      </element>

      <element name="TCustomTreeView.EditorEditingDone">
        <short>Implements the OnEditingDone event handler for the Editor in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.EditorEditingDone.Sender">
        <short>Object for the event notification.</short>
      </element>

      <element name="TCustomTreeView.EditorKeyDown">
        <short>Implements the OnKeyDown event handler for the Editor in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.EditorKeyDown.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TCustomTreeView.EditorKeyDown.Key">
        <short>Virtual key code for the notification.</short>
      </element>
      <element name="TCustomTreeView.EditorKeyDown.Shift">
        <short>Shift, Ctrl, or Alt modifier for the key down event.</short>
      </element>

      <element name="TCustomTreeView.BeginAutoDrag" link="#lcl.controls.TControl.BeginAutoDrag"/>

      <element name="TCustomTreeView.BeginEditing">
        <short>Prepares the control to edit the text for the specified tree node.</short>
        <descr>
          <p>
            No actions are performed in the method for any of the following conditions:
          </p>
          <ul>
            <li>ANode has not been assigned (contains Nil).</li>
            <li>ANode is not visible.</li>
            <li>BeginEditing has been called and EndEditing has not yet been called.</li>
            <li>CanEdit (and the OnEditing event handler) returns False.</li>
          </ul>
          <p>
            If a different node is being edited in the control, the EndEditing method is called.
          </p>
          <p>
            BeginEditing updates the States property to include the value tvsIsEditing.
          </p>
          <p>
            The TEdit control used as the Editor in the tree view is created (when needed), configured, and aligned to the display rectangle for the tree node. The value in the TTreeNode.Text property is assigned to the Editor, its content is selected, and the Editor is given focus.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.States"/>
          <link id="TCustomTreeView.EndEditing"/>
          <link id="TTreeNode.Text"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.BeginEditing.ANode">
        <short>Tree node with the text value for the Editor in the control.</short>
      </element>

      <element name="TCustomTreeView.DoDragMsg" link="Controls.TWinControl.DoDragMsg"/>
      <element name="TCustomTreeView.DoDragMsg.Result"/>
      <element name="TCustomTreeView.DoDragMsg.ADragMessage"/>
      <element name="TCustomTreeView.DoDragMsg.APosition"/>
      <element name="TCustomTreeView.DoDragMsg.ADragObject"/>
      <element name="TCustomTreeView.DoDragMsg.ATarget"/>
      <element name="TCustomTreeView.DoDragMsg.ADocking"/>

      <element name="TCustomTreeView.CanChange">
        <short>
          True if the specified tree node can be used in the Selected or Selections properties.
        </short>
        <descr>
          <p>
            Signals the <var>OnChanging</var> event handler (when assigned) to determine if a change is allowed for the specified tree node. Change entails using the tree node as the current Selected node, or including it in Selections when multi-select is enabled in the Options for the control.
          </p>
          <p>
            The return value is updated in the event handler, and can be set to <b>True</b> to allow a change to the tree node. The return value is always <b>True</b> if the OnChanging event handler has not been assigned.
          </p>
          <p>
            Use CanEdit to determine if the text for the tree node can edited in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.OnChanging"/>
          <link id="TCustomTreeView.OnChange"/>
          <link id="TCustomTreeView.CanEdit"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.CanChange.Result">
        <short>
          True if the specified tree node can be used in the Selected or Selections properties.
        </short>
      </element>
      <element name="TCustomTreeView.CanChange.Node">
        <short>Tree node examined in the method.</short>
      </element>

      <element name="TCustomTreeView.CanCollapse">
        <short>Returns True if a given TreeNode can be collapsed.</short>
        <descr>
          <p>
            <var>CanCollapse</var> is a <var>Boolean</var> function used to determine if the tree node in <var>Node</var> can be collapsed. CanCollapse signals the <var>OnCollapsing</var> event handler (when assigned) to determine if the tree node can be collapsed.
          </p>
          <p>
            The return value is updated in the event handler, and can be set to <b>True</b> when the node has child nodes and is currently expanded. The return value should be set to False if the node does not have any child nodes.
          </p>
          <p>
            The return value is always <b>True</b> if the OnCollapsing event handler has not been assigned, or when the component is being freed.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanCollapse.Result">
        <short>True if the specified node can be collapsed.</short>
      </element>
      <element name="TCustomTreeView.CanCollapse.Node">
        <short>Tree node examined in the method.</short>
      </element>

      <element name="TCustomTreeView.CanEdit">
        <short>Returns True if the specified tree node can be edited.</short>
        <descr>
          <p>
            <var>CanEdit</var> is a <var>Boolean</var> function used to determine if the tree node in <var>Node</var> can be edited. CanEdit signals the OnEditing event handler (when assigned) to determine if the TTreeNode instance can be modified.
          </p>
          <p>
            The return value is updated in the event handler, and can be set to True if the tree view control is not configured to be read-only and the tree node is eligible for modification. Use the Options property in the tree view control to check for the read-only setting. The return value is always True if the OnEditing event handler has not been assigned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanEdit.Result">
        <short>True if the specified tree node can modify its property values.</short>
      </element>
      <element name="TCustomTreeView.CanEdit.Node">
        <short>Tree node examined in the method.</short>
      </element>

      <element name="TCustomTreeView.CanExpand">
        <short>True if the specified tree node can be expanded.</short>
        <descr>
          <p>
            <var>CanExpand</var> is a <var>Boolean</var> function used to determine if the tree node specified in <var>Node</var> can be expanded. CanExpand signals the <var>OnExpanding</var> event handler (when assigned) to get  the return value for the method.
          </p>
          <p>
            The return value can be set to <b>True</b> when Node is visible and contains child nodes. The return value is always <b>True</b> if the OnExpanding event handler has not been assigned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanExpand.Result">
        <short>True if the specified node can be expanded.</short>
      </element>
      <element name="TCustomTreeView.CanExpand.Node">
        <short>Tree node examined in the method.</short>
      </element>

      <element name="TCustomTreeView.CreateNode">
        <short>
          <var>CreateNode</var> - creates a new node in a TreeView and returns its content.
        </short>
        <descr>
          <p>
            <var>CreateNode</var> is a <var>TTreeNode</var> function used to create a new tree node for the control. The <var>OnCustomCreateItem</var> event handler is signalled (when assigned) to create the class instance used as the return value. If the event handler has not been assigned, or returns a <b>Nil</b> value, the <var>TTreeNodeClass</var> class reference is used to create the tree node in the return value.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CreateNode.Result">
        <short>New tree node instance created in the method.</short>
      </element>

      <element name="TCustomTreeView.CreateNodes">
        <short>Creates a TTreeNodes container for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CreateNodes.Result">
        <short>TTreeNodes instance created in the method.</short>
      </element>

      <element name="TCustomTreeView.CustomDraw">
        <short>
          <var>CustomDraw</var> - returns True if Custom Drawing is proceeding in the specified Rectangle.
        </short>
        <descr>
          <p>
            <var>CustomDraw</var> - returns True if Custom Drawing is proceeding in the specified Rectangle.
          </p>
          <p>
            Stage indicates whether PrePaint, PostPaint, PreErase or PostErase.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.graphics.Progress">Progress</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.CustomDraw.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDraw.ARect">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDraw.Stage">
        <short/>
      </element>

      <element name="TCustomTreeView.CustomDrawItem">
        <short>
          <var>CustomDrawItem</var> - returns True if Custom Image drawing is proceeding at the specified TreeNode.
        </short>
        <descr>
          <p>
            <var>CustomDrawItem</var> - returns True if Custom Image drawing is proceeding at the specified TreeNode.
          </p>
          <p>
            State denotes one of <var>Selected, Grayed, Disabled, Checked, Focused, Default, Hot, Marked or Indeterminate</var>.
          </p>
          <p>Stage indicates whether PrePaint, PostPaint, PreErase or PostErase.</p>
          <p>If <var>PaintImages</var> is True, Images should be painted as well as text.</p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.Node">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.State">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.Stage">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.PaintImages">
        <short/>
      </element>

      <element name="TCustomTreeView.DefaultItemHeightIsStored">
        <short>Implements the storage specifier for the DefaultItemHeight property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DefaultItemHeightIsStored.Result">
        <short>True when tvoAutoItemHeight in not in the Options for the control.</short>
      </element>

      <element name="TCustomTreeView.DoAutoAdjustLayout">
        <short>Applies a layout adjustment policy using the specified scaling factors.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.DoAutoAdjustLayout.AMode">
        <short>Layout adjustment policy applied in the method.</short>
      </element>
      <element name="TCustomTreeView.DoAutoAdjustLayout.AXProportion">
        <short>Horizontal scaling factor for the layout policy.</short>
      </element>
      <element name="TCustomTreeView.DoAutoAdjustLayout.AYProportion">
        <short>Vertical scaling factor for the layout policy.</short>
      </element>

      <element name="TCustomTreeView.ExpandSignSizeIsStored">
        <short>Implements the storage specifier for the ExpandSignSize property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ExpandSignSizeIsStored.Result">
        <short>True when ExpandSignSize has a value other than the default (-1).</short>
      </element>

      <element name="TCustomTreeView.GetBuiltinIconSize">
        <short>Gets the default size for icons when Images has not been assigned.</short>
        <descr>
          <p>
            The <var>TSize</var> instance contains 0 (zero) in both the Width and Height members.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetBuiltinIconSize.Result">
        <short>TSize instance with the Width and Height for an icon.</short>
      </element>

      <element name="TCustomTreeView.GetDragImages">
        <short>Gets the image list with the Drag images for the control.</short>
        <descr>
          <p>
            <var>GetDragImages</var> is an overridden <var>TDragImageList</var> function used to get the image list with images displayed during drag and drop operations in the control. GetDragImages re-implements the method to use the TDragImageList member defined in the class instance (when assigned and not empty). Otherwise, <b>Nil</b> is returned from the method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.GetDragImages">TControl.GetDragImages</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.GetDragImages.Result">
        <short>Image list with drag and drop images for the control.</short>
      </element>

      <element name="TCustomTreeView.GetImageSize">
        <short>Gets a TSize instance with the dimensions for images in the control.</short>
        <descr>
          <p>
            <var>GetImageSize</var> is a <var>TSize</var> function used to get the dimensions for images displayed in the tree view control. The return value has <var>Width</var> and <var>Height</var> members with the image dimensions.
          </p>
          <p>
            When an image list has been assigned to the <var>Images</var> property, its <var>SizeForPPI</var> method is used to scale the value in <var>ImagesWidth</var> to the current display density in <var>Font</var>. When Images has not been assigned, the <var>GetBuiltinIconSize</var> method is called to get the return value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.GetBuiltinIconSize"/>
          <link id="TCustomTreeView.Images"/>
          <link id="TCustomTreeView.ImagesWidth"/>
          <link id="#lcl.controls.TControl.Font">TControl.Font</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.GetImageSize.Result">
        <short>TSize instance with the dimensions for images in the control.</short>
      </element>

      <element name="TCustomTreeView.GetMaxLvl">
        <short>
          <var>GetMaxLvl</var> - returns the maximum level of branching of the tree structure.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetMaxLvl.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetMaxScrollLeft">
        <short>
          <var>GetMaxScrollLeft</var> - returns maximal extent of scrolling to the left.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetMaxScrollLeft.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetMaxScrollTop">
        <short>
          <var>GetMaxScrollTop</var> - returns the maximal extent of scrolling upwards.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetMaxScrollTop.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeAtY">
        <short>
          Gets an expanded node at the specified vertical coordinate.
        </short>
        <descr>
         <p>
           Used in the implementation of the GetNodeAt, GetNodeWithExpandSignAt, GetInsertMarkAt, and GetHitTestInfoAt methods.
         </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeAtY.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeAtY.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeWithExpandSignAt">
        <short>Gets an expanded tree node for the specified screen coordinates.</short>
        <descr>
         <p>
             Used to implement the EnsureNodeIsVisible method.
         </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSignAt.Result">
        <short>The expanded tree node found at the vertical coordinate, or Nil when a node is not found.</short>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSignAt.X">
        <short>
         Horizontal coordinate used to detected the border, expand indicator, or display text for the tree node.
        </short>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSignAt.Y">
        <short>
         Vertical coordinate for the expanded node to locate in the node hierarchy.
        </short>
      </element>

      <element name="TCustomTreeView.GetNodeDrawAreaHeight">
        <short>Gets the height for the usable drawing area in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeDrawAreaHeight.Result">
        <short>Calculated usable client height after borders are removed.</short>
      </element>

      <element name="TCustomTreeView.GetNodeDrawAreaWidth">
        <short>Gets the width for the usable drawing area in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeDrawAreaWidth.Result">
        <short>Calculated usable client width after borders are removed.</short>
      </element>

      <element name="TCustomTreeView.IndentIsStored">
        <short>Implements the storage specifier for the Indent property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IndentIsStored.Result">
        <short>True when Indent has a value other than the default value (-1).</short>
      </element>

      <element name="TCustomTreeView.IsCustomDrawn">
        <short>
          <var>IsCustomDrawn</var> - returns True if the specified target is custom drawn.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.OnCustomDraw"/>
          <link id="TCustomTreeView.OnAdvancedCustomDraw"/>
          <link id="TCustomTreeView.OnCustomDrawItem"/>
          <link id="TCustomTreeView.OnAdvancedCustomDrawItem"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.IsCustomDrawn.Result">
        <short>
          True when event handlers have been assigned for the specified target and stage.
        </short>
      </element>
      <element name="TCustomTreeView.IsCustomDrawn.Target">
        <short>Drawing target examined in the method.</short>
      </element>
      <element name="TCustomTreeView.IsCustomDrawn.Stage">
        <short>Drawing stage  examined in the method.</short>
      </element>

      <element name="TCustomTreeView.IsNodeVisible">
        <short>
          Returns True if the specified tree node and its parent nodes are visible and expanded.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsNodeVisible.Result">
        <short>
          True if the specified tree node and its parent nodes are visible and expanded.
        </short>
      </element>
      <element name="TCustomTreeView.IsNodeVisible.ANode">
        <short>Tree node examined in the method.</short>
      </element>

      <element name="TCustomTreeView.IsNodeHeightFullVisible">
        <short>
          <var>IsNodeHeightFullVisible</var> - returns True if the full height of the specified node is visible in the current view.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsNodeHeightFullVisible.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.IsNodeHeightFullVisible.ANode">
        <short/>
      </element>

      <element name="TCustomTreeView.IsInsertMarkVisible">
        <short>
          <var>IsInsertMarkVisible</var> - returns True if an Insert mark is visible.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsInsertMarkVisible.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.MoveSelection">
        <short>Makes the specified node selected in the tree view control.</short>
        <descr>
          <p>
            <var>MoveSelection</var> is a method used to make the tree node in <var>ANewNode</var> a selected node in the tree view control. The actions performed depend on the multi-selection setting for the control. When <var>tvoAllowMultiSelect</var> has been included in the <var>Options</var> property, the node is included in <var>Selections</var> when <var>ASelect</var> is <b>True</b>.
          </p>
          <p>
            If multi-selection has not been enabled for the control, the value in ANewNode is assigned to the <var>Selected</var> property.
          </p>
          <p>
            The <var>MakeVisible</var> method in the <var>TTreeNode</var> instance is called to make the node visible, and the scroll bars for the control are updated.
          </p>
          <p>
            Used in the implementation of the <var>KeyDown</var> method. Used to implement methods like <var>MoveHome</var>, <var>MoveEnd</var>, <var>MovePageDown</var>, <var>MovePageUp</var>, <var>MoveToNextNode</var>, and <var>MoveToPrevNode</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveSelection.ANewNode">
        <short>Tree node to select in the control.</short>
      </element>
      <element name="TCustomTreeView.MoveSelection.ASelect">
        <short>
          True to include the tree node in Selections (when enabled), False to select only the specified node.
        </short>
      </element>

      <element name="TCustomTreeView.Change">
        <short>
          Performs actions needed when the selection in the control has been changed to include the specified tree node.
        </short>
        <descr>
          <p>
            Change is a method used to perform actions needed when the selection in the control has been changed. Node contains the tree node  that was used in the control selection. Change signals the OnChange event handler (when assigned).
          </p>
          <p>
            Change is called from the event handler used for the internal timer activated when a new selection is made and the control synchronizes the tree nodes to the visual display.
          </p>
          <p>
            Use the OnSelectionChange event handler for the notification that occurs before the node is included in the control selection.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Change.Node">
        <short>Tree node included in the selection for the control.</short>
      </element>

      <element name="TCustomTreeView.Collapse">
        <short>Performs actions needed when the specified tree node is collapsed.</short>
        <descr>
          <p>
            <var>Collapse</var> is a method used to perform actions needed when the tree node in <var>Node</var> is collapsed. Collapse updates the visibility and position for the scroll bars in the control. The <var>OnCollapsed</var> event handler is signalled (when assigned) for the tree node in Node.
          </p>
          <p>
            No actions are performed in the method when the component is being freed.
          </p>
          <p>
            Collapse is called when the Collapse method in the <var>TTreeNode</var> instance is called.
          </p>
          <p>
            See <var>Expand</var> for the actions performed when a tree node is expanded.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Expand"/>
          <link id="TTreeNode.Expanded"/>
          <link id="TTreeNode.Collapse"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.Collapse.Node">
        <short>Tree node collapsed in the control.</short>
      </element>

      <element name="TCustomTreeView.CreateWnd">
        <short>Performs actions needed when the handle for the control is (re-)created.</short>
        <descr>
          <p>
            <var>CreateWnd</var> is an overridden method in <var>TCustomTreeView</var> used to perform actions needed when the handle for the control is created or re-created. CreateWnd ensures that the <var>States</var> property is updated to remove the value <var>tvsStateChanging</var>. The internal flags for scroll bar visibility are reset, and the inherited method is called.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.CreateWnd"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.Click">
        <short>
          Performs actions needed when the Left mouse is clicked on the tree view control.
        </short>
        <descr>
          <p>
            <var>Click</var> is an overridden method in <var>TCustomTreeView</var>. It calls the inherited method when the mouse event occurs on a node with an expand / collapse indicator. Click is called when the mouse up event is handled for the corresponding mouse down event.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.MouseDown"/>
          <link id="TCustomTreeView.MouseUp"/>
          <link id="#lcl.controls.TControl.Click">TControl.Click</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.DblClick">
        <short>
          Performs actions needed when the Left mouse button is double clicked on the tree view control.
        </short>
        <descr>
          <p>
            <var>DblClick</var> is an overridden method in <var>TCustomTreeView</var>. It calls the inherited method when the mouse event occurs on a node with an expand / collapse indicator. DblClick is called when the mouse up event is handled for the corresponding mouse down event.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.MouseDown"/>
          <link id="TCustomTreeView.MouseUp"/>
          <link id="#lcl.controls.TControl.DblClick">TControl.DblClick</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.TripleClick">
        <short>Performs actions needed when the Left mouse is triple clicked on the tree view control.</short>
        <descr>
          <p>
            <var>TripleClick</var> is an overridden method in <var>TCustomTreeView</var>. It calls the inherited method when the mouse event occurs on a node with an expand / collapse indicator. TripleClick is called when the mouse up event is handled for the corresponding mouse down event.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.MouseDown"/>
          <link id="TCustomTreeView.MouseUp"/>
          <link id="#lcl.controls.TControl.TripleClick">TControl.TripleClick</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.QuadClick">
        <short>Performs actions needed when the Left mouse is quadruple clicked on the tree view control.</short>
        <descr>
          <p>
            <var>QuadClick</var> is an overridden method in <var>TCustomTreeView</var>. It calls the inherited method when the mouse event occurs on a node with an expand / collapse indicator. QuadClick is called when the mouse up event is handled for the corresponding mouse down event.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.MouseDown"/>
          <link id="TCustomTreeView.MouseUp"/>
          <link id="#lcl.controls.TControl.QuadClick">TControl.QuadClick</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.Delete">
        <short>Performs actions needed when the specified tree node is deleted.</short>
        <descr>
          <p>
            <var>Delete</var> is a method used to perform actions needed when the specified tree node is deleted from the list of tree nodes in <var>Items</var>. Delete signals the <var>OnDeletion</var> event handler (when assigned) for the tree node specified in <var>Node</var>. No actions are performed in the method if OnDeletion has not been assigned.
          </p>
          <p>
            Delete is called when a <var>TTreeNode</var> instance is freed, or when the Delete method in <var>TTreeNodes</var> is executed.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Delete.Node">
        <short>Tree node deleted from the Items in the control.</short>
      </element>

      <element name="TCustomTreeView.DestroyWnd">
        <short>Performs actions needed when the handle for the control is destroyed.</short>
        <descr>
          <p>
            Includes the <var>tvsStateChanging</var> flag in the <var>States</var> property, and calls the inherited method. Ensures that the Canvas handle has been freed after calling the inherited method. Resets size values in the ScrollInfo for the horizontal and vertical scroll bars.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.DestroyWnd"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.DoCreateNodeClass">
        <short>Signals the OnCreateNodeClass event handler (when assigned).</short>
        <descr>
          <p>
            Signals the OnCreateNodeClass event handler (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoCreateNodeClass.NewNodeClass">
        <short>Class reference used to create the new node instance.</short>
      </element>

      <element name="TCustomTreeView.DoEndDrag" link="#lcl.controls.TControl.DoEndDrag">
        <short>Performs actions needed when a drag operation is completed for the control.</short>
        <descr>
          <p>
            DoEndDrag is an overridden method used to perform actions needed when a drag operation is completed for the control. DoEndDrag calls the inherited method on entry to signal the OnEndDrag event handler (when assigned). DoEndDrag ensures that the previous drop target is reset, and that the drag scroll timer is disabled. Tooltips are restored to their previous values.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DoEndDrag">TControl.DoEndDrag</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.DoEndDrag.Target">
        <short/>
      </element>
      <element name="TCustomTreeView.DoEndDrag.X">
        <short/>
      </element>
      <element name="TCustomTreeView.DoEndDrag.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.DoMouseWheel" link="#lcl.controls.TControl.DoMouseWheel"/>
      <element name="TCustomTreeView.DoMouseWheel.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheel.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheel.WheelDelta">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheel.MousePos">
        <short/>
      </element>

      <element name="TCustomTreeView.DoMouseWheelHorz">
        <short>Performs actions to handle a horizontal mouse wheel message.</short>
        <descr>
          <p>
            <var>DoMouseWheelHorz</var> is an overridden method used to perform actions needed to handle a horizontal mouse wheel message. It calls the inherited method to signal the <var>OnMouseWheelHorz</var> event handler (when assigned), or other chtOnMouseWheelHorz  handlers registered in the application. If the message is not handled in the ancestor, the value in <var>ScrolledLeft</var> is updated to apply the delta value in <var>WheelDelta</var>. The position for a tool tip (or hint) is also updated using the coordinates in Mouse.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DoMouseWheelHorz">TControl.DoMouseWheelHorz</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.WheelDelta">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.MousePos">
        <short/>
      </element>

      <element name="TCustomTreeView.DoPaint">
        <short>Implements the Paint method for the control.</short>
        <descr>
          <p>
            <var>DoPaint</var> is a method used render the control to its canvas. It Implements the overridden <var>Paint</var> method. No actions are performed in the method when <var>tvsPainting</var> has been included in the <var>States</var> property (Paint has already been called).
          </p>
          <p>
            DoPaint includes the value tvsPainting in the States property to indicate that the paint method is active. It includes the value <var>tvoFocusedPainting</var> in States when <var>Focused</var> is <b>True</b>, or excludes the value when Focused is <var>False</var>.
          </p>
          <p>
            The UpdateDefaultItemHeight is called when <var>tvoAutoItemHeight</var> is included in the <var>Options</var> for the control. The existing value in DefaultItemHeight is used when the Option is omitted.
          </p>
          <p>
            DoPaint performs the multi-stage drawing process for nodes in the tree view control using its Canvas and a display rectangle using the <var>ClientWidth</var> for the control. If the control includes event handlers for the cdPrePaint stage, the <var>CustomDraw</var> method is called.
          </p>
          <p>
            DoPaint draws the nodes on the tree view starting at the node in TopItem. If the node is Visible, the <var>DoPaintNode</var> method is called to render the tree node. The next visible node in the tree is retrieved, and the process is repeated until no more nodes are available or the drawing area is filled.
          </p>
          <p>
            An <var>InsertMark</var> is drawn for the root node if needed.
          </p>
          <p>
            Borders are drawn around the control using the value in <var>BorderWidth</var>.
          </p>
          <p>
            If the control has event handlers for the cdPostPaint stage, the CustomDraw method is called.
          </p>
          <p>
            The value <var>tvsPainting</var> is excluded from the States property prior to exit.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.DoPaintNode">
        <short>Renders the specified tree node to the canvas for the control.</short>
        <descr>
          <p>
            DoPaintNode is a method used to render the tree node specified in Node to the Canvas for the control. DoPaintNode is called from the DoPaint method, and occurs for visible nodes processed in the method. No actions are performed in the method when the Node is not in the visible client area for the control.
          </p>
          <p>
            DoPaintNode draws the elements which represent a given tree node, including:
          </p>
          <ul>
            <li>Text for the tree node.</li>
            <li>An Image or State Image for the node.</li>
            <li>Expand or Collapse indicators for the node.</li>
            <li>Background for the node using theme services or node state.</li>
            <li>An Insert mark for the initial child node in the tree hierarchy.</li>
            <li>Horizontal and vertical lines used to join nodes in the tree hierarchy.</li>
            <li>The Separator line drawn after a node.</li>
          </ul>
          <p>
            DoPaintNode retrieves scaled image resolutions needed for the Images and StateImages in the control. The images sizes  are determined by applying the scaling factor in Canvas to the current Pixels Per Inch setting in Font.
          </p>
          <p>
            Use of multi-stage custom drawing is supported. If event handlers are provided for the cdPrePaint and cdPostPaint stages, the CustomDraw and CustomDrawItem methods are used to render the node with the drawing state for the node.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoPaintNode.Node">
        <short>Tree node rendered in the method.</short>
      </element>

      <element name="TCustomTreeView.DoStartDrag">
       <short>Performs actions needed when a drag operation is started for the control.</short>
        <descr/>
         <seealso>
           <link id="#lcl.controls.TControl.DoStartDrag">TControl.DoStartDrag</link>
         </seealso>
      </element>
      <element name="TCustomTreeView.DoStartDrag.DragObject">
        <short>TDragObject instance for the drag and drop operation.</short>
      </element>

      <element name="TCustomTreeView.DragOver">
        <short>Performs actions needed when an object is dragged over the tree view control.</short>
        <descr>
          <p>
            DragOver is an overridden method in TCustomTreeView used to perform actions needed when an object is dragged over the tree view control. DragOver calls the inherited method on entry to get the initial value for the Accept argument and signal the OnDragOver event handler (when assigned). The event handler is used to determine whether a drop can be accepted for the specified object instance. If the event handler has not been aasigned, Accept is set False.
          </p>
          <p>
            DragOver checks for a tree node at the coordinates in X and Y, and checks whether the node is DropTarget for the control. If the node is different than the DropTarget for the control,  the DropTarget property in the TTreeNode instance is set to True.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.DropTarget"/>
          <link id="TTreeNode.DropTarget"/>
          <link id="#lcl.controls.TControl.DragOver">TControl.DragOver</link>
          <link id="#lcl.controls.TControl.OnDragOver">TControl.OnDragOver</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.DragOver.Source">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.X">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.Y">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.State">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.Accept">
        <short/>
      </element>

      <element name="TCustomTreeView.DrawBuiltinIcon">
        <short>
          Defines a method used to draw a built-in icon for a specified tree node.
        </short>
        <descr>
          <p>
            <var>DrawBuiltInIcon</var> is a virtual method which is used to draw the a built-in icon for the specified tree node. A built-in icon is provided by the operating system or platform when an image list has not been provided or populated in the <var>Images</var>  property.
          </p>
          <p>
            The return value contains a <var>TSize</var> instance with the dimensions for the built-in image. In TCustomTreeView, the method returns an empty TSize instance (CX and CY are both set to 0). The method must be overridden in a descendent class (like <var>TShellTreeView</var>) to use the icon(s) appropriate for the implementation.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DrawBuiltinIcon.Result">
        <short>TSize instance with the dimensions for the built-in image.</short>
      </element>
      <element name="TCustomTreeView.DrawBuiltinIcon.ANode">
        <short>Tree node used to select an appropriate icon image.</short>
      </element>
      <element name="TCustomTreeView.DrawBuiltinIcon.ARect">
        <short>Rectangle where the icon image was drawn.</short>
      </element>

      <element name="TCustomTreeView.EndEditing">
        <short>Updates the specified tree node and hides editor.</short>
        <descr>
          <p>
            No actions are performed in the method if <var>tvsIsEditing</var> has not been included in the <var>States</var> property (<var>BeginEditing</var> was not called).
          </p>
          <p>
            EndEditing removes the value tvsIsEditing from the States property to indicate that editing has been completed for the control.
          </p>
          <p>
            The <var>OnEdited</var> event handler is signalled (when assigned) to validate or modify the new text value, and the text is stored in <var>Node</var>.
          </p>
          <p>
            EndEditing calls the <var>Invalidate</var> method to force the control to be redrawn.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.States"/>
          <link id="TCustomTreeView.BeginEditing"/>
          <link id="TCustomTreeView.OnEdited"/>
          <link id="TTreeNode.Text"/>
          <link id="TTreeViewStates"/>
          <link id="TTreeViewState"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.EnsureNodeIsVisible">
        <short>
          Ensures parent nodes are expanded, and the specified node is visible in the control.
        </short>
        <descr>
          <p>
            No actions are performed in the method if <var>ANode</var> has not been assigned (contains <b>Nil</b>).
          </p>
          <p>
            Calls the <var>ExpandParents</var> method in ANode to expand any parent nodes not already expanded. Ensures that the tree node in ANode is visible in the client area for the control.
          </p>
          <p>
            EnsureNodeIsVisible is used in the <var>TTreeNode.MakeVisible</var> method, and called from <var>BeginEditing</var> when the editor is displayed for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.EnsureNodeIsVisible.ANode">
        <short/>
      </element>

      <element name="TCustomTreeView.Expand">
        <short>
          Expands the specified tree node and updates the scroll bars for the control.
        </short>
        <descr>
          <p>
            Expand is a method used to expand the tree node specified in Node on the tree view control. Expand is called after when the TTreeNode instance in Node has updated its States property and notified the Items container of the change.
          </p>
          <p>
            Expand updates the scroll bars for the control. The OnExpanded event handler is signalled (when assigned) to performs actions needed after the tree node has been expanded.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Expand.Node">
        <short>Tree node expanded in the method.</short>
      </element>

      <element name="TCustomTreeView.GetImageIndex">
        <short>Gets the index of the image for the specified node.</short>
        <descr>
          <p>
            Allows the image index for the tree node to be updated before the node is drawn. Signals the OnGetImageIndex event handler (when assigned) where the image index can be determined and stored in the specified tree node.
          </p>
          <p>
            Called from the DoPaintNode method for any unselected nodes in the tree view. Use the OnGetSelectedIndex event handler to get the image index for a selected node.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetImageIndex.Node">
        <short>
          Tree node examined in the method (and possibly updated in the event handler).
        </short>
      </element>

      <element name="TCustomTreeView.GetSelectedIndex">
        <short>Gets the index for the image used a selected node in the control.</short>
        <descr>
          <p>
            Allows the image index for a selected node to be updated before the node is drawn. Signals the OnGetSelectedIndex event handler (when assigned) where the image index can be determined and stored in the specified tree node.
          </p>
          <p>
            Called from the DoPaintNode method for any a selected node in the tree view. Use the OnGetImageIndex event handler to get the image index for a node that is not selected.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetSelectedIndex.Node">
        <short>
          Tree node examine in the method (and possibly updated in the event handler).
        </short>
      </element>

      <element name="TCustomTreeView.InitializeWnd">
        <short>Configures the control when its window handle is (re-)initialized.</short>
        <descr>
          <p>
            InitializeWnd is called after the Handle has been created, and before the missing child handles are created. Calls the inherited method on entry to assign the Handle and and its control flags, and synchronize values in the widgetset class instance. InitializeWnd calls the UpdateDefaultItemHeight method to update property values when tvoAutoItemHeight has been included in the Options for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.KeyDown">
        <short>Handles key down events for the control.</short>
        <descr>
          <p>
            KeyDown is an overridden method in TCustomTreeView which handles key down events for the control.
          </p>
          <p>
            Key contains the virtual key code examined in the method.
          </p>
          <p>
            Shift is the Shift, Alt, Ctrl modifier for the key code.
          </p>
          <p>
            KeyDown calls the inherited method on entry. KeyDown ensures that the following Key codes are handled in the method:
          </p>
          <dl>
            <dt>VK_DOWN</dt>
            <dd>
              Moves to the next node in the tree. Shift+Down includes the next node in the Selections property.
            </dd>
            <dt>VK_UP</dt>
            <dd>
              Moves to the previous node in the tree. Shift+Up includes the next node in the Selections property.
            </dd>
            <dt>VK_HOME</dt>
            <dd>
              Moves to the tree node at the top of the visible area. Shift+Home includes an affected range of nodes in the Selections property.
            </dd>
            <dt>VK_END</dt>
            <dd>
              Moves to the tree node at the bottom of the visible area. Shift+End includes an affected range of nodes in the Selections property.
            </dd>
            <dt>VK_PRIOR (PageUp)</dt>
            <dd>
              Moves the first node on the previous page for the control. Shift+PageUp includes an affected range of nodes in the Selections property.
            </dd>
            <dt>VK_NEXT (PageDn)</dt>
            <dd>
              Moves the first node on the next page for the control. Shift+PageDn includes an affected range of nodes in the Selections property.
            </dd>
            <dt>VK_LEFT</dt>
            <dd>
              Collapses the current node (when expanded) and moves to the parent node.
            </dd>
            <dt>VK_RIGHT</dt>
            <dd>
              Expands the current node (when needed), or moves to the next expanded node in the tree.
            </dd>
            <dt>VK_ADD (Plus)</dt>
            <dd>Expands the current node.</dd>
            <dt>VK_SUBTRACT (Minus)</dt>
            <dd>Collapses the current node.</dd>
            <dt>VK_F2</dt>
            <dd>Calls BeginEditing for the Selected node if the control is not ReadOnly.</dd>
          </dl>
          <p>
            If the key event is handled in the method, Key is set to VK_UNKNOWN.
          </p>
          <p>
            Calls MoveSelection if the key event changes the Selected tree node (or Selections) in the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.KeyDown.Key">
        <short>Virtual key code examined in the method.</short>
      </element>
      <element name="TCustomTreeView.KeyDown.Shift">
        <short>Shift, Ctrl, Alt modifier for the key code.</short>
      </element>

      <element name="TCustomTreeView.Loaded">
        <short>Performs actions needed when LCL component streaming has been completed.</short>
        <descr>
          <p>
            Loaded is an overridden method in TCustomTreeView, and calls the inherited method on entry. AT  design-time, the FullExpand method is called to expand all of the tree nodes on the control. The UpdateDefaultItemHeight method is called to set property values when tvoAutoItemHeight has been included in the Options for the control.
          </p>
          <p>
            Loaded is called when the control has been loaded from a resource, transfers the loaded property values to the widget.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.MouseDown">
        <short>
          Handles mouse down events for the tree view control.
        </short>
        <descr>
          <p>
            <var>MouseDown</var> is an overridden method in <var>TCustomTreeView</var> used to handle mouse down events in the control.
          </p>
          <p>
            <var>Button</var> identifies the mouse button for the event.
          </p>
          <p>
            <var>Shift</var> contains the Shift, Alt, or Ctrl modifier for the mouse event.
          </p>
          <p>
            <var>X</var> and <var>Y</var> contain the coordinates for the mouse event.
          </p>
          <p>
            MouseDown updates the States property to remove the values tvsEditOnMouseUp and tvsSingleSelectOnMouseUp.
          </p>
          <p>
            The tree node for the mouse event is retrieved using GetNodeAt for the mouse coordinates. The Selected state for the tree node is saved so the selection can be restored prior to exit.
          </p>
          <p>
            MouseDown ensures that both Left and Right mouse button events are handled (when needed). When RightClickSelect is True, the Selection can be changed using the Right mouse button. Otherwise, it is ignored. Multi-selection is handled when the Shift modifier is set for the mouse event.
          </p>
          <p>
            A mouse event on an unused space in the control causes ClearSelection to be called when RowSelect is True. Selected is set to Nil if RowSelect is False.
          </p>
          <p>
            When MultiSelect has not been enabled, the selected tree node is assigned to the Selected property. When it has been enabled, the MultiSelect method in Items is used to include the selected tree node in the Selections property. ClearSelection is called if the tree node was de-selected by the mouse event. Selected is set to Nil if the tree node was de-selected by the mouse event.
          </p>
          <p>
            The control is Focused (when needed and allowed) by calling the SetFocus method.
          </p>
          <p>
            Mouse events in the Expand or Collapse indicator causes the Expanded state for the tree node to be toggled. When RowSelect is enabled, the MouseUp event causes the editor to be activated for the node.
          </p>
          <p>
            MouseDown calls the inherited method to handle drag messages or close the editor for the control.
          </p>
        </descr>
      <seealso>
        <link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
      </seealso>
      </element>
      <element name="TCustomTreeView.MouseDown.Button">
        <short>Mouse button for the event.</short>
      </element>
      <element name="TCustomTreeView.MouseDown.Shift">
        <short>Shift, Ctrl, or Alt modifier for the mouse event.</short>
      </element>
      <element name="TCustomTreeView.MouseDown.X">
        <short>Horizontal coordinate for the mouse event.</short>
      </element>
      <element name="TCustomTreeView.MouseDown.Y">
        <short>Vertical coordinate for the mouse event.</short>
      </element>

      <element name="TCustomTreeView.MouseMove">
        <short>Handles mouse move messages for the control.</short>
        <descr>
          <p>
            <var>MouseMove</var> is an overridden method in <var>TCustomTreeView</var> used to handle mouse move messages for the control. It calls the inherited method on entry to notify the drag manager when the control is dragged, and signals the OnMouseMove event handler (when assigned).
          </p>
          <p>
            MouseMove ensures that an automatic insertion mark is generated when needed. It also updates the tool tip (or Hint) location and updates the hot tracking position.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.MouseMove.Shift">
        <short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
      </element>
      <element name="TCustomTreeView.MouseMove.X">
        <short>Horizontal coordinate for the mouse pointer.</short>
      </element>
      <element name="TCustomTreeView.MouseMove.Y">
        <short>Vertical coordinate for the mouse pointer.</short>
      </element>

      <element name="TCustomTreeView.MouseUp">
        <short>Handles mouse up events for the control.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.MouseUp">TControl.MouseUp</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.MouseUp.Button">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseUp.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseUp.X">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseUp.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.MouseLeave">
        <short>Performs actions needed when the mouse cursor leaves the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.NodeChanged">
        <short>
          Performs actions when a property value in the specified tree node has been changed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.NodeChanged.Node">
        <short>Tree node with the changed property value.</short>
      </element>
      <element name="TCustomTreeView.NodeChanged.ChangeReason">
        <short>Indicates the value changed in the tree node.</short>
      </element>

      <element name="TCustomTreeView.NodeHaschildren">
        <short>Determines if the specified tree node has child nodes.</short>
        <descr>
          <p>
            <var>NodeHasChildren</var> is a <var>Boolean</var> function used to determine if the tree node specified in <var>Node</var> has child nodes. NodeHasChildren signals the <var>OnHasChildren</var> event handler (when assigned) to determine the return value for the method. The return value is <b>False</b> if OnHasChildren has not been assigned.
          </p>
          <p>
            NodeHasChildren is called when a tree node reads the value for its <var>HasChildren</var> property. The <var>TTreeNode</var> instance uses an existing value in its States flags when available. If not set, NodeHasChildren is used to determine if the flag value (<var>nsHasChildren</var>) is included in or excluded from the <var>States</var> property in the tree node.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.OnHasChildren"/>
          <link id="TTreeNode.HasChildren"/>
          <link id="TTreeNode.States"/>
          <link id="TTreeNode.TreeView"/>
          <link id="TNodeStates"/>
          <link id="TNodeState"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.NodeHaschildren.Result">
        <short>
          True if the node has child nodes. False if OnHasChildren has not been assigned.
        </short>
      </element>
      <element name="TCustomTreeView.NodeHaschildren.Node">
        <short>Tree node examined in the method.</short>
      </element>

      <element name="TCustomTreeView.Notification">
        <short>
          Handles the notification when a component is added to or removed from the class instance.
        </short>
        <descr>
          <p>
            <var>Notification</var> is an overridden method in <var>TCustomTreeView</var>, and calls the inherited method on entry. It ensures that the member for <var>Images</var> or <var>StateImages</var> is set to <b>Nil</b> when the component is removed from the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.Notification.AComponent">
        <short>Component for the notification event.</short>
      </element>
      <element name="TCustomTreeView.Notification.Operation">
        <short>Operation performed for the component.</short>
      </element>

      <element name="TCustomTreeView.Paint" link="#lcl.controls.TCustomControl.Paint">
        <short>Renders the tree view control.</short>
        <descr>
          <p>
            Calls DoPaint to render the tree nodes, scroll bars, and decorations for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.DoPaint"/>
          <link id="TCustomTreeView.DoPaintNode"/>
          <link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.ScrollView">
        <short>
          Scrolls the visible area in the control by the specified horizontal and vertical offsets.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ScrollView.DeltaX">
        <short>Horizontal offset applied to the visible area for the control.</short>
      </element>
      <element name="TCustomTreeView.ScrollView.DeltaY">
        <short>Vertical offset applied to the visible area for the control.</short>
      </element>

      <element name="TCustomTreeView.SetDragMode">
        <short>Sets the value for the DragMode property.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.DragMode">TControl.SetDragMode</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.SetDragMode.Value">
        <short>New value for the DragMode property.</short>
      </element>

      <element name="TCustomTreeView.SetOptions">
        <short>Sets the value for the Options property.</short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.Options"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.SetOptions.NewOptions">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomTreeView.UpdateDefaultItemHeight">
        <short>
          Calculates and updates the value in the DefaultItemHeight property.
        </short>
        <descr>
          <p>
            <var>UpdateDefaultItemHeight</var> is a procedure used to calculate and update the value for the <var>DefaultItemHeight</var> property. No actions are performed in the method for the following conditions:
          </p>
          <ul>
            <li>tvoAutoItemHeight has not been included in the Options for the control.</li>
            <li>The handle for the control has not been allocated.</li>
            <li>The handle for the control Canvas has not been allocated.</li>
          </ul>
          <p>
            The height for the Text in the node is calculated using the TCanvas.TextHeight method, and space is reserved for the default spacing for the tree node.
          </p>
          <p>
            GetImageSize is called to get the height needed for Images or StateImages used in the control. Values in ImageSize and StateImageSize are updated with the scaled image heights including default spacing. The calculated value is enlarged for the Image sizes if needed.
          </p>
          <p>
            UpdateDefaultItemHeight updates the States property to include values that indicate the item height for nodes has changed. The Invalidate method is called to force the control to be redrawn.
          </p>
          <p>
            UpdateDefaultItemHeight is called from methods like: InitializeWnd, Loaded, SetOptions, and DoPaint.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.DefaultItemHeight"/>
          <link id="TCustomTreeView.Images"/>
          <link id="TCustomTreeView.ImagesWidth"/>
          <link id="TCustomTreeView.StateImages"/>
          <link id="TCustomTreeView.StateImagesWidth"/>
          <link id="TCustomTreeView.States"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.UpdateInsertMark">
        <short>
          Sets or removes an insertion mark at the specified position based on the values in Options.
        </short>
        <descr>
          <p>
            An insertion mark is removed if <var>tvoAutoInsertMark</var> has not been included in the <var>Options</var> for the control, and at design-time. Calls <var>SetInsertMark</var> to create and display the insertion mark.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.UpdateInsertMark.X">
        <short>Horizontal coordinate for the insertion mark.</short>
      </element>
      <element name="TCustomTreeView.UpdateInsertMark.Y">
        <short>Vertical coordinate for the insertion mark.</short>
      </element>

      <element name="TCustomTreeView.DoSelectionChanged">
        <short>
           Performs actions needed when the selection for the tree view has been changed.
        </short>
        <descr>
          <p>
            <var>DoSelectionChanged</var> is called when a value in the Selection or MultiSelected property is changed. It signals the OnSelectionChange event handler (when assigned).
          </p>
          <p>
            DoSelectionChanged is called after the flags in <var>States</var> has been updated to include <var>tvsSelectionChanged</var>, and before the change timer is enabled for the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.WMHScroll">
        <short>Handles the LM_HSCROLL message for the control.</short>
        <descr>
          <p>
            <var>WMHScroll</var> ensures that the <var>ScrollLeft</var> property is updated to apply the horizontal scroll code passed in the <var>Msg</var> argument. The following scroll codes are handled in the method:
          </p>
          <dl>
            <dt>SB_LEFT</dt>
            <dd>Sets ScrolledLeft to 0.</dd>
            <dt>SB_RIGHT</dt>
            <dd>Sets ScrolledLeft to its  largest value for the visible control area.</dd>
            <dt>SB_LINERIGHT</dt>
            <dd>
              Increments ScrolledLeft by one-half of the default ItemHeight for the control. (?)
            </dd>
            <dt>SB_LINELEFT</dt>
            <dd>
              Decrements ScrolledLeft by one-half of the default ItemHeight for the control. (?)
            </dd>
            <dt>SB_PAGERIGHT</dt>
            <dd>Increments ScrolledLeft by one page of lines. (?)</dd>
            <dt>SB_PAGELEFT</dt>
            <dd>Decrements ScrolleLeft by one page of lines. (?)</dd>
            <dt>SB_THUMBPOSITION, SB_THUMBTRACK</dt>
            <dd>Sets ScrolledLeft to the current scroll bar position in Msg.</dd>
            <dt>SB_ENDSCROLL</dt>
            <dd>Ends scroll bar message handling.</dd>
          </dl>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMHScroll.Msg">
        <short>Window message handled in the method.</short>
      </element>

      <element name="TCustomTreeView.WMVScroll">
        <short>Handles the LM_VSCROLL message for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMVScroll.Msg">
        <short>Window message handled in the method.</short>
      </element>

      <element name="TCustomTreeView.WMLButtonDown">
        <short>Handles the LM_LBUTTONDOWN message for the control.</short>
        <descr>
          <p>
            <var>WMLButtonDown</var> ensures that the <var>States</var> property is updated to include <var>tvsDragged</var> for the Left mouse button message. It calls the inherited method prior to exit to update MouseCapture and Click events for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.WMLButtonDown">TControl.WMLButtonDown</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.WMLButtonDown.AMessage">
        <short>Window message examined in the method.</short>
      </element>

      <element name="TCustomTreeView.WMSetFocus">
        <short>Handles the LM_SETFOCUS message for the control.</short>
        <descr>
          <p>
            Calls the <var>Invalidate</var> method to force the control to be redrawn. Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.WMSetFocus">TWinControl.WMSetFocus</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.WMSetFocus.Message">
        <short>Window message handled in the method.</short>
      </element>

      <element name="TCustomTreeView.WMKillFocus">
        <short>Handles the WMKillFocus message for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMKillFocus.Message">
        <short>Control message handled in the method.</short>
      </element>

      <element name="TCustomTreeView.Resize">
        <short>Resizes the control and updates the scroll bars and the States property.</short>
        <descr>
          <p>
            <var>Resize</var> is an overridden method in <var>TCustomTreeView</var>. It updates values in the <var>States</var> property to include <var>tvsScrollbarChanged</var> and <var>tvsBottomItemNeedsUpdate</var>. It calls the inherited method to check for changes and execute the <var>DoOnResize</var> method. Resize calls <var>UpdateScrollbars</var> to update the visibility and position for the scroll bars on the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Resize">TControl.Resize</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.EditingItem">
        <short>Contains the tree node being edited in the control.</short>
        <descr>
          <p>
            <var>EditingItem</var> is a read-only <var>TTreeNode</var> property which contains the tree node currently being edited in the control. Its value is assigned when the <var>BeginEditing</var> method is called, and unassigned when the <var>EndEditing</var> method is called.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.BeginEditing"/>
          <link id="TCustomTreeView.EndEditing"/>
          <link id="TCustomTreeView.KeyDown"/>
          <link id="TCustomTreeView.MouseUp"/>
          <link id="TTreeNode.EditText"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.States">
        <short>Contains the state values in effect for the control.</short>
        <descr>
          <p>
            <var>States</var> is a read-only <var>TTreeViewStates</var> property which contains the state values in effect for the control. Value from the <var>TTreeViewState</var> enumeration are included in the set type to indicate that the corresponding state is "ON", "TRUE", or "ACTIVE". See <var>TTreeViewState</var> for more information about the enumeration values and their meanings.
          </p>
        </descr>
        <seealso>
          <link id="TTreeViewStates"/>
          <link id="TTreeViewState"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.GetSelectedChildAccessibleObject">
        <short>Returns the currently selected child accessible object.</short>
        <descr>
          <p>
            In TCustomTreeView, the value in Selection is included as a data object for the accessibility object.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetSelectedChildAccessibleObject.Result">
        <short>True if the node data was successfully added to the accessibility object.</short>
      </element>

      <element name="TCustomTreeView.GetChildAccessibleObjectAtPos" link="#lcl.controls.TControl.GetChildAccessibleObjectAtPos"/>
      <element name="TCustomTreeView.GetChildAccessibleObjectAtPos.Result"/>
      <element name="TCustomTreeView.GetChildAccessibleObjectAtPos.APos"/>

      <element name="TCustomTreeView.AccessibilityOn">
        <short>Turns accessibility on or off to speed up the control.</short>
        <descr>
          <p>
            This property is provided for the situation where a tree view contains a huge number of items, lets say 10,000+. In this case accessibility might slow the tree down, so turning this property off might make things faster.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.AutoExpand">
        <short>Unfold a tree-item when user clicks it or an item activated by code.</short>
        <descr>
          <p>
            <var>AutoExpand</var> is a <var>Boolean</var> property which indicates if a tree node is automatically expanded when it is <var>Selected</var> using a mouse click or keyboard navigation. The default value for the property is <b>False</b>.
          </p>
          <p>
            The property value is <b>True</b> when the value <var>tvoAutoExpand</var> has been included in the <var>Options</var> property. Changing the value in the property causes the Options property to be updated. When set to <b>True</b>, the value tvoAutoExpand is included in the Options property. Otherwise, the value is excluded from Options.
          </p>
          <p>
            AutoExpand is used when the <var>TTreeNodes</var> container in the <var>Items</var> property adds or moves a tree node. If the new tree node or its owner has AutoExpand set to <b>True</b>, the value is also applied to its <var>Parent</var> node.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.BorderStyle">
        <short>Line style used to draw the border for the control.</short>
        <descr>
          <p>
            The default value for the property is bsSingle in TCustomTreeView.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.BorderStyle">TWinControl.BorderStyle</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.HideSelection">
        <short>
          Indicates if the current Selection is hidden when the control loses focus.
        </short>
        <descr>
          <p>
            <var>HideSelection</var> is a <var>Boolean</var> property which indicates if the current selection is hidden when the control loses focus. The default value for the property is <b>True</b>.
          </p>
          <p>
            The value for the property is <b>True</b> if <var>tvoHideSelection</var> has been included in the <var>Options</var> for the control. Changing the value in the property causes tvoHideSelection to be included in or excluded from Options. The control is redrawn if <var>Selected</var> has an assigned tree node when the property is changed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Options"/>
          <link id="TCustomTreeView.Selected"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.HotTrack">
        <short>Additionally highlight/underline tree-item when mouse is over it.</short>
        <descr/>
        <seealso>
          <link id="#lcl.comctrls.TCustomListview.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.HotTrackColor">
        <short>Font color used for the text in a tree node when hot tracking is enabled.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.DisabledFontColor">
        <short>Font color used for tree nodes when the tree view is not enabled.</short>
        <descr>
          <p>
            The default value for the property is <var>clGrayText</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Indent">
        <short>Size in pixels by which each nested branching level is to be indented.</short>
        <descr>
          <p>
            Use 0 for auto-sized value.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.MultiSelect">
        <short>Enables or disables selection of several tree-items at one time.</short>
        <descr>
          <p>
            <var>MultiSelect</var> is a <var>Boolean</var> property used to enable or disable selection of multiple nodes in the tree view control. The default value for the property is <b>False</b>, and allows a single selected node indicated in the <var>Selection</var> property.
          </p>
          <p>
            When set to <b>True</b>, multiple nodes can be selected and stored in the Selections property. Use <b>Ctrl+Click</b> add or remove a node in the Selections property. Use <b>Shift+Click</b> to add or remove a range of nodes in the Selections property.
          </p>
          <p>
            Changing the value for the property causes existing nodes in both Selection and Selections to be cleared.
          </p>
          <p>
            Use <var>MultiSelectStyle</var> to set the multi-selection style enabled for the control.
          </p>
          <p>
            Use the <var>Select</var> method to add a node to the values in Selections.
          </p>
          <p>
            Use <var>SelectionCount</var> to get the number of nodes in Selections.
          </p>
          <p>
            Use <var>GetFirstMultiSelected</var> or <var>GetLastMultiSelected</var> to get the tree node for the corresponding node in Selections.
          </p>
          <p>
            Use <var>ClearMultiSelection</var> to remove all existing nodes in Selections.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnAddition">
        <short>
          Event handler signalled when a tree node is added to the tree node Items in the control.
        </short>
        <descr>
          <p>
            <var>OnAddition</var> is a <var>TTVExpandedEvent</var> property with the event handler signalled when a tree node is added to the Items for the control. The Sender argument contains the TCustomTreeViwe instance for the notification. The Node argument contains the TTreeNode instance added to the control.
          </p>
          <remark>
            OnAddition is not used in the current LCL implementation.
          </remark>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Items"/>
          <link id="TTreeNodes"/>
          <link id="TTVExpandedEvent"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.OnAdvancedCustomDraw">
        <short>
          <var>OnAdvancedCustomDraw</var> - event handler for advanced custom drawing.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnAdvancedCustomDrawItem">
        <short>
          <var>OnAdvancedCustomDrawItem</var> - event handler for advanced custom drawing item.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnChange">
        <short>
          <var>OnChange</var> - specialized event handler for a change in the TreeView.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnChanging">
        <short>
          <var>OnChanging</var> - specialized event handler while TreeView is being changed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCollapsed">
        <short>
          <var>OnCollapsed</var> - specialized event handler when part of the tree is collapsed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCollapsing">
        <short>
          <var>OnCollapsing</var> - specialized event handler while part of the tree is being collapsed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCompare">
        <short>
          <var>OnCompare</var> - specialized event handler for comparisons within the TreeView.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCreateNodeClass">
        <short>
          Event handler signalled to get the class reference used to create new tree nodes.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTreeView.DoCreateNodeClass"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.OnCustomCreateItem">
        <short>
          <var>OnCustomCreateItem</var> - event handler for custom item creation.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCustomDraw">
        <short>
          <var>OnCustomDraw</var> - event handler for custom drawing.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCustomDrawItem">
        <short>
          <var>OnCustomDrawItem</var> - event handler for custom drawing item.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCustomDrawArrow">
        <short>
          Event handler signalled to custom draw expand or collapse indicators.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnDeletion">
        <short>
          Event handler signalled when a node is deleted from the node tree.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnEdited">
        <short>
          <var>OnEdited</var> - specialized event handler when the TreeView has been edited.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnEditing">
        <short>
          <var>OnEditing</var> - specialized event handler while a TreeView is being edited.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnEditingEnd">
        <short>Event handler signalled when EndEditing is called for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnExpanded">
        <short>
          <var>OnExpanded</var> - specialized event handler when a TreeView has been expanded.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnExpanding">
        <short>
          <var>OnExpanding</var> - specialized event handler while a TreeView is being expanded.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for finding the index of an image.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnGetSelectedIndex">
        <short>
          <var>OnGetSelectedIndex</var> - event handler for finding index of selected item.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnHasChildren">
        <short>
          Event handler signalled to determine if a given node in the tree view has child nodes.
        </short>
        <descr/>
        <seealso>
          <link id="TTVHasChildrenEvent"/>
          <link id="TTreeNode.HasChildren"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.OnNodeChanged">
        <short>
          Event handler signalled when the text for a tree node has been changed.
        </short>
        <descr>
          <p>
            <var>OnNodeChanged</var> is a <var>TTVNodeChangedEvent</var> property with the event handler signalled when the text in a tree node has been changed. OnNodeChanged is signalled from the <var>NodeChanged</var> method, and allows actions to be performed when the Node is updated.
          </p>
          <p>
            NodeChanged and OnNodeChanged are called from the <var>TTreeNode.Changed</var> method, and occurs after the value in the <var>Text</var> property for the TTreeNode instance has been updated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnSelectionChanged">
        <short>
          Event handler signalled when the selection in the tree view control is changed.
        </short>
        <descr>
          <p>
            <var>OnSelectionChanged</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the selection for the control has been changed. OnSelectionChanged is signalled (when assigned) from the <var>DoSelectionChanged</var> method, and occurs after the value in <var>Selection</var> has been updated. It also occurs when the value in <var>MultiSelected</var> is changed.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ReadOnly">
        <short>
          Indicates whether the text (or caption) for tree nodes can be edited in the control.
        </short>
        <descr>
          <p>
            <var>ReadOnly</var> is a <var>Boolean</var> property which indicates whether the text for the <var>TTreeNode</var> instances in Items can be edited in the control. When ReadOnly is set to <b>False</b>, the <var>BeginEditing</var> method is not called when the <b>F2</b> key is pressed, or when the Left mouse button is double clicked. The default value for the property is <b>False</b>.
          </p>
          <p>
            The property value is <b>True</b> when <var>tvoReadOnly</var> has been included in the <var>Options</var> for the control. Setting a new value for the property causes tvoReadOnly to be included in or excluded from the values in Options. Changing the value to <b>False</b> causes the <var>EndEditing</var> method to be called.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.RightClickSelect">
        <short>Right-click also selects tree-item. Else it only calls PopupMenu.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.RowSelect">
        <short>When a tree-item is selected, paint selection background with full width.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ScrolledLeft">
        <short>
          Horizontal coordinate for the origin of the visible display area.
        </short>
        <descr>
          <p>
            ScrolledLeft is an Integer Property with the horizontal coordinate for the origin of  the visible display area in the tree view control.
          </p>
          <p>
            Use ScrolledTop for the vertical coordinate for the origin of the visible display area.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ScrolledTop">
        <short>
          Vertical coordinate for the origin of the visible display area.
        </short>
        <descr>
          <p>
            ScrolledTop is an Integer Property with the vertical coordinate for the origin of  the visible display area in the tree view control.
          </p>
          <p>
            Use ScrolledLeft for the horizontal coordinate for the origin of the visible display area.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowButtons">
        <short>
          Enables an expand/collapse (fold/unfold) icon for nodes with child nodes.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowLines">
        <short>
          Enables the horizontal and vertical  lines which join nodes in the tree hierarchy.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowRoot">
        <short>
          Enables drawing of the root node indicator for the tree view control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowSeparators">
        <short>
          Indicates if horizontal separators are drawn between nodes in the tree view control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SortType">
        <short>Allow to show items sorted: by caption, by Data property or both.</short>
        <descr>
          Changing the Text or Data of a node will sort again. While adding nodes does not. Call TreeView1.AlphaSort to sort the whole tree. Call ParentNode.CustomSort(nil) to sort only the child nodes of a single node.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ToolTips">
        <short>
          Show tooltip (hint) for a tree-item when the item is too long to fit by width and mouse is over it.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTreeView</var>: calls inherited <var>Create</var> then sets defaults for style, size, etc.
        </short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TCustomTreeView</var>: calls inherited <var>Create</var> then sets defaults for style, size, etc.
          </p>
          <p>
            Among the variables initialized and defaults set are:
          </p>
          <p>
            size, color, the symbols for expansion etc, the border style and width, scroll bars, options, indentation, timers, action links
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.Create.AnOwner">
        <short/>
      </element>

      <element name="TCustomTreeView.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomTreeView</var>: frees images, nodes and links, then calls inherited Destroy.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.AlphaSort">
        <short>Sorts tree nodes using default sort procedure (alphabetic).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.AlphaSort.Result">
        <short>Always returns False (because CustomSort returns False).</short>
      </element>

      <element name="TCustomTreeView.ClearSelection">
        <short>Clears the selection in the tree view control.</short>
        <descr>
          <p>
            <var>ClearSelection</var> is a method used to clear tree nodes selected in the tree view control.  ClearSelection uses the value in <var>MultiSelect</var> to determine the actions needed to clear the selected nodes.
          </p>
          <p>
            If <var>MultiSelect</var> has  been enabled in the <var>Options</var> for the control,  the ClearMultiSelection method is called to clear the selected nodes.
          </p>
          <p>
            <var>KeepPrimary</var> indicates whether the first tree node in a multi-selection is retained. When set to False, all selected nodes are removed from the Selections property. Otherwise, the tree node in Selected is retained.
          </p>
          <p>
            If MultiSelect has not been enabled, the value in the Selected property is set to Nil to clear the single node selection.
          </p>
          <p>
            No actions are performed in the method when MultiSelect is False and KeepPrimary is True.
          </p>
          <p>
            ClearSelections is called from methods that handle mouse or keyboard selection, like <var>KeyDown</var> and <var>MouseDown</var>. It is also called when a new value is assigned to the MultiSelect property.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ClearSelection.KeepPrimary">
        <short>True if the first node in a multi-selection is kept.</short>
      </element>

      <element name="TCustomTreeView.ConsistencyCheck">
        <short>
          Verifies that values are updated and valid for the tree view control.
        </short>
        <descr>
          <p>
            <var>ConsistencyCheck</var> is a method used to validate and/or update property and member values in the control. It raises an <var>Exception</var> (catchable in the debugger) for invalid property values in the control, including:
          </p>
          <dl>
            <dt>Canvas</dt>
            <dd>Raises the exception if Canvas is not assigned.</dd>
            <dt>DefaultItemHeight</dt>
            <dd>Raises the exception if DefaultItemHeight has a negative value.</dd>
            <dt>FIndent member</dt>
            <dd>Raises the exception if FIndent has a negative value.</dd>
            <dt>FMaxRight member</dt>
            <dd>Raises the exception if FMaxRight has a negative value.</dd>
            <dt>IsEditing / Selected</dt>
            <dd>Raises the exception if IsEditing is True and Selected is unassigned.</dd>
            <dt>Selected</dt>
            <dd>Raises the exception if the node in Selected is not visible.</dd>
            <dt>Items</dt>
            <dd>Raises the exception if Items has not been assigned.</dd>
          </dl>
          <p>
            The Items property has additional validations performed for its property values. The ConsistencyCheck method in Items is called to verify node counts, update counts, index values, and hierarchy levels in the container. An Exception is raised for error conditions in these items as well.
          </p>
          <p>
            Values in the States property are examined and updated (when needed) to refresh the display coordinates for tree nodes, the maximum width for the expanded nodes in the control, and the levels in the tree hierarchy. These operations may also raise an Exception for invalid states or values.
          </p>
          <p>
            ConsistencyCheck is called from the WriteDebugReport method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.CustomSort">
        <short>
          If True, the external method specified in <var>SortProc</var> is used for sorting.
        </short>
        <descr>
          <p>
            CustomSort is a Boolean function used to sort the tree nodes in Items using the sort procedure specified in SortProc. If SortProc is not assigned, the DefaultTreeViewSort method is used in the sort procedure.
          </p>
          <p>
            No actions are performed in the method when the number of tree nodes in Items is 0 (zero).
          </p>
          <p>
            The return value is always False.
          </p>
          <p>
            CustomSort calls BeginUpdate to minimize updates during the sorting process. EndUpdates is called when the sorting process is completed.
          </p>
          <p>
            Top-level nodes in Items are sorted by calling the SortTopLevelNodes in items. Child nodes are then sorted (when present), starting at the first top-level node in the tree. The ClearCache method in Items is called to invalidate the node cache for the control.
          </p>
          <p>
            The States property is updated to force the node coordinates and scroll bars to be refreshed in the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CustomSort.Result">
        <short>Always returns False.</short>
      </element>
      <element name="TCustomTreeView.CustomSort.SortProc">
        <short>Routine used to implement the sort procedure in the method.</short>
      </element>

      <element name="TCustomTreeView.DefaultTreeViewSort">
        <short>
          <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2
        </short>
        <descr>
          <p>
            <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2.
          </p>
          <p>
            <var>DefaultTreeViewSort</var> compares the text of two TreeNodes and returns the following result:
          </p>
          <dl>
            <dt>&lt; 0</dt>
            <dd>if <var>Node1.Text&lt;Node2.Text</var>.</dd>
            <dt>0</dt>
            <dd>if <var>Node1.Text=Node2.Text</var>.</dd>
            <dt>&gt; 0</dt>
            <dd>if <var>Node1.Text&gt;Node2.Text</var>.</dd>
          </dl>
          <p>
            The comparison takes into account ANSI characters, i.e. it takes care of accented characters. Unlike AnsiCompareText, the comparison is case sensitive.
          </p>
        </descr>
      </element>

      <element name="TCustomTreeView.EraseBackground">
        <short>Has an empty implementation in the current LCL version.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.EraseBackground">TWinControl.EraseBackground</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.EraseBackground.DC">
        <short/>
      </element>

      <element name="TCustomTreeView.GetHitTestInfoAt">
        <short>
          <var>GetHitTestInfoAt</var> - returns the result of a hit test at the point (X, Y).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeAt">
        <short>
          Searches all expanded nodes for the tree node at the specified position.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeAt.Result">
        <short>Visible tree node at the specified position, or Nil when not found.</short>
      </element>
      <element name="TCustomTreeView.GetNodeAt.X">
        <short>Horizontal coordinate for the the node or row.</short>
      </element>
      <element name="TCustomTreeView.GetNodeAt.Y">
        <short>Vertical coordinate for the tree node or row.</short>
      </element>

      <element name="TCustomTreeView.GetNodeWithExpandSignAt">
        <short>
          Gets the tree node at the specified vertical coordinate with a visible expand symbol.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSignAt.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSignAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSignAt.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.GetInsertMarkAt">
        <short>
          <var>GetInsertMarkAt</var> - find if there is an insert mark at the specified coordinates.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.Y">
        <short/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkNode">
        <short/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkType">
        <short/>
      </element>

      <element name="TCustomTreeView.SetInsertMark">
        <short>
          <var>SetInsertMark</var> - place an Insert mark at the specified node in the tree.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetInsertMark.AnInsertMarkNode">
        <short/>
      </element>
      <element name="TCustomTreeView.SetInsertMark.AnInsertMarkType">
        <short/>
      </element>

      <element name="TCustomTreeView.SetInsertMarkAt">
        <short>
          <var>SetInsertMarkAt</var> - place an insert mark at the specified coordinates.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetInsertMarkAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.SetInsertMarkAt.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.Invalidate">
        <short>
          Causes the control to be redrawn when a redraw is not already in progress.
        </short>
        <descr>
          <p>
            <var>Invalidate</var> is an overridden method in <var>TCustomTreeView</var>, and causes the control to be redrawn if it is not already re-painting. Invalidate checks the <var>States</var> property for the <var>tvsPainting</var> flag. When present, the <var>Paint</var> method has already been called but not yet completed.
          </p>
          <p>
            No actions are performed in the method when a paint operation is in progress.
          </p>
          <p>
            Invalidate calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.States"/>
          <link id="TCustomTreeView.Paint"/>
          <link id="TTreeViewStates"/>
          <link id="TTreeViewState"/>
          <link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.IsEditing">
        <short>
          Indicates if the control is currently editing a node in the tree.
        </short>
        <descr>
          <p>
            <var>IsEditing</var> is a <var>Boolean</var> function used to determine whether the control is currently editing a node in the tree view. IsEditing checks the values in the <var>State</var> property for the <var>tvsIsEditing</var> flag value. The return value is <b>True</b> when tvsIsEditing is present in the States property.
          </p>
          <p>
            When present, the <var>BeginEditing</var> method has been called and the <var>EndEditing</var> method has not yet been called.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.States"/>
          <link id="TCustomTreeView.BeginEditing"/>
          <link id="TCustomTreeView.EndEditing"/>
          <link id="TTreeViewStates"/>
          <link id="TTreeViewState"/>
        </seealso>
      </element>
      <element name="TCustomTreeView.IsEditing.Result">
        <short>True if the tvsIsEditing flag is present in States.</short>
      </element>

      <element name="TCustomTreeView.BeginUpdate">
        <short>Starts an update process for the tree view control.</short>
        <descr>
          <p>
            <var>BeginUpdate</var> is a method used to start an update process for the tree view control. BeginUpdate is used with <var>EndUpdate</var> to maintain update counters used to consolidate updates and event notifications in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.EndUpdate"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.EndUpdate">
        <short>Finishes an update process for the tree view control.</short>
        <descr>
          <p>
            <var>EndUpdate</var> is a method used to finish an update process for the tree view control. EndUpdate is used with <var>BeginUpdate</var> to maintain update counters used to consolidate updates and event notifications in the control.
          </p>
          <p>
            EndUpdates raises an Exception (catchable in the debugger) if the internal update counter is 0 or less when the method is called.
          </p>
          <p>
            EndUpdates calls the EndUpdate method in the <var>Items</var> container. <var>UpdateScrollBars</var> is called to refresh the position in the visible scroll bars when a change actually occurred in the list of tree nodes.
          </p>
        </descr>
        <errors>
          Raises an Exception if the internal update counter is 0 or less when the method is called.
        </errors>
        <seealso>
          <link id="TCustomTreeView.BeginUpdate"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.FullCollapse">
        <short>
          Collapses all nodes in the tree view and displays only the root for the tree.
        </short>
        <descr>
          <p>
            Visits all top-level tree nodes in the Items property and calls their Collapse method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.FullExpand">
        <short>
          Expands all nodes in the tree view.
        </short>
        <descr>
          <p>
            Visits all top-level tree nodes in Items and calls their Expand method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.LoadFromFile">
        <short>
          Load tree view data from the specified file.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.LoadFromFile.FileName">
        <short/>
      </element>

      <element name="TCustomTreeView.LoadFromStream">
        <short>
          Loads tree view data from the specified stream.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.LoadFromStream.Stream">
        <short/>
      </element>

      <element name="TCustomTreeView.SaveToFile">
        <short>
          Saves the tree view data to the specified file.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SaveToFile.FileName">
        <short/>
      </element>

      <element name="TCustomTreeView.SaveToStream">
        <short>
          Saves the tree view data to the specified stream.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SaveToStream.Stream">
        <short/>
      </element>

      <element name="TCustomTreeView.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - used for debugging.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WriteDebugReport.Prefix">
        <short/>
      </element>
      <element name="TCustomTreeView.WriteDebugReport.AllNodes">
        <short/>
      </element>

      <element name="TCustomTreeView.LockSelectionChangeEvent">
        <short>
          <var>LockSelectionChangeEvent</var> - if the selection has changed, lock its status.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UnlockSelectionChangeEvent">
        <short>
          <var>UnlockSelectionChangeEvent</var> - unlock a selection to allow it to be changed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.GetFirstMultiSelected">
        <short>
          <var>GetFirstMultiSelected</var> - returns the first node from a multiple selection.
        </short>
        <descr>This works only if tvoAllowMultiSelect is enabled. </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetFirstMultiSelected.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetLastMultiSelected">
        <short>
          Gets the last tree node added to a multi-selection in the Items for the controls.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetLastMultiSelected.Result">
        <short>Last tree node in a multi-selection.</short>
      </element>

      <element name="TCustomTreeView.Select">
        <short>
          Makes the specified node(s) become selected in the control.
        </short>
        <descr>
          <p>
            <var>Select</var> is an overloaded method used to make a node, array of nodes, or list of nodes become selected in the tree view control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Select.Node">
        <short>Tree node assigned to Selected in the method.</short>
      </element>
      <element name="TCustomTreeView.Select.ShiftState">
        <short>Shift state for the selection; Shift assumes multi-selection is enabled.</short>
      </element>
      <element name="TCustomTreeView.Select.Nodes">
        <short>
          Array or TList with TTreeNode instances to add to the Selections in the control; assumes multi-select is enabled.
        </short>
      </element>

      <element name="TCustomTreeView.SelectionVisible">
        <short>
          <var>SelectionVisible</var> - returns True if a selection is visible.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SelectionVisible.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.MakeSelectionVisible">
        <short>
          <var>MakeSelectionVisible</var> - method for making a selection visible.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ClearInvisibleSelection">
        <short>Clears selected tree node(s) in the control if they are not visible.</short>
        <descr>
          <p>
            If MultiSelect has been enabled in the Options for the control, the ClearMultiSelection method in Items is called to clear the values in the Selections property. Otherwise the Selected property for the TTreeNode instance in Selected is set to False (which makes the Selected property unassigned).
          </p>
          <p>
            No action are performed if MultiSelect has not been enabled and Selected has not been assigned.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.StoreCurrentSelection">
        <short>
          Creates and fills a TStringList with the text for the selected nodes in the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.StoreCurrentSelection.Result">
        <short>TStringList instance with the selected nodes in the control.</short>
      </element>

      <element name="TCustomTreeView.ApplyStoredSelection">
        <short>Selects the first node with text matching a value in the specified list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ApplyStoredSelection.ASelection">
        <short>TStringList with the text for nodes selected in the method.</short>
      </element>
      <element name="TCustomTreeView.ApplyStoredSelection.FreeList">
        <short>True if the TStringList instance is freed in the method.</short>
      </element>

      <element name="TCustomTreeView.MoveToNextNode">
        <short>
          Moves the selection to the next tree node following the last selection in the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveToNextNode.ASelect">
        <short>True if the next node becomes selected in the control.</short>
      </element>

      <element name="TCustomTreeView.MoveToPrevNode">
        <short>
          Moves the selection to the visible tree node following prior to the last selection in the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveToPrevNode.ASelect">
        <short>True if the previous node becomes selected in the control.</short>
      </element>

      <element name="TCustomTreeView.MovePageDown">
        <short>
          Moves the selection to the next display page for the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MovePageDown.ASelect">
        <short>True if the node becomes selected in the control.</short>
      </element>

      <element name="TCustomTreeView.MovePageUp">
        <short>
          Moves the selection to the previous display page for the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MovePageUp.ASelect">
        <short>True if the node becomes selected in the control.</short>
      </element>

      <element name="TCustomTreeView.MoveHome">
        <short>Moves to and optionally selects the first visible node in the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveHome.ASelect">
        <short>True if the node is selected in the control.</short>
      </element>

      <element name="TCustomTreeView.MoveEnd">
        <short>Moves to and optionally selects the last expanded child node in Items.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveEnd.ASelect">
        <short>True if the node is selected in the control.</short>
      </element>

      <element name="TCustomTreeView.BackgroundColor">
        <short>Color of background area of control.</short>
        <descr>
          <p>
            Contains the same value as the <var>Color</var> property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.BorderWidth">
        <short>Width of the line drawn as a border around the control.</short>
        <descr>
          <p>
            The default value for the property is 0 in TCustomTreeView.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.BorderWidth">TWinControl.BorderWidth</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.BottomItem">
        <short>Last visible tree node starting at the TopItem in the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Color">
        <short>Color used for the background in the control display area.</short>
        <descr>
          <p>
            The default value for the property is <var>clWindow</var>. Contains the same value as the <var>BackgroundColor</var> property.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Color">TControl.Color</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.DefaultItemHeight">
        <short>
          Default height for tree nodes in the control.
        </short>
        <descr>
          <p>
            <var>DefaultItemHeight</var> is an <var>Integer</var> property with the default height for tree nodes displayed in the control. The default value for the property is defined in the DefaultTreeNodeHeight constant, and assigned in the constructor for the class instance.
          </p>
          <p>
            When tvoAutoItemHeight has been included in the Options for the control, the property value is  determined using the Font and the images for the control. A new value assigned to the property is ignored when automatic item height has been enabled.
          </p>
          <p>
            The value may be changed when a layout adjustment policy is applied in DoAutoAdjustLayout, or when the UpdateDefaultItemHeight method is called. It is also updated (if needed) when values are assigned to the Images or StateImages properties.
          </p>
          <p>
            Setting a new value for the property causes the control to be redrawn.
          </p>
          <p>
            DefaultItemHeight is the value used in the TTreeNode.Height property for tree nodes added to the Items container.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Options"/>
          <link id="TCustomTreeView.Images"/>
          <link id="TCustomTreeView.StateImages"/>
          <link id="TCustomTreeView.Items"/>
          <link id="TCustomTreeView.UpdateDefaultItemHeight"/>
          <link id="TTreeNode.Height"/>
          <link id="TTreeNodes"/>
          <link id="DefaultTreeNodeHeight"/>
          <link id="#lcl.controls.TControl.Font">TControl.Font</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.DropTarget">
        <short>
          <var>DropTarget</var> - the target node for dropping a dragged item.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ExpandSignColor">
        <short>
          Color used to paint expand/collapse (fold/unfold) symbol (i.e. plus/minus symbol).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ExpandSignSize">
        <short>Size of expand/collapse (fold/unfold) symbol.</short>
        <descr>
          <p>Use 0 for the auto-sized value.</p>
        </descr>
      </element>

      <element name="TCustomTreeView.ExpandSignType">
        <short>
          Sets the shape for the expand/collapse (fold/unfold) symbols.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Images">
        <short>Image list which holds icons for the tree nodes in Items.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ImagesWidth">
        <short>Width for the Images used in the tree view control.</short>
        <descr>
          <p>
            ImagesWidth is an Integer property which contains the width for the Images assigned in the control. ImagesWidth provides the value that is scaled to the Pixels Per Inch setting in the Font property when Images have been assigned for the control.
          </p>
           <p>
             The default value for the property is 0 (zero), and indicates that an explicit image width has not been assigned.
           </p>
          <p>
            Setting a new value for the property causes the control to the redrawn.
          </p>
          <p>
            ImagesWidth is used in the DoPaintNode method to retrieve the scaled image resolution for the bitmaps in Images.
          </p>
          <p>
            Use StateImagesWidth to set the width for the bitmaps in the StateImages property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.InsertMarkNode">
        <short>
          <var>InsertMarkNode</var> - place a marker on the specified node.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.InsertMarkType">
        <short>
          <var>InsertMarkType</var> - the type of marker to be inserted.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Items">
        <short>The container with the TTreeNode instances used in the control.</short>
        <descr>
          <p>
            <var>Items</var> is a <var>TTreeNodes</var> property with the container used to access and maintain the hierarchical list of <var>TTreeNode</var> instances displayed in the tree view control.
          </p>
          <p>
            Items allows indexed access to the TTreeNode instances in the container by their ordinal position.
          </p>
<code>// the following are equivalent
AText := ATreeView.Items[0].Text;  // caption for the first tree node
AText := ATreeView.Items.Item[0].Text;  // caption for the first tree node
</code>
          <p>
            Methods in Items can be used to access and maintain the tree nodes and their hierarchy, including:
          </p>
          <ul>
            <li>Add</li>
            <li>AddChild</li>
            <li>AddFirst</li>
            <li>Clear</li>
            <li>Delete</li>
            <li>Insert</li>
          </ul>
          <p>
              See <link id="TTreeNodes">TTreeNodes</link> for more information about the properties and methods in the container class.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodes"/>
          <link id="TTreeNode"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.KeepCollapsedNodes">
        <short>
          <var>KeepCollapsedNodes</var> - if True, the collapsed nodes are to be retained.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.MultiSelectStyle">
        <short>Additional options for the MultiSelect property.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Options">
        <short>The set of options enabled in the tree view control.</short>
        <descr>
          <p>
            <var>Options</var> is a <var>TTreeViewOptions</var> property with the set of options enabled for the tree view control. <var>TTreeViewOption</var> contains the enumeration values allowed in the set type, and cause features and behaviors to be enabled when included in the set type.
          </p>
          <p>
            The default value for the property is defined in the <var>DefaultTreeViewOptions</var> constant. Assigning a new set of values to the property may cause other property values and/or the control state to be changed, and the control may be redrawn.
          </p>
        </descr>
        <seealso>
          <link id="TTreeViewOptions"/>
          <link id="TTreeViewOption"/>
          <link id="DefaultTreeViewOptions"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.ScrollBars">
        <short>Specifies the scroll bars displayed for the tree view control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Selected">
        <short>The selected tree node in the control.</short>
        <descr>
          <p>
            <var>Selected</var> is a <var>TTreeNode</var> property which contains the selected  tree node in the control. A tree node is selected when the Left or Right mouse button is clicked on the code. It can also be selected by assigning a <var>TTreeNode</var> instance to the property.
          </p>
          <p>
            When a tree node is selected or unselected, the Selected property in the TTreeNode instance is updated. Use the <var>OnChanging</var> event handler to determine if a specific tree node can become the selected node in the control. Use the <var>OnChange</var> event handler to perform actions needed after the tree node is made the Selected node in the control.
          </p>
          <p>
            Selecting a tree node forces it to become fully visible in the control. This includes expanding parent nodes to ensure that the node is visible.  The <var>OnExpanding</var> and <var>OnExpanded</var> event handlers are signalled before and after actions to a given tree node.
          </p>
          <p>
            Use the <var>Selections</var> property to access the list of selected tree nodes when multi-selection has been enabled in the <var>Options</var> for the control. Use the <var>SelectionCount</var> property to get the number of tree nodes in the Selections property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.OnChanging"/>
          <link id="TCustomTreeView.OnChange"/>
          <link id="TCustomTreeView.OnExpanding"/>
          <link id="TCustomTreeView.OnExpanded"/>
          <link id="TCustomTreeView.Selections"/>
          <link id="TCustomTreeView.SelectionCount"/>
          <link id="TCustomTreeView.Options"/>
          <link id="TTreeNode.Selected"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.SelectionColor">
        <short>
          Color used to paint the background for the selected tree node in the control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SelectionCount">
        <short>Number of selected nodes in the tree view.</short>
        <descr>
          <p>
            <var>SelectionCount</var> is a read-only <var>Cardinal</var> property with the number of selected Items in the control. SelectionCount contains the value from the SelectionCount property in Items, and indicates the number of <var>TTreeNode</var> instances available in the <var>Selections</var> property.
          </p>
          <p>
            SelectionCount and Selections are used when the value <var>tvoAllowMultiSelect</var> has been included in the <var>Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Selections"/>
          <link id="TCustomTreeView.Selected"/>
          <link id="TCustomTreeView.Options"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.SelectionFontColor">
        <short>Color used to draw the text for a selected item.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SelectionFontColorUsed">
        <short>Indicates if the selection font color is used for selected items.</short>
        <descr>
          <p>
            The default value for the property is <b>False</b>. Not used in the current LCL implementation.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Selections">
        <short>Provides indexed access to the multi-selected tree nodes in the control.</short>
        <descr>
          <p>
            <var>Selections</var> is an indexed read-only <var>TTreeNode</var> property which provides indexed access to the selected tree nodes in the control. Selections is relevant when <var>tvoAllowMultiselect</var> has been included in the <var>Options</var> for the control. Use <var>SelectionCount</var> to get the number of nodes included in the Selections property.
          </p>
          <p>
            Use <var>Selected</var> when multi-selection has not been enabled for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Selections.AIndex">
        <short>Ordinal position in the list of selected tree nodes.</short>
      </element>

      <element name="TCustomTreeView.SeparatorColor">
        <short>Color used to paint horizontal lines between tree nodes when enabled.</short>
        <descr>
          <p>
            <var>SeparatorColor</var> is a <var>TColor</var> property with the color used to paint horizontal lines between nodes in the tree hierarchy. SeparatorColor is used in the <var>DoPaintNode</var> method when <var>tvoShowSeparators</var> has been included in the <var>Options</var> for the control. It is assigned to the <var>Pen</var> and drawn using the <var>LineTo</var> method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.StateImages">
        <short>
          Image list with the bitmaps used to represent the state for nodes in the tree.
        </short>
        <descr>
          <p>
            StateImages is a TCustomImageList property which contains bitmaps used to represent the state for nodes in the tree hierarchy. Images in the list correspond to the values used in the TTreeNode.StateIndex property.
          </p>
          <p>
            Assigning a new value for the property causes the UnregisterChanges method in the image list to be called. The RegisterChanges method in the image list is called after the new images are assigned. The value in DefaultItemHeight is updated (when needed) to use the height for the images scaled to the current PPI setting in Font. The item height will include the default item spacing needed for the images. The control is redrawn when the new image list has been assigned to the property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.DoPaintNode"/>
          <link id="TCustomTreeView.UpdateDefaultItemHeight"/>
          <link id="TTreeNode.DisplayIconLeft"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.StateImagesWidth">
        <short>Width for the bitmaps in the StateImages property.</short>
        <descr>
          <p>
            StateImagesWidth is an Integer property which contains the width for the StateImages assigned in the control. StateImagesWidth provides the value that is scaled to the Pixels Per Inch setting in the Font property when StateImages have been assigned for the control.
          </p>
           <p>
             The default value for the property is 0 (zero), and indicates that an explicit image width has not been assigned.
           </p>
          <p>
            Setting a new value for the property causes the control to the redrawn.
          </p>
          <p>
            StateImagesWidth is used in the DoPaintNode method to retrieve the scaled image resolution for the bitmaps in StateImages.
          </p>
          <p>
            Use ImagesWidth to set the width for the bitmaps in the Images property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.TopItem">
        <short>
          <var>TopItem</var> - the first visible node of the tree.
        </short>
        <descr>
          <p>
            Use <var>TopItem</var> to get the top-most visible node. It is usually needed when tree view contains many nodes and scroll bar is required to display them all. If you need the first node of the tree regardless of visibility use <var>Items[0]</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Items">Items</link>
          <link id="TCustomTreeView.GetNodeAtY">GetNodeAtY</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.TreeLineColor">
        <short>Color used to draw the lines which connect the nodes in the tree.</short>
        <descr>
          <p>
            <var>TreeLineColor</var> is a <var>TColor</var> property with the color used to draw the lines which connect the nodes in the tree. The default value for the property is <var>clWindowFrame</var>. Setting a new value for the property causes the control to be redrawn.
          </p>
          <p>
            TreeLineColor is used in the <var>DoPaintNode</var> method to set the color for canvas pixels when <var>psPattern</var> is used in the <var>TreeLinePenStyle</var> property. This is done because the LCL does not currently support the psPattern pen style.
          </p>
          <p>
            TreeLineColor is also used in the <var>DoPaint</var> method to set the pen color when rendering insert marks for the nodes in the tree hierarchy.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.TreeLinePenStyle">
        <short>Style of the TPen used to draw lines used to connect nodes in the control.</short>
        <descr>
          <p>
            <var>TreeLinePenStyle</var> is a <var>TPenStyle</var>  property which contains the pen style used to draw lines connecting the nodes in the tree. TreeLinePenStyle can contain one of the following vales:
          </p>
          <ul>
            <li>psSolid</li>
            <li>psDash</li>
            <li>psDot</li>
            <li>psDashDot</li>
            <li>psDashDotDot</li>
            <li>psinsideFrame</li>
            <li>psPattern</li>
            <li>psClear</li>
          </ul>
          <p>
            The default value for the property is psPattern.
          </p>
          <p>
            TreeLinePenStyle is used in the <var>DoPaintNode</var> method to draw the lines which connect the nodes in the tree hierarchy.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.TabStop">
        <short>Enables or disables navigation using the Tab key.</short>
        <descr>
          <p>
            The default value for the property is True in TCustomTreeView.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
        </seealso>
      </element>

      <element name="TTreeView">
        <short>
          <var>TTreeView</var>  is a control that displays a hierarchical list of items.
        </short>
        <descr>
          <p>
            Use a <var>TTreeView</var> to display a hierarchical list of items. Items are shown by their caption and an optional bitmap.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView"/>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <element name="TTreeView.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TTreeView.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TTreeView.AutoExpand" link="#lcl.comctrls.TCustomTreeView.AutoExpand"/>
      <element name="TTreeView.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TTreeView.BackgroundColor" link="#lcl.comctrls.TCustomTreeView.BackgroundColor"/>
      <element name="TTreeView.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TTreeView.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
      <element name="TTreeView.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TTreeView.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TTreeView.DefaultItemHeight" link="#lcl.comctrls.TCustomTreeView.DefaultItemHeight"/>
      <element name="TTreeView.DisabledFontColor" link="#lcl.comctrls.TCustomTreeView.DisabledFontColor"/>
      <element name="TTreeView.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TTreeView.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TTreeView.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TTreeView.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TTreeView.ExpandSignColor" link="#lcl.comctrls.TCustomTreeView.ExpandSignColor"/>
      <element name="TTreeView.ExpandSignSize" link="#lcl.comctrls.TCustomTreeView.ExpandSignSize"/>
      <element name="TTreeView.ExpandSignType" link="#lcl.comctrls.TCustomTreeView.ExpandSignType"/>
      <element name="TTreeView.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TTreeView.HideSelection" link="#lcl.comctrls.TCustomTreeView.HideSelection"/>
      <element name="TTreeView.HotTrack" link="#lcl.comctrls.TCustomTreeView.HotTrack"/>
      <element name="TTreeView.HotTrackColor" link="#lcl.comctrls.TCustomTreeView.HotTrackColor"/>
      <element name="TTreeView.Images" link="#lcl.comctrls.TCustomTreeView.Images"/>
      <element name="TTreeView.ImagesWidth" link="#lcl.comctrls.TCustomTreeView.ImagesWidth"/>
      <element name="TTreeView.Indent" link="#lcl.comctrls.TCustomTreeView.Indent"/>
      <element name="TTreeView.MultiSelect" link="#lcl.comctrls.TCustomTreeView.MultiSelect"/>
      <element name="TTreeView.MultiSelectStyle" link="#lcl.comctrls.TCustomTreeView.MultiSelectStyle"/>

      <element name="TTreeView.ParentColor">
        <short/>
        <descr>
          <p>
            The default value for the property is False in TTreeView.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
        </seealso>
      </element>

      <element name="TTreeView.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TTreeView.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TTreeView.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TTreeView.ReadOnly" link="#lcl.comctrls.TCustomTreeView.ReadOnly"/>
      <element name="TTreeView.RightClickSelect" link="#lcl.comctrls.TCustomTreeView.RightClickSelect"/>
      <element name="TTreeView.RowSelect" link="#lcl.comctrls.TCustomTreeView.RowSelect"/>
      <element name="TTreeView.ScrollBars" link="#lcl.comctrls.TCustomTreeView.ScrollBars"/>
      <element name="TTreeView.SelectionColor" link="#lcl.comctrls.TCustomTreeView.SelectionColor"/>
      <element name="TTreeView.SelectionFontColor" link="#lcl.comctrls.TCustomTreeView.SelectionFontColor"/>
      <element name="TTreeView.SelectionFontColorUsed" link="#lcl.comctrls.TCustomTreeView.SelectionFontColorUsed"/>
      <element name="TTreeView.SeparatorColor" link="#lcl.comctrls.TCustomTreeView.SeparatorColor"/>
      <element name="TTreeView.ShowButtons" link="#lcl.comctrls.TCustomTreeView.ShowButtons"/>
      <element name="TTreeView.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TTreeView.ShowLines" link="#lcl.comctrls.TCustomTreeView.ShowLines"/>
      <element name="TTreeView.ShowRoot" link="#lcl.comctrls.TCustomTreeView.ShowRoot"/>
      <element name="TTreeView.SortType" link="#lcl.comctrls.TCustomTreeView.SortType"/>
      <element name="TTreeView.StateImages" link="#lcl.comctrls.TCustomTreeView.StateImages"/>
      <element name="TTreeView.StateImagesWidth" link="#lcl.comctrls.TCustomTreeView.StateImagesWidth"/>
      <element name="TTreeView.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>

      <element name="TTreeView.TabStop">
        <short>Enables or disables navigation using the Tab key.</short>
        <descr>
          <p>
            The default value for the property is True in TTreeView.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
        </seealso>
      </element>

      <element name="TTreeView.Tag" link="#rtl.classes.TComponent.Tag"/>
      <element name="TTreeView.ToolTips" link="#lcl.comctrls.TCustomTreeView.ToolTips"/>
      <element name="TTreeView.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TTreeView.OnAddition" link="#lcl.comctrls.TCustomTreeView.OnAddition"/>
      <element name="TTreeView.OnAdvancedCustomDraw" link="#lcl.comctrls.TCustomTreeView.OnAdvancedCustomDraw"/>
      <element name="TTreeView.OnAdvancedCustomDrawItem" link="#lcl.comctrls.TCustomTreeView.OnAdvancedCustomDrawItem"/>
      <element name="TTreeView.OnChange" link="#lcl.comctrls.TCustomTreeView.OnChange"/>
      <element name="TTreeView.OnChanging" link="#lcl.comctrls.TCustomTreeView.OnChanging"/>
      <element name="TTreeView.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TTreeView.OnCollapsed" link="#lcl.comctrls.TCustomTreeView.OnCollapsed"/>
      <element name="TTreeView.OnCollapsing" link="#lcl.comctrls.TCustomTreeView.OnCollapsing"/>
      <element name="TTreeView.OnCompare" link="#lcl.comctrls.TCustomTreeView.OnCompare"/>
      <element name="TTreeView.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TTreeView.OnCreateNodeClass" link="#lcl.comctrls.TCustomTreeView.OnCreateNodeClass"/>
      <element name="TTreeView.OnCustomCreateItem" link="#lcl.comctrls.TCustomTreeView.OnCustomCreateItem"/>
      <element name="TTreeView.OnCustomDraw" link="#lcl.comctrls.TCustomTreeView.OnCustomDraw"/>
      <element name="TTreeView.OnCustomDrawItem" link="#lcl.comctrls.TCustomTreeView.OnCustomDrawItem"/>
      <element name="TTreeView.OnCustomDrawArrow" link="#lcl.comctrls.TCustomTreeView.OnCustomDrawArrow"/>
      <element name="TTreeView.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TTreeView.OnDeletion" link="#lcl.comctrls.TCustomTreeView.OnDeletion"/>
      <element name="TTreeView.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TTreeView.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TTreeView.OnEdited" link="#lcl.comctrls.TCustomTreeView.OnEdited"/>
      <element name="TTreeView.OnEditing" link="#lcl.comctrls.TCustomTreeView.OnEditing"/>
      <element name="TTreeView.OnEditingEnd" link="#lcl.comctrls.TCustomTreeView.OnEditingEnd"/>
      <element name="TTreeView.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TTreeView.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TTreeView.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TTreeView.OnExpanded" link="#lcl.comctrls.TCustomTreeView.OnExpanded"/>
      <element name="TTreeView.OnExpanding" link="#lcl.comctrls.TCustomTreeView.OnExpanding"/>
      <element name="TTreeView.OnGetImageIndex" link="#lcl.comctrls.TCustomTreeView.OnGetImageIndex"/>
      <element name="TTreeView.OnGetSelectedIndex" link="#lcl.comctrls.TCustomTreeView.OnGetSelectedIndex"/>
      <element name="TTreeView.OnHasChildren" link="#lcl.comctrls.TCustomTreeView.OnHasChildren"/>
      <element name="TTreeView.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TTreeView.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TTreeView.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TTreeView.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TTreeView.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TTreeView.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TTreeView.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TTreeView.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TTreeView.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TTreeView.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TTreeView.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TTreeView.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TTreeView.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TTreeView.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TTreeView.OnNodeChanged" link="#lcl.comctrls.TCustomTreeView.OnNodeChanged"/>
      <element name="TTreeView.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TTreeView.OnSelectionChanged" link="#lcl.comctrls.TCustomTreeView.OnSelectionChanged"/>
      <element name="TTreeView.OnShowHint" link="#lcl.controls.TControl.OnShowHint"/>
      <element name="TTreeView.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TTreeView.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TTreeView.Options" link="#lcl.comctrls.TCustomTreeView.Options"/>
      <element name="TTreeView.Items" link="#lcl.comctrls.TCustomTreeView.Items"/>
      <element name="TTreeView.TreeLineColor" link="#lcl.comctrls.TCustomTreeView.TreeLineColor"/>
      <element name="TTreeView.TreeLinePenStyle" link="#lcl.comctrls.TCustomTreeView.TreeLinePenStyle"/>

      <element name="TTVGetNodeText">
        <short>Specifies an event handler used to get the text for a tree node.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVGetNodeText.Result">
        <short>Text displayed for the tree node.</short>
      </element>
      <element name="TTVGetNodeText.Node">
        <short>Tree node examined in the routine.</short>
      </element>

      <element name="TTreeNodeExpandedState">
        <short>
          Class used to save and restore the expanded state of a TTreeView.
        </short>
        <descr>
          <p>
            <var>TTreeNodeExpandedState</var> is a class used to save and restore the expanded state of a TTreeView. The nodes are identified by their Text property.
          </p>
          <p>Usage example:</p>
<code>// save old expanded state
OldExpanded := TTreeNodeExpandedState.Create(ATreeView);
//   ... change a lot of nodes ...
// restore old expanded state
OldExpanded.Apply(ATreeView);
OldExpanded.Free;
</code>
        </descr>
        <seealso>
          <link id="TTreeView"/>
        </seealso>
      </element>

      <element name="TTreeNodeExpandedState.FOnGetNodeText"/>

      <element name="TTreeNodeExpandedState.DefaultGetNodeText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.DefaultGetNodeText.Result">
        <short/>
      </element>
      <element name="TTreeNodeExpandedState.DefaultGetNodeText.Node">
        <short/>
      </element>

      <element name="TTreeNodeExpandedState.NodeText">
        <short>
          <var>NodeText</var> - the text in the current node.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.Children">
        <short>
          <var>Children</var> - the children of the current node, as an AvgLvlTree.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.Create">
        <short>Constructor for the class instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.Create.FirstTreeNode">
        <short/>
      </element>
      <element name="TTreeNodeExpandedState.Create.GetNodeTextEvent">
        <short/>
      </element>
      <element name="TTreeNodeExpandedState.Create.TreeView">
        <short/>
      </element>

      <element name="TTreeNodeExpandedState.Destroy">
        <short>Destructor for the class instance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.Clear">
        <short>
          <var>Clear</var> the expanded nodes for the tree structure.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.CreateChildNodes">
        <short>
          <var>CreateChildNodes</var> - constructor for the child nodes.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.CreateChildNodes.FirstTreeNode">
        <short/>
      </element>

      <element name="TTreeNodeExpandedState.Apply">
        <short>Used to restore the expanded state for a node or tree view.</short>
        <descr>
          <p>
            <var>Apply</var> is an overloaded procedure used to restore the expanded state for nodes in a tree structure. The overloaded variants allow either a specific tree node or the first node in the tree view to be used to reconstruct the tree structure.
          </p>
          <p>
            <var>CollapseToo</var> indicates whether child tree nodes are collapsed (when <b>True</b>) or expanded.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.Apply.FirstTreeNode">
        <short>Initial tree node examined in the method.</short>
      </element>
      <element name="TTreeNodeExpandedState.Apply.TreeView">
        <short>Tree view with nodes examined in the method.</short>
      </element>
      <element name="TTreeNodeExpandedState.Apply.CollapseToo">
        <short>Collapses previously expanded child nodes when True.</short>
      </element>

      <element name="TTreeNodeExpandedState.OnGetNodeText">
        <short>Event handler signalled to get the text for the specified tree node.</short>
        <descr>
          <p>
            OnGetNodeText is a TTVGetNodeText property with the event handler signalled to get the text for the tree node passed as an argument.  It is signalled from the CreateChildNodes method when the tree node has a parent node, or when expanding its  child nodes. It is also signalled from the Apply method to get the text for an expanded child node.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="THeaderSectionState">
        <short>
          Enumerated type which represents selection states for THeaderSection.
        </short>
        <descr>
          <p>
            <var>THeaderSectionState</var> is the type used to implement the <var>THeaderSection.State</var> property.
          </p>
        </descr>
        <seealso>
          <link id="THeaderSection.State"/>
        </seealso>
      </element>
      <element name="THeaderSectionState.hsNormal">
        <short>The header section is drawn in its normal state.</short>
      </element>
      <element name="THeaderSectionState.hsHot">
        <short>The header section is drawn in its "hot-lighted" state.</short>
      </element>
      <element name="THeaderSectionState.hsPressed">
        <short>The header section is drawn in its "pressed" state.</short>
      </element>

      <element name="THeaderSection">
        <short>
          Implements a section displayed on a TCustomHeaderControl / THeaderControl instance.
        </short>
        <descr>
          <p>
            <var>THeaderSection</var> is a <var>TCollectionItem</var> descendant which implements a section displayed on a <var>TCustomHeaderControl</var> / <var>THeaderControl</var> instance. THeaderSection is the type added and maintained in the <var>THeaderSections</var> collection, and used in the <var>TCustomHeaderControl.Sections</var> property.
          </p>
          <p>
            THeaderSection has properties which identify its visual characteristics. This includes the text displayed for the section, its alignment, minimum and maximum widths, and an index for an optional image. Other properties contain run-time information about the section, including its left and right coordinates and its display state.
          </p>
          <p>
            THeaderSection instances are normally created at design-time and edited using the IDE object inspector. They can be created at run-time using methods in the THeaderSections collection, and edited in code.
          </p>
        </descr>
        <seealso>
          <link id="THeaderSections"/>
          <link id="TCustomHeaderControl.Sections"/>
        </seealso>
      </element>

      <element name="THeaderSection.FAlignment"/>
      <element name="THeaderSection.FImageIndex"/>
      <element name="THeaderSection.FMinWidth"/>
      <element name="THeaderSection.FMaxWidth"/>
      <element name="THeaderSection.FState"/>
      <element name="THeaderSection.FText"/>
      <element name="THeaderSection.FVisible"/>
      <element name="THeaderSection.FWidth"/>
      <element name="THeaderSection.FOriginalIndex"/>

      <element name="THeaderSection.GetWidth">
        <short>Gets the value for the Width property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.GetWidth.Result">
        <short>Value for the property.</short>
      </element>

      <element name="THeaderSection.GetLeft">
        <short>Gets the value for the Left property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.GetLeft.Result">
        <short>Value for the property.</short>
      </element>

      <element name="THeaderSection.GetRight">
        <short>Gets the value for the Right property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.GetRight.Result">
        <short>Value for the property.</short>
      </element>

      <element name="THeaderSection.SetAlignment">
        <short>Sets the value for the Alignment property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetAlignment.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.SetMaxWidth">
        <short>Sets the value for the MaxWidth property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetMaxWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.SetMinWidth">
        <short>Sets the value for the MinWidth property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetMinWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.SetState">
        <short>Sets the value for the State property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetState.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.SetText">
        <short>Sets the value for the Text property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetText.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.SetVisible">
        <short>Sets the value for the Visible property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetVisible.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.SetWidth">
        <short>Sets the value for the Width property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetWidth.Value">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.SetImageIndex">
        <short>Sets the value for the ImageIndex property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetImageIndex.Value">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSection.CheckConstraints">
        <short>
          Ensures that the width for the section is within its minimum and maximum values.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="THeaderSection.GetDisplayName">
        <short>Gets the value for the DisplayName property.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.DisplayName"/>
        </seealso>
      </element>
      <element name="THeaderSection.Result">
        <short>Display name for the collection item.</short>
      </element>

      <element name="THeaderSection.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for THeaderSection, and
            calls the inherited <var>Create</var> method on entry.  The value in ACollection is used as the Owner of the collection item. Create sets the default values for properties in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="THeaderSection.Create.ACollection">
        <short>Collection which owns the class instance.</short>
      </element>

      <element name="THeaderSection.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies properties directly, otherwise calls inherited <var>Assign</var> which probably raises an exception.
        </short>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="THeaderSection.Assign.Source">
        <short/>
      </element>

      <element name="THeaderSection.Left">
        <short>The position of the left boundary of the section.</short>
      </element>

      <element name="THeaderSection.Right">
        <short>The position of the right boundary of the section.</short>
      </element>

      <element name="THeaderSection.State">
        <short>
          <var>State</var> - whether normal, hot (i.e. mouse hovers over it ready to be selected) or pressed (selected).
        </short>
      </element>

      <element name="THeaderSection.Alignment">
        <short>
          <var>Alignment</var> - whether text is to be left or right justified or centered.
        </short>
      </element>

      <element name="THeaderSection.ImageIndex">
        <short>Index of the image in the imagelist.</short>
      </element>

      <element name="THeaderSection.MaxWidth">
        <short>Maximum permissible width of a section.</short>
      </element>

      <element name="THeaderSection.MinWidth">
        <short>Minimum permissible width of a section (default = 0).</short>
      </element>

      <element name="THeaderSection.Text">
        <short>The text string that is to appear in the section.</short>
      </element>

      <element name="THeaderSection.Width">
        <short>
          The <var>Width </var>of the section that appears on the <var>THeaderControl</var>.
        </short>
      </element>

      <element name="THeaderSection.Visible">
        <short>Indicates if the section is visible in the header control.</short>
        <descr>
          <p>
            <var>Visible</var> is a <var>Boolean</var> property which indicates if the header section is visible in the header control. When set to <b>False</b>,  the section cannot be drawn using the TCustomHeaderControl.PaintSection method.
          </p>
          <p>
            The default value for the property is <b>True</b>, as set in the constructor for the class instance.
          </p>
        </descr>
      </element>

      <element name="THeaderSection.OriginalIndex">
        <short>
          <var>OriginalIndex</var> - index which doesn't change when the user reorders the sections.
        </short>
      </element>

      <element name="THeaderSectionClass">
        <short>
          Class reference used to create new THeaderSection instances.
        </short>
      </element>

      <element name="THeaderSections">
        <short>
          Implements a collection for section in a TCustomHeaderControl control.
        </short>
        <descr>
          <p>
            <var>THeaderSections</var> is a <var>TCollection</var> descendant used to store sections defined for a <var>TCustomHeaderControl</var> instance. THeaderSections is the type used to implement the <var>Sections</var> property in TCustomHeaderControl.
          </p>
          <p>
            THeaderSections re-implements methods from the ancestor class that are used to add, insert, delete, and retrieve <var>THeaderSection</var> instances stored in the collection.
          </p>
        </descr>
        <seealso>
          <link id="THeaderSection"/>
          <link id="TCustomHeaderControl.Sections"/>
          <link id="#rtl.classes.TCollection">TCollection</link>
        </seealso>
      </element>

      <element name="THeaderSections.FHeaderControl"/>

      <element name="THeaderSections.GetItem">
        <short>Gets the value for the indexed Items property.</short>
        <descr/>
        <seealso>
          <link id="THeaderSections.Items"/>
          <link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
        </seealso>
      </element>
      <element name="THeaderSections.GetItem.Result">
        <short>Value for the property.</short>
      </element>
      <element name="THeaderSections.GetItem.Index">
        <short>Ordinal position in the collection for the requested item.</short>
      </element>

      <element name="THeaderSections.SetItem">
        <short>Sets the value for the indexed Items property.</short>
        <descr/>
        <seealso>
          <link id="THeaderSections.Items"/>
          <link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
        </seealso>
      </element>
      <element name="THeaderSections.SetItem.Index">
        <short>Ordinal position in the collection for the affected item.</short>
      </element>
      <element name="THeaderSections.SetItem.Value">
        <short>New value for the property.</short>
      </element>

      <element name="THeaderSections.GetOwner">
        <short>
          Gets the Owner of the class instance.
        </short>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="THeaderSections.GetOwner.Result">
        <short>Owner of the class instance.</short>
      </element>

      <element name="THeaderSections.Update">
        <short>Performs actions needed when a collection item has been changed.</short>
        <descr>
          <p>
            <var>Update</var> is an overridden method used to update the section in the header control. When Item is assigned, the UpdateSection method in the THeaderControl instance is called. If Item is unassigned (contains Nil), the UpdateSections method in the THeaderControl instance is called update all sections in the collection.
          </p>
          <remark>
            Update does <b>not</b> call the inherited method which notifies observers of the change.
          </remark>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection">TCollection</link>
          <link id="#rtl.classes.TPersistent.FPONotifyObservers">TPersistent.FPONotifyObservers</link>
        </seealso>
      </element>
      <element name="THeaderSections.Update.Item">
        <short>Section updated in the collection for the header control.</short>
      </element>

      <element name="THeaderSections.Create">
        <short>Constructor for the class instance.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <element name="THeaderSections.Create.HeaderControl">
        <short>Owner of the collection.</short>
      </element>

      <element name="THeaderSections.Add">
        <short>Creates a new header section and adds it to the collection.</short>
        <descr>
          <p>
            Adds calls the AddItem method to get the return value for the method.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
        </seealso>
      </element>
      <element name="THeaderSections.Add.Result">
        <short>Collection item created and stored in the method.</short>
      </element>

      <element name="THeaderSections.AddItem">
        <short>
          Adds the specified header section at the position specified in Index.
        </short>
        <descr>
          <p>
            The <var>THeaderSection</var> instance in <var>Item</var> is created when the argument value is <b>Nil</b> (unassigned). The return value contains the new header section  instance, or the existing value in Item when it is assigned.
          </p>
        </descr>
      </element>
      <element name="THeaderSections.AddItem.Result">
        <short>Header section created (optional) and stored in the method.</short>
      </element>
      <element name="THeaderSections.AddItem.Item">
        <short>Header section to add in the method, or Nil to create a new one.</short>
      </element>
      <element name="THeaderSections.AddItem.Index">
        <short>Ordinal position in the collection where the header section is stored.</short>
      </element>

      <element name="THeaderSections.Insert">
        <short>Inserts a new collection item at the specified position in the collection.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Insert">TCollection.Insert</link>
        </seealso>
      </element>
      <element name="THeaderSections.Insert.Result">
        <short>Header section created in the method.</short>
      </element>
      <element name="THeaderSections.Insert.Index">
        <short>
          Ordinal position in the collection where the new header section is inserted.
        </short>
      </element>

      <element name="THeaderSections.Delete">
        <short>
          Deletes the collection item stored at the specified position in the collection.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Delete">TCollection.Delete</link>
        </seealso>
      </element>
      <element name="THeaderSections.Delete.Index">
        <short>Ordinal position for the collection item deleted in the method.</short>
      </element>

      <element name="THeaderSections.Items">
        <short>
          <var>Items</var> - the series of individual HeaderSections in the collection.
        </short>
        <descr>
          <p>
            <var>Items</var> is an indexed <var>THeaderSection</var> property which provides access to the header sections in the collection by their ordinal position. It is implemented using TFpList to store the collection items. Items is the default property for the class instance.
          </p>
          <p>
            When reading a value in the property, the item is cast to the THeaderSection type used in the collection. <var>SetItem</var> is called to store a value for the indexed property.
          </p>
        </descr>
        <seealso>
          <link id="THeaderSection"/>
        </seealso>
      </element>
      <element name="THeaderSections.Items.Index">
        <short>Ordinal position in the collection for the property value.</short>
      </element>

      <element name="TSectionTrackState">
        <short>
          Enumerated type with tracking states for a header section.
        </short>
      </element>
      <element name="TSectionTrackState.tsTrackBegin">
        <short>Mouse tracking for a section is enabled.</short>
      </element>
      <element name="TSectionTrackState.tsTrackMove">
        <short>Mouse tracking for a section drag operation is enabled.</short>
      </element>
      <element name="TSectionTrackState.tsTrackEnd">
        <short>Mouse tracking for a section is disabled.</short>
      </element>

      <element name="TCustomSectionTrackEvent">
        <short>
          <var>TCustomSectionTrackEvent</var> - generic event handling method for custom tracking a header section.
        </short>
      </element>
      <element name="TCustomSectionTrackEvent.HeaderControl">
        <short/>
      </element>
      <element name="TCustomSectionTrackEvent.Section">
        <short/>
      </element>
      <element name="TCustomSectionTrackEvent.Width">
        <short/>
      </element>
      <element name="TCustomSectionTrackEvent.State">
        <short/>
      </element>

      <element name="TSectionDragEvent">
        <short>
          <var>TSectionDragEvent</var> - generic event handling method for dragging a header section.
        </short>
      </element>
      <element name="TSectionDragEvent.Sender">
        <short/>
      </element>
      <element name="TSectionDragEvent.FromSection">
        <short/>
      </element>
      <element name="TSectionDragEvent.ToSection">
        <short/>
      </element>
      <element name="TSectionDragEvent.AllowDrag">
        <short/>
      </element>

      <element name="TCustomSectionNotifyEvent">
        <short>
          <var>TCustomSectionNotifyEvent</var> - generic event notification method for header section.
        </short>
      </element>
      <element name="TCustomSectionNotifyEvent.HeaderControl">
        <short/>
      </element>
      <element name="TCustomSectionNotifyEvent.Section">
        <short/>
      </element>

      <element name="TCustomHCCreateSectionClassEvent">
        <short>
          <var>TCustomHCCreateSectionClassEvent</var> - generic event handler method for custom creation of header control.
        </short>
      </element>
      <element name="TCustomHCCreateSectionClassEvent.Sender">
        <short/>
      </element>
      <element name="TCustomHCCreateSectionClassEvent.SectionClass">
        <short/>
      </element>

      <element name="TCustomHeaderControl">
        <short>
          <var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions.
        </short>
        <descr>
          <p>
            <var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions.
          </p>
          <p>
            <var>THeaderControl</var> offers a widget that could be placed along the edge of a <var>Panel</var> or <var>Form</var> allowing a highly customized mechanism for selection. However, there are no intrinsically associated display areas and it is the developer's responsibility to supply an index associated with the selection from the <var>THeaderControl</var> and determining what action is to occur or what is to be displayed in any attached Panel or Form.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TCustomHeaderControl.FDragReorder"/>
      <element name="TCustomHeaderControl.FSections"/>
      <element name="TCustomHeaderControl.FImages"/>
      <element name="TCustomHeaderControl.FImagesWidth"/>
      <element name="TCustomHeaderControl.FPaintRect"/>
      <element name="TCustomHeaderControl.FDown"/>
      <element name="TCustomHeaderControl.FDownPoint"/>
      <element name="TCustomHeaderControl.FTracking"/>
      <element name="TCustomHeaderControl.FDragging"/>
      <element name="TCustomHeaderControl.FEndDragSectionIndex"/>
      <element name="TCustomHeaderControl.FSelectedSection"/>
      <element name="TCustomHeaderControl.FMouseInControl"/>
      <element name="TCustomHeaderControl.FSavedCursor"/>
      <element name="TCustomHeaderControl.FOnSectionClick"/>
      <element name="TCustomHeaderControl.FOnSectionResize"/>
      <element name="TCustomHeaderControl.FOnSectionTrack"/>
      <element name="TCustomHeaderControl.FOnSectionSeparatorDblClick"/>
      <element name="TCustomHeaderControl.FOnSectionDrag"/>
      <element name="TCustomHeaderControl.FOnSectionEndDrag"/>
      <element name="TCustomHeaderControl.FOnCreateSectionClass"/>

      <element name="TCustomHeaderControl.GetSectionFromOriginalIndex">
        <short>Gets the value for the indexed SectionFromOriginalIndex property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.GetSectionFromOriginalIndex.Result">
        <short>value for the property.</short>
      </element>
      <element name="TCustomHeaderControl.GetSectionFromOriginalIndex.OriginalIndex">
        <short>Original position (ignoring visibility) in the Sections property.</short>
      </element>

      <element name="TCustomHeaderControl.SetImages">
        <short>Sets the value for the Images property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SetImages.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomHeaderControl.SetImagesWidth">
        <short>Sets the value for the ImagesWidth property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SetImagesWidth.AImagesWidth">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomHeaderControl.SetSections">
        <short>Sets the value for the Sections property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SetSections.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomHeaderControl.UpdateSection">
        <short>Updates the control by calling Repaint.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.UpdateSection.Index">
        <short/>
      </element>

      <element name="TCustomHeaderControl.UpdateSections">
        <short>Updates all Sections in the control by calling Repaint.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.CreateSection">
        <short>
          Creates a new header section for the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.CreateSection.Result">
        <short>THeaderSection instance created in the method.</short>
      </element>

      <element name="TCustomHeaderControl.CreateSections">
        <short>
          Creates the collection used to store header sections defined in the control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.CreateSections.Result">
        <short>THeaderSections instance created in the method.</short>
      </element>

      <element name="TCustomHeaderControl.Loaded" link="#lcl.controls.TWinControl.Loaded"/>

      <element name="TCustomHeaderControl.Notification">
        <short>
          Handles the notification when a component is added to or removed from the class instance.
        </short>
        <descr>
          <p>
            Calls the inherited method on entry. Ensures that the <var>Images</var> member is set to <b>Nil</b> when the component is removed from the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TComponent">TComponent</link>
        </seealso>
      </element>

      <element name="TCustomHeaderControl.SectionClick">
        <short>
          Performs actions needed when the mouse is clicked on the specified header section.
        </short>
        <descr>
          <p>
            Signals the <var>OnSectionClick</var> event handler (when assigned). Called from the <var>Click</var> method when the mouse event occurred on the header section in the <var>Section</var> argument.
          </p>
        </descr>
        <seealso>
          <link id="TCustomHeaderControl.OnSectionClick"/>
          <link id="TCustomHeaderControl.Click"/>
          <link id="TCustomHeaderControl.Sections"/>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.SectionClick.Section">
        <short>Header section for the mouse event.</short>
      </element>

      <element name="TCustomHeaderControl.SectionResize">
        <short>
          Performs actions needed to resize the specified header section.
        </short>
        <descr>
          <p>
            Signals the <var>OnSectionResize</var> event handler (when assigned). Called from the <var>MouseUp</var> method when mouse tracking has been ended for the specified <var>Section</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionResize.Section">
        <short>Header section for the resize action.</short>
      </element>

      <element name="TCustomHeaderControl.SectionTrack">
        <short>
          Performs actions needed when the mouse tracking state for a header section has changed.
        </short>
        <descr>
          <p>
            Signals the <var>OnSectionTrack</var> event handler (when assigned). Called from the <var>MouseDown</var>, <var>MouseMove</var>, and  <var>MouseUp</var> methods when mouse tracking is active for a section in the header control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomHeaderControl.MouseDown"/>
          <link id="TCustomHeaderControl.MouseMove"/>
          <link id="TCustomHeaderControl.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.SectionTrack.Section">
        <short>Header section for the mouse tracking state.</short>
      </element>
      <element name="TCustomHeaderControl.SectionTrack.State">
        <short>New mouse tracking state for the action.</short>
      </element>

      <element name="TCustomHeaderControl.SectionSeparatorDblClick">
        <short>
          Performs actions to handle a mouse double click event for the specified header section.
        </short>
        <descr>
          <p>
            Signals the <var>OnSectionSeparatorDblClick</var> event handler (when assigned). Called from the <var>DblClick</var> method when the mouse event occurs when mouse tracking has been enabled for the header control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomHeaderControl.OnSectionSeparatorDblClick"/>
          <link id="TCustomHeaderControl.DblClick"/>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.SectionSeparatorDblClick.Section">
        <short>Header section for the double click mouse event.</short>
      </element>

      <element name="TCustomHeaderControl.SectionEndDrag">
        <short>
          <var>SectionEndDrag</var> - method for emulating the <var>OnSectionEndDrag</var> event.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.SectionDrag">
        <short>
          <var>SectionDrag</var> - method to emulate the <var>OnSectionDrag </var>event.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionDrag.Result">
        <short/>
      </element>
      <element name="TCustomHeaderControl.SectionDrag.FromSection">
        <short/>
      </element>
      <element name="TCustomHeaderControl.SectionDrag.ToSection">
        <short/>
      </element>

      <element name="TCustomHeaderControl.MouseEnter" link="#lcl.controls.TControl.MouseEnter"/>
      <element name="TCustomHeaderControl.MouseLeave" link="#lcl.controls.TControl.MouseLeave"/>
      <element name="TCustomHeaderControl.MouseDown" link="#lcl.controls.TControl.MouseDown"/>
      <element name="TCustomHeaderControl.MouseMove" link="#lcl.controls.TControl.MouseMove"/>
      <element name="TCustomHeaderControl.MouseUp" link="#lcl.controls.TControl.MouseUp"/>

      <element name="TCustomHeaderControl.UpdateState">
        <short>
          <var>UpdateState</var> - bring the state of the control up-to-date.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.GetControlClassDefaultSize">
        <short>
          Gets the default size for new instances of the class.
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomHeaderControl.DoAutoAdjustLayout">
        <short>
          Applies an automatic layout policy to the control using the specified scaling factors.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TCustomHeaderControl.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TCustomHeaderControl.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TCustomHeaderControl.SectionFromOriginalIndex">
        <short>
          <var>SectionFromOriginalIndex</var> - the section as defined by the original (unchanged) index.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionFromOriginalIndex.OriginalIndex">
        <short/>
      </element>

      <element name="TCustomHeaderControl.Create">
        <short>
          Constructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for <var>TCustomHeaderControl</var>, and calls the inherited <var>Create</var> on entry.
          </p>
          <p>
            Create allocates resources needed for the Sections property by call CreateSections. It also sets the default size for the control using the values returned from GetControlClassDefaultSize.
          </p>
          <p>
            The control style flags are updated in the method to include mouse capture and click events and to remove caption display for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomHeaderControl.Destroy">
        <short>
          Destructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for <var>TCustomHeaderControl</var>. It ensures that resources allocated to the Sections property are freed, and calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomHeaderControl.Click" link="#lcl.controls.TControl.Click"/>
      <element name="TCustomHeaderControl.DblClick" link="#lcl.controls.TControl.DblClick"/>

      <element name="TCustomHeaderControl.GetSectionAt">
        <short>
          Gets the header section at the position specified in P.
        </short>
        <descr>
          <p>
            <var>GetSectionAt</var> is an <var>Integer</var> function used to get the position for the header section found at the coordinates in P.
          </p>
          <p>
            GetSectionAt iterates over the <var>THeaderSection</var> instances in <var>Sections</var> to find a  matching collection item. A match is found when the X- axis coordinate in P is within the Left and Right  values for the header section.
          </p>
          <p>
            The return value contains the ordinal position in Sections where the header section is stored, or -1 if a header section was not found for the coordinates.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.GetSectionAt.Result">
        <short>Ordinal position in Sections for the header section.</short>
      </element>
      <element name="TCustomHeaderControl.GetSectionAt.P">
        <short>TPoint instance with the coordinates examined in the method.</short>
      </element>

      <element name="TCustomHeaderControl.Paint">
        <short>
          Draws the control to its Canvas using highlighting, drag images, and theme details.
        </short>
        <descr>
          <p>
            <var>Paint</var> is an overridden method in <var>TCustomHeaderControl</var> used to draw the control to its <var>Canvas</var>.
          </p>
          <p>
            Paint calls the inherited method on entry to signal the OnPaint event handler (when assigned). The display rectangle is updated to reflect the current Width and Height for the control.
          </p>
          <p>
            Paint iterates over the header sections defined in the Sections property, and calls PaintSection to render each one. If all sections fit within the control display area without scrolling, theme services are used to draw the control to the control to its Canvas.
          </p>
          <p>
            Paint handles configuring the Canvas and drawing the preview when a section drag operation is in effect.
          </p>
          <p>
            See PaintSection for more information about the actions performed to draw an individual header section for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
        </seealso>
      </element>

      <element name="TCustomHeaderControl.PaintSection">
        <short>
          Paints the specified header section to the Canvas for the control.
        </short>
        <descr>
          <p>
            <var>PaintSection</var> is a method used to paint the specified header section to the <var>Canvas</var> for the <var>THeaderControl</var> control.
          </p>
          <p>
            <var>Index</var> contains the ordinal position for the <var>THeaderSection</var> instance in the <var>Sections</var> collection. No actions are performed in the method if the header section is not <var>Visible</var>.
          </p>
          <p>
            PaintSection draws the header section using the <var>Left</var> and <var>Right</var> properties in the THeaderSection instance. The value in its <var>State</var> property is used to render the section by calling methods in ThemeServices. When Images have been assigned in the control, and the header section  has an assigned image index, it is drawn to the Canvas.  When Text contains a non-empty value, it is also rendered to the Canvas using the DrawText method in ThemeServices.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.PaintSection.Index">
        <short>Ordinal position for the header section rendered in the method.</short>
      </element>

      <element name="TCustomHeaderControl.ChangeScale">
        <short>
          Scales the width of the header sections in the control using the specified multiplier and divisor.
        </short>
        <descr>
          <p>
            <var>ChangeScale</var> is an overridden method in TCustomHeaderControl, and calls the inherited method on entry to scale the overall size for the control and its child controls. ChangeScale applies the scaling factor represented by M and D to the individual header sections defined in the Sections collection. The Width for each THeaderSection instance is updated using the multiplier and divisor to scale the section width.
          </p>
        </descr>
        <seealso>
          <link id="TCustomHeaderControl.Sections"/>
          <link id="THeaderSection"/>
          <link id="#lcl.controls.TWinControl.ChangeScale">TWinControl.ChangeScale</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.ChangeScale.M">
        <short>Multiplier for the scaling factor.</short>
      </element>
      <element name="TCustomHeaderControl.ChangeScale.D">
        <short>Divisor for the scaling factor.</short>
      </element>

      <element name="TCustomHeaderControl.DragReorder">
        <short>
          <var>DragReorder</var> - find out if the sections are allowed to be re-ordered by dragging.
        </short>
      </element>

      <element name="TCustomHeaderControl.Images">
        <short>
          Contains bitmaps displayed on the header sections for the control.
        </short>
        <descr>
          <p>
            The control cannot display images on the header section if Images has not been assigned or is empty.
          </p>
          <p>
            Use the ImageIndex property for the THeaderSection instances in Sections to assign the image used for the header section.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.ImagesWidth">
        <short>Specifies the width for Images displayed in the header control.</short>
        <descr>
          <p>
            If <var>ImagesWidth</var> is unassigned (contains 0), the width of the bitmaps in <var>Images</var> is used.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.Sections">
        <short>
          <var>Sections</var> - the short segments of the header separated by vertical bars that function as the elementary selection units of the header.
        </short>
        <descr>
          <p>
            <var>Sections</var> is a <var>THeaderSections</var> property with the collection of header sections defined for the control. The <var>THeaderSection</var> instances in the collection contain the size, layout, content, appearance, and state for each header section.
          </p>
        </descr>
        <seealso>
          <link id="THeaderSections"/>
          <link id="THeaderSection"/>
        </seealso>
      </element>

      <element name="TCustomHeaderControl.OnSectionDrag">
        <short>
          <var>OnSectionDrag</var> - event handler for dragging the section of header.
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionEndDrag">
        <short>
          <var>OnSectionEndDrag</var> - event handler for ending the drag process for this section.
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionClick">
        <short>
          <var>OnSectionClick</var> - event handler for mouse click on this section of header.
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionResize">
        <short>
          <var>OnSectionResize</var> - event handler for re-sizing this section of the header.
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionTrack">
        <short>
          <var>OnSectionTrack</var> - event handler for tracking this section.
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionSeparatorDblClick">
        <short>
          <var>OnSectionSeparatorDblClick</var> - event handler for double-click on the separator between sections.
        </short>
      </element>

      <element name="TCustomHeaderControl.OnCreateSectionClass">
        <short>
          <var>OnCreateSectionClass</var> - event handler for creating a new section class.
        </short>
      </element>

      <element name="THeaderControl">
        <short>
          <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions.
        </short>
        <descr>
          <p>
            <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions.
          </p>
          <p>
            <var>THeaderControl</var> offers a widget that could be placed along the edge of a <var>Panel</var> or <var>Form</var> allowing a highly customized mechanism for selection. However there are no intrinsically associated display areas and it is the developer's responsibility to supply an index associated with the selection from the <var>THeaderControl</var> and determine what action is to occur or what is to be displayed in any attached Panel or Form.
          </p>
          <p>
            THeaderControl is used by selecting its icon from the Common Controls tab of the IDE Component Palette and placing it on the Form in the desired position. It may be convenient to dock it with a <var>Form</var> or <var>Panel</var> whose properties it is to be used for controlling.
          </p>
          <p>
            After size, position, docking, alignment, anchoring etc have been performed using the Object Inspector or Form Designer, the Sections of the Header can be created by selecting the control, right-clicking with the mouse and choosing 'Section Editor'. A Stringlist editor will pop up with options to add, delete or move entries up or down the list. Each entry is given an Index which can be used in OnClick event handlers to determine the action to be taken when that section is selected at run-time.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.MultiPageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="THeaderControl.Align" link="#lcl.controls.TControl.Align"/>
      <element name="THeaderControl.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="THeaderControl.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="THeaderControl.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
      <element name="THeaderControl.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="THeaderControl.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="THeaderControl.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="THeaderControl.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="THeaderControl.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="THeaderControl.Font" link="#lcl.controls.TControl.Font"/>
      <element name="THeaderControl.Images" link="#lcl.comctrls.TCustomHeaderControl.Images"/>
      <element name="THeaderControl.ImagesWidth" link="#lcl.comctrls.TCustomHeaderControl.ImagesWidth"/>
      <element name="THeaderControl.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="THeaderControl.Sections" link="#lcl.comctrls.TCustomHeaderControl.Sections"/>
      <element name="THeaderControl.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="THeaderControl.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
      <element name="THeaderControl.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="THeaderControl.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="THeaderControl.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="THeaderControl.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="THeaderControl.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="THeaderControl.OnCreateSectionClass" link="#lcl.comctrls.TCustomHeaderControl.OnCreateSectionClass"/>
      <element name="THeaderControl.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="THeaderControl.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="THeaderControl.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="THeaderControl.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="THeaderControl.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="THeaderControl.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="THeaderControl.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="THeaderControl.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="THeaderControl.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="THeaderControl.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="THeaderControl.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="THeaderControl.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="THeaderControl.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="THeaderControl.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="THeaderControl.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="THeaderControl.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="THeaderControl.OnSectionClick" link="#lcl.comctrls.TCustomHeaderControl.OnSectionClick"/>
      <element name="THeaderControl.OnSectionResize" link="#lcl.comctrls.TCustomHeaderControl.OnSectionResize"/>
      <element name="THeaderControl.OnSectionTrack" link="#lcl.comctrls.TCustomHeaderControl.OnSectionTrack"/>

      <element name="TCN_First">
        <short>Represents the first tab control notification message.</short>
        <seealso>
          <link id="TCustomTabControl.CNNotify"/>
        </seealso>
      </element>

      <element name="TCN_SELCHANGE">
        <short>Represents the selection changed notification message for tab controls.</short>
        <seealso>
          <link id="TCustomTabControl.CNNotify"/>
        </seealso>
      </element>

      <element name="TCN_SELCHANGING">
        <short>Represents the selection changing notification message for tab controls.</short>
        <short/>
        <seealso>
          <link id="TCustomTabControl.CNNotify"/>
        </seealso>
      </element>

      <element name="CompareExpandedNodes">
        <short>Function to compare the node text in two nodes.</short>
        <descr>
          <p>
            This function does an ANSICompare on the NodeText of two nodes. The parameters Data1 and Data2 are pointers to the nodes to be compared. The result is the same as the result from ANSICompareText. For example:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>
              The nodetext from the first node is lower than the nodetext from the second.
            </dd>
            <dt>0</dt>
            <dd>
              The nodetext values from both nodes are equal.
            </dd>
            <dt>1</dt>
            <dd>
              The nodetext from the first node is higher than the nodetext from the second.
            </dd>
          </dl>
        </descr>
      </element>
      <element name="CompareExpandedNodes.Result">
        <short/>
      </element>
      <element name="CompareExpandedNodes.Data1">
        <short/>
      </element>
      <element name="CompareExpandedNodes.Data2">
        <short/>
      </element>

      <element name="CompareTextWithExpandedNode">
        <short>
          Function to compare the given text with the nodetext of the specified node.
        </short>
        <descr>
          <p>
            This function does an ANSICompare on the NodeText of two nodes. The parameters Data1 and Data2 are pointers to the nodes to be compared. The result is the same as the result from ANSICompareText.
          </p>
          <dl>
            <dt>-1</dt>
            <dd>The given text is lower then the nodetext from the given node.</dd>
            <dt>0</dt>
            <dd>The given text is equal to the nodetext from the given node.</dd>
            <dt>1</dt>
            <dd>The given text is higher then the nodetext from the given node.</dd>
          </dl>
        </descr>
      </element>
      <element name="CompareTextWithExpandedNode.Result">
        <short/>
      </element>
      <element name="CompareTextWithExpandedNode.Key">
        <short/>
      </element>
      <element name="CompareTextWithExpandedNode.Data">
        <short/>
      </element>

      <element name="DbgS">
        <short>Generates a list of tab control options for display in the debugger.</short>
        <descr>
          <p>
            <var>DbgS</var> is an overloaded <var>String</var> function used to generate string content displayed in the debugger for option values used in <var>TCustomTabControl</var>. DbgS generates a comma-delimited list of option values found in the specified argument using the string representations in <var>TabControlOptionStr</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="DbgS.Result">
        <short>String with the tab control option values displayed in the debugger.</short>
      </element>
      <element name="DbgS.Opt">
        <short>LCL-compatible tab control options to examine in the routine.</short>
      </element>

      <element name="Register">
        <short>Registers components in the Lazarus IDE.</short>
        <descr>
          <p>
            Register is a procedure used to register components in the <file>comctrls.pp</file> unit in the Lazarus IDE. Register adds the following components:
          </p>
          <p><b>Common Controls Tab</b>
          </p>
          <ul>
            <li>TTrackbar</li>
            <li>TProgressBar</li>
            <li>TTreeView</li>
            <li>TListView</li>
            <li>TStatusBar</li>
            <li>TToolBar</li>
            <li>TCoolBar</li>
            <li>TUpDown</li>
            <li>TPageControl</li>
            <li>TTabControl</li>
            <li>THeaderControl</li>
          </ul>
          <p>
            Register adds the following as components with no icon on the component palette:
          </p>
          <ul>
            <li>TToolButton</li>
            <li>TTabSheet</li>
          </ul>
        </descr>
        <seealso/>
      </element>

      <element name="RegisterCustomPage">
        <short>
          Calls WSRegisterCustomPage to register a custom page using the widgetset classes.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="RegisterCustomTabControl">
        <short>Registers TCustomTabControl and its widgetset class type when needed.</short>
        <descr/>
        <seealso/>
      </element>

    </module>
    <!-- ComCtrls -->
  </package>
</fpdoc-descriptions>
