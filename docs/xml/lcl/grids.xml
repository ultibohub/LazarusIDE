<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
      ====================================================================
        Grids
      ====================================================================
    -->
    <module name="Grids">
      <short>Classes for displaying tabular data as a series of rows and columns.</short>
      <descr>
        <p>
          <file>grids.pas</file> contains classes, types, constants, variables, and routines used to implement grid controls for the Lazarus Component Library (<b>LCL</b>). Classes include:
        </p>
        <ul>
          <li>TVirtualGrid</li>
          <li>TCustomGrid</li>
          <li>TDrawGrid</li>
          <li>TStringGrid</li>
        </ul>
        <p>
          Original author:  Jesus Reyes Aguilar (jesusrmx@yahoo.com.mx) [2002]
        </p>
      </descr>

      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="Types"/>
      <element name="TypInfo"/>
      <element name="Math"/>
      <element name="FPCanvas"/>
      <element name="HtmlDefs"/>
      <element name="StrUtils"/>
      <element name="LCLStrConsts"/>
      <element name="LCLType"/>
      <element name="LCLIntf"/>
      <element name="Controls"/>
      <element name="Graphics"/>
      <element name="Forms"/>
      <element name="LMessages"/>
      <element name="StdCtrls"/>
      <element name="LResources"/>
      <element name="MaskEdit"/>
      <element name="Buttons"/>
      <element name="Clipbrd"/>
      <element name="Themes"/>
      <element name="ImgList"/>
      <element name="LazFileUtils"/>
      <element name="DynamicArray"/>
      <element name="Maps"/>
      <element name="LazUTF8"/>
      <element name="Laz2_XMLCfg"/>
      <element name="LazLoggerBase"/>
      <element name="LazUtilities"/>
      <element name="LCSVUtils"/>
      <element name="IntegerList"/>
      <element name="Messages"/>

      <element name="GRIDFILEVERSION">
        <short>Current revision level for the <file>grids.pas</file> file.</short>
        <descr>
          <dl>
            <dt>1</dt>
            <dd>Initial revision</dd>
            <dt>2</dt>
            <dd>Introduced goSmoothScroll grid option</dd>
            <dt>3</dt>
            <dd>Introduced Col/Row FixedAttr and NormalAttr</dd>
          </dl>
        </descr>
        <seealso/>
      </element>

      <element name="GM_SETVALUE">
        <short>Lazarus message for setting the value in a grid edit control.</short>
      </element>

      <element name="GM_GETVALUE">
        <short>Lazarus message for getting the value in a grid edit control.</short>
      </element>

      <element name="GM_SETGRID">
        <short>Lazarus message for setting the grid for an edit control.</short>
      </element>

      <element name="GM_SETBOUNDS">
        <short>Lazarus message for setting the bounds for a grid edit control.</short>
      </element>

      <element name="GM_SELECTALL">
        <short>Lazarus message for selecting the content in a grid edit control.</short>
      </element>

      <element name="GM_SETMASK">
        <short>Lazarus message for setting the edit mask used in a grid edit control.</short>
      </element>

      <element name="GM_SETPOS">
        <short>Lazarus message for setting the position of a grid edit control.</short>
      </element>

      <element name="GM_READY">
        <short>Lazarus message sent when the grid can display its editing controls.</short>
      </element>

      <element name="GM_GETGRID">
        <short>Lazarus message used to get the grid for an editing control.</short>
      </element>

      <element name="EO_AUTOSIZE">
        <short>Represents the auto-size editor option in a grid message.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="EO_HOOKKEYDOWN">
        <short>Represents the hook key down editor option in a grid message.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="EO_HOOKKEYPRESS">
        <short>Represents the hook key press editor option in a grid message.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="EO_HOOKKEYUP">
        <short>Represents the hook key up editor option in a grid message.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="EO_SELECTALL">
        <short>Represents the select all content editor option in a grid message.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="EO_IMPLEMENTED">
        <short>Represents the implemented editor option in a grid message.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="DEFCOLWIDTH">
        <short>Default width for columns in a grid control.</short>
        <descr>
          <p>
            <var>DEFCOLWIDTH</var> is a constant used as the default width for columns in a grid control. The value for the constant is <b>64</b> (pixels). DEFCOLWIDTH is used when getting the value for the <var>DefColWidth</var> in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultColWidth"/>
        </seealso>
      </element>

      <element name="DEFBUTTONWIDTH">
        <short>Default width for edit control buttons in a grid.</short>
        <descr>
          <p>
            <var>DEFBUTTONWIDTH</var> is a constant that contains the default width for the button displayed in a grid cell editor. The value for the constant is <b>25</b> (pixels). DEFBUTTONWIDTH is used when setting the bounds for <var>TButtonCellEditor</var> controls.
          </p>
        </descr>
        <seealso>
          <link id="TButtonCellEditor"/>
        </seealso>
      </element>

      <element name="DEFIMAGEPADDING">
        <short>Default padding used for title images displayed in a grid.</short>
        <descr>
          <p>
            <var>DEFIMAGEPADDING</var> is a constant which contains the padding added to images displayed in the fixed title area for grid controls. The value for the constant is <b>2</b> (pixels). DEFIMAGEPADDING is used in methods like <var>TCustomGrid.DrawColumnTitleImage</var> and <var>TCustomStringGrid.AutoAdjustColumn</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>

      <element name="EGridException">
        <short>Exception raised for an error occurring in a Grid class.</short>
        <descr>
          <p>
            Used mainly when a row or a column position is invalid for a grid control.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>

      <element name="TGridOption">
        <short>Represents grip option values available for grid controls.</short>
        <descr>
          <p>
            <var>TGridOption</var> is an enumerated type with values that represent grid options available in LCL grid controls. Values from TGridOption are stored in a <var>TGridOptions</var> set type to indicate that the grid feature or behavior is enabled.
          </p>
          <p>
            Values from TGridOption are stored in the <var>DefaultGridOptions</var> constant which defines the default set of options for LCL grid controls.
          </p>
        </descr>
        <seealso>
          <link id="TGridOptions"/>
          <link id="TGridOptions2"/>
          <link id="DefaultGridOptions"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>
      <element name="TGridOption.goFixedVertLine">
        <short>Shows vertical lines around fixed cells.</short>
      </element>
      <element name="TGridOption.goFixedHorzLine">
        <short>Shows horizontal lines around fixed cells.</short>
      </element>
      <element name="TGridOption.goVertLine">
        <short>Show vertical lines.</short>
      </element>
      <element name="TGridOption.goHorzLine">
        <short>Show horizontal lines.</short>
      </element>
      <element name="TGridOption.goRangeSelect">
        <short>Enables range selection for grid cells.</short>
      </element>
      <element name="TGridOption.goDrawFocusSelected">
        <short>Enables focused drawing for selected cell(s).</short>
      </element>
      <element name="TGridOption.goRowSizing">
        <short>Allow user to change row height.</short>
      </element>
      <element name="TGridOption.goColSizing">
        <short>Allow user to change column width.</short>
      </element>
      <element name="TGridOption.goRowMoving">
        <short>Enables moving the position of an entire row in a grid.</short>
      </element>
      <element name="TGridOption.goColMoving">
        <short>Enables moving the position of an entire column in a grid.</short>
      </element>
      <element name="TGridOption.goEditing">
        <short>Allows editing in grid cells.</short>
        <seealso/>
      </element>
      <element name="TGridOption.goAutoAddRows">
        <short>Automatically add new rows.</short>
        <descr>
          Does not add rows if the last cell is empty and <var>goAutoAddRowsSkipContentCheck</var> is not set.
        </descr>
        <seealso/>
      </element>
      <element name="TGridOption.goTabs">
        <short>Controls Tab key behavior in the grid.</short>
        <descr>
          <p>
            When included in the <var>TCustomGrid.Options</var> property, the <b>Tab</b> key changes the active cell within the grid. When omitted from the grid <var>Options</var>, the <b>Tab</b> key changes to the next active control.
          </p>
          </descr>
          <seealso>
            <link id="TCustomGrid.Options"/>
          </seealso>
      </element>

      <element name="TGridOption.goRowSelect">
        <short>Select the whole row instead of only one cell.</short>
      </element>
      <element name="TGridOption.goAlwaysShowEditor">
        <short>Always shows the cell editor.</short>
        <descr>
          <p>
            Always shows the cell editor. If not set, the user has to enter edit mode by data characters for the cell, or by pressing the <b>F2</b> key.
          </p>
        </descr>
      </element>
      <element name="TGridOption.goThumbTracking">
        <short>Enables tracking of the thumb position in grid scroll bars.</short>
      </element>
      <element name="TGridOption.goColSpanning">
        <short>Enable cellextent calculations.</short>
      </element>
      <element name="TGridOption.goRelaxedRowSelect">
        <short>User can see focused cell on goRowSelect.</short>
      </element>
      <element name="TGridOption.goDblClickAutoSize">
        <short>Double clicking column's borders (on headers) resize column.</short>
      </element>
      <element name="TGridOption.goSmoothScroll">
        <short>Switch scrolling mode.</short>
        <descr>Default is pixel scroll.</descr>
      </element>
      <element name="TGridOption.goFixedRowNumbering">
        <short>Show row numbers in first fixed column.</short>
        <descr>
          <p>
            The displayed row numbers starts with 1. The row number is displayed when no text has been directly assigned to the fixed cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
        </seealso>
      </element>
      <element name="TGridOption.goScrollKeepVisible">
        <short>Keeps focused cell visible while scrolling.</short>
      </element>
      <element name="TGridOption.goHeaderHotTracking">
        <short>Header cells change look when mouse is over them.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridOption.goHeaderPushedLook">
        <short>Header cells looks pushed when clicked.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridOption.goSelectionActive">
        <short>Setting grid selection also moves the cell cursor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridOption.goFixedColSizing">
        <short>Allow to resize fixed columns.</short>
        <seealso/>
      </element>
      <element name="TGridOption.goDontScrollPartCell">
        <short>Selecting a partially visible cell will not scroll the grid content.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridOption.goCellHints">
        <short>Show individual cell hints.</short>
        <descr>
          Requires the <link id="TControl.ShowHint">ShowHint</link> to be set to <var>TRUE</var>. If set, the  <link id="TControl.Hint">Hint</link> will be ignored. Instead the  <link id="TCustomGrid.OnGetCellHint">OnGetCellHint</link> event will be called for each cell.
        </descr>
        <seealso>
          <link id="TControl.Hint"/>
          <link id="TControl.ShowHint"/>
          <link id="TCustomGrid.OnGetCellHint"/>
        </seealso>
      </element>
      <element name="TGridOption.goTruncCellHints">
        <short>Truncates cell hints when they are longer than the cell content.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridOption.goCellEllipsis">
        <short>Shows an Ellipsis (...) at the end of truncated cell hints.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridOption.goAutoAddRowsSkipContentCheck">
        <short>Also add a row if last row is empty.</short>
        <descr>
          <var>goAutoAddRows</var> must also be set. Otherwise this option does not take effect at all.
        </descr>
        <seealso/>
      </element>
      <element name="TGridOption.goRowHighlight">
        <short>Highlights the current Row in a grid control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridOptions">
        <short>Set type used to store enabled grid options.</short>
        <descr>
          <p>
            <var>TGridOptions</var> is a set type used to store values from the <var>TGridOption</var> enumeration. The features or behaviors in TGridOption are enabled when their enumeration values are included in the set. TGridOptions is the type used for the <var>TCustomGrid.Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>

      <element name="TGridOption2">
        <short>Represents grid options introduced in Version 2 of grid controls.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridOption2.goScrollToLastCol">
        <short>Allows scrolling to last column (so that last column can be leftcol).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridOption2.goScrollToLastRow">
        <short>Allows scrolling to last row (so that last row can be toprow).</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridOptions2">
        <short>Set type used to store enabled grid options from TGridOption2.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridSaveOptions">
        <short>Represents save options available for LCL grid controls.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridSaveOptions.soDesign">
        <short>Enables saving grid structure (col/row count and Options).</short>
      </element>
      <element name="TGridSaveOptions.soAttributes">
        <short>Enables saving grid attributes (Font, Brush, TextStyle).</short>
      </element>
      <element name="TGridSaveOptions.soContent">
        <short>Enables saving Grid content (Text in TStringGrid).</short>
      </element>
      <element name="TGridSaveOptions.soPosition">
        <short>Enables saving the Grid cursor and selection position.</short>
      </element>

      <element name="TSaveOptions">
        <short>Set type used to store TGridSaveOptions values.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDrawState">
        <short>Enumeration with Grid draw state values.</short>
        <descr>
          <p>
            <var>TGridDrawState</var> is an enumeration with values that represent grid drawing states for  a grid control. Values in TGridDrawState indicate the display attributes applied to a row, column, or individual cell in a grid control.
          </p>
          <p>
            TGridDrawState arguments are passed to event handlers and methods in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TOnDrawCell"/>
          <link id="TOnPrepareCanvasEvent"/>
          <link id="TCustomGrid.DrawCell"/>
          <link id="TCustomGrid.DrawCellGrid"/>
          <link id="TCustomGrid.DrawCellText"/>
          <link id="TCustomGrid.DrawButtonCell"/>
          <link id="TCustomGrid.DrawColumnText"/>
          <link id="TCustomGrid.DrawTextInCell"/>
          <link id="TCustomGrid.DrawThemedCell"/>
        </seealso>
      </element>
      <element name="TGridDrawState.gdSelected">
        <short>Drawn in its Selected state.</short>
      </element>
      <element name="TGridDrawState.gdFocused">
        <short>Drawn in its Focused state.</short>
      </element>
      <element name="TGridDrawState.gdFixed">
        <short>Drawn using the Fixed cell colors.</short>
      </element>
      <element name="TGridDrawState.gdHot">
        <short>Drawn using the Hot display attributes.</short>
      </element>
      <element name="TGridDrawState.gdPushed">
        <short>Drawn in a Pushed state.</short>
      </element>
      <element name="TGridDrawState.gdRowHighlight">
        <short>Drawn using the row highlighting color.</short>
      </element>

      <element name="TGridState">
        <short>Enumerated type with grid state values.</short>
        <descr>
          <p>
            <var>TGridState</var> is an enumerated type with values that reflect the state in a grid control. TGridState values represent actions performed using a grid control, rather the display state for rows, columns, and/or cells.
          </p>
          <p>
            TCustomGrid maintains an internal TGridState member used to track the state for the grid control. Methods in TCustomGrid cause the value in the member to be read or updated to reflect the request and/or completion of an action in the grid control.
          </p>
          <p>
            Use the TCustomGrid.Options and TCustomGrid.Options2 properties to determine if specific features or behaviors are enabled for a grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>
      <element name="TGridState.gsNormal">
        <short>Normal state for the grid when navigation or editing can be performed.</short>
      </element>
      <element name="TGridState.gsSelecting">
        <short>Grid is selecting a row, column, or cell after keyboard or mouse activity.</short>
      </element>
      <element name="TGridState.gsRowSizing">
        <short>Grid is resizing a row.</short>
      </element>
      <element name="TGridState.gsColSizing">
        <short>Grid is resizing a column.</short>
      </element>
      <element name="TGridState.gsRowMoving">
        <short>Grid is moving or dragging a row.</short>
      </element>
      <element name="TGridState.gsColMoving">
        <short>Grid is moving or dragging a column.</short>
      </element>

      <element name="TGridState.gsHeaderClicking">
        <short>A fixed header cell has been clicked in the Grid.</short>
      </element>
      <element name="TGridState.gsButtonColumnClicking">
        <short>A button in a column has been clicked.</short>
      </element>

      <element name="TGridZone">
        <short>Enumerated type for grid zone values.</short>
        <descr>
          <p>
            <var>TGridZone</var> is an enumeration type with values representing zones in a grid control which are monitored to determine activity and subsequent changes in the grid control state.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TGridZone.gzNormal">
        <short>Area normally used for cell data (not fixed row or column headers).</short>
      </element>
      <element name="TGridZone.gzFixedCols">
        <short>Area used for fixed column headers </short>
      </element>
      <element name="TGridZone.gzFixedRows">
        <short>Area used for fixed row headers </short>
      </element>
      <element name="TGridZone.gzFixedCells">
        <short>Area for fixed cells (both column and row are fixed).</short>
      </element>
      <element name="TGridZone.gzInvalid">
        <short>Area not valid for grid cells.</short>
      </element>

      <element name="TGridZoneSet">
        <short>Set type used to store TGridZone enumeration values.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TAutoAdvance">
        <short>Enumerated type with values controlling grid auto advance behavior.</short>
        <descr>
          <p>
            <var>TAutoAdvance</var> is an enumerated type with values that represent the auto advance behaviors available in a grid control. TAutoAdvance is the type used to represent the <var>AutoAdvance</var> and <var>TabAdvance</var> properties in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.AutoAdvance"/>
          <link id="TCustomGrid.TabAdvance"/>
          <link id="TCustomGrid.MoveNextSelectable"/>
          <link id="TCustomGrid.MouseDown"/>
          <link id="TCustomGrid.KeyDown"/>
        </seealso>
      </element>
      <element name="TAutoAdvance.aaNone">
        <short>Auto advance is not enabled.</short>
      </element>
      <element name="TAutoAdvance.aaDown">
        <short>Advances down to the next row in the grid.</short>
      </element>
      <element name="TAutoAdvance.aaRight">
        <short>Advances to the right (next cell) in the grid.</short>
      </element>
      <element name="TAutoAdvance.aaLeft">
        <short>Advances to the left (previous cell) in the grid.</short>
      </element>

      <element name="TAutoAdvance.aaRightDown">
        <short>Advances to the right and then to the next row.</short>
      </element>
      <element name="TAutoAdvance.aaLeftDown">
        <short>Advances to the left and then to the next row.</short>
      </element>
      <element name="TAutoAdvance.aaRightUp">
        <short>Advances to the right and then to the previous row.</short>
      </element>
      <element name="TAutoAdvance.aaLeftUp">
        <short>Advances to the left and then to the previous row.</short>
      </element>

      <element name="TRangeSelectMode">
        <short>Range selection modes available in a grid control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TRangeSelectMode.rsmSingle">
        <short>Allows range selection for a single range in a grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TRangeSelectMode.rsmMulti">
        <short>Allows range selection for multiple ranges in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TItemType">
        <short>
          Not used in the current LCL implementation.
        </short>
        <descr>
          <p>
            Not used in the current LCL implementation.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TItemType.itNormal">
        <short/>
      </element>
      <element name="TItemType.itCell">
        <short/>
      </element>
      <element name="TItemType.itColumn">
        <short/>
      </element>
      <element name="TItemType.itRow">
        <short/>
      </element>
      <element name="TItemType.itFixed">
        <short/>
      </element>
      <element name="TItemType.itFixedColumn">
        <short/>
      </element>
      <element name="TItemType.itFixedRow">
        <short/>
      </element>
      <element name="TItemType.itSelected">
        <short/>
      </element>

      <element name="TColumnButtonStyle">
        <short>Enumeration with cell editor types available in a grid control.</short>
        <descr>
          <p>
            <var>TColumnButtonStyle</var> is an enumerated type with values that represent the different cell editor types available in a grid control. TColumnButtonStyle is the type used for the <var>TGridColumn.ButtonStyle</var> property, and passed as an argument when an editor is requested for a column definition. It is also used when the <var>TCustomGrid.GetDefaultEditor</var> method is called to get the default cell editor for a given column.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.ButtonStyle"/>
          <link id="TCustomGrid.GetDefaultEditor"/>
        </seealso>
      </element>

      <element name="TColumnButtonStyle.cbsAuto">
        <short>Button style is automatically determined by the grid control. Results in a TStringCellEditor being used for the cell.</short>
      </element>
      <element name="TColumnButtonStyle.cbsEllipsis">
        <short>Button style with an Ellipsis (<b>...</b>) is displayed as the cell editor. Results in a TCompositeCellEditor being used for the cell.</short>
      </element>
      <element name="TColumnButtonStyle.cbsNone">
        <short>Indicates no editor is required for a cell.</short>
      </element>
      <element name="TColumnButtonStyle.cbsPickList">
        <short>Indicates a Pick List is used in the grid column. Results in a TPickListCellEditor being used for the cell.</short>
      </element>
      <element name="TColumnButtonStyle.cbsCheckboxColumn">
        <short>Indicates a CheckBox is displayed as the editor for the grid column.</short>
      </element>
      <element name="TColumnButtonStyle.cbsButton">
        <short>Indicates a cell editor with a Button is used in the grid column. Causes a TButtonCellEditor to be created.</short>
      </element>
      <element name="TColumnButtonStyle.cbsButtonColumn">
        <short>Indicates a button centered in the cell is used in the grid column.</short>
      </element>

      <element name="TTitleStyle">
        <short>Enumeration with values that control the display style for fixed title cells.</short>
        <descr>
          <p>
            <var>TTitleStyle</var> is an enumerated type with values that determine the drawing style used for fixed title cells in a grid. TTitleStyle is the type used to implement the <var>TCustomGrid.TitleStyle</var> property, and used in the implementation of the <var>TCustomGrid.DrawCellGrid</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleStyle"/>
          <link id="TCustomGrid.DrawCellGrid"/>
        </seealso>
      </element>
      <element name="TTitleStyle.tsLazarus">
        <short>Titles are displayed using the Lazarus drawing style.</short>
      </element>
      <element name="TTitleStyle.tsStandard">
        <short>Titles are displayed using the standard drawing style (higher contrast).</short>
      </element>
      <element name="TTitleStyle.tsNative">
        <short>Titles are displayed using the drawing style Native to the OS or platform.</short>
      </element>

      <element name="TGridFlagsOption">
        <short>Represents state flags used in a grid control.</short>
        <descr>
          <p>
            <var>TGridFlagsOption</var> is an enumerated type with values which reflect temporal state changes in a grid control. Values from TGridFlagsOption are stored at run-time in the <var>TGridFlags</var> set type used for the <var>TCustomGrid.GridFlags</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridFlags"/>
          <link id="TGridFlags"/>
        </seealso>
      </element>
      <element name="TGridFlagsOption.gfEditorUpdateLock">
        <short>Indicates a cell is locked during a cell editor update.</short>
      </element>
      <element name="TGridFlagsOption.gfNeedsSelectActive">
        <short>Indicates a selection needs to be active prior to mouse down or move actions.</short>
      </element>
      <element name="TGridFlagsOption.gfEditorTab">
        <short>Indicates a Tab key can be applied to focus the next cell in the grid.</short>
      </element>
      <element name="TGridFlagsOption.gfRevEditorTab">
        <short>Indicates if Shift+Tab can be used to select the previous cell in the grid.</short>
      </element>
      <element name="TGridFlagsOption.gfVisualChange">
        <short>Indicates visible changes to row or column sizes can be applied to the grid.</short>
      </element>
      <element name="TGridFlagsOption.gfColumnsLocked">
        <short>Indicates columns in the grid are locked and cannot be reordered.</short>
      </element>
      <element name="TGridFlagsOption.gfEditingDone">
        <short>Indicates editing using a cell editor has been completed.</short>
      </element>
      <element name="TGridFlagsOption.gfSizingStarted">
        <short>Indicates a row or column sizing action is in effect.</short>
      </element>
      <element name="TGridFlagsOption.gfPainting">
        <short>Indicates the grid is being redrawn.</short>
      </element>
      <element name="TGridFlagsOption.gfUpdatingSize">
        <short>Indicates the grid is updating its size.</short>
      </element>
      <element name="TGridFlagsOption.gfClientRectChange">
        <short>Indicates the client rectangle for the grid has changed.</short>
      </element>
      <element name="TGridFlagsOption.gfAutoEditPending">
        <short>Indicates a cell editor is being prepared for a newly selected cell in the grid.</short>
      </element>
      <element name="TGridFlagsOption.gfUpdatingScrollbar">
        <short>Indicates the visibility of scrollbar(s) has been changed for a grid.</short>
      </element>

      <element name="TGridFlags">
        <short>Set type used to store TGridFlagsOption enumeration values.</short>
        <descr>
          <p>
            <var>TGridFlags</var> is a set type used to store <var>TGridFlagsOption</var> enumeration values. TGridFlags is the type used to implement the <var>TCustomGrid.GridFlags</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TGridFlagsOption"/>
          <link id="TCustomGrid.GridFlags"/>
        </seealso>
      </element>

      <element name="TSortOrder">
        <short>Enumerated type with sort orders supported in a grid control.</short>
        <descr>
          <p>
            <var>TSortOrder</var> is an enumerated type with values for the sort orders supported in a grid control. TSortOrder is the type used to implement the <var>TCustomGrid.SortOrder</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SortOrder"/>
        </seealso>
      </element>
      <element name="TSortOrder.soAscending">
        <short>Rows are sorted such that the column is in ascending order.</short>
      </element>
      <element name="TSortOrder.soDescending">
        <short>Rows are sorted such that the column is in descending order.</short>
      </element>

      <element name="TPrefixOption">
        <short>Indicates if accelerator keys in column titles are handled for a grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPrefixOption.poNone">
        <short>Accelerator keys are ignored in the grid column.</short>
      </element>
      <element name="TPrefixOption.poHeaderClick">
        <short>Accelerator keys emulate a mouse click on the column title.</short>
      </element>

      <element name="TMouseWheelOption">
        <short>Enumerated type with values that control mouse wheel operation in a grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TMouseWheelOption.mwCursor">
        <short>Causes the mouse wheel to move the cursor on the screen.</short>
      </element>
      <element name="TMouseWheelOption.mwGrid">
        <short>Causes the mouse wheel to scroll the content in the grid.</short>
      </element>

      <element name="TCellHintPriority">
        <short>Represents the cell hint display priorities.</short>
        <descr>
          <p>
            A grid control can display three types of hint: the default hint (in the Hint property), individual cell hints (using the OnCellHint event), and hints for truncated cells. TCellHintPriority determines how the hint text is determined when multiple hint text values are available for display.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCellHintPriority.chpAll">
        <short>Uses all hints (control and cell hints) including short and long display text values.</short>
      </element>
      <element name="TCellHintPriority.chpAllNoDefault">
        <short>Uses all hints except the default hint for the grid control.</short>
      </element>
      <element name="TCellHintPriority.chpTruncOnly">
        <short>Uses the truncated cell hint text.</short>
      </element>

      <element name="TCellProcessType">
        <short>Identifies the action performed for cell content.</short>
        <descr>
          <p>
            <var>TCellProcessType</var> is an enumerated type with values that identify the action performed for the content in a grid cell. Values in the enumeration indicate whether cell content is copied or pasted in event handlers. TCellProcessType arguments are passed  to the <var>TCustomStringGrid.OnCellProcess</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TCellProcessEvent"/>
          <link id="TCustomStringGrid.OnCellProcess"/>
        </seealso>
      </element>
      <element name="TCellProcessType.cpCopy">
        <short>Copies the content in a grid cell.</short>
      </element>
      <element name="TCellProcessType.cpPaste">
        <short>Pastes content into the grid cell.</short>
      </element>

      <element name="soAll">
        <short>All save options available for grid controls.</short>
        <descr>
          <p>
            <var>soAll</var> is a <var>TSaveOptions</var> constant with the set representing all of the TGridSaveOptions values available for a LCL grid control.
          </p>
        </descr>
        <seealso>
          <link id="TGridSaveOptions"/>
        </seealso>
      </element>

      <element name="DefaultGridOptions">
        <short>Set with the default grid options enabled for instances of the grid control.</short>
        <descr>
          <p>
            <var>DefaultGridOptions</var> is used as the default value for the <var>Options</var> property in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>

      <element name="DefaultGridOptions2">
        <short>Default grid options enabled for version 2 of the grid control.</short>
        <descr>
          <p>
            <var>DefaultGridOptions2</var> is used as the default value for the <var>Options2</var> property in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>

      <element name="constRubberSpace">
        <short>Default spacing around rubber band rectangles.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="constCellPadding">
        <short>Default padding for the content in grid cells.</short>
        <descr>
          <p>
            Cell padding is the amount of space added around cell values and hints drawn for a grid control. The value represents the number of pixels added to the boundaries at the default display density (96 PPI). The value may be scaled and stored in the <var>varCellPadding</var> variable when a new instance of a grid control is created. varCellPadding contains the padding value actually applied to the values and hints in the control.
          </p>
        </descr>
        <seealso>
          <link id="varCellPadding"/>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
          <link id="TCustomGrid.DrawCellText"/>
          <link id="TCustomGrid.DrawGridCheckboxBitmaps"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>

      <element name="constColRowBorderTolerance">
        <short>Minimum proximity to row or column borders for resizing operations.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="varRubberSpace">
        <short>Default padding for the rubber banding rectangle in grid cells.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="varCellpadding">
        <short>Default padding for the content in grid cells.</short>
        <descr>
          <p>
            Cell padding is the amount of space added around cell values and hints drawn for a grid control. The value represents the number of pixels added to the boundaries at the default display density (96 PPI). The value may be scaled and stored in the <var>varCellPadding</var> variable when a new instance of a grid control is created. varCellPadding contains the padding value actually applied to the values and hints in the control.
          </p>
        </descr>
        <seealso>
          <link id="varCellPadding"/>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
          <link id="TCustomGrid.DrawCellText"/>
          <link id="TCustomGrid.DrawGridCheckboxBitmaps"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>

      <element name="varColRowBorderTolerance">
        <short>Proximity threshold for a mouse click near a column boundary.</short>
        <descr>
          <p>
            Used during grid column resizing when fixed column sizing has been enabled.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="PCellProps">
        <short>Pointer to a TCellProps type.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCellProps">
        <short>Contains attributes, data, and text for grid cells.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCellProps.Attr">
        <short>Attributes for a grid cell.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCellProps.Data">
        <short>Data for a grid cell.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCellProps.Text">
        <short>Display text for a grid cell.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="PColRowProps">
        <short>Pointer to a TColRowProps type.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColRowProps">
        <short>Contains the size and display attributes for a column or row in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColRowProps.Size">
        <short>Not used in the current implementation.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColRowProps.FixedAttr">
        <short>Not used in the current implementation.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColRowProps.NormalAttr">
        <short>Not used in the current implementation.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="PGridMessage">
        <short>Pointer to a TGridMessage type.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridMessage">
        <short>Contains a LCL message and its auxiliary values.</short>
        <descr>
          <p>
            <var>TGridMessage</var> is a record type with members representing an LCL message passed to cell editors in a string grid. It is passed as an argument to <var>TStringCellEditor</var> methods (msg_SetMask, msg_GetGrid, et. al.) which handle and apply a specific LCL message.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TGridMessage.LclMsg">
        <short>The LCL message value.</short>
      </element>
      <element name="TGridMessage.Grid">
        <short>Grid for the LCL message.</short>
      </element>
      <element name="TGridMessage.Col">
        <short>Grid column for the LCL message.</short>
      </element>
      <element name="TGridMessage.Row">
        <short>Grid row for the LCL message.</short>
      </element>
      <element name="TGridMessage.Value">
        <short>Cell value for the LCL message.</short>
      </element>
      <element name="TGridMessage.CellRect">
        <short>Rectangle coordinates for the LCL message.</short>
      </element>
      <element name="TGridMessage.Options">
        <short>Options for the LCL message.</short>
      </element>

      <element name="TStringCellEditor">
        <short>Implements the default editor for cells in TCustomGrid.</short>
        <descr>
          <p>
            <var>TStringCellEditor</var> is a <var>TCustomMaskEdit</var> descendant that implements the default editor for cells in <var>TCustomGrid</var>. TStringCellEditor contains internal members used to reference its Grid control, and to access the row and column numbers for the underlying grid cell. TStringCellEditor also implements methods needed for LCL message passing using <var>TGridMessage</var>. An event handler is also published to perform actions needed when editing has been completed in the cell editor.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
          <link id="TGridMessage"/>
          <link id="#lcl.maskedit.TCustomMaskEdit">TCustomMaskEdit</link>
        </seealso>
      </element>

      <element name="TStringCellEditor.FGrid"/>
      <element name="TStringCellEditor.FCol"/>
      <element name="TStringCellEditor.FRow"/>

      <element name="TStringCellEditor.WndProc">
        <short>Window handling procedure for the cell editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStringCellEditor.WndProc.TheMessage">
        <short>LCL message for the window handling procedure.</short>
      </element>

      <element name="TStringCellEditor.Change" link="#lcl.stdctrls.TCustomEdit.Change" />

      <element name="TStringCellEditor.KeyDown"  link="#lcl.controls.TWinControl.KeyDown"/>
      <element name="TStringCellEditor.KeyDown.Key">
        <short/>
      </element>
      <element name="TStringCellEditor.KeyDown.Shift">
        <short/>
      </element>

      <element name="TStringCellEditor.msg_SetMask">
        <short>Issues a message for specifying mask.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStringCellEditor.msg_SetMask.Msg">
        <short>Message for the control.</short>
      </element>

      <element name="TStringCellEditor.msg_SetValue">
        <short>Issues a message for specifying value.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStringCellEditor.msg_SetValue.Msg">
        <short>Message for the control.</short>
      </element>

      <element name="TStringCellEditor.msg_GetValue">
        <short>Issues a message for obtaining value.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStringCellEditor.msg_GetValue.Msg">
        <short>Message for the control.</short>
      </element>
      <element name="TStringCellEditor.msg_SetGrid">
        <short>Issues a message for specifying the grid for the editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStringCellEditor.msg_SetGrid.Msg">
        <short>Message for the control.</short>
      </element>

      <element name="TStringCellEditor.msg_SelectAll">
        <short>Issues a message for Selecting all content in the editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStringCellEditor.msg_SelectAll.Msg">
        <short>Message for the control.</short>
      </element>

      <element name="TStringCellEditor.msg_SetPos">
        <short>Issues a message for specifying the position for the editor.</short>
      </element>
      <element name="TStringCellEditor.msg_SetPos.Msg">
        <short>Message for the control.</short>
      </element>

      <element name="TStringCellEditor.msg_GetGrid">
        <short>Message used to get the grid control for the cell editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStringCellEditor.msg_GetGrid.Msg">
        <short>Message for the control.</short>
      </element>

      <element name="TStringCellEditor.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance. Create calls the inherited constructor using the value in <var>AOwner</var> as an argument. Create sets the value in the <var>AutoSize</var> property to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TCustomEdit.AutoSize">TCustomEdit.AutoSize</link>
        </seealso>
      </element>
      <element name="TStringCellEditor.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TStringCellEditor.EditingDone">
        <short>Performs actions needed when the cell editor has finished editing the value in a cell.</short>
        <descr>
          <p>
            <var>EditingDone</var> is an overridden procedure used to perform actions required when the cell editor has finished editing the value in a cell. EditingDone calls the inherited method, and calls the EditingDone method in the attached Grid control (when assigned) for the cell editor.
          </p>
        </descr>
        <seealso>
        <link id="TCustomGrid.EditingDone"/>
        </seealso>
      </element>

      <element name="TStringCellEditor.EditText" link="#lcl.maskedit.TCustomMaskEdit.EditText">
        <short/>
        <descr>
          EditText is a published property in TStringCellEditor.
        </descr>
        <seealso/>
      </element>

      <element name="TStringCellEditor.OnEditingDone" link="#lcl.maskedit.TCustomMaskEdit.OnEditingDone">
        <short/>
        <descr>
          OnEditingDone is a published property in TStringCellEditor.
        </descr>
        <seealso/>
      </element>

      <element name="TButtonCellEditor">
        <short>The editor used for button cells in a grid.</short>
        <descr>
          <p>
            <var>TButtonCellEditor</var> is a <var>TButton</var> descendant which implements a grid cell editor which uses a button to activate the editor control. TButtonCellEditor maintains interval member variables for the TCustomGrid hosting the editor control. The row and column numbers for the underlying cell in editor control are available in the <var>Row</var> and <var>Col</var> properties. TButtonCellEditor includes methods used to perform LCL message passing using a <var>TGridMessage</var> message type.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
          <link id="TGridMessage"/>
          <link id="TButtonCellEditor.Col"/>
          <link id="TButtonCellEditor.Row"/>
        </seealso>
      </element>

      <element name="TButtonCellEditor.FGrid"/>
      <element name="TButtonCellEditor.FCol"/>
      <element name="TButtonCellEditor.FRow"/>

      <element name="TButtonCellEditor.msg_SetGrid">
        <short>Issues a message to specify the grid for the editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonCellEditor.msg_SetGrid.Msg">
        <short/>
      </element>

      <element name="TButtonCellEditor.msg_SetBounds">
        <short>Issues a message to specifying the bounds for the editor.</short>
        </element>
      <element name="TButtonCellEditor.msg_SetBounds.Msg">
        <short/>
        </element>

      <element name="TButtonCellEditor.msg_SetPos">
        <short>Issues a message to specify the position for the editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonCellEditor.msg_SetPos.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TButtonCellEditor.msg_Ready">
        <short>Issues a message when the editor is ready.</short>
      </element>
      <element name="TButtonCellEditor.msg_Ready.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TButtonCellEditor.msg_GetGrid">
        <short>Issues a message to get the grid control for the button cell editor.</short>
      </element>
      <element name="TButtonCellEditor.msg_GetGrid.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TButtonCellEditor.Col">
        <short>Column number for the grid cell editor.</short>
        <descr>
          <p>
            <var>Col</var> is a public read-only <var>Integer</var> which contains  the column number for the cell hosting the editor control.
          </p>
          <p>
            Use <var>Row</var> to access the row number for the cell hosting the editor control.
          </p>
        </descr>
        <seealso>
          <link id="TButtonCellEditor.Row"/>
        </seealso>
      </element>

      <element name="TButtonCellEditor.Row">
        <short>Row number for the grid cell editor.</short>
        <descr>
          <p>
            <var>Row</var> is a public read-only <var>Integer</var> which contains the row number for the cell hosting the editor control.
          </p>
          <p>
            Use <var>Col</var> to access the column number for the cell hosting the editor control.
          </p>
        </descr>
        <seealso>
          <link id="TButtonCellEditor.Col"/>
        </seealso>
      </element>

      <element name="TPickListCellEditor">
        <short>Implements a cell editor control which displays a Pick List.</short>
        <descr>
          <p>
            <var>TPickListCellEditor</var> is a <var>TCustomComboBox</var> descendant which implements a cell editor control that displays a Pick List. TPickListCellEditor provides overridden methods to alter the behavior of the TCustomComboBox ancestor.
          </p>
          <p>
            TPickListCellEditor has an internal member used to store the <var>TCustomGrid</var> for the cell editor. In addition, the <var>Row</var> and <var>Column</var> numbers for the underlying cell are stored in internal members. TPickListCellEditor provides methods needed to implement LCL message passing using the TGridMessage message type.
          </p>
        </descr>
        <seealso>
          <link id="TGridMessage"/>
        </seealso>
      </element>

      <element name="TPickListCellEditor.FGrid"/>
      <element name="TPickListCellEditor.FCol"/>
      <element name="TPickListCellEditor.FRow"/>

      <element name="TPickListCellEditor.WndProc" link="#lcl.controls.TControl.WndProc"/>
      <element name="TPickListCellEditor.WndProc.TheMessage">
        <short/>
      </element>

      <element name="TPickListCellEditor.KeyDown" link="#lcl.controls.TWinControl.KeyDown"/>
      <element name="TPickListCellEditor.KeyDown.Key">
        <short/>
      </element>
      <element name="TPickListCellEditor.KeyDown.Shift">
        <short/>
      </element>

      <element name="TPickListCellEditor.DropDown" link="#lcl.stdctrls.TCustomComboBox.DropDown"/>
      <element name="TPickListCellEditor.CloseUp" link="#lcl.stdctrls.TCustomComboBox.CloseUp"/>
      <element name="TPickListCellEditor.Select" link="#lcl.stdctrls.TCustomComboBox.Select"/>

      <element name="TPickListCellEditor.Change">
        <short>
          Notifies the Grid control when the value for the cell editor has been changed.
        </short>
        <descr>
          <p>
            <var>Change</var> is an overridden method used to perform actions needed when the value for the control has been changed. In <var>TPickListCellEditor</var>, it ensures that the grid control is notified when the value in the cell editor has been changed.
          </p>
          <p>
            Changed calls the inherited method to signal the <var>OnChange</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TPickListCellEditor.OnEditingDone"/>
          <link id="#lcl.stdctrls.TCustomComboBox.Change">TCustomComboBox.Change</link>
        </seealso>
      </element>

      <element name="TPickListCellEditor.msg_GetValue">
        <short>Issues a message to find the value for the editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPickListCellEditor.msg_GetValue.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TPickListCellEditor.msg_SetGrid">
        <short>Issues a message to specify the grid for the editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPickListCellEditor.msg_SetGrid.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TPickListCellEditor.msg_SetValue">
        <short>Issues a message to specify the value for the editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPickListCellEditor.msg_SetValue.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TPickListCellEditor.msg_SetPos">
        <short>Issues a message to specify the position for the editor.</short>
      </element>
      <element name="TPickListCellEditor.msg_SetPos.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TPickListCellEditor.msg_GetGrid">
        <short>Issues a message to get the grid control for the editor.</short>
      </element>
      <element name="TPickListCellEditor.msg_GetGrid.Msg">
        <short>LCL message for the grid control.</short>
      </element>

      <element name="TPickListCellEditor.EditingDone" link="#lcl.controls.TControl.EditingDone"/>
      <element name="TPickListCellEditor.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>

      <element name="TEditorItem">
        <short>A single item on which a Composite cell editor operates.</short>
      </element>
      <element name="TEditorItem.Editor">
        <short>The <var>Editor</var> to be used for this item.</short>
      </element>
      <element name="TEditorItem.Align">
        <short>How this item is aligned.</short>
      </element>
      <element name="TEditorItem.ActiveControl">
        <short>Returns True if this item is part of an active control.</short>
      </element>

      <element name="TCompositeCellEditor">
        <short>A general purpose editor for cells in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCompositeCellEditor.DoUTF8KeyPress" link="#lcl.controls.TWinControl.DoUTF8KeyPress"/>
      <element name="TCompositeCellEditor.SetFocus" link="#lcl.controls.TWinControl.SetFocus"/>
      <element name="TCompositeCellEditor.VisibleChanging" link="#lcl.controls.TControl.VisibleChanging"/>

      <element name="TCompositeCellEditor.msg_GetValue">
        <short>Issues a message to get the value for the editor.</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetGrid">
        <short>Issues a message to specify grid for the editor.</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetValue">
        <short>Issues a message to specify the value for the editor.</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetBounds">
        <short>Issues a message to specify the bounds for the editor.</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetMask">
        <short>Issues a message to specify the mask for the editor.</short>
      </element>
      <element name="TCompositeCellEditor.msg_SelectAll">
        <short>Issues a message to Select all content in the editor.</short>
      </element>
      <element name="TCompositeCellEditor.CMControlChange">
        <short>Issues a Control Message for a change in a control.</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetPos">
        <short>Issues a message to specify the position for the editor.</short>
      </element>

      <element name="TCompositeCellEditor.msg_GetGrid">
        <short>
          Handles the message to get the Grid control for the composite cell editor.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCompositeCellEditor.msg_GetGrid.Msg">
        <short>Grid message handled in the method.</short>
      </element>

      <element name="TCompositeCellEditor.GetActiveControl">
        <short>
          Gets the editor marked as the active control for the composite cell editor.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCompositeCellEditor.GetActiveControl.Result">
        <short>TWinControl descendant that is the editor for an active control.</short>
      </element>

      <element name="TCompositeCellEditor.SendChar">
        <short>Transmits the specified character and returns an integer status result.</short>
        <descr>0 - failure, 1 - success</descr>
      </element>

      <element name="TCompositeCellEditor.WndProc" link="#lcl.controls.TControl.WndProc"/>

      <element name="TCompositeCellEditor.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            Frees the internal list of <var>TEditorItem</var> instances, and calls the inherited destructor.
          </p>
        </descr>
        <seealso>
          <link id="TCompositeCellEditor.AddEditor"/>
          <link id="TEditorItem"/>
        </seealso>
      </element>

      <element name="TCompositeCellEditor.AddEditor">
        <short>Adds the specified Editor with the given alignment and specified ActiveControl.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCompositeCellEditor.Focused">
        <short>Indicates if the composite control and one of its editors are focused.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCompositeCellEditor.Focused.Result">
        <short>True when the control and one of its editors are focused.</short>
      </element>

      <element name="TCompositeCellEditor.MaxLength">
        <short>Maximum length for the value in the composite editor control.</short>
        <descr>
          <p>
            The property value contains the maximum length from the <var>TCustomEdit</var> control in <var>ActiveControl</var>. Changing the value for the property causes the <var>MaxLength</var> property in the TCustomEdit control to be updated.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCompositeCellEditor.ActiveControl">
        <short>
          Contains the active control in use in one of the editors for the composite control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOnDrawCell">
        <short>Defines the event handler signalled to draw a cell a grid control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOnDrawCell.Sender">
        <short>Grid control for the event notification.</short>
      </element>
      <element name="TOnDrawCell.aCol">
        <short>Column number to draw in the event handler.</short>
      </element>
      <element name="TOnDrawCell.aRow">
        <short>Row number to draw in the event handler.</short>
      </element>
      <element name="TOnDrawCell.aRect">
        <short>Rectangle to draw in the event handler.</short>
      </element>
      <element name="TOnDrawCell.aState">
        <short>Grid drawing state used in the event handler.</short>
      </element>

      <element name="TOnSelectCellEvent">
        <short>Specifies the event handler signalled when a cell is selected in a grid control.</short>
        <descr>
          <p>
            <var>TOnSelectCellEvent</var> specifies the event handler signalled when a cell is selected in a custom-drawn grid control. TOnSelectCellEvent is the type used to implement the OnSelectCell in TCustomDrawGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnSelectCell"/>
        </seealso>
      </element>
      <element name="TOnSelectCellEvent.Sender">
        <short>Control for the event notification.</short>
      </element>
      <element name="TOnSelectCellEvent.aCol">
        <short>Column number for the selection notification.</short>
      </element>
      <element name="TOnSelectCellEvent.aRow">
        <short>Row number for the selection notification.</short>
      </element>
      <element name="TOnSelectCellEvent.CanSelect">
        <short>Set to True if the specified cell can be selected.</short>
      </element>

      <element name="TOnSelectEvent">
        <short>Specifies an event handler signalled for a selection in a grid control.</short>
        <descr>
          <p>
            <var>TOnSelectEvent</var> specifies an event handler signalled when a selection is made in a grid control. TOnSelectEvent is the type used to implement event handler properties in TCustomGrid, including:
          </p>
          <ul>
            <li>OnAfterSelection</li>
            <li>OnBeforeSelection</li>
            <li>OnButtonClick</li>
            <li>OnSelection</li>
          </ul>
          <p>
            Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnAfterSelection"/>
          <link id="TCustomGrid.OnBeforeSelection"/>
          <link id="TCustomGrid.OnButtonClick"/>
          <link id="TCustomGrid.OnSelection"/>
        </seealso>
      </element>
      <element name="TOnSelectEvent.Sender">
        <short>Control generating the event notification.</short>
      </element>
      <element name="TOnSelectEvent.aCol">
        <short>Column number for the selection.</short>
      </element>
      <element name="TOnSelectEvent.aRow">
        <short>Row number for the selection.</short>
      </element>

      <element name="TGridOperationEvent">
        <short>Event handler signalled when rows or columns are added, deleted or moved in a grid.</short>
        <descr>
          <p>
            <var>TGridOperationEvent</var> specifies an event handler signalled when rows or columns are added, deleted or moved in a custom-drawn grid control. TGridOperationEvent is the type used to implement event handler properties in <var>TCustomDrawGrid</var>, including:
          </p>
          <ul>
            <li>OnColRowDeleted</li>
            <li>OnColRowExchanged</li>
            <li>OnColRowInserted/</li>
            <li>OnColRowMoved</li>
          </ul>
          <p>
            Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnColRowDeleted"/>
          <link id="TCustomDrawGrid.OnColRowExchanged"/>
          <link id="TCustomDrawGrid.OnColRowInserted"/>
          <link id="TCustomDrawGrid.OnColRowMoved"/>
        </seealso>
      </element>
      <element name="TGridOperationEvent.Sender">
        <short>Control for the event notification.</short>
      </element>
      <element name="TGridOperationEvent.IsColumn">
        <short>True when the notification is for a column and not a row.</short>
      </element>
      <element name="TGridOperationEvent.sIndex">
        <short>Starting index position for the row or column.</short>
      </element>
      <element name="TGridOperationEvent.tIndex">
        <short>Final index position for the row or column.</short>
      </element>

      <element name="THdrEvent">
        <short>Specifies an event handler signalled when an event occurs in a fixed header cell.</short>
        <descr>
          <p>
            <var>THdrEvent</var> specifies an event handler signalled when an event occurs in a column header. Arguments passed to the event handler indicate whether the action occurred for a column or a row header, and the index position for the row or column.
          </p>
          <p>
            <var>THdrEvent</var> is the type used to implement the <var>OnHeaderClick</var> and <var>OnHeaderSized</var> properties in <var>TCustomDrawGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnHeaderClick"/>
          <link id="TCustomDrawGrid.OnHeaderSized"/>
        </seealso>
      </element>
      <element name="THdrEvent.Sender">
        <short>Control generating the event notification.</short>
      </element>
      <element name="THdrEvent.IsColumn">
        <short>True if the event applies to a column header; False when a row header is affected.</short>
      </element>
      <element name="THdrEvent.Index">
        <short>Index position for the row or column in the event notification.</short>
      </element>

      <element name="TOnCompareCells">
        <short>Specifies an event handler signalled to compare cell values.</short>
        <descr>
          <p>
            <var>TOnCompareCells</var> specifies an event handler signalled to compare the cells at the coordinates in <var>ACol</var>, <var>ARow</var>, <var>BCol</var>, and <var>BRow</var>. ACol and ARow are the column and row numbers for the first value in the comparison. BCol and BRow are the column and row number for the second value in the comparison.
          </p>
          <p>
            <var>Result</var> is a variable <var>Integer</var> argument used to return the relative sort order for the compared values. The event handler must perform the actions needed to compare the cell values, and set the value in Result accordingly. <var>Result</var> should contain the following values:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>The cell value at ACol, ARow occurs before the value at BCol, BRow</dd>
            <dt>0</dt>
            <dd>The compared cells contain the same values</dd>
            <dt>1</dt>
            <dd>The cell value at ACol, ARow occurs after the cell value at BCol, BRow</dd>
          </dl>
          <p>
            TOnCompareCells is the type used to implement the <var>OnCompareCells</var> in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnCompareCells"/>
        </seealso>
      </element>
      <element name="TOnCompareCells.Result">
        <short>Relative sort order for the compared values.</short>
      </element>
      <element name="TOnCompareCells.Sender">
        <short>Control generating the event notification.</short>
      </element>
      <element name="TOnCompareCells.ACol">
        <short>Column number for the first compared cell value.</short>
      </element>
      <element name="TOnCompareCells.ARow">
        <short>Row number for the first compared cell value.</short>
      </element>
      <element name="TOnCompareCells.Bcol">
        <short>Column number for the second compared cell value.</short>
      </element>
      <element name="TOnCompareCells.BRow">
        <short>Row number for the second compared cell value.</short>
      </element>

      <element name="TSelectEditorEvent">
        <short>Specifies an event handler signalled to get an editor control for the specified cell.</short>
        <descr>
          <p>
            <var>TSelectEditorEvent</var> specifies an event handler signalled to get an editor control for the cell at the coordinates in <var>ACol</var> and <var>ARow</var>.
          </p>
          <p>
            <var>Editor</var> is the <var>TWinControl</var> or descendent class instance to use as the cell editor for the given cell.
          </p>
          <p>
            TSelectEditorEvent is the type used to implement the <var>OnSelectEditor</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnSelectEditor"/>
        </seealso>
      </element>
      <element name="TSelectEditorEvent.Sender">
        <short>Control generating the event notification.</short>
      </element>
      <element name="TSelectEditorEvent.aCol">
        <short>Column number for the cell editor.</short>
      </element>
      <element name="TSelectEditorEvent.aRow">
        <short>Row number for the cell editor.</short>
      </element>
      <element name="TSelectEditorEvent.Editor">
        <short>Editor control to use for the specified cell.</short>
      </element>

      <element name="TOnPrepareCanvasEvent">
        <short>Specifies an event handler signalled when preparing the canvas for a grid control.</short>
        <descr>
          <p>
            <var>TOnPrepareCanvasEvent</var> specifies an event handler signalled when the canvas for a grid control is prepared for rendering. TOnPrepareCanvasEvent allows the canvas for the grid control to be altered prior to rendering cell data.
          </p>
          <p>
            <var>Sender</var> is the grid control triggering the event notification.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> are the column and row numbers (respectively) for the grid cell in the event notification.
          </p>
          <p>
            <var>AState</var> contains the grid drawing state for the cell data.
          </p>
          <p>
            TOnPrepareCanvasEvent is the type used to implement the <var>OnPrepareCanvas</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnPrepareCanvas"/>
          <link id="TCustomGrid.PrepareCanvas"/>
          <link id="TCustomGrid.DoPrepareCanvas"/>
          <link id="TCustomGrid.DrawCell"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
        </seealso>
      </element>
      <element name="TOnPrepareCanvasEvent.Sender">
        <short>Grid control for the event notification.</short>
      </element>
      <element name="TOnPrepareCanvasEvent.aCol">
        <short>Column number for the cell in the event notification.</short>
      </element>
      <element name="TOnPrepareCanvasEvent.aRow">
        <short>Row number for the cell in the event notification.</short>
      </element>
      <element name="TOnPrepareCanvasEvent.aState">
        <short>Grid drawing state for the cell in the event notification.</short>
      </element>

      <element name="TUserCheckBoxBitmapEvent">
        <short>
          Specifies an event handler signalled to get the user-supplied bitmap for a check box cell.
        </short>
        <descr>
          <p>
            <var>TUserCheckBoxBitmapEvent</var> is the type used for the <var>OnUserCheckboxBitmap</var> property in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnUserCheckboxBitmap"/>
        </seealso>
      </element>
      <element name="TUserCheckBoxBitmapEvent.Sender">
        <short>Object (TCustomGrid) for the event notification.</short>
      </element>
      <element name="TUserCheckBoxBitmapEvent.aCol">
        <short>Column number for the cell with the check box.</short>
      </element>
      <element name="TUserCheckBoxBitmapEvent.aRow">
        <short>Row number for the cell with the check box.</short>
      </element>
      <element name="TUserCheckBoxBitmapEvent.CheckedState">
        <short>Checked state for the check box.</short>
      </element>
      <element name="TUserCheckBoxBitmapEvent.ABitmap">
        <short>Bitmap image with the state needed for the check box cell.</short>
      </element>

      <element name="TUserCheckBoxImageEvent">
        <short>
          Specifies the event handler used to get the image drawn for a Checkbox column.
        </short>
        <descr>
          <p>
            <var>TUserCheckBoxImageEvent</var> specifies an event handler signalled to get the image drawn for a grid cell which displays a Checkbox.
          </p>
          <p>
            <var>Sender</var> is the grid control generating the event notification.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> are the column and row numbers (respectively) for the cell where the Checkbox is drawn.
          </p>
          <p>
            <var>CheckedState</var> indicates whether the Checkbox is drawn using the Checked state.
          </p>
          <p>
            <var>ImageList</var> contains the images used for the Unchecked and Checked states.
          </p>
          <p>
            <var>ImageIndex</var> indicates the image in ImageList used for the drawing operation.
          </p>
          <p>
            TUserCheckBoxImageEvent is the type used to implement the <var>OnUserCheckboxImage</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnUserCheckboxImage"/>
          <link id="TCustomGrid.GetImageForCheckBox"/>
        </seealso>
      </element>
      <element name="TUserCheckBoxImageEvent.Sender">
        <short>Grid generating the event notification.</short>
      </element>
      <element name="TUserCheckBoxImageEvent.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TUserCheckBoxImageEvent.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TUserCheckBoxImageEvent.CheckedState">
        <short>State for the check box.</short>
      </element>
      <element name="TUserCheckBoxImageEvent.ImageList">
        <short>Image list with unchecked and checked images.</short>
      </element>
      <element name="TUserCheckBoxImageEvent.ImageIndex">
        <short>Position of the image in ImageList to use for the check box cell.</short>
      </element>

      <element name="TValidateEntryEvent">
        <short>Specifies the event handler used to validate the content in a grid cell.</short>
        <descr>
          <p>
            <var>TValidateEntryEvent</var> specifies an event handler used to validate the content in a grid cell. TValidateEntryEvent is the type used to implement the <var>OnValidateEntry</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnValidateEntry"/>
          <link id="TCustomGrid.ValidateEntry"/>
          <link id="TCustomGrid.EditorDoGetValue"/>
          <link id="TCustomStringGrid.SelectionSetText"/>
        </seealso>
      </element>
      <element name="TValidateEntryEvent.Sender">
        <short>Grid generating the event notification.</short>
      </element>
      <element name="TValidateEntryEvent.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TValidateEntryEvent.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TValidateEntryEvent.OldValue">
        <short>Value checked in the event handler.</short>
      </element>
      <element name="TValidateEntryEvent.NewValue">
        <short>Value returned from the event handler.</short>
      </element>

      <element name="TToggledCheckboxEvent">
        <short>Specifies an event handler signalled when the value in a CheckBox cell is changed.</short>
        <descr>
          <p>
            <var>TToggledCheckboxEvent</var> specifies an event handler signalled when the value in CheckBox-style cell is changed in a grid. Arguments passed to the event handler identify the grid control for the event notification, the row and column numbers for the altered cell, and the state for a CheckBox cell editor.
          </p>
          <p>
            <var>TToggledCheckboxEvent</var> is the type used to implement the <var>OnCheckboxToggled</var> in <var>TCustomGrid</var> and descendent classes. Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnCheckboxToggled"/>
          <link id="TCustomDrawGrid.ToggleCheckbox"/>
        </seealso>
      </element>
      <element name="TToggledCheckboxEvent.Sender">
        <short>Grid control for the event notification.</short>
      </element>
      <element name="TToggledCheckboxEvent.aCol">
        <short>Column number for the altered cell.</short>
      </element>
      <element name="TToggledCheckboxEvent.aRow">
        <short>Row number for the altered cell.</short>
      </element>
      <element name="TToggledCheckboxEvent.aState">
        <short>State for the CheckBox in the associated cell editor.</short>
      </element>

      <element name="THeaderSizingEvent">
        <short>Specifies an event handler signalled when a fixed cell header in a grid is resized.</short>
        <descr>
          <p>
            <var>THeaderSizingEvent</var> specifies an event handler signalled when a fixed cell header in a grid is resized. Arguments passed to the event handler identify the grid control for the event, and information the row or column  affected by the operation.
          </p>
          <p>
            THeaderSizingEvent is the type used to implement the <var>OnHeaderSizing</var> property in TCustomDrawGrid. Applications must implement an object procedure using the signature for the event to allow responding to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnHeaderSizing"/>
        </seealso>
      </element>
      <element name="THeaderSizingEvent.Sender">
        <short>Grid control for the event notification.</short>
      </element>
      <element name="THeaderSizingEvent.IsColumn">
        <short>True when the affected cell is a column header; False when it is a row header.</short>
      </element>
      <element name="THeaderSizingEvent.aIndex">
        <short>Position of the row or column in the grid control.</short>
      </element>
      <element name="THeaderSizingEvent.aSize">
        <short>Size (in pixels) for the resized cell.</short>
      </element>

      <element name="TCellProcessEvent">
        <short>Specifies an event handler used to process the value in a grid cell.</short>
        <descr>
          <p>
            <var>TCellProcessEvent</var> specifies an event handler used to process the value in a grid cell in <var>TCustomStringGrid</var>. Arguments to the event handler identify the grid generating the event notification, the row and column numbers for the affected cell, and the value for the cell after processing. The <var>processType</var> argument specifies whether <var>aValue</var> is copied from or pasted to the cell.
          </p>
          <p>
            TCellProcessEvent is the type used to implement the <var>OnCellProcess</var> in <var>TCustomStringGrid</var>. Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.OnCellProcess"/>
        </seealso>
      </element>
      <element name="TCellProcessEvent.Sender">
        <short>Grid control generating the event notification.</short>
      </element>
      <element name="TCellProcessEvent.aCol">
        <short>Column number for the cell in the event notification.</short>
      </element>
      <element name="TCellProcessEvent.aRow">
        <short>Row number for the cell in the event notification.</short>
      </element>
      <element name="TCellProcessEvent.processType">
        <short>Process to perform on the cell value.</short>
      </element>
      <element name="TCellProcessEvent.aValue">
        <short>Value for the cell after processing has been applied.</short>
      </element>

      <element name="TGetCellHintEvent">
        <short>Event used to get cell hints.</short>
        <descr>
          <p>
            <var>TGetCellHintEvent</var> is an object procedure type used to get a hint for a string grid cell. TGetCellHintEvent is the type used for the <link id="TCustomGrid.OnGetCellHint">OnGetCellHint</link> property in <var>TCustomGrid</var>.
          </p>
          <p>
            Arguments passed to the procedure can be used to determine the content in HintText displayed as the cell hint.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnGetCellHint"/>
        </seealso>
      </element>
      <element name="TGetCellHintEvent.Sender">
        <short>The grid for the notification.</short>
      </element>
      <element name="TGetCellHintEvent.ACol">
        <short>Column index for the notification.</short>
      </element>
      <element name="TGetCellHintEvent.ARow">
        <short>Row index  for the notification.</short>
      </element>
      <element name="TGetCellHintEvent.HintText">
        <short>Text displayed as hint for the cell.</short>
      </element>

      <element name="TSaveColumnEvent">
        <short>Specifies an event handler used to load/save the configuration for a grid column.</short>
        <descr>
          <p>
            <var>TSaveColumnEvent</var> is the type used to implement the <var>OnLoadColumn</var> and <var>OnSaveColumn</var> properties in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnLoadColumn"/>
          <link id="TCustomGrid.OnSaveColumn"/>
        </seealso>
      </element>
      <element name="TSaveColumnEvent.Sender">
        <short>Grid for the event notification.</short>
      </element>
      <element name="TSaveColumnEvent.aColumn">
        <short>Column object for the event notification.</short>
      </element>
      <element name="TSaveColumnEvent.aColIndex">
        <short>Index of the column in the grid.</short>
      </element>
      <element name="TSaveColumnEvent.aCfg">
        <short>XML configuration file for the column information.</short>
      </element>
      <element name="TSaveColumnEvent.aVersion">
        <short>Grid version for the event.</short>
      </element>
      <element name="TSaveColumnEvent.aPath">
        <short>Path expression in the configuration file the column.</short>
      </element>

      <element name="TVirtualGrid">
        <short>Implements a grid with metadata where rows and columns are stored as Pointer arrays.</short>
        <descr>
          <p>
            <var>TVirtualGrid</var> is a class used to represent a grid where the rows and columns containing grid metadata are stored as arrays of Pointers. Data stored in the grid includes the Size for data in a cell, and pointers to attributes for fixed and normal cell display.
          </p>
          <p>
            TVirtualGrid is the type used for an internal member in TCustomDrawGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid"/>
        </seealso>
      </element>

      <element name="TVirtualGrid.FColCount"/>
      <element name="TVirtualGrid.FRowCount"/>
      <element name="TVirtualGrid.FCellArr"/>
      <element name="TVirtualGrid.FColArr"/>
      <element name="TVirtualGrid.FRowArr"/>

      <element name="TVirtualGrid.GetCells">
        <short>Gets the value for the indexed Celda property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.Celda"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetCells.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TVirtualGrid.GetCells.Col">
        <short>Column number for the cell value.</short>
      </element>
      <element name="TVirtualGrid.GetCells.Row">
        <short>Row number for the cell value.</short>
      </element>

      <element name="TVirtualGrid.GetRows">
        <short>Gets the value for the indexed Rows property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.Rows"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetRows.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TVirtualGrid.GetRows.Row">
        <short>Row number for the property value.</short>
      </element>

      <element name="TVirtualGrid.GetCols">
        <short>Gets the value for the indexed Cols property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.Cols"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetCols.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TVirtualGrid.GetCols.Col">
        <short>Column number for the property value.</short>
      </element>

      <element name="TVirtualGrid.SetCells">
        <short>Sets the value for the indexed Celda property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.Celda"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetCells.Col">
        <short>Column number for the cell value.</short>
      </element>
      <element name="TVirtualGrid.SetCells.Row">
        <short>Row number for the cell value.</short>
      </element>
      <element name="TVirtualGrid.SetCells.AValue">
        <short>Pointer to the properties for the cell.</short>
      </element>

      <element name="TVirtualGrid.SetRows">
        <short>Sets the value for the indexed Rows property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.Rows"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetRows.Row">
        <short>Row number for the property value.</short>
      </element>
      <element name="TVirtualGrid.SetRows.AValue">
        <short>Pointer to the properties for the row.</short>
      </element>

      <element name="TVirtualGrid.SetColCount">
        <short>Sets the value for the ColCount property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetColCount.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TVirtualGrid.SetRowCount">
        <short>Sets the value for the RowCount property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetRowCount.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TVirtualGrid.SetCols">
        <short>Sets the value for the indexed Cols property.</short>
        <descr/>
        <seealso>
          <link id="TVirtualGrid.Cols"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetCols.Col">
        <short>Column number for the properties stored in the method.</short>
      </element>
      <element name="TVirtualGrid.SetCols.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TVirtualGrid.doDestroyItem">
        <short>Destroys an Item at the given Row and Column location.</short>
        <descr>
          <p>
            Performs actions needed to free the Item at the specified column and row numbers.
          </p>
          <p>
            <var>Item</var> is a <var>Pointer</var> to the column/row properties for the cell at the coordinates in <var>Col</var> and <var>Row</var>. No actions are performed in the method when Item is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            <var>Sender</var> contains the object instance for the column, row, or cell affected in the method. Calls the <var>DisposeColRow</var> method when Sender is for a column or row array. Calls <var>DisposeCell</var> when Sender contains a pointer to another object class.
          </p>
          <p>
            The value in Item is set to <b>Nil</b> prior to exiting from the method.
          </p>
          <p>
            doDestroyItem is the default handler assigned to the <var>OnDestroyItem</var> event handler  for the cell, column and row arrays used in the virtual grid.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Sender">
        <short>Column, row, or cell properties affected in the method.</short>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Col">
        <short>Column number freed  in the method.</short>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Row">
        <short>Row number freed in the method.</short>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Item">
        <short>Pointer to the column, row, or cell properties freed in the method.</short>
      </element>

      <element name="TVirtualGrid.doNewItem">
        <short>Creates a new item at the location specified by Col and Row.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.doNewItem.Sender">
        <short/>
      </element>
      <element name="TVirtualGrid.doNewItem.Col">
        <short/>
      </element>
      <element name="TVirtualGrid.doNewItem.Row">
        <short/>
      </element>
      <element name="TVirtualGrid.doNewItem.Item">
        <short/>
      </element>

      <element name="TVirtualGrid.DeleteColRow">
        <short>Removes either a column or a row in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.DeleteColRow.IsColumn">
        <short/>
      </element>
      <element name="TVirtualGrid.DeleteColRow.Index">
        <short/>
      </element>

      <element name="TVirtualGrid.MoveColRow">
        <short>Moves either a column or a row using the specified index positions.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.MoveColRow.IsColumn">
        <short/>
      </element>
      <element name="TVirtualGrid.MoveColRow.FromIndex">
        <short/>
      </element>
      <element name="TVirtualGrid.MoveColRow.ToIndex">
        <short/>
      </element>

      <element name="TVirtualGrid.ExchangeColRow">
        <short>Exchanges values for the current column or row with those at the specified position.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.ExchangeColRow.IsColumn">
        <short/>
      </element>
      <element name="TVirtualGrid.ExchangeColRow.Index">
        <short/>
      </element>
      <element name="TVirtualGrid.ExchangeColRow.WithIndex">
        <short/>
      </element>

      <element name="TVirtualGrid.DisposeCell">
        <short>Disposes of the resources and the pointer for the given cell.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.DisposeCell.P">
        <short/>
      </element>

      <element name="TVirtualGrid.DisposeColRow">
        <short>Disposes of the specified row or column, and frees its pointer.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.DisposeColRow.p">
        <short/>
      </element>

      <element name="TVirtualGrid.IsColumnIndexValid">
        <short>Indicates if the specified ordinal column number is valid for the grid.</short>
        <descr/>
      </element>
      <element name="TVirtualGrid.IsColumnIndexValid.Result">
        <short>True if the index is valid for the grid.</short>
      </element>
      <element name="TVirtualGrid.IsColumnIndexValid.AIndex">
        <short>Ordinal column number examined in the method.</short>
      </element>

      <element name="TVirtualGrid.IsRowIndexValid">
        <short>Indicates if the specified ordinal row number is valid for the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.IsRowIndexValid.Result">
        <short>True if the index is valid for the grid.</short>
      </element>
      <element name="TVirtualGrid.IsRowIndexValid.AIndex">
        <short>Ordinal row number examined in the method.</short>
      </element>

      <element name="TVirtualGrid.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited method on entry.
          </p>
          <p>
            Create allocates TPointerPointerArray resources needed for the column, row, and cell arrays used in the class instance. OnDestroyItem and OnNewItem event handlers in the array classes are set to the <var>doDestroyItem</var> and <var>doNewItem</var> methods in the class instance.
          </p>
          <p>
            Creates sets the default values for the <var>RowCount</var> and <var>ColCount</var> properties to 4 (for both).
          </p>
        </descr>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>

      <element name="TVirtualGrid.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy calls <var>Clear</var> to free content in the internal cell, column, and row arrays used in the class instance. Resource allocated to the cell, row, and column arrays are freed. The row and column counts for the virtual grid are reset to 0 (zero).
          </p>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.system.TObject.Destroy">TObject.Destroy</link>
        </seealso>
      </element>

      <element name="TVirtualGrid.Clear">
        <short>Clears the content in the virtual grid.</short>
        <descr>
          <p>
            <var>Clear</var> is a method used to remove the content in the virtual grid. Clear ensures that values in the cell, column, and row arrays used in the class instance are cleared. Values in the <var>ColCount</var> and <var>RowCount</var> properties are reset to <b>0</b> (<b>zero</b>).
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TVirtualGrid.GetDefaultCell">
        <short>Gets the default values for a new cell added to the grid.</short>
        <descr>
          <p>
            <var>GetDefaultCell</var> is a <var>PCellProps</var> function used to get the default values for a new cell added to the grid. GetDefaultCell calls New to allocate resources for the PCellProps instance in the return value. Nil values are explicitly assigned to the <var>Text</var> and <var>Attr</var> members in the new instance.
          </p>
          <p>
            GetDefaultCell is called when a value is assigned to a cell in the <var>Celda</var> property and its PCellProps instance has not already been allocated.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TVirtualGrid.GetDefaultCell.Result">
        <short>Pointer to the cell properties with the default values for a cell.</short>
      </element>

      <element name="TVirtualGrid.GetDefaultColRow">
        <short>Gets a pointer to the default values used in a new column and row properties instance.</short>
        <descr>
          <p>
            Used in the implementation of the doNewItem method called when a new column row is added to the virtual grid.
          </p>
        </descr>
        <seealso>
          <link id="TVirtualGrid.doNewItem"/>
          <link id="PColRowProps"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetDefaultColRow.Result">
        <short>Pointer to the PColRowProps allocated in the method.</short>
      </element>

      <element name="TVirtualGrid.ColCount">
        <short>Number of columns defined for the grid.</short>
        <descr>
          <p>
            <var>ColCount</var> is an <var>Integer</var> property which indicates the number of columns defined for the grid. When a new value for the property is specified, the internal arrays used for column and cell properties are resized to the length in the property value.
          </p>
        </descr>
        <seealso>
          <link id="TPointerPointerArray"/>
        </seealso>
      </element>

      <element name="TVirtualGrid.RowCount">
        <short>Number of rows defined for the grid.</short>
        <descr>
          <p>
            <var>RowCount</var> is an <var>Integer</var> property which contains the number of rows defined for the grid. When setting a new value for the property, the internal arrays used for rows and cells are resized to the length in the new property value.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TVirtualGrid.Celda">
        <short>Provides indexed access to cell properties by their column and row numbers.</short>
        <descr>
          <var>Celda</var> is an indexed <var>PCellProps</var> property which provides access to the data, attributes, and text for a given cell. Values are accessed by their column and row numbers. Setting a new value for the indexed property causes an existing cell to be freed from the internal cell array (when assigned) by calling <var>DisposeCell</var>.
        </descr>
        <seealso>
          <link id="TVirtualGrid.DisposeCell"/>
          <link id="PCellProps"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.Celda.Col">
        <short>Column number for the cell.</short>
      </element>
      <element name="TVirtualGrid.Celda.Row">
        <short>Row number for the cell.</short>
      </element>

      <element name="TVirtualGrid.Cols">
        <short>Provides indexed access to column properties by their ordinal column number.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.Cols.Col">
        <short>Column number to access in the grid.</short>
      </element>

      <element name="TVirtualGrid.Rows">
        <short>Provides indexed access to row properties by their ordinal row number.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.Rows.Row">
        <short>Row number to access in the grid.</short>
      </element>

      <element name="TVirtualGrid.InsertColRow">
        <short>Inserts either a column or a row at the specified index position.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TVirtualGrid.InsertColRow.IsColumn">
        <short>True to insert a column at the given position, False for a row.</short>
      </element>
      <element name="TVirtualGrid.InsertColRow.Index">
        <short>Position where the column or row is inserted.</short>
      </element>

      <element name="TGridColumnTitle">
        <short>
          Provides properties and methods need to represent a column title in a grid.
        </short>
        <descr>
          <p>
            <var>TGridColumnTitle</var> is <var>TPersistent</var> descendant used to represent properties and methods for the title for a column in a grid. Use the published properties in the class to access the layout and display attributes for the column title, including:
          </p>
          <ul>
            <li>Alignment</li>
            <li>Color</li>
            <li>Font</li>
            <li>ImageIndex</li>
            <li>ImageLayout</li>
            <li>Layout</li>
            <li>MultiLine</li>
            <li>PrefixOption</li>
          </ul>
          <p>
            Use the <var>Caption</var> to read or write the text displayed as the title for a grid column.
          </p>
          <p>
            Use the <var>Column</var> to read the column reference (assigned in the constructor for the class instance) to which the column title is attached.
          </p>
          <p>
            <var>TGridColumnTitle</var> is the type used to implement the <var>TGridColumn.Title</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Title"/>
          <link id="TGridColumnTitle.Caption"/>
          <link id="TGridColumnTitle.Column"/>
          <link id="TGridColumnTitle.Alignment"/>
          <link id="TGridColumnTitle.Color"/>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumnTitle.ImageIndex"/>
          <link id="TGridColumnTitle.ImageLayout"/>
          <link id="TGridColumnTitle.Layout"/>
          <link id="TGridColumnTitle.MultiLine"/>
          <link id="TGridColumnTitle.PrefixOption"/>
        </seealso>
      </element>

      <element name="TGridColumnTitle.FColumn"/>
      <element name="TGridColumnTitle.FCaption"/>
      <element name="TGridColumnTitle.FColor"/>
      <element name="TGridColumnTitle.FAlignment"/>
      <element name="TGridColumnTitle.FFont"/>
      <element name="TGridColumnTitle.FIsDefaultTitleFont"/>
      <element name="TGridColumnTitle.FLayout"/>

      <element name="TGridColumnTitle.FontChanged">
        <short>Updates the column for when font for the title has changed.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.FontChanged.Sender">
        <short>Class generating the notification.</short>
      </element>

      <element name="TGridColumnTitle.GetAlignment">
        <short>Gets the value for the Alignment property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.GetAlignment.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumnTitle.GetCaption">
        <short>Gets the value for the Caption property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetCaption.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumnTitle.GetColor">
        <short>Gets the value for the Color property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetColor.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumnTitle.GetFont">
        <short>Gets the value for the Font property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetFont.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumnTitle.GetLayout">
        <short>Gets the value for the Layout property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetLayout.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumnTitle.IsAlignmentStored">
        <short>Indicates if the Alignment is stored when saving the component.</short>
        <descr>
          <p>
            <var>IsAlignmentStored</var> indicates if the Alignment is used for the component. <var>IsAlignmentStored</var> contains <b>True</b> when the Alignment has been assigned (is not <b>Nil</b>) for the class instance.
          </p>
          <p>
            It is used in the TCustomGrid.SaveColumns method. It is also used as the storage specifier for the Alignment as used in LCL component streaming.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumnTitle.Alignment"/>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveToStream"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsAlignmentStored.Result">
        <short>True if Alignment is available for the column title.</short>
      </element>

      <element name="TGridColumnTitle.IsCaptionStored">
        <short>Indicates if the Caption is available in the component.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Caption"/>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveToStream"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsCaptionStored.Result">
        <short>True when Caption is available for the column title.</short>
      </element>

      <element name="TGridColumnTitle.IsColorStored">
        <short>Indicates if the Color is assigned for the column title.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Color"/>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveToStream"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsColorStored.Result">
        <short>True when Color has been assigned </short>
      </element>

      <element name="TGridColumnTitle.IsFontStored">
        <short>Indicates if the Font has been assigned for the column title.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Font"/>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveToStream"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsFontStored.Result">
        <short>True when Font has been assigned in the column title.</short>
      </element>

      <element name="TGridColumnTitle.IsLayoutStored">
        <short>Indicates if the Layout has been assigned in the column title.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Layout"/>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveToStream"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsLayoutStored.Result">
        <short>True when the Layout has been assigned in the column title.</short>
      </element>

      <element name="TGridColumnTitle.SetAlignment">
        <short>Sets the value in the Alignment property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetAlignment.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumnTitle.SetColor">
        <short>Sets the value in the Color property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Color"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumnTitle.SetFont">
        <short>Sets the value in the Font property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Font"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetFont.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumnTitle.SetLayout">
        <short>Sets the value in the Layout property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumnTitle.Layout"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetLayout.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumnTitle.IsDefaultFont">
        <short>Indicates if the Font contains a default value.</short>
        <descr>
          <p>
            <var>IsDefaultFont</var> is a read-only <var>Boolean</var> that indicates if the <var>Font</var> contains a default value. The value in <var>IsDefaultFont</var> is set to <b>False</b> when a new value is assigned to the <var>Font</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumnTitle.IsDefault"/>
          <link id="TGridColumnTitle.IsFontStored"/>
          <link id="TGridColumn.IsDefaultTitleFont"/>
          <link id="TGridColumn.Title"/>
        </seealso>
      </element>

      <element name="TGridColumnTitle.GetDefaultCaption">
        <short>Returns the default caption for the column title.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetDefaultCaption.Result">
        <short>Default value for the Caption property.</short>
      </element>

      <element name="TGridColumnTitle.GetDefaultAlignment">
        <short>Returns the default alignment for the column title.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetDefaultAlignment.Result">
        <short>Default value for the Alignment property.</short>
      </element>

      <element name="TGridColumnTitle.GetDefaultColor">
        <short>Returns the default color for the column title.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetDefaultColor.Result">
        <short>Default value for the Color property.</short>
      </element>

      <element name="TGridColumnTitle.GetDefaultLayout">
        <short>Returns the default layout for the column title.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.GetDefaultLayout.Result">
        <short>Default value for the Layout property.</short>
      </element>

      <element name="TGridColumnTitle.GetOwner">
        <short>
          Gets the persistent object which owns the class instance.
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TGridColumnTitle.GetOwner.Result">
        <short>Persistent object which owns the class instance.</short>
      </element>

      <element name="TGridColumnTitle.SetCaption">
        <short>Specifies the caption used for the column title.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.SetCaption.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumnTitle.DefineProperties">
        <short>
          Specifies which properties in the persistent object are used during LCL component streaming.
        </short>
        <descr>
          <p>
            <var>DefineProperties</var> is an overridden method used to define the properties which are included during LCL component streaming.  The TFiler instance in Filer is used to set the read and write procedures for specific properties. In TGridColumnTitle, the Caption is written when it has an explicit non-default value. This implements the storage specifier declared for the property.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.DefineProperties.Filer">
        <short>TFiler instance used to read and write the class during LCL streaming.</short>
      </element>

      <element name="TGridColumnTitle.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the virtual constructor for the class instance. Create calls the inherited constructor, allocates resources, and sets the default values for members in the class instance.
          </p>
          <p>
            Create calls the <var>FillTitleDefaultFont</var> method to get the default value used in the <var>Font</var> property. It can contain either the font for titles in the Grid instance or the font for the Column definition; preference is given to the value in the Grid.
          </p>
          <p>
            Create assigns the <var>FontChanged</var> method as the <var>OnChange</var> event handler for the <var>Font</var> property.
          </p>
          <p>
            <var>TheColumn</var> contains contains the <var>TGridColumn</var> instance where the column title is used.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TGridColumnTitle.Create.TheColumn">
        <short>Column class instance where the column title is used.</short>
      </element>

      <element name="TGridColumnTitle.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for <var>TGridColumnTitle</var>. It frees resource allocated for properties like Font, Alignment, Color, Caption, and Layout. It calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TGridColumnTitle.Assign">
        <short>
          Copies property value from the specified persistent object into the current class instance.
        </short>
        <descr>
          <p>
            <var>Assign</var> is an overridden method used to implement object persistence for the class. When <var>Source</var> is a <var>TGridColumnTitle</var> instance, the values from the following properties are copied:
          </p>
          <ul>
            <li>Alignment</li>
            <li>Layout</li>
            <li>Caption</li>
            <li>Color</li>
            <li>Font</li>
            <li>ImageIndex</li>
          </ul>
          <p>
            If Source is not derived from TGridColumnTitle, the inherited method is called using Source as an argument.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <element name="TGridColumnTitle.Assign.Source">
        <short>Persistent object with property values copied in the method.</short>
      </element>

      <element name="TGridColumnTitle.FillTitleDefaultFont">
        <short>Stores the default font used for the column title.</short>
        <descr>
          <p>
            When <var>Grid</var> has been assigned, the <var>TitleFont</var> property from the Grid is used in the <var>Font</var> property. Otherwise, the Font from the <var>Column</var> is used. <var>IsDefaultFont</var> is set to True in the method.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumnTitle.Column"/>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumn.Grid"/>
          <link id="TGridColumn.Font"/>
          <link id="TCustomGrid.TitleFont"/>
        </seealso>
      </element>

      <element name="TGridColumnTitle.FixDesignFontsPPI">
        <short>Corrects the design-time PPI for the column title.</short>
        <descr>
          <p>
            <var>FixDesignFontsPPI</var> is a procedure used to correct the design-time Pixels Per Inch setting for the component. Pixels Per Inch for Fonts is not saved in LFM files, and the design-time setting may differ from the run-time setting on a target machine. This adversely affects font scaling.
          </p>
          <p>
            FixDesignFontsPPI calls the DoFixDesignFontPPI method in the Grid control for the column to adjust the font PPI to the value specified in ADesignTimePPI.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumn.Grid"/>
          <link id="#lcl.controls.TControl.DoFixDesignFontPPI">TControl.DoFixDesignFontPPI</link>
        </seealso>
      </element>
      <element name="TGridColumnTitle.FixDesignFontsPPI.ADesignTime">
        <short>Design-time display density applied in the method.</short>
      </element>

      <element name="TGridColumnTitle.ScaleFontsPPI">
        <short>
          Scales font sizes in the class instance to the specified display density.
        </short>
        <descr>
          <p>
            <var>ScaleFontsPPI</var> is an overridden procedure used to scale the size for the fonts in the Grid and Title properties to the specified display density (PPI) (Pixels Per Inch).
          </p>
          <p>
            AToPPI contains the value assigned to the fonts used when a non-zero value is specified.
          </p>
          <p>
            If AToPPI is omitted, the scaling factor in AProportion is used to adjust the existing PPI setting in the fonts by the indicated factor.
          </p>
          <p>
            ScaleFontsPPI is called when the AutoAdjustLayout method is used to apply a layout policy to a control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TGridColumnTitle.ScaleFontsPPI.AToPPI">
        <short>Explicit Pixels per Inch setting for the fonts.</short>
      </element>
      <element name="TGridColumnTitle.ScaleFontsPPI.AProportion">
        <short>Scaling factor applied to the existing PPI setting for the fonts.</short>
      </element>

      <element name="TGridColumnTitle.IsDefault">
        <short>Returns True if the column title uses the default property values.</short>
        <descr>
          <p>
            <var>IsDefault</var> is a <var>Boolean</var> function used to determine if the column title uses the default values assigned when the class instance was created. The return value is <b>True</b> when <b>all</b> of the following conditions are met:
          </p>
          <ul>
            <li>Alignment is Nil (unassigned).</li>
            <li>Caption is Nil  (unassigned).</li>
            <li>Color is Nil (unassigned).</li>
            <li>Layout is Nil  (unassigned).</li>
            <li>ImageIndex is 0 (zero).</li>
            <li>ImageLayout is blGlyphRight.</li>
            <li>IsDefaultFont returns True.</li>
          </ul>
          <p>
            IsDefault is when the coloumns for the parent grid are streamed using the LCL component streaming mechanism. Columns which contain default values (including the title) are not written during component streaming.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.IsDefault"/>
          <link id="TGridColumn.Title"/>
          <link id="TGridColumns"/>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsDefault.Result">
        <short>True if the column title uses the default property values.</short>
      </element>

      <element name="TGridColumnTitle.Column">
        <short>The <var>Column</var> to which the title applies.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumnTitle.Alignment">
        <short>
          The <var>Alignment</var> (whether justified or centered) for the column title.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumnTitle.Caption">
        <short>The <var>Caption</var> for the column title.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumnTitle.Color">
        <short>The <var>Color</var> for the column title.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumnTitle.Font">
        <short>The <var>Font</var> for the column title.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumnTitle.ImageIndex">
        <short>The index for the image used in the title (default=0, i.e. no image).</short>
      </element>

      <element name="TGridColumnTitle.ImageLayout">
        <short>The layout used for any image in the column title.</short>
      </element>

      <element name="TGridColumnTitle.Layout">
        <short>The layout used for the text in the column title.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumnTitle.MultiLine">
        <short>Indicates if the column title can be displayed as multiple lines.</short>
        <descr>
          <p>
            <var>MultiLine</var> is a <var>Boolean</var> that indicates if the column title can be displayed as multiple lines. The default value for the is <b>False</b>. Changing the value in MultiLine cause the <var>ColumnChanged</var> method for the <var>TGridColumn</var> class instance to be called.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.ColumnChanged"/>
        </seealso>
      </element>

      <element name="TGridColumnTitle.PrefixOption">
        <short>Indicates if accelerator keys are used in the column title.</short>
        <descr>
          <p>
            <var>PrefixOption</var> is a <var>TPrefixOption</var> that indicates if accelerator keys are recognized and displayed in the column title. The default value for the is <var>poNone</var>, and indicates Accelerator keys are ignored for the column title. Changing the value in <var>PrefixOption</var> causes the <var>ColumnChanged</var> method for the <var>TGridColumn</var> class instance to be called.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.ColumnChanged"/>
          <link id="TPrefixOption"/>
        </seealso>
      </element>

      <element name="TGridColumn">
        <short>Implements a column definition used for tabular data in TCustomGrid.</short>
        <descr>
          <p>
            <var>TGridColumn</var> is a <var>TCollectionItem</var> descendant which implements a column definition for grid controls. TGridColumn contains properties which control the appearance, layout, and editing behavior used for a column in <var>TCustomGrid</var> and descendent classes. For instance:
          </p>
          <ul>
            <li>Alignment</li>
            <li>ButtonStyle</li>
            <li>Color</li>
            <li>DropDownRows</li>
            <li>Font</li>
            <li>Layout</li>
            <li>MinSize</li>
            <li>MaxSize</li>
            <li>PickList</li>
            <li>ReadOnly</li>
            <li>Width</li>
            <li>Visible</li>
            <li>ValueChecked</li>
            <li>ValueUnchecked</li>
          </ul>
          <p>
            The column has an associated <var>TGridColumnTitle</var> class instance in <var>Title</var> that defines the fixed cell header displayed for the column. As a convenience, the column includes a reference to the <var>TCustomGrid</var> which uses the column definition.
          </p>
          <p>
            Instances of <var>TGridColumn</var> are created by and stored in the <var>TGridColumns</var> collection class. Use the methods in <var>TGridColumns</var> to create, access, and maintain the items in the collection.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumnTitle"/>
        </seealso>
      </element>

      <element name="TGridColumn.FButtonStyle"/>
      <element name="TGridColumn.FDropDownRows"/>
      <element name="TGridColumn.FTitle"/>
      <element name="TGridColumn.FWidthChanged"/>
      <element name="TGridColumn.FAlignment"/>
      <element name="TGridColumn.FColor"/>
      <element name="TGridColumn.FLayout"/>
      <element name="TGridColumn.FVisible"/>
      <element name="TGridColumn.FReadOnly"/>
      <element name="TGridColumn.FWidth"/>
      <element name="TGridColumn.FFont"/>
      <element name="TGridColumn.FIsDefaultFont"/>
      <element name="TGridColumn.FPickList"/>
      <element name="TGridColumn.FMinSize"/>
      <element name="TGridColumn.FMaxSize"/>
      <element name="TGridColumn.FSizePriority"/>

      <element name="TGridColumn.FontChanged">
        <short>Performs actions needed when the Font has been changed for the grid column.</short>
        <descr>
          <p>
            <var>FontChanged</var> is a procedure used to perform actions needed when the <var>Font</var> for the grid column has been changed. For <var>TGridColumn</var>, it sets the value in <var>IsDefaultFont</var> to <b>False</b> and calls the <var>ColumnChanged</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.IsDefaultFont"/>
          <link id="TGridColumn.ColumnChanged"/>
        </seealso>
      </element>
      <element name="TGridColumn.FontChanged.Sender">
        <short>Class instance generating the notification.</short>
      </element>

      <element name="TGridColumn.GetAlignment">
        <short>Gets the value for the Alignment property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetAlignment.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetColor">
        <short>Gets the value for the Color property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Color"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetColor.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetExpanded">
        <short>Gets the value for the Expanded property.</short>
        <descr>
          Always returns True in the current implementation.
        </descr>
        <seealso/>
      </element>
      <element name="TGridColumn.GetExpanded.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetFont">
        <short>Gets the value for the Font property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Font"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetFont.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetGrid">
        <short>Gets the value for the Grid property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Grid"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetGrid.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetLayout">
        <short>Gets the value for the Layout property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Layout"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetLayout.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetMaxSize">
        <short>Gets the value for the MaxSize property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.MaxSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetMaxSize.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetMinSize">
        <short>Gets the value for the MinSize property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.MinSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetMinSize.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetSizePriority">
        <short>Gets the value for the SizePriority property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetSizePriority.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetPickList">
        <short>Gets the list of strings in the picklist.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.PickList"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetPickList.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetReadOnly">
        <short>Gets the value for the ReadOnly property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetReadOnly.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetVisible">
        <short>Gets the value for the Visible property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Visible"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetVisible.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.GetWidth">
        <short>Gets the value for the Width property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetWidth.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumn.IsAlignmentStored">
        <short>Indicates if the Alignment is used for the class instance.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsAlignmentStored.Result">
        <short>True when Alignment has been assigned in the class instance.</short>
      </element>

      <element name="TGridColumn.IsColorStored">
        <short>Indicates if the Color is used in the class instance.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Color"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsColorStored.Result">
        <short>True when Color has been assigned in the class instance.</short>
      </element>

      <element name="TGridColumn.IsFontStored">
        <short>Indicates if the Font has been assigned for the column.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumn.IsFontStored.Result">
        <short>True when Font has a value other than the default font.</short>
      </element>

      <element name="TGridColumn.IsLayoutStored">
        <short>Implements the storage specifier for the ImageLayout property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.ImageLayout"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsLayoutStored.Result">
        <short>True when the property member contains a value other than Nil.</short>
      </element>

      <element name="TGridColumn.IsMinSizeStored">
        <short>Implements the storage specifier for the MinSize property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.MinSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsMinSizeStored.Result">
        <short>True when the property member contains a value other than Nil.</short>
      </element>

      <element name="TGridColumn.IsMaxSizeStored">
        <short>Implements the storage specifier for the MaxSize property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.MaxSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsMaxSizeStored.Result">
        <short>True when the property member contains a value other than Nil.</short>
      </element>

      <element name="TGridColumn.IsReadOnlyStored">
        <short>Implements the storage specifier for the  ReadOnly property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsReadOnlyStored.Result">
        <short>True when the property member contains a value other than Nil.</short>
      </element>

      <element name="TGridColumn.IsSizePriorityStored">
        <short>Implements the storage specifier for the SizePriority property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsSizePriorityStored.Result">
        <short>True when the property member contains a value other than Nil.</short>
      </element>

      <element name="TGridColumn.IsVisibleStored">
        <short>Implements the storage specifier for the Visible property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Visible"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsVisibleStored.Result">
        <short>True when the property member contains True.</short>
      </element>

      <element name="TGridColumn.IsWidthStored">
        <short>Implements the storage specifier for the Width property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsWidthStored.Result">
        <short>True when the property member contains a value other than Nil.</short>
      </element>

      <element name="TGridColumn.SetAlignment">
        <short>Sets the value in the Alignment property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetAlignment.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetButtonStyle">
        <short>Sets the value in the ButtonStyle property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.ButtonStyle"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetButtonStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetColor">
        <short>Sets the value in the Color property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Color"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetExpanded">
        <short>Sets the value in the Expanded property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Expanded"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetExpanded.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetFont">
        <short>Sets the value in the Font property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Font"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetFont.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetLayout">
        <short>Sets the value in the Layout property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Layout"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetLayout.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetMaxSize">
        <short>Sets the value in the MaxSize property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.MaxSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetMaxSize.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetMinSize">
        <short>Sets the value for the MinSize property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.MinSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetMinSize.Avalue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetPickList">
        <short>Sets the value for the PickList property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.PickList"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetPickList.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetReadOnly">
        <short>Sets the value for the ReadOnly property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetReadOnly.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetSizePriority">
        <short>Sets the value for the SizePriority property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetSizePriority.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetTitle">
        <short>Sets the value for the Title property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Title"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetTitle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetVisible">
        <short>Sets the value for the Visible property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Visible"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetVisible.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.SetWidth">
        <short>Sets the value for the Width property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TGridColumn.Assign">
        <short>
          Copies property values from the specified persistent object to the current class instance.
        </short>
        <descr>
          <p>
            <var>Assign</var> is an overridden method in <var>TGridColumn</var>. It implements the object persistence mechanism from the FPC RTL. Assign copies property value from the persistent object in <var>Source</var> into the current class instance.
          </p>
          <p>
            When Source is derived from <var>TGridColumn</var>, the following properties are copied in the method:
          </p>
          <ul>
            <li>Alignment</li>
            <li>ButtonStyle</li>
            <li>Color</li>
            <li>DropDownRows</li>
            <li>Font</li>
            <li>Layout</li>
            <li>MinSize</li>
            <li>MaxSize</li>
            <li>PickList</li>
            <li>ReadOnly</li>
            <li>SizePriority</li>
            <li>Title</li>
            <li>Width</li>
            <li>Visible</li>
          </ul>
          <p>
            If Source is not derived from TGridColumn, the inherited Assign method is called.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TGridColumn.Assign.Source">
        <short>Persistent object with properties copied in the method.</short>
      </element>

      <element name="TGridColumn.GetDisplayName" link="#rtl.Classes.TCollectionItem.GetDisplayName"/>
      <element name="TGridColumn.GetDisplayName.Result">
        <short/>
      </element>

      <element name="TGridColumn.GetDefaultAlignment">
        <short>Gets the default value for the Alignment property.</short>
        <descr>
          <p>
            <var>GetDefaultAlignment</var> is a <var>TAlignment</var> function used to get the default value for the <var>Alignment</var> property in the grid column.
          </p>
          <p>
            GetDefaultAlignment uses the value in <var>ButtonStyle</var> to determine the alignment needed for the grid column instance. When ButtonStyle contains <var>cbsCheckboxColumn</var> or <var>cbsButtonColumn</var>, the alignment is set to <var>taCenter</var>. Otherwise, the alignment is set to <var>taLeftJustify</var>.
          </p>
          <p>
            GetDefaultAlignment is called when reading the value for the Alignment property, and the value in the property member has not been assigned (contains <b>Nil</b>). It is also called when setting a new value in Alignment, and determines whether the property member needs to be re-allocated for the modified value.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Alignment"/>
          <link id="TGridColumn.ButtonStyle"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultAlignment.Result">
        <short>TAlignment instance with the default alignment for the grid column.</short>
      </element>

      <element name="TGridColumn.GetDefaultColor">
        <short>Gets the default value for the Color property.</short>
        <descr>
          <p>
            <var>GetDefaultColor</var> is a <var>TColor</var> function used to get the default value for the <var>Color</var> property in the grid column. The return value is set to the Color property in <var>Grid</var>, when it has been assigned. When Grid contains <b>Nil</b>, the value <var>clWindow</var> is used as the return value.
          </p>
          <p>
            GetDefaultColor is called when reading the value for the Color property, and the property has not been assigned. It is also called when setting a new value in Color, and determines whether the property member is re-allocated for the new value.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Color"/>
          <link id="TGridColumn.Grid"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultColor.Result">
        <short>Default value for the Color property in the grid column.</short>
      </element>

      <element name="TGridColumn.GetDefaultLayout">
        <short>Default layout used for text in the grid column.</short>
        <descr>
          <p>
            <var>GetDefaultLayout</var> is a <var>TTextLayout</var> function used to get the default value for the <var>Layout</var> property in the grid column. The return value is always <var>tlCenter</var> in <var>TGridColumn</var>.
          </p>
          <p>
            GetDefaultLayout is called when reading the value for the  Layout property, and an explicit value has not been assigned for the property. It is also called when setting a new value in Layout, and determines whether the property member is re-allocated for the new value.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Layout"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultLayout.Result">
        <short>Default value for the Layout property.</short>
      </element>

      <element name="TGridColumn.GetDefaultMaxSize">
        <short>Gets the default value for the MaxSize property.</short>
        <descr>
          <p>
            The return value is always <b>200</b> in <var>TGridColumn</var>.
          </p>
          <p>
            <var>GetDefaultMaxSize</var> is called when read or writing the value for the <var>MaxSize</var> property, and an explicit value has not already been assigned for the member.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.MaxSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultMaxSize.Result">
        <short>Default value for the MaxSize property.</short>
      </element>

      <element name="TGridColumn.GetDefaultMinSize">
        <short>Gets the default value for the MinSize property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.MinSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultMinSize.Result">
        <short>Default value for the MinSize property.</short>
      </element>

      <element name="TGridColumn.GetDefaultReadOnly">
        <short>Gets the default value for the ReadOnly property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultReadOnly.Result">
        <short>Default value for the ReadOnly property.</short>
      </element>

      <element name="TGridColumn.GetDefaultSizePriority">
        <short>Gets the default value for the SizePriority property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultSizePriority.Result">
        <short>Default value for the SizePriority property.</short>
      </element>

      <element name="TGridColumn.GetDefaultVisible">
        <short>Gets the default value for the Visible property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Visible"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultVisible.Result">
        <short>Default value for the Visible property.</short>
      </element>

      <element name="TGridColumn.GetDefaultValueChecked">
        <short>Gets the default value for a checked cell in the grid column.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumn.GetDefaultValueChecked.Result">
        <short>Default value for a checked cell in the grid column.</short>
      </element>

      <element name="TGridColumn.GetDefaultValueUnchecked">
        <short>Gets the default value for an unchecked cell in the column.</short>
      </element>
      <element name="TGridColumn.GetDefaultValueUnchecked.Result">
        <short>Default value used for an unchecked cell in the grid column.</short>
      </element>

      <element name="TGridColumn.GetDefaultWidth">
        <short>Gets the default value for the Width property.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultWidth.Result">
        <short>Default value for the Width property.</short>
      </element>

      <element name="TGridColumn.ColumnChanged">
        <short>Performs actions needed when a column in the grid is changed.</short>
        <descr>
          <p>
            Calls <var>Changed</var>  to update the current column instance in the <var>Columns</var> collection. The internal flag used to track changes to the column width is reset after updating the collection item.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TGridColumn.AllColumnsChange">
        <short>
          Method used to indicate that all columns in the collection have been changed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.CreateTitle">
        <short>Creates a column title used for the grid column.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumn.CreateTitle.Result">
        <short>TGridColumnTitle instance created in the method.</short>
      </element>

      <element name="TGridColumn.SetIndex">
        <short>Sets the value for the Index property.</short>
        <descr>
          <p>
            <var>SetIndex</var> is an overridden method in <var>TGridColumn</var> used to set the value for the inherited <var>Index</var> property. When the property value is changed, and <var>Grid</var> is assigned, columns in the grid control are re-ordered to reflect their new value for the column (when needed). The inherited method is called to apply the new property value prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.GridColumnFromColumnIndex"/>
          <link id="TCustomGrid.DoOPMoveColRow"/>
          <link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
        </seealso>
      </element>
      <element name="TGridColumn.SetIndex.Value">
        <short>New value for the Index property.</short>
      </element>

      <element name="TGridColumn.IsDefaultFont">
        <short>Indicates if the default font is in use for the grid column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TGridColumn</var>. Create calls the  inherited <var>Create</var> method using <var>ACollection</var> as the owner for the collection item.
          </p>
          <p>
            Create allocates resources needed for members in the class instance, and sets the default values for properties such as: <var>Title</var>, <var>Font</var>, <var>IsDefaultFont</var>, <var>ButtonStyle</var> and <var>DropDownRows</var>.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Title"/>
          <link id="TGridColumn.Font"/>
          <link id="TGridColumn.IsDefaultFont"/>
          <link id="TGridColumn.ButtonStyle"/>
          <link id="TGridColumn.DropDownRows"/>
          <link id="#rtl.classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="TGridColumn.Create.ACollection">
        <short>Collection which owns the collection item.</short>
      </element>

      <element name="TGridColumn.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy ensures that resources allocated for members in the class instance are freed (when needed), including:
          </p>
          <ul>
            <li>Alignment</li>
            <li>Color</li>
            <li>Visible</li>
            <li>ReadOnly</li>
            <li>Width</li>
            <li>Layout</li>
            <li>MaxSize</li>
            <li>SizePriority</li>
            <li>MinSize</li>
            <li>ValueChecked</li>
            <li>ValueUnchecked</li>
            <li>PickList</li>
            <li>Font</li>
            <li>Title</li>
          </ul>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
        </seealso>
      </element>

      <element name="TGridColumn.FillDefaultFont">
        <short>Sets the Font to the value used in the grid control.</short>
        <descr>
          <p>
            When <var>Grid</var> has been assigned, its Font is used in the column instance. The TFont value is assigned to the Font property, and IsDefaultFont is set to True.
          </p>
          <p>
            FillDefaultFont is called from the FontChanged method in TGridColumns.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Grid"/>
          <link id="TGridColumn.Font"/>
          <link id="TGridColumn.IsDefaultFont"/>
          <link id="TGridColumns.FontChanged"/>
          <link id="TCustomGrid"/>
        </seealso>
      </element>

      <element name="TGridColumn.FixDesignFontsPPI">
        <short>Corrects the design-time PPI for the column title.</short>
        <descr>
          <p>
            <var>FixDesignFontsPPI</var> is a procedure used to correct the design-time Pixels Per Inch setting for the component. Pixels Per Inch for Fonts is not saved in LFM files, and the design-time setting may differ from the run-time setting on a target machine. This adversely affects font scaling.
          </p>
          <p>
            FixDesignFontsPPI calls the DoFixDesignFontPPI method in the Grid control to adjust the font PPI to the value specified in ADesignTimePPI.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Font"/>
          <link id="TGridColumn.Grid"/>
          <link id="#lcl.controls.TControl.DoFixDesignFontPPI">TControl.DoFixDesignFontPPI</link>
        </seealso>
      </element>
      <element name="TGridColumn.FixDesignFontsPPI.ADesignTime">
        <short>Design-time display density applied in the method.</short>
      </element>

      <element name="TGridColumn.ScaleFontsPPI">
        <short>
          Scales fonts on the column and the grid control using a scaling factor.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumn.ScaleFontsPPI.AToPPI">
        <short/>
      </element>
      <element name="TGridColumn.ScaleFontsPPI.AProportion">
        <short/>
      </element>

      <element name="TGridColumn.IsDefault">
        <short>True if the column is the default column in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumn.IsDefault.Result">
        <short/>
      </element>

      <element name="TGridColumn.Grid">
        <short>The <var>Grid</var> to which this column belongs.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.DefaultWidth">
        <short>Default width for the column, or -1 when not assigned.</short>
        <descr>
          <p>
            <var>DefaultWidth</var> is a read-only <var>Integer</var> property with the default width used for the column. The property value is read from the <var>DefaultColWidth</var> property in the Grid control (when assigned). If it is not assigned, the property value is -1.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TGridColumn.StoredWidth">
        <short>Contains the explicit, non-default value assigned to the Width property.</short>
        <descr>
          <p>
            <var>StoredWidth</var> is a read-only <var>Integer</var> property with an explicit value assigned to the <var>Width</var> property for the column. If an explicit value has not been assigned in Width, the property value is -1.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>

      <element name="TGridColumn.WidthChanged">
        <short>True when the width for the column has been changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Alignment">
        <short>Whether the column is justified, centered, etc.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.ButtonStyle">
        <short>The style used for a button displayed in the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Color">
        <short>Color used for the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.DropDownRows">
        <short>The number of rows in the drop-down list used in the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Expanded">
        <short>Whether the column has been Expanded.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Font">
        <short>The <var>Font</var> for the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Layout">
        <short>The <var>Layout</var> for text.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.MinSize">
        <short>The minimum size for the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.MaxSize">
        <short>The maximum size for the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.PickList">
        <short>The list of items that can be selected as the value for the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.ReadOnly">
        <short>True when the values in the column cannot be changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.SizePriority">
        <short>The auto-sizing priority for the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Tag">
        <short>Contains a Pointer to an Integer type.</short>
        <descr>
          <p>
            <var>Tag</var> is a <var>PtrInt</var> property which contains a numeric value. Its usage is implementation dependent.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TGridColumn.Title">
        <short>Text displayed as the column title.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Width">
        <short>The Width of the column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.Visible">
        <short>True if the column is visible (i.e. not hidden).</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumn.GetValueChecked">
        <short>Gets the checked value for a cell in the column.</short>
      </element>

      <element name="TGridColumn.GetValueUnchecked">
        <short>Gets the unchecked value for a cell in the column.</short>
      </element>

      <element name="TGridColumn.ValueChecked">
        <short>Value used for a checked cell in the column.</short>
      </element>

      <element name="TGridColumn.ValueUnchecked">
        <short>Value used for an unchecked cell in the column.</short>
      </element>

      <element name="TGridPropertyBackup">
        <short>Stores data about rows and columns used in a TCustomGrid class instance.</short>
        <descr>
          <p>
            <var>TGridPropertyBackup</var> is a record type used to store data about rows and columns, including fixed cells. Used internally in a <var>TCustomGrid</var> class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
        </seealso>
      </element>

      <element name="TGridPropertyBackup.ValidData">
        <short>Indicates if the grid contains valid row or column counts.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridPropertyBackup.FixedRowCount">
        <short>Number of fixed rows in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridPropertyBackup.FixedColCount">
        <short>Number of fixed columns in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridPropertyBackup.RowCount">
        <short>Number of rows in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridPropertyBackup.ColCount">
        <short>Number of columns in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumns">
        <short>Collection used to store column definitions for a grid control.</short>
        <descr>
          <p>
            <var>TGridColumns</var> is a <var>TCollection</var> descendant that implements a container for column definitions used in <var>TCustomGrid</var> and descendent classes. TGridColumns is the type used to implement the Columns in TCustomGrid.
          </p>
          <p>
            TGridColumns is used to create, access, and maintain <var>TGridColumn</var> class instances representing the columns in a grid. Use the indexed <var>Items</var> to access a <var>TGridColumn</var> instance in the collection using its ordinal position.
          </p>
          <p>
            Additional properties and methods are included in the collection that are relevant to their use with grid column definitions. A reference to the <var>TCustomGrid</var> which owns the collection is maintained to provide access to the properties, methods, and events in the grid.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn"/>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>

      <element name="TGridColumns.FGrid"/>

      <element name="TGridColumns.GetColumn">
        <short>Gets the value for the indexed Items property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.GetColumn.Result">
        <short>Collection the collection item at the specified position.</short>
      </element>
      <element name="TGridColumns.GetColumn.Index">
        <short>Ordinal position for the requested collection item.</short>
      </element>

      <element name="TGridColumns.GetEnabled">
        <short>Gets the value in the Enabled property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.GetEnabled.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumns.SetColumn">
        <short>Sets the item at the specified position in the Items property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.SetColumn.Index">
        <short>Ordinal position for the collection item updated in the method.</short>
      </element>
      <element name="TGridColumns.SetColumn.Value">
        <short>Value stored at the specified position in the collection.</short>
      </element>

      <element name="TGridColumns.GetVisibleCount">
        <short>Gets the value for the VisibleCount property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.GetVisibleCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TGridColumns.Update">
        <short>Notifies the Grid using the collection when a column is updated.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection">TCollection</link>
        </seealso>
      </element>
      <element name="TGridColumns.Update.Item">
        <short>Collection item requiring the update notification.</short>
      </element>

      <element name="TGridColumns.TitleFontChanged">
        <short>Performs action needed when the title font is changed for items in the collection.</short>
        <descr>
          <p>
            <var>TitleFontChanged</var> is a procedure used to perform actions needed when the title font for a grid has been changed. TitleFontChanged examines each of the column definitions in the collection, and updates the default font for the column when it has not been set to another value. TitleFontChanged is called during execution of the <var>OnTitleFontChanged</var> event handler in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumnTitle.IsDefault"/>
        </seealso>
      </element>

      <element name="TGridColumns.FontChanged">
        <short>Performs actions needed when the Font for the grid control is changed.</short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden method used to perform actions needed when the <var>Font</var> for the grid control has been changed.
          </p>
          <p>
            FontChanged ensures that the font used for the <var>Canvas</var> is updated to use the value in Font when <var>csCustomPaint</var> is included in the <var>ControlState</var> flags.
          </p>
          <p>
            Otherwise, the inherited method is called to signal the change in the Font property. The FontChanged method in the Columns collection is also called (when enabled). The new Font is assigned to <var>TitleFont</var> and <var>TitleFontIsDefault</var> is reset to <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn.Font"/>
          <link id="#lcl.controls.TCustomControl.FontChanged">TCustomControl.FontChanged</link>
          <link id="#lcl.controls.TControl.ControlState">TControl.ControlState</link>
          <link id="#lcl.controls.TControl.Font">TControl.Font</link>
        </seealso>
      </element>

      <element name="TGridColumns.RemoveColumn">
        <short>Removes the specified column number from the collection.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.RemoveColumn.Index">
        <short>Ordinal position of the column to remove in the method.</short>
      </element>

      <element name="TGridColumns.MoveColumn">
        <short>Moves the column from the first index to the second.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.MoveColumn.FromIndex">
        <short>Original position for the column moved in the method.</short>
      </element>
      <element name="TGridColumns.MoveColumn.ToIndex">
        <short>New position for the column moved in the method.</short>
      </element>

      <element name="TGridColumns.ExchangeColumn">
        <short>Exchanges the positions for the specified columns.</short>
        <descr>
          <p>
            <var>ExchangeColumn</var> is a method used to swap the positions for the grid columns specified in the Index and WithIndex parameters. The arguments contain the ordinal positions for the respective grid columns in Items that are swapped in the method.
          </p>
          <p>
            ExchangeColumn calls HasIndex to ensure that both values within the range allowed (0..Count-1). An exception is raised if either value is not in the required range for the column collection.
          </p>
          <p>
            The order for the index positions is not significant; the column with the larger of the two index values is updated first. This prevents an exception from being raised when the column positions are swapped.
          </p>
          <p>
            ExchangeColumn swaps the values for the Index properties for the corresponding TGridColumn instances in Items. The Grid control associated with the collection is notified when the Index properties are updated, and the grid moves the content for the updated columns.
          </p>
        </descr>
        <errors>
          Raises an Exception if values in Index or WithIndex are not within the range allowed for the collection.
        </errors>
        <seealso>
          <link id="TGridColumns.Items"/>
          <link id="TGridColumns.Grid"/>
          <link id="TGridColumn"/>
          <link id="TCustomGrid"/>
          <link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
        </seealso>
      </element>
      <element name="TGridColumns.ExchangeColumn.Index">
        <short>Position of a column exchanged in the method.</short>
      </element>
      <element name="TGridColumns.ExchangeColumn.WithIndex">
        <short>Position of the other column exchanged in the method.</short>
      </element>

      <element name="TGridColumns.InsertColumn">
        <short>Inserts a column at the specified index position.</short>
        <descr>
          <p>
            InsertColumn calls the Add method to create a new column instance using the ItemClass for the collection. MoveColumn is called to relocate the newly stored column to the position in the Index argument.
          </p>
          <p>
            Use the Items property to access the new column by its index position.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns.Add"/>
          <link id="TGridColumns.MoveColumn"/>
          <link id="TGridColumns.Items"/>
          <link id="TGridColumn"/>
          <link id="#rtl.classes.TCollection.ItemClass">TCollection.ItemClass</link>
        </seealso>
      </element>
      <element name="TGridColumns.InsertColumn.Index">
        <short>Position in the collection where the column is inserted.</short>
      </element>

      <element name="TGridColumns.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited method on entry using <var>aItemClass</var> as the class type for new items added to the collection. Create stores the value in <var>AGrid</var> to the <var>Grid</var> property.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <element name="TGridColumns.Create.AGrid">
        <short>Grid which owns the collection of column definitions.</short>
      </element>
      <element name="TGridColumns.Create.aItemClass">
        <short>Class reference used to create new items in the collection.</short>
      </element>

      <element name="TGridColumns.Add">
        <short>Creates a new ItemClass instance with the collection as its owner.</short>
        <descr>
          <p>
            <var>Add</var> is an overridden method used to create a new collection item using the <var>ItemClass</var> class type for the collection. The new class instance has the collection as its owner. Add re-implements the method from the ancestor class.
          </p>
          <p>
            Use <var>Insert</var> or <var>InsertColumn</var> to create a new collection item and store it at a specified position in the collection.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns.InsertColumn"/>
          <link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
          <link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
          <link id="#rtl.classes.TCollection.Insert">TCollection.Insert</link>
          <link id="#rtl.classes.TCollection.ItemClass">TCollection.ItemClass</link>
        </seealso>
      </element>
      <element name="TGridColumns.Add.Result">
        <short>TGridColumn instance added to the collection.</short>
      </element>

      <element name="TGridColumns.Clear">
        <short>Clears all items in the collection.</short>
        <descr>
          <p>
            <var>Clear</var> calls <var>BeginUpdate</var> to suppress notifications when items are removed from the collection. It also calls <var>EndUpdate</var> when all items have been removed in the method. Clear calls the inherited method to remove the items in the collection.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection.Clear">TCollection.Clear</link>
        </seealso>
      </element>

      <element name="TGridColumns.ColumnByTitle">
        <short>Gets the grid column in the collection with the specified title.</short>
        <descr>
          <p>
            Calls SameText to perform a case-insensitive comparison between the value in ATitle and the title in each of the collection items.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TGridColumns.ColumnByTitle.Result">
        <short>TGridColumn instance with the specified title, or Nil when not found.</short>
      </element>
      <element name="TGridColumns.ColumnByTitle.ATitle">
        <short>Title for the column to retrieved from the collection.</short>
      </element>

      <element name="TGridColumns.RealIndex">
        <short>The actual grid index for the visible columns in the collection.</short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <element name="TGridColumns.RealIndex.Result">
        <short/>
      </element>
      <element name="TGridColumns.RealIndex.Index">
        <short/>
      </element>

      <element name="TGridColumns.IndexOf">
        <short>Gets the ordinal position in the collection for the specified item.</short>
        <descr>
          <p>
            <var>IndexOf</var> is an <var>Integer</var> function used to get the ordinal position in the collection for the <var>TGridColumn</var> instance specified in <var>Column</var>. The return value contains the ordinal position (in the range <b>0</b> to <b>Count-1</b>), or <b>-1</b> when no items exist in the collection or when <var>Column</var> cannot be located in the container.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns.Items"/>
          <link id="TGridColumn"/>
          <link id="#rtl.classes.TCollection.Count">TCollection.Count</link>
        </seealso>
      </element>
      <element name="TGridColumns.IndexOf.Result">
        <short>Ordinal position for the collection item, or -1 when not found.</short>
      </element>
      <element name="TGridColumns.IndexOf.Column">
        <short>Grid column to locate in the collection.</short>
      </element>

      <element name="TGridColumns.IsDefault">
        <short>True if the column contains default values only.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.IsDefault.Result">
        <short>True if the column uses a default title and contains no explicit property assignments.</short>
      </element>

      <element name="TGridColumns.HasIndex">
        <short>True if the specified index value is valid for the collection.</short>
        <descr>
          <p>
            <var>HasIndex</var> ensures that the value in <var>Index</var> is valid for the collection. The return value is True when Index is in the range <b>0..Count-1</b>.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns.Items"/>
          <link id="#rtl.classes.TCollection.Count">TCollection.Count</link>
        </seealso>
      </element>
      <element name="TGridColumns.HasIndex.Result">
        <short>True when the value is in the range allowed for the collection.</short>
      </element>
      <element name="TGridColumns.HasIndex.Index">
        <short>Index value examined in the method.</short>
      </element>

      <element name="TGridColumns.VisibleIndex">
        <short>The visible index value for the specified column in the collection.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGridColumns.VisibleIndex.Result">
        <short>Ordinal position for the column within the visible columns for the collection.</short>
      </element>
      <element name="TGridColumns.VisibleIndex.Index">
        <short>Ordinal position for the column examined in the method.</short>
      </element>

      <element name="TGridColumns.Grid">
        <short>The Grid which owns the collection and columns.</short>
        <descr>
          <p>
            <var>Grid</var> is a read-only <var>TCustomGrid</var> which provides access to the grid which owns the column collection. The value in Grid is set in the constructor to an argument passed to the method, and used as the value for the <var>Owner</var> property.
          </p>
          <p>
            Grid can be used to access the properties, methods, and events in the grid class instance. It is used in the implementation of methods in the collection, such as <var>InsertColumn</var> and <var>Update</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CreateColumns"/>
          <link id="TCustomGrid.ColumnsChanged"/>
          <link id="TGridColumns.InsertColumn"/>
          <link id="#rtl.classes.TCollection.Owner">TCollection.Owner</link>
        </seealso>
      </element>

      <element name="TGridColumns.Items">
        <short>Provides indexed access to column definitions in the collection.</short>
        <descr>
          <p>
            <var>Items</var> is an indexed <var>TGridColumn</var> used to access column definitions in the collection by the ordinal position specified in the <var>Index</var> argument. Items is the default for the collection.
          </p>
          <p>
            Use <var>Add</var> to create and store a new instance of <var>TGridColumn</var> in the collection.
          </p>
          <p>
            Use <var>InsertColumn</var> to create and store a new collection item at a specific position in the collection.
          </p>
          <p>
            Use <var>RemoveColumn</var>, <var>Delete</var> or <var>Clear</var> to remove one or all item(s) in the collection.
          </p>
          <p>
            Use <var>IndexOf</var> to get the ordinal position in the collection for an existing <var>TGridColumn</var> class instance.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns.Clear"/>
          <link id="TGridColumns.IndexOf"/>
          <link id="TGridColumns.Add"/>
          <link id="TGridColumns.InsertColumn"/>
          <link id="TGridColumns.RemoveColumn"/>
          <link id="#rtl.classes.TCollection.Delete">TCollection.Delete</link>
        </seealso>
      </element>
      <element name="TGridColumns.Items.Index">
        <short>Ordinal position for the column definition used as the value.</short>
      </element>

      <element name="TGridColumns.VisibleCount">
        <short>The number of visible columns in the collection.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridColumns.Enabled">
        <short>Indicates if the column collection is enabled.</short>
        <descr>
          <p>
            Enabled is a read-only Boolean property which indicates if columns in the collection can be used in the associated Grid control. Enabled is True when VisibleCount contains a value greater than 0 (zero).
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TGridCoord">
        <short>Stores mouse coordinates in screen pixels.</short>
        <descr>
          <p>
            <var>TGridCoordinate</var> is an alias for the <var>TPoint</var> type, and used to get mouse coordinates in <var>TCustomGrid</var> and descendent classes. The <var>X</var> and <var>Y</var> members contain pixel screen coordinates for a given cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.MouseCoord"/>
          <link id="TCustomGrid.MouseToCell"/>
        </seealso>
      </element>

      <element name="TGridRect">
        <short>Alias for the TRect type in RTL.</short>
        <descr>
          <p>
            <var>TGridRect</var> is an alias for the <var>TRect</var> type in the FPC Run-time Library (RTL).
          </p>
        </descr>
        <seealso>
          <link id="TGridRectArray"/>
          <link id="#rtl.types.TRect">TRect</link>
        </seealso>
      </element>

      <element name="TGridRectArray">
        <short>Array type used to store TGridRect instances.</short>
        <descr>
          <p>
            <var>TGridRectArray</var> is an array type used to store <var>TGridRect</var> instances. It is used to track cell selection ranges in a grid control.
          </p>
        </descr>
        <seealso>
          <link id="TGridRect"/>
          <link id="TCustomGrid.SelectedRange"/>
          <link id="TCustomGrid.SelectedRangeCount"/>
        </seealso>
      </element>

      <element name="TSizingRec">
        <short>Stores size and movement data for columns or rows in a grid.</short>
        <descr>
          <p>
            <var>TSizingRec</var> is a record type used to store size and positioning information for columns or rows in TCustomGrid and descendent classes. TSizingRec is the type used for an internal member in TCustomGrid used in method that perform column or row sizing operations.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TCustomGrid.MouseUp"/>
          <link id="TCustomGrid.DblClick"/>
        </seealso>
      </element>
      <element name="TSizingRec.Index">
        <short/>
      </element>
      <element name="TSizingRec.OffIni">
        <short/>
      </element>
      <element name="TSizingRec.OffEnd">
        <short/>
      </element>
      <element name="TSizingRec.DeltaOff">
        <short/>
      </element>
      <element name="TSizingRec.PrevLine">
        <short/>
      </element>
      <element name="TSizingRec.PrevOffset">
        <short/>
      </element>

      <element name="TGridDataCache">
        <short>Stores cached information about a grid control.</short>
        <descr>
          <p>
            <var>TGridDataCache</var> is a record type used to store and cache information about a grid control, its layout, and activity. TGridDataCache is the type used to implement the <var>GCache</var> property in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GCache"/>
        </seealso>
      </element>

      <element name="TGridDataCache.FixedWidth">
        <short>Sum of the column widths for fixed cells in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.FixedHeight">
        <short>Sum of the row heights for fixed cells in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.GridWidth">
        <short>Sum of the column widths for all cells in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.GridHeight">
        <short>Sum of the row heights for all cells in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ClientWidth">
        <short>Width of the grid control minus the width for the vertical scrollbar.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ClientHeight">
        <short>Height of the grid control minus the width of the horizontal scrollbar.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ScrollWidth">
        <short>The difference between ClientWidth and FixedWidth.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ScrollHeight">
        <short>The difference between ClientHeight and FixedHeight.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.HScrollBarNetRange">
        <short>Difference between the scrollbar range and the grid page size.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.VisibleGrid">
        <short>Visible non-fixed cell coordinates rectangle.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.MaxClientXY">
        <short>Bottom/Right coordinates in (pixels) for the visible parts of a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ValidRows">
        <short>True when there are no fixed columns to display in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ValidCols">
        <short>True when there are no fixed rows to display in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ValidGrid">
        <short>True when there are no fixed cells for columns or rows in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.AccumWidth">
        <short>Cumulative preceeding width per grid column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.AccumHeight">
        <short>Cumulative preceeding height per grid row.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.TLColOff">
        <short>Offset in pixels for the Top/Left column in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.TLRowOff">
        <short>Offset in pixels for the Top/Left row in a grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.MaxTopLeft">
        <short>Cell coordinates for the last cell that can be used as the grid visual origin.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.MaxTLOffset">
        <short>Max Top left offset for the last cell in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.HotCell">
        <short>The current "hot" cell in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.HotCellPainted">
        <short>True if the current "hot" cell has already been painted.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.HotGridZone">
        <short>GridZone for the last MouseMove.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ClickCell">
        <short>Cell coordinates for the last mouse click event.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ClickMouse">
        <short>Mouse coordinates for the last mouse click event.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.PushedCell">
        <short>Cell coordinates for the cell drawn in the pushed state.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.PushedMouse">
        <short>Mouse Coordinates for the cell drawn in the pushed state.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.ClickCellPushed">
        <short>Indicates if the header cell is currently drawn in the pushed state.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.FullVisibleGrid">
        <short>Visible cells excluding partially visible cells.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.MouseCell">
        <short>Cell which contains the mouse pointer.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridDataCache.OldMaxTopLeft">
        <short>Previous MaxTopleft (before column sizing).</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGridCursorState">
        <short>Enumerated type with cursors available in a grid.</short>
        <descr>
          <p>
            <var>TGridCursorState</var> is the type used for the <var>CursorState</var> property in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CursorState"/>
        </seealso>
      </element>
      <element name="TGridCursorState.gcsDefault">
        <short>Normal cursor shape/style.</short>
      </element>
      <element name="TGridCursorState.gcsColWidthChanging">
        <short>Cursor displayed when changing the size of a column.</short>
      </element>
      <element name="TGridCursorState.gcsRowHeightChanging">
        <short>Cursor displayed when resizing the height of a row.</short>
      </element>
      <element name="TGridCursorState.gcsDragging">
        <short>Cursor displayed when dragging a row or column.</short>
      </element>

      <element name="TCustomGrid">
        <short>Implements the base class for grid controls.</short>
        <descr>
          <p>
            A grid is a collection of cells that are organized in columns and rows. Grids are suitable for showing data that using a tabular layout. For example: tables in a database, or formulae and data in a spreadsheet.
          </p>
          <p>
            <b>Key properties:</b>
          </p>
          <p>
            The <link id="TCustomGrid.ColCount">ColCount</link> and  <link id="TCustomGrid.RowCount">RowCount</link> properties contain the column and row count of the grid.
          </p>
          <p>
            The <link id="TCustomGrid.FixedCols">FixedCols</link> and <link id="TCustomGrid.FixedRows">FixedRows</link> properties specify the count of fixed columns or rows that are used for headings.
          </p>
          <p>
            The column widths and row heights of the grid are accessible with the <link id="TCustomGrid.ColWidths">ColWidths</link> and <link id="TCustomGrid.RowHeights">RowHeights</link> properties.
          </p>
          <p>
            The <link id="TCustomGrid.DefaultColWidth">DefaultColWidth</link> and <link id="TCustomGrid.DefaultRowHeight">DefaultRowHeight</link> properties are used to specify default column widths or row heights respectively.
          </p>
          <p>
            The colors of the cells and the grid elements are specified with the <link id="TCustomGrid.AlternateColor">AlternateColor</link>, <link id="TCustomGrid.BorderColor">BorderColor</link>, <link id="TCustomGrid.FixedColor">FixedColor</link>, <link id="TCustomGrid.FixedHotColor">FixedHotColor</link>, <link id="TCustomGrid.FocusColor">FocusColor</link>, <link id="TCustomGrid.GridLineColor">GridLineColor</link> and <link id="TCustomGrid.SelectedColor">SelectedColor</link>   properties. The <link id="TCustomGrid.GridWidth">GridWidth</link> and <link id="TCustomGrid.GridHeight">GridHeight</link> properties contain the dimension of the entire grid.
          </p>
          <p>
            The <link id="TCustomGrid.ScrollBars">ScrollBars</link> controls the creation of scrollbars for the grid.
          </p>
          <p>
            The <link id="TCustomGrid.LeftCol">LeftCol</link>, <link id="TCustomGrid.TopRow">TopRow</link>, <link id="TCustomGrid.VisibleColCount">VisibleColCount</link> and <link id="TCustomGrid.VisibleRowCount">VisibleRowCount</link> properties contain information about the visible area of the grid.
          </p>
          <p>
            The <link id="TCustomGrid.Options">Options</link> controls options for the grid.
          </p>
          <p>
            <b>Key methods and events:</b>
          </p>
          <p>
            If the user highlights a cell of the grid, the <link id="TCustomGrid.SelectCell">SelectCell</link> method is called that triggers the OnSelectCell event. The position of the highlighted cell is stored within the <link id="TCustomGrid.Col">Col</link> and <link id="TCustomGrid.Row">Row</link> property.
          </p>
          <p>
            The <link id="TCustomGrid.MouseToCell">MouseToCell</link> method calculates a grid cell from a given screen position.
          </p>
          <p>
            Huge changes to the grid should be encapsulated in calls to <link id="TCustomGrid.BeginUpdate">BeginUpdate</link> and <link id="TCustomGrid.EndUpdate">EndUpdate</link> to speed up the application.
          </p>
          <p>
            Component developers must override the <link id="TCustomGrid.DrawCell">DrawCell</link> method in customized grids.
          </p>
        </descr>
        <seealso>
          <link id="TStringGrid"/>
          <link id="TDrawGrid"/>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FAlternateColor"/>
      <element name="TCustomGrid.FAutoAdvance"/>
      <element name="TCustomGrid.FAutoEdit"/>
      <element name="TCustomGrid.FAutoFillColumns"/>
      <element name="TCustomGrid.FBorderColor"/>
      <element name="TCustomGrid.FDefaultDrawing"/>
      <element name="TCustomGrid.FEditor"/>
      <element name="TCustomGrid.FEditorHidingCount"/>
      <element name="TCustomGrid.FEditorMode"/>
      <element name="TCustomGrid.FEditorOldValue"/>
      <element name="TCustomGrid.FEditorShowing"/>
      <element name="TCustomGrid.FEditorKey"/>
      <element name="TCustomGrid.FEditorOptions"/>
      <element name="TCustomGrid.FExtendedSelect"/>
      <element name="TCustomGrid.FFastEditing"/>
      <element name="TCustomGrid.FAltColorStartNormal"/>
      <element name="TCustomGrid.FFlat"/>
      <element name="TCustomGrid.FOnAfterSelection"/>
      <element name="TCustomGrid.FOnLoadColumn"/>
      <element name="TCustomGrid.FOnSaveColumn"/>
      <element name="TCustomGrid.FRangeSelectMode"/>
      <element name="TCustomGrid.FSelections"/>
      <element name="TCustomGrid.FOnUserCheckboxBitmap"/>
      <element name="TCustomGrid.FOnUserCheckboxImage"/>
      <element name="TCustomGrid.FSortOrder"/>
      <element name="TCustomGrid.FSortColumn"/>
      <element name="TCustomGrid.FSortLCLImages"/>
      <element name="TCustomGrid.FTabAdvance"/>
      <element name="TCustomGrid.FTitleImageList"/>
      <element name="TCustomGrid.FTitleImageListWidth"/>
      <element name="TCustomGrid.FTitleStyle"/>
      <element name="TCustomGrid.FAscImgInd"/>
      <element name="TCustomGrid.FDescImgInd"/>
      <element name="TCustomGrid.FOnCompareCells"/>
      <element name="TCustomGrid.FGridLineStyle"/>
      <element name="TCustomGrid.FGridLineWidth"/>
      <element name="TCustomGrid.FDefColWidth"/>
      <element name="TCustomGrid.FDefRowHeight"/>
      <element name="TCustomGrid.FRealizedDefColWidth"/>
      <element name="TCustomGrid.FRealizedDefRowHeight"/>
      <element name="TCustomGrid.FCol"/>
      <element name="TCustomGrid.FRow"/>
      <element name="TCustomGrid.FFixedCols"/>
      <element name="TCustomGrid.FFixedRows"/>
      <element name="TCustomGrid.FOnEditButtonClick"/>
      <element name="TCustomGrid.FOnButtonClick"/>
      <element name="TCustomGrid.FOnPickListSelect"/>
      <element name="TCustomGrid.FOnCheckboxToggled"/>
      <element name="TCustomGrid.FOnPrepareCanvas"/>
      <element name="TCustomGrid.FOnSelectEditor"/>
      <element name="TCustomGrid.FOnValidateEntry"/>
      <element name="TCustomGrid.FGridLineColor"/>
      <element name="TCustomGrid.FFixedGridLineColor"/>
      <element name="TCustomGrid.FFixedColor"/>
      <element name="TCustomGrid.FFixedHotColor"/>
      <element name="TCustomGrid.FFocusColor"/>
      <element name="TCustomGrid.FSelectedColor"/>
      <element name="TCustomGrid.FDisabledFontColor"/>
      <element name="TCustomGrid.FFocusRectVisible"/>
      <element name="TCustomGrid.FCols"/>
      <element name="TCustomGrid.FRows"/>
      <element name="TCustomGrid.FSaveOptions"/>
      <element name="TCustomGrid.FScrollBars"/>
      <element name="TCustomGrid.FSelectActive"/>
      <element name="TCustomGrid.FTopLeft"/>
      <element name="TCustomGrid.FPivot"/>
      <element name="TCustomGrid.FRange"/>
      <element name="TCustomGrid.FDragDx"/>
      <element name="TCustomGrid.FMoveLast"/>
      <element name="TCustomGrid.FUpdateCount"/>
      <element name="TCustomGrid.FGCache"/>
      <element name="TCustomGrid.FOptions"/>
      <element name="TCustomGrid.FOptions2"/>
      <element name="TCustomGrid.FOnDrawCell"/>
      <element name="TCustomGrid.FOnBeforeSelection"/>
      <element name="TCustomGrid.FOnSelection"/>
      <element name="TCustomGrid.FOnTopLeftChanged"/>
      <element name="TCustomGrid.FUseXORFeatures"/>
      <element name="TCustomGrid.FValidateOnSetSelection"/>
      <element name="TCustomGrid.FVSbVisible"/>
      <element name="TCustomGrid.FHSbVisible"/>
      <element name="TCustomGrid.FDefaultTextStyle"/>
      <element name="TCustomGrid.FLastWidth"/>
      <element name="TCustomGrid.FTitleFont"/>
      <element name="TCustomGrid.FLastFont"/>
      <element name="TCustomGrid.FTitleFontIsDefault"/>
      <element name="TCustomGrid.FColumns"/>
      <element name="TCustomGrid.FButtonEditor"/>
      <element name="TCustomGrid.FStringEditor"/>
      <element name="TCustomGrid.FButtonStringEditor"/>
      <element name="TCustomGrid.FPickListEditor"/>
      <element name="TCustomGrid.FExtendedColSizing"/>
      <element name="TCustomGrid.FExtendedRowSizing"/>
      <element name="TCustomGrid.FUpdatingAutoFillCols"/>
      <element name="TCustomGrid.FGridBorderStyle"/>
      <element name="TCustomGrid.FGridFlags"/>
      <element name="TCustomGrid.FGridPropBackup"/>
      <element name="TCustomGrid.FStrictSort"/>
      <element name="TCustomGrid.FIgnoreClick"/>
      <element name="TCustomGrid.FAllowOutboundEvents"/>
      <element name="TCustomGrid.FColumnClickSorts"/>
      <element name="TCustomGrid.FHeaderHotZones"/>
      <element name="TCustomGrid.FHeaderPushZones"/>
      <element name="TCustomGrid.FCursorChangeLock"/>
      <element name="TCustomGrid.FCursorState"/>
      <element name="TCustomGrid.FColRowDragIndicatorColor"/>
      <element name="TCustomGrid.FSavedCursor"/>
      <element name="TCustomGrid.FSpecialCursors"/>
      <element name="TCustomGrid.FSizing"/>
      <element name="TCustomGrid.FRowAutoInserted"/>
      <element name="TCustomGrid.FMouseWheelOption"/>
      <element name="TCustomGrid.FSavedHint"/>
      <element name="TCustomGrid.FCellHintPriority"/>
      <element name="TCustomGrid.FOnGetCellHint"/>

      <element name="TCustomGrid.AdjustCount">
        <short>Adjusts a row or column count.</short>
        <descr>
          <p>
            <var>AdjustCount</var> is a procedure used to adjust the row or column count for the grid, and to update properties and cache information for the grid.
          </p>
          <p>
            <var>IsColumn</var> indicates if the <var>OldValue</var> and <var>NewValue</var> arguments refer to the column or row count for the grid; when IsColumn is <b>True</b>, the values refer to the column count.
          </p>
          <p>
            <var>OldValue</var> contains the previous row or column count in the grid.
          </p>
          <p>
            <var>NewValue</var> contains the row or column count on exit from the method.
          </p>
          <p>
            AdjustCount is called when the value in the <var>RowCount</var> or <var>ColCount</var> is changed. It calls the <var>UpdateCachedSizes</var> and <var>SizeChanged</var> methods. It may also call <var>FixPos</var> when NewValue causes the row or column to be out of range for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.InternalSetColCount"/>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AdjustCount.IsColumn">
        <short>True when the count values are for a columns instead of rows.</short>
      </element>
      <element name="TCustomGrid.AdjustCount.OldValue">
        <short>Count value before adjustment.</short>
      </element>
      <element name="TCustomGrid.AdjustCount.NewValue">
        <short>Count value after adjustment.</short>
      </element>

      <element name="TCustomGrid.CacheVisibleGrid">
        <short>Caches information about visible parts of the grid (excluding fixed cells).</short>
        <descr/>
        <seealso>
          <link id="TGridDataCache"/>
          <link id="TCustomGrid.ScrollBy"/>
          <link id="TCustomGrid.VisualChange"/>
          <link id="TCustomGrid.ResetSizes"/>
          <link id="TCustomGrid.ResetOffset"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CancelSelection">
        <short>Removes the active range selection for the grid.</short>
        <descr>
          <p>
            Ensures that a selection range is re-created for the current cell, or the current row when <var>goRowSelect</var> is included in the <var>Options</var> for the grid. The value in <var>SelectActive</var> is set to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.SelectActive"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CheckFixedCount">
        <short>Ensures that column and row numbers for fixed cells are valid.</short>
        <descr/>
        <errors>
          Raises an EGridException if values in column or row numbers for fixed cells contain negative values, or are not in range for the grid control.
        </errors>
        <seealso/>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aCol">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aRow">
        <short>Row number examined in the method.</short>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aFCol">
        <short>Fixed column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aFRow">
        <short>Fixed row number examined in the method.</short>
      </element>

      <element name="TCustomGrid.CheckCount">
        <short>Ensures that a handle exists for the grid before updates to column or row counts.</short>
        <descr>
          <p>
            Ensures that a handle has been allocated for the grid prior to actions that affect the row or column count.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CheckCount.aNewColCount">
        <short>New column count for the control.</short>
      </element>
      <element name="TCustomGrid.CheckCount.aNewRowCount">
        <short>New row count for the control.</short>
      </element>

      <element name="TCustomGrid.CheckIndex">
        <short>Ensures a row or column index is not out of range.</short>
        <descr>
          <p>
            <var>CheckIndex</var> is a procedure used to ensure that an index value is within the range of values allowed for a row or column.
          </p>
          <p>
            <var>IsColumn</var> indicates whether a row or column index is being checked. When set to <b>True</b>, a column index is verified. When set to <b>False</b>, a row index is examined.
          </p>
          <p>
            <var>IsColumnIndexValid</var> or <var>IsRowIndexValid</var> is called to validate the value in <var>Index</var>. An <var>EGridException</var> exception is raised when Index in not allowed for the corresponding dimension.
          </p>
          <p>
            CheckIndex is called from methods like <var>Sort</var>, <var>DoOPMoveColRow</var>, and <var>DoOPDeleteColRow</var>.
          </p>
        </descr>
        <errors>
          Raises an EGridException exception with the message in rsGridIndexOutOfRange when Index is not valid for the row or column.
        </errors>
        <seealso>
          <link id="TCustomGrid.IsColumnIndexValid"/>
          <link id="TCustomGrid.IsRowIndexValid"/>
          <link id="TCustomGrid.Sort"/>
          <link id="TCustomGrid.DoOPMoveColRow"/>
          <link id="TCustomGrid.DoOPDeleteColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CheckIndex.IsColumn">
        <short>True when the Index is for a column; False when it is for a Row.</short>
      </element>
      <element name="TCustomGrid.CheckIndex.Index">
        <short>Column index examined in the method.</short>
      </element>

      <element name="TCustomGrid.CheckTopLeft">
        <short>Determines if the top/left visible cell needs to change for the cached information.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.CheckTopLeft.Result">
        <short>True when the top left cell is changed.</short>
      </element>
      <element name="TCustomGrid.CheckTopLeft.aCol">
        <short/>
      </element>
      <element name="TCustomGrid.CheckTopLeft.aRow">
        <short/>
      </element>
      <element name="TCustomGrid.CheckTopLeft.CheckCols">
        <short/>
      </element>
      <element name="TCustomGrid.CheckTopLeft.CheckRows">
        <short/>
      </element>

      <element name="TCustomGrid.GetQuickColRow">
        <short>Gets the value for the ColRow property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetQuickColRow.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.SetQuickColRow">
        <short>Sets the value for the ColRow property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetQuickColRow.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.IsCellButtonColumn">
        <short>Indicates if the specified cell is a non-fixed cell using a button-style column editor.</short>
        <descr/>
        <seealso>
          <link id="TGridColumn.ButtonStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsCellButtonColumn.Result">
        <short>True when the column exists and uses a button-style editor.</short>
      </element>
      <element name="TCustomGrid.IsCellButtonColumn.ACell">
        <short>TPoint instance with the column and row numbers for the cell.</short>
      </element>

      <element name="TCustomGrid.GetSelectedColumn">
        <short>Gets the value for the SelectedColumn property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SelectedColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelectedColumn.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.SetAlternateColor">
        <short>Sets the value in the AlternateColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.AlternateColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetAlternateColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetAutoFillColumns">
        <short>Sets the value in the AutoFillColumns property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.AutoFillColumns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetAutoFillColumns.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetBorderColor">
        <short>Sets the value for the BorderColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.BorderColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetBorderColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetColumnClickSorts">
        <short>Sets the value for the ColumnClickSorts property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColumnClickSorts"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColumnClickSorts.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetColumns">
        <short>Sets the value for the Columns property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColumns.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetEditorOptions">
        <short>Sets the value for the EditorOptions property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.EditorOptions"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetEditorOptions.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetEditorBorderStyle">
        <short>Sets the value for the EditorBorderStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.EditorBorderStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetEditorBorderStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetAltColorStartNormal">
        <short>Sets the value for the AltColorStartNormal property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.AltColorStartNormal"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetAltColorStartNormal.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetFlat">
        <short>Sets the value for the Flat property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Flat"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFlat.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetFocusRectVisible">
        <short>Sets the value for the FocusRectVisible property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.FocusRectVisible"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFocusRectVisible.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetTitleImageList">
        <short>Sets the value for the TitleImageList property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.TitleImageList"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleImageList.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetTitleImageListWidth">
        <short>Sets the value for the TitleImageListWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.TitleImageListWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleImageListWidth.aTitleImageListWidth">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetTitleFont">
        <short>Sets the value for the TitleFont property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.TitleFont"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleFont.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetTitleStyle">
        <short>Sets the value for the TitleStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.TitleStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetUseXorFeatures">
        <short>Sets the value for the UseXorFeatures property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.UseXorFeatures"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetUseXorFeatures.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.doColSizing">
        <short>Performs actions needed when a column in the grid is resized.</short>
        <descr>
          <p>
            <var>doColSizing</var> is a <var>Boolean</var> function used to perform actions needed when a column in the grid is resized. <var>X</var> and <var>Y</var> contain the mouse coordinates where the action was initiated. The return value contains <b>True</b> when the resizing operation is successfully completed.
          </p>
          <p>
            No actions are performed in doColSizing if the GridState member contains any value other than <var>gsColSizing</var>. The GridFlags member is updated to include the value <var>gfSizingStarted</var>, and the <var>ResizeColumn</var> and <var>HeaderSizing</var> methods are called to reflect the altered column size.
          </p>
        </descr>
        <seealso>
          <link ied="TCustomGrid.Options"/>
          <link id="TGridOptions.goColSizing"/>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TGridFlagsOption.gfSizingStarted"/>
          <link id="TGridFlags"/>
        </seealso>
      </element>
      <element name="TCustomGrid.doColSizing.Result">
        <short>True when column resizing is successfully completed.</short>
      </element>
      <element name="TCustomGrid.doColSizing.X">
        <short>Horizontal mouse coordinate where the action was started.</short>
      </element>
      <element name="TCustomGrid.doColSizing.Y">
        <short>Vertical mouse coordinate where the action was started.</short>
      </element>

      <element name="TCustomGrid.doRowSizing">
        <short>Performs actions needed when a grid row is resized.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.doRowSizing.Result">
        <short/>
      </element>
      <element name="TCustomGrid.doRowSizing.X">
        <short/>
      </element>
      <element name="TCustomGrid.doRowSizing.Y">
        <short/>
      </element>

      <element name="TCustomGrid.doColMoving">
        <short>Performs actions needed to move or drag a grid column.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.doColMoving.X">
        <short/>
      </element>
      <element name="TCustomGrid.doColMoving.Y">
        <short/>
      </element>

      <element name="TCustomGrid.doRowMoving">
        <short>Performs actions needed to move or drag a grid row.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.doRowMoving.X">
        <short/>
      </element>
      <element name="TCustomGrid.doRowMoving.Y">
        <short/>
      </element>

      <element name="TCustomGrid.doPushCell">
        <short>Performs actions needed to render a cell using its "Pushed" appearance.</short>
        <descr/>
        <seealso>
        <link id="TCustomGrid.StartPushCell"/>
        <link id="TCustomGrid.MouseDown"/>
      </seealso>
      </element>

      <element name="TCustomGrid.doTopleftChange">
        <short>Performs actions needed when the origin or dimensions for the grid are changed.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SetFixedCols"/>
          <link id="TCustomGrid.ScrollToCell"/>
          <link id="TCustomGrid.CheckTopLeft"/>
          <link id="TCustomGrid.FixScroll"/>
        </seealso>
      </element>
      <element name="TCustomGrid.doTopleftChange.DimChg">
        <short>True when the dimensions for the grid have been altered.</short>
      </element>

      <element name="TCustomGrid.DrawXORVertLine">
        <short>Draws a vertical line at the specified horizontal location using XOR pen mode.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.doColSizing"/>
          <link id="TCustomGrid.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DrawXORVertLine.X">
        <short>Horizontal location where the vertical grid line is drawn.</short>
      </element>

      <element name="TCustomGrid.DrawXORHorzLine">
        <short>Draws a horizontal line at the specified vertical location using XOR pen mode.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawXORHorzLine.Y">
        <short>Vertical location where the horizontal grid line is drawn.</short>
      </element>

      <element name="TCustomGrid.EditorGetValue">
        <short>Gets the value for a cell editor.</short>
        <descr>
          <p>
            <var>EditorGetValue</var> is a <var>Boolean</var> function used to get the value for a cell editor in the grid. EditorGetValue is used in the implementation of <var>TCustomGrid</var> methods like: <var>EditorShowInCell</var>, <var>ResetEditor</var>, <var>MoveExtend</var>, and <var>DestroyHandle</var>. It is used to get the cell value prior to editing, and to display the value from the cell editor when it is hidden.
          </p>
          <p>
            <var>Validate</var> is a <var>Boolean</var> argument that indicates if the <var>ValidateEntry</var> method is called to validate the edited cell value. When it contains <b>True</b>, <var>ValidateEntry</var> is called prior to calling <var>EditorDoSetValue</var> and/or <var>EditorHide</var>.
          </p>
          <p>
            The return value contains <b>True</b> when the edited cell value is valid. It also contains <b>True</b> if a cell editor has not been assigned or is not visible, or the method was called at design-time or during component destruction.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ResetEditor"/>
          <link id="TCustomGrid.DestroyHandle"/>
          <link id="TCustomGrid.MoveExtend"/>
          <link id="TCustomGrid.EditorShowInCell"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorGetValue.Result">
        <short>True when the cell is valid or has not been altered.</short>
      </element>
      <element name="TCustomGrid.EditorGetValue.Validate">
        <short>Indicates the cell value is validated using ValidateEntry.</short>
      </element>

      <element name="TCustomGrid.EditorPos">
        <short>Sets the position and size for an active cell editor in the grid.</short>
        <descr>
          <p>
            <var>EditorPos</var> is a procedure used to set the position and size for an active cell editor in the grid. EditorPos posts messages to the <var>Editor</var> for the grid, and requires a valid handle for both the grid control and the editor control. No actions are performed in the method when a Handle has not been allocated for the grid or when Editor is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            A <var>TGridMessage</var> instance with the values in Grid, Col, and Row is dispatched to the Editor to set the Editor position. The bounds for the editor rectangle is calculated and adjusted when needed.
          </p>
          <p>
            The <var>Font</var> for the grid control is assigned to the <var>Canvas</var> where the editor control is drawn.
          </p>
          <p>
            A TGridMessage instance with the values in Grid, Col, Row, and the calculated bounds is dispatched to the Editor to set the Editor bounds.
          </p>
          <p>
            EditorPos is called when visual properties are modified in the control and the editor control is visible. For example: SetRowHeight, SetDefRowHeight, AdjustEditorBounds,  SetEditorBorderStyle, SetEditorValue, EditorWidthChanged, GridMouseWheel, WMHScroll, and WMVScroll.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.Grid"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TGridMessage"/>
          <link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
          <link id="#lcl.controls.TControl.Font">TControl.Font</link>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorShowChar">
        <short>Applies a UTF-8-encoded character value to the active cell editor.</short>
        <descr>
          <p>
            Calls <var>SelectEditor</var> to ensure that the cell <var>Editor</var> is active and enabled for the cell at <var>Col</var> and <var>Row</var>. The Editor is displayed (when available) if the value in Ch is handled in the editor control, and is not marked as read-only. The character in <var>Ch</var> is posted to the widgetset class for the grid.
          </p>
          <p>
            This method bypasses the <var>KeyDown</var> handler for the class instance, and as a result does not automatically reset <var>RowAutoInsert</var> when <var>Ch</var> contains the <b>Backspace</b> key (<b>Ctrl+H</b>). RowAutoInsert is manually set to <b>False</b> in the method when the Backspace character is detected.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.SelectEditor"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.RowAutoInsert"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorShowChar.Ch">
        <short>UTF-8-encoded character applied in the method.</short>
      </element>

      <element name="TCustomGrid.EditorSetMode">
        <short>Sets the value for the EditorMode property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.EditorMode"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorSetMode.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.EditorSetValue">
        <short>Changes the cell editor value and position at run-time.</short>
        <descr>
          <p>
            Calls <var>EditorPos</var> to the set the position for the <var>Editor</var> control used in the active cell. Calls <var>EditorDoSetValue</var> to update the content in the Editor control.
          </p>
          <p>
            No actions are performed in the method at design-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.EditorDoSetValue"/>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorAlwaysShown">
        <short>Indicates if a cell editor is always displayed for an active cell in the grid.</short>
        <descr>
          <p>
            The return value is <b>True</b> when editing is allowed for the cell, it is not a fixed cell, and <var>goAlwaysShowEditor</var> is included in the <var>Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.EditingAllowed"/>
          <link id="TCustomGrid.FixedGrid"/>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorAlwaysShown.Result">
        <short>True when a cell editor is allowed and enabled in grid cells.</short>
      </element>

      <element name="TCustomGrid.FixPosition">
        <short>Ensures that column and row positions, and selection(s) are valid for the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.FixPosition.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.FixPosition.aIndex">
        <short/>
      </element>

      <element name="TCustomGrid.FixScroll">
        <short>Ensures that scrollbars are updated to reflect the cached visible area in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.GetLeftCol">
        <short>Gets the value for LeftCol property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.LeftCol"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetLeftCol.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetColCount">
        <short>Gets the value for the ColCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetColCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetColWidths">
        <short>Gets the value for the indexed ColWidths property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetColWidths.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TCustomGrid.GetColWidths.ACol">
        <short>Column number to examine in the method.</short>
      </element>

      <element name="TCustomGrid.GetColumns">
        <short>Gets the value for the Columns property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetColumns.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetDefColWidth">
        <short>Gets the value for the DefaultColWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DefColWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetDefColWidth.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetDefRowHeight">
        <short>Gets the value for the DefaultRowHeight property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DefRowHeight"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetDefRowHeight.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetEditorBorderStyle">
        <short>Gets the value for the EditorBorderStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.EditorBorderStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetEditorBorderStyle.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetBorderWidth">
        <short>Gets the number of pixels needed for the grid border (when used).</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DrawBorder"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetBorderWidth.Result">
        <short>Number of pixels needed for the grid border.</short>
      </element>

      <element name="TCustomGrid.GetTitleImageInfo">
        <short>Gets position and layout information for an image used in a column header.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetTitleImageInfo.aColumnIndex">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetTitleImageInfo.ImgIndex">
        <short>Position of the image used for the column.</short>
      </element>
      <element name="TCustomGrid.GetTitleImageInfo.ImgLayout">
        <short>Image layout used for the column.</short>
      </element>

      <element name="TCustomGrid.GetSortTitleImageInfo">
        <short>Gets image information displayed in a column header for a sortable grid column.</short>
        <descr>
          <p>
            GetSortTitleImageInfo is used in the implementation of the methods like TCustomGrid.DrawColumnTitleImage and TCustomStringGrid.AutoAdjustColumn.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.aColumnIndex">
        <short>Column index for the sort indicator.</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.ImgList">
        <short>List with images used for the indicator.</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.ImgIndex">
        <short>Image index used for the specified grid column.</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.ImgListWidth">
        <short>Image width used for the indicator.</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.NativeSortGlyphs">
        <short>Indicates if native sort indicators are defined in the grid column.</short>
      </element>

      <element name="TCustomGrid.GetRowCount">
        <short>Gets the value for the RowCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetRowCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetRowHeights">
        <short>Gets the value for the indexed RowHeights property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.RowHeights"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetRowHeights.Result">
        <short>Height for the row in pixels.</short>
      </element>
      <element name="TCustomGrid.GetRowHeights.ARow">
        <short>Row number for the property value.</short>
      </element>

      <element name="TCustomGrid.GetSelectedRange">
        <short>Gets the value for the indexed SelectedRange property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SelectedRange"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelectedRange.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TCustomGrid.GetSelectedRange.AIndex">
        <short>Ordinal position for the grid selection rectangle.</short>
      </element>

      <element name="TCustomGrid.GetSelectedRangeCount">
        <short>Gets the value for the SelectedRangeCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SelectedRangeCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelectedRangeCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetSelection">
        <short>Gets the value for the Selection property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Selection"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelection.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetSpecialCursor">
        <short>Gets a cursor for the specified grid cursor state.</short>
        <descr>
          <p>
            <var>GetSpecialCursor</var> is used as the read access specifier for the <var>ColRowDraggingCursor</var>, <var>ColRowSizingCursor</var>, and <var>RowSizingCursor</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColRowDraggingCursor"/>
          <link id="TCustomGrid.ColRowSizingCursor"/>
          <link id="TCustomGrid.RowSizingCursor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSpecialCursor.Result">
        <short>TCursor representing the specified cursor state.</short>
      </element>
      <element name="TCustomGrid.GetSpecialCursor.ACursorState">
        <short>Grid cursor state retrieved in the method.</short>
      </element>

      <element name="TCustomGrid.GetTopRow">
        <short>Gets the value for the TopRow property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.TopRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetTopRow.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetVisibleColCount">
        <short>Gets the value for the VisibleRowCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.VisibleColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetVisibleColCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetVisibleGrid">
        <short>Gets a rectangle with the cell coordinates for the visible area in the grid.</short>
        <descr>
          <p>
            Gets a TRect instance with the cell coordinates for the visible area in the grid control.
          </p>
          <p>
            The visible grid area depends on the values in TopLeft, ClientWidth, ClientHeight, ColCount and RowCount.  The method is called immediately after changing values in any of these properties. It provides the current values needed when the grid cache is updated in the CacheVisibleGrid method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetVisibleGrid.Result">
        <short>TRect with the cell coordinates for the visible area in the control.</short>
      </element>

      <element name="TCustomGrid.GetVisibleRowCount">
        <short>Gets the value for the VisibleRowCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.VisibleRowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetVisibleRowCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.InternalAutoFillColumns">
        <short>Performs actions needed to resize columns to fill the client area for the grid control.</short>
        <descr>
          <p>
            <var>InternalAutoFillColumns</var> is a procedure used to resize one or more columns to fill the client area for the grid control. No actions are performed in the method if <var>AutoFillColumns</var> contains <b>False</b>, or when the method has already been called but has not yet completed.
          </p>
          <p>
            InternalAutoFillColumns calls <var>GetAutoFillColumnInfo</var> to accumulate the fixed cell width,  data width, and sizing priority for each of the <var>Columns</var> defined in the grid. At least one of the cells in the grid must have sizing priority; the last non-fixed column is expanded to fill the client area in the grid when no other column has sizing priority.
          </p>
          <p>
            InternalAutoFillColumns is called from the UpdateCachedSizes method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.AutoFillColumns"/>
          <link id="TCustomGrid.GetAutoFillColumnInfo"/>
          <link id="TCustomGrid.UpdateCachedSizes"/>
        </seealso>
      </element>

      <element name="TCustomGrid.InternalNeedBorder">
        <short>Indicates if borders are needed to render the grid control.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DrawBorder"/>
          <link id="TCustomGrid.GetBorderWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.InternalNeedBorder.Result">
        <short>True when a border is drawn around the grid control.</short>
      </element>

      <element name="TCustomGrid.InternalSetColWidths">
        <short>Performs internal actions needed to set a column width to the specified value.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SetColWidths"/>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <element name="TCustomGrid.InternalSetColWidths.aCol">
        <short>Column number affected in the method.</short>
      </element>
      <element name="TCustomGrid.InternalSetColWidths.aValue">
        <short>Width applied to the column.</short>
      </element>

      <element name="TCustomGrid.InternalUpdateColumnWidths">
        <short>Performs internal actions needed to update columns widths from the grid Columns.</short>
        <descr>
          Not used in the current implementation.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.InvalidateMovement">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.InvalidateMovement.DCol">
        <short/>
      </element>
      <element name="TCustomGrid.InvalidateMovement.DRow">
        <short/>
      </element>
      <element name="TCustomGrid.InvalidateMovement.OldRange">
        <short/>
      </element>

      <element name="TCustomGrid.IsAltColorStored">
        <short> Indicates if AlternateColor has a value different than the Color for the grid control.</short>
        <descr>
          Used as the storage specifier for the AlternateColor property.
        </descr>
        <seealso>
          <link id="TCustomGrid.AlternateColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsAltColorStored.Result">
        <short>True when AlternateColor is different than Color.</short>
      </element>

      <element name="TCustomGrid.IsColumnsStored">
        <short>Indicates if Columns has been enabled for the grid control.</short>
        <descr>
          Used as the storage specifier for the Columns property.
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsColumnsStored.Result">
        <short>True when the Enabled in Columns is True.</short>
      </element>

      <element name="TCustomGrid.IsPushCellActive">
        <short>Indicates if the pushed cell for the grid is visible.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.MouseUp"/>
          <link id="TCustomGrid.HeadersMouseMove"/>
          <link id="TCustomGrid.GetGridDrawState"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsPushCellActive.Result">
        <short/>
      </element>

      <element name="TCustomGrid.LoadColumns">
        <short>Loads column settings from the specified XML configuration file.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.LoadContent"/>
        </seealso>
      </element>
      <element name="TCustomGrid.LoadColumns.cfg">
        <short>XML configuration file with values loaded in the method.</short>
      </element>
      <element name="TCustomGrid.LoadColumns.Version">
        <short>Version number requested from the XML configuration.</short>
      </element>

      <element name="TCustomGrid.LoadResBitmapImage">
        <short> Loads a bitmap with the specified name from the resource file for the control.</short>
        <descr>
          Assumes the resource in ResName can be loaded using TPortableNetworkGraphic, and assigned to the TBitmap return value.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.LoadResBitmapImage.Result">
        <short>TBitmap with the image loaded in the method.</short>
      </element>
      <element name="TCustomGrid.LoadResBitmapImage.ResName">
        <short>Resource name loaded in the method.</short>
      </element>

      <element name="TCustomGrid.LoadSub">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.LoadSub.ACfg">
        <short>XML configuration file with values loaded in the method.</short>
      </element>

      <element name="TCustomGrid.OnTitleFontChanged">
        <short>Event handler signalled when the font used for fixed title cells has been changed.</short>
        <descr>
          <p>
            <var>OnTitleFontChanged</var> is a procedure which implements the event handler signalled when the <var>TitleFont</var> for fixed cells has been changed. OnTitleFontChanged is assigned to the <var>OnChange</var> event handler in TitleFont in the constructor for the class instance.
          </p>
          <p>
            OnTitleFontChanged sets the value in <var>TitleFontIsDefault</var> to <b>False</b> to reflect the change in the font setting. When <var>Columns</var> have been enabled (<var>VisibleCount</var> contains a non-zero value), the <var>TitleFontChanged</var> method in Columns is called. The <var>ColumnsChanged</var> method is called to force the grid to be updated. If Columns have not been enabled, the <var>VisualChange</var> method is called to update the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.VisibleCount"/>
          <link id="TCustomGrid.ColumnsChanged"/>
          <link id="TCustomGrid.VisualChange"/>
          <link id="TGridColumns.Enabled"/>
          <link id="TGridColumns.TitleFontChanged"/>
        </seealso>
      </element>
      <element name="TCustomGrid.OnTitleFontChanged.Sender">
        <short>Object generating the event notification.</short>
      </element>

      <element name="TCustomGrid.ReadColumns">
        <short>Reads values for the Columns collection using the specified TReader class instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ReadColumns.Reader">
        <short>TReader used to load values during LCL component streaming.</short>
      </element>

      <element name="TCustomGrid.ReadColWidths">
        <short>Reads the list of Integers in ColWidths using the specified TReader instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ReadColWidths.Reader">
        <short>TReader used to load values during LCL component streaming.</short>
      </element>

      <element name="TCustomGrid.ReadRowHeights">
        <short>Reads the list of Integers in RowHeights using the specified TReader instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ReadRowHeights.Reader">
        <short>TReader used to load values during LCL component streaming.</short>
      </element>

      <element name="TCustomGrid.ResetPushedCell">
        <short>Resets cached grid information for the "pushed" cell.</short>
        <descr>
          <p>
            <var>ResetPushedCell</var> refreshes cached information for the grid related to the current <var>PushedCell</var>. It invalidates the cell at the position in PushedCell when the cached values indicate it is "pushed". Resets coordinates in PushedCell when <var>ResetColRow</var> is set to <b>True</b>. Sets the ClickCellPushed member in the cached data to <b>False</b> prior to exit.
          </p>
          <p>
            ResetPushedCell is called from methods like <var>HeadersMouseMove</var> and <var>MouseUp</var>. It is also called from the constructor for the <var>TCustomGrid</var> instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.HeadersMouseMove"/>
          <link id="TCustomGrid.MouseUp"/>
          <link id="TGridDataCache.PushedCell"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ResetPushedCell.ResetColRow">
        <short/>
      </element>

      <element name="TCustomGrid.RestoreCursor">
        <short>
          Restores the internal saved cursor for the grid, and resets CursorState to its default value.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.SaveColumns">
        <short>Saves column configuration, layout, and appearance values to an XML configuration file.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.SaveColumns.cfg">
        <short>XML configuration file where the values are written.</short>
      </element>
      <element name="TCustomGrid.SaveColumns.Version">
        <short/>
      </element>

      <element name="TCustomGrid.ScrollToCell">
        <short>Scrolls the grid until the cell at the specified location is visible.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ScrollToCell.Result">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollToCell.aCol">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollToCell.aRow">
        <short/>
      </element>

      <element name="TCustomGrid.ScrollGrid">
        <short>Scrolls the grid until the cell at the specified location is the new origin.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ScrollGrid.Result">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollGrid.Relative">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollGrid.DCol">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollGrid.DRow">
        <short/>
      </element>

      <element name="TCustomGrid.SetCol">
        <short>Sets the value in the Col property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Col"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetCol.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetColWidths">
        <short>Sets the value in the indexed ColWidths property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColWidths.ACol">
        <short>Column number for the update width value.</short>
      </element>
      <element name="TCustomGrid.SetColWidths.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetColRowDragIndicatorColor">
        <short>Sets the value for the ColRowDragIndicatorColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColRowDragIndicatorColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColRowDragIndicatorColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetDefColWidth">
        <short>Sets the value for the DefColWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DefColWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetDefColWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetDefRowHeight">
        <short>Sets the value for the DefRowHeight property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DefRowHeight"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetDefRowHeight.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetDefaultDrawing">
        <short>Sets the value for the DefaultDrawing property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DefaultDrawing"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetDefaultDrawing.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetEditor">
        <short>Sets the value for the Editor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Editor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetEditor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetFocusColor">
        <short>Sets the value for the FocusColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.FocusColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFocusColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetGridLineColor">
        <short>Sets the value for the GridLineColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.GridLineColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetGridLineColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetFixedGridLineColor">
        <short>Sets the value for the FixedGridLineColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.FixedGridLineColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFixedGridLineColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetGridLineStyle">
        <short>Sets the value for the GridLineStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.GridLineStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetGridLineStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetGridLineWidth">
        <short>Sets the value for the GridLineWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.GridLineWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetGridLineWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetLeftCol">
        <short>Sets the value for the LeftCol property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.LeftCol"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetLeftCol.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetOptions">
        <short>Sets the value for the Options property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetOptions.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetOptions2">
        <short>Sets the value for the Options2 property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetOptions2.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetRangeSelectMode">
        <short>Sets the value for the RangeSelectMode property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.RangeSelectMode"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRangeSelectMode.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetRow">
        <short>Sets the value for the Row property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Row"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRow.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetRowCount">
        <short>Sets the value for the RowCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRowCount.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetRowHeights">
        <short>Sets the value in the indexed RowHeights property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.RowHeights"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRowHeights.ARow">
        <short>Row number affected in the method.</short>
      </element>
      <element name="TCustomGrid.SetRowHeights.AValue">
        <short>New value for the specified row number.</short>
      </element>

      <element name="TCustomGrid.SetScrollBars">
        <short>Sets the value for the ScrollBars property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ScrollBars"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetScrollBars.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetSelectActive">
        <short>Sets the value for the SelectActive property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SelectActive"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetSelectActive.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetSelection">
        <short>Sets the value for the Selection property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Selection"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetSelection.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetSpecialCursor">
        <short>Sets the value for the indexed cursor states in the grid control.</short>
        <descr>
          <p>
            <var>SetSpecialCursor</var> is used as the write access specifier for the <var>ColRowDraggingCursor</var>, <var>ColRowSizingCursor</var>, and <var>RowSizingCursor</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColRowDraggingCursor"/>
          <link id="TCustomGrid.ColRowSizingCursor"/>
          <link id="TCustomGrid.RowSizingCursor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetSpecialCursor.ACursorState">
        <short>Cursor state located in the method.</short>
      </element>
      <element name="TCustomGrid.SetSpecialCursor.AValue">
        <short>New value for the cursor state.</short>
      </element>

      <element name="TCustomGrid.SetTopRow">
        <short>Sets the value for the TopRow property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.TopRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTopRow.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.StartColSizing">
        <short> Updates the grid to begin a column sizing operation for the specified cell.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.StartColSizing.Result">
        <short/>
      </element>
      <element name="TCustomGrid.StartColSizing.X">
        <short/>
      </element>
      <element name="TCustomGrid.StartColSizing.Y">
        <short/>
      </element>

      <element name="TCustomGrid.ChangeCursor">
        <short>Changes the cursor shape to the specified value.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SetCursor"/>
          <link id="TCustomGrid.CursorState"/>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TCustomGrid.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ChangeCursor.ACursor">
        <short>Cursor shape applied in the method.</short>
      </element>
      <element name="TCustomGrid.ChangeCursor.ASaveCurrentCursor">
        <short>Indicates if the existing cursor shape is stored for later reuse.</short>
      </element>

      <element name="TCustomGrid.TrySmoothScrollBy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.TrySmoothScrollBy.Result">
        <short/>
      </element>
      <element name="TCustomGrid.TrySmoothScrollBy.aColDelta">
        <short/>
      </element>
      <element name="TCustomGrid.TrySmoothScrollBy.aRowDelta">
        <short/>
      </element>

      <element name="TCustomGrid.TryScrollTo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.TryScrollTo.aCol">
        <short/>
      </element>
      <element name="TCustomGrid.TryScrollTo.aRow">
        <short/>
      </element>

      <element name="TCustomGrid.UpdateCachedSizes">
        <short>Performs actions needed when the size for columns or rows are changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.UpdateSBVisibility">
        <short>Updates the visibility for horizontal and/or vertical scrollbars.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.UpdateSizes">
        <short>Updates cached information when visual aspects for columns or rows are changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.WriteColumns">
        <short>Writes the Columns collection using the specified TWriter instance.</short>
        <descr>
          <p>
            A Nil collection is written using Writer when Column contains the default column definitions (has not been modified at design-time or run-time).
          </p>
          <remark>
            Not used in the current implementation of TCustomGrid.DefineProperties.
          </remark>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefineProperties"/>
        </seealso>
      </element>
      <element name="TCustomGrid.WriteColumns.Writer">
        <short>TWriter instance used for the class.</short>
      </element>

      <element name="TCustomGrid.WriteColWidths">
        <short>Writes the list of Integers in ColWidths using the specified TWriter instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.WriteColWidths.Writer">
        <short>TWriter instance used to write the values.</short>
      </element>

      <element name="TCustomGrid.WriteRowHeights">
        <short>Writes the list of Integers in RowHeights using the specified TWriter instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.WriteRowHeights.Writer">
        <short>TWriter instance used to write the values.</short>
      </element>

      <element name="TCustomGrid.WMEraseBkgnd">
        <short>Handles the Window Message used to erase the background for the control.</short>
        <descr>
          <notes>
            <note>Always returns 1 as the Message result.</note>
          </notes>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.WMEraseBkgnd.message">
        <short>Lazarus message applied in the method.</short>
      </element>

      <element name="TCustomGrid.WMGetDlgCode">
        <short>Handles the Window Message for Tab and Arrow keys in dialogs and custom controls.</short>
        <descr>
          Examines the Options property for the presence of the goTabs enumeration value. When present, the DLGC_WANTTAB value is OR'd to the result value in Msg.
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TGridOption"/>
        </seealso>
      </element>
      <element name="TCustomGrid.WMGetDlgCode.Msg">
        <short>Lazarus message processed in the method.</short>
      </element>

      <element name="TCustomGrid.fGridState">
        <short>Member with the current state for the grid (edited, updated, etc.).</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.RTLSign">
        <short>Gets the positive or negative multiplier used to adjust scroll values for BiDi mode.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.RTLSign.Result">
        <short/>
      </element>

      <element name="TCustomGrid.WSRegisterClass"
         link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomGrid.AddSelectedRange">
        <short>Adds the current selection range to the array of rectangles in Selections.</short>
        <descr>
          <p>
            Called from the MouseDown method when Options includes the value which enables multi-select.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.MouseDown"/>
          <link id="TCustomGrid.HasMultiSelection"/>
        </seealso>
      </element>

      <element name="TCustomGrid.AdjustClientRect">
        <short>Adjusts the client rectangle and sets the grid flag to reflect the change.</short>
        <descr>
          <p>
            <var>AdjustClientRect</var> is an overridden method used to adjust the client rectangle for the control, and set the grid flag to reflect the change. Calls the inherited method on entry. Updates the <var>GridFlags</var> property to included the value <var>gfClientRectChange</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridFlags"/>
          <link id="TGridFlagsOption"/>
          <link id="#lcl.controls.TWinControl.AdjustClientRect">TWinControl.AdjustClientRect</link>
        </seealso>
      </element>
      <element name="TCustomGrid.AdjustClientRect.ARect">
        <short>Client rectangle adjusted in the method.</short>
      </element>

      <element name="TCustomGrid.AdjustEditorBounds">
        <short>Updates the selected cell and sets the bounds for the optional cell Editor.</short>
        <descr>
          <p>
            Calls <var>SetColRow</var> to update the values in the <var>Col</var> and <var>Row</var> properties. Values in <var>NewCol</var> and <var>NewRow</var> are stored in the corresponding property.
          </p>
          <p>
            When <var>EditorMode</var> is set to <b>True</b>, the private <var>EditorPos</var> method is called to position the <var>Editor</var> to the new cell selection.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.EditorMode"/>
          <link id="TCustomGrid.SetColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AdjustEditorBounds.NewCol">
        <short>Column number for the current cell selection in the grid.</short>
      </element>
      <element name="TCustomGrid.AdjustEditorBounds.NewRow">
        <short>Row number for the current cell selection in the grid.</short>
      </element>

      <element name="TCustomGrid.AfterMoveSelection">
        <short>Signals the OnAfterSelection event handler.</short>
        <descr>
          <p>
            <var>AfterMoveSelection</var> is a procedure used to signal the <var>OnAfterSelection</var> event handler when it has been assigned (does not contain <b>Nil</b>). Values in <var>prevCol</var> and <var>prevRow</var> are passed as arguments to the OnAfterSelection event handler.
          </p>
          <p>
            AfterMoveSelection is called from the <var>MoveExtend</var> method when the move operation has been completed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnAfterSelection"/>
          <link id="TCustomGrid.MoveExtend"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AfterMoveSelection.prevCol">
        <short>Column number for the selection before it was moved.</short>
      </element>
      <element name="TCustomGrid.AfterMoveSelection.prevRow">
        <short>Row number for the selection before it was moved.</short>
      </element>

      <element name="TCustomGrid.AssignTo">
        <short>Stores properties from the current grid class instance to the specified target.</short>
        <descr>
          <p>
            AssignTo is an overridden method used to store values from the current class instance to the persistent object specified in Dest. AssignTo is overridden to provide support for TCustomGrid properties in the object persistence mechanism.
          </p>
          <p>
            When Dest is a TCustomGrid descendant, the following properties are copied from the current class instance to the target:
          </p>
          <p>
            <b>Structure</b>
          </p>
          <ul>
            <li>Columns (When Columns has been Enabled)</li>
            <li>ColCount (When Columns has not been Enabled)</li>
            <li>RowCount</li>
            <li>FixedCols</li>
            <li>FixedRows</li>
            <li>DefaultRowHeight (when it contains a value other than the default)</li>
            <li>DefaultColWidth (when it contains a value other than the default)</li>
            <li>The internal Rows list</li>
            <li>The internal Cols list (when Columns has not been enabled)</li>
          </ul>
          <p>
            <b>Display Settings</b>
          </p>
          <ul>
            <li>Options</li>
            <li>Color</li>
            <li>FixedColor</li>
            <li>AlternateColor</li>
            <li>Font</li>
            <li>TitleFont</li>
          </ul>
          <p>
            <b>Position and Selection</b>
          </p>
          <ul>
            <li>TopRow</li>
            <li>LeftCol</li>
            <li>Col</li>
            <li>Row</li>
            <li>Current selection range for the grid</li>
          </ul>
          <p>
            When Dest is not a TCustomGrid descendant, the inherited AssignTo method is called using Dest as an argument.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.AssignTo">TControl.AssignTo</link>
        </seealso>
      </element>
      <element name="TCustomGrid.AssignTo.Dest">
        <short>Grid instance where value are stored.</short>
      </element>

      <element name="TCustomGrid.AutoAdjustColumn">
        <short>Adjusts column properties to accommodate the largest value in the specified column.</short>
        <descr>
          <p>
            <var>AutoAdjustColumn</var> is called from the <var>DblClick</var> method when the values <var>goColSizing</var> and <var>goDblClickAutoSize</var> have been included in the <var>Options</var> property.
          </p>
          <p>
            <var>AutoAdjustColumn</var> has an empty implementation in <var>TCustomGrid</var>, and must be overridden in a descendent class.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.DblClick"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AutoAdjustColumn.aCol">
        <short>Column number adjusted in the method.</short>
      </element>

      <element name="TCustomGrid.BeforeMoveSelection">
        <short>Performs actions needed before a selection is moved.</short>
        <descr>
          <p>
            <var>BeforeMoveSelection</var> is called from the <var>MoveExtend</var> method whenever the current grid cursor location is about to change. The destination column and row are specified in the <var>DCol</var> and <var>DRow</var> parameters respectively.
          </p>
          <p>
            The new location is known to be a valid selectable cell (see <link id="TCustomGrid.SelectCell"/>), and is given in absolute cell coordinates. At this point the current grid location has not changed and can be retrieved with Col and Row properties.
          </p>
          <p>
            The purpose of this method is to call the <var>OnBeforeSelection</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.MoveExtend"/>
          <link id="TCustomGrid.SelectCell"/>
          <link id="TCustomDrawGrid.OnBeforeSelection"/>
        </seealso>
      </element>
      <element name="TCustomGrid.BeforeMoveSelection.DCol">
        <short/>
      </element>
      <element name="TCustomGrid.BeforeMoveSelection.DRow">
        <short/>
      </element>

      <element name="TCustomGrid.BeginAutoDrag">
        <short>Starts an auto-drag operation in the grid control.</short>
        <descr>
          <p>
            <var>BeginAutoDrag</var> is an overridden procedure used to start an auto-dragging operation. Auto-dragging is in effect when <var>DragMode</var> contains the value <var>dmAutomatic</var>.
          </p>
          <p>
            BeginAutoDrag examines the <var>Options</var> property to determine if column sizing (<var>goColSizing</var>) or row sizing (<var>goRowSizing</var>) have been enabled for the grid control. In addition, the <var>CursorState</var> property must contain a value that represents the action (<var>gcsColWidthChanging</var> or <var>gcsRowHeightChanging</var>). If either condition is not met, <var>BeginDrag</var> is called using <b>False</b> as an argument.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.CursorState"/>
          <link id="TGridOption"/>
          <link id="TGridCursorState"/>
        </seealso>
      </element>

      <element name="TCustomGrid.BoxRect">
        <short>Gets the rectangle for the box around the cell at the given coordinates.</short>
        <descr>
          <p>
            Not used in the current implementation.
          </p>
        </descr>
        <seealso/>
        <notes>
          <note>Not currently used in the grid implementation.</note>
        </notes>
      </element>
      <element name="TCustomGrid.BoxRect.Result">
        <short/>
      </element>
      <element name="TCustomGrid.BoxRect.ALeft">
        <short/>
      </element>
      <element name="TCustomGrid.BoxRect.ATop">
        <short/>
      </element>
      <element name="TCustomGrid.BoxRect.ARight">
        <short/>
      </element>
      <element name="TCustomGrid.BoxRect.ABottom">
        <short/>
      </element>

      <element name="TCustomGrid.CacheMouseDown">
        <short>Updates cached grid information when a mouse click occurs in the grid control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.CacheMouseDown.X">
        <short>Horizontal screen coordinate for the mouse click.</short>
      </element>
      <element name="TCustomGrid.CacheMouseDown.Y">
        <short>Vertical screen coordinate for the mouse click.</short>
      </element>

      <element name="TCustomGrid.CalcAutoSizeColumn">
        <short>Automatically calculates the size for the column at the specified position.</short>
        <descr>
          <p>
            Sets the value for aPriority to 0 (zero).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.Index">
        <short/>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.AMin">
        <short/>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.AMax">
        <short/>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.APriority">
        <short/>
      </element>

      <element name="TCustomGrid.CalcCellExtent">
        <short>Deprecated.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.CalcCellExtent.aCol">
        <short/>
      </element>
      <element name="TCustomGrid.CalcCellExtent.aRow">
        <short/>
      </element>
      <element name="TCustomGrid.CalcCellExtent.aRect">
        <short/>
      </element>

      <element name="TCustomGrid.CalcFocusRect">
        <short>Calculates the bounds for a focus rectangle in the grid control.</short>
        <descr>
          <p>
            When row selection is enabled in the grid <var>Options</var>, the <var>Left</var> and <var>Right</var> values in <var>ARect</var> are updated to use cached grid information in <var>GCache</var>. Calls <var>FlipRect</var> to account for Right-to-Left alignment when needed.
          </p>
          <p>
            <var>Adjust</var> indicates whether values in ARect are adjusted for horizontal or vertical grid lines drawn in the control. No additional actions are performed when Adjust is set to <b>False</b>. The default value for the parameter is <b>True</b>.
          </p>
          <p>
            When <var>goHorzLine</var> is included in Options, the Bottom value in ARect is decremented to accommodate the horizontal grid line.
          </p>
          <p>
            When <var>goVertLine</var> is included in Options, the Left or Right value in ARect is adjusted to accommodate the vertical grid line. Left is incremented when <var>UseRightToLeftAlignment</var> is set to <b>True</b>. Right is decremented when UseRightToLeftAlignment is set to <b>False</b>.
          </p>
          <p>
            CalcFocusRect is called from the <var>DrawRow</var> and <var>DrawFocusRect</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.DrawFocusRect"/>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.FlipRect"/>
          <link id="TGridFlagsOption"/>
          <link id="#lcl.controls.TControl.UseRightToLeftAlignment">TControl.UseRightToLeftAlignment</link>
        </seealso>
      </element>
      <element name="TCustomGrid.CalcFocusRect.ARect">
        <short/>
      </element>

      <element name="TCustomGrid.CalcMaxTopLeft">
        <short>Updates cached grid information for the visible area and scrollbars in the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.CalcScrollbarsRange">
        <short>Updates the range,  page, and thumb position for visible scrollbars.</short>
        <descr>
          <p>
            <var>CalcScrollbarsRange</var> is a procedure used to update the range, page, and thumb position for visible scrollbars in the grid control. CalcScrollbarsRange accesses the cached grid data in <var>GCache</var> to calculate values needed in the method. The visibility for both horizontal and vertical scrollbars is determined, and the range, page and thumb position is applied in the <var>UpdateHorzScrollBar</var> and <var>UpdateVertScrollbar</var> methods.
          </p>
          <p>
            CalcScrollbarsRange is used in the implementation of the <var>ScrollBy</var> and <var>UpdateSizes</var> methods in TCustomGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.GetSBRanges"/>
          <link id="TCustomGrid.UpdateHorzScrollBar"/>
          <link id="TCustomGrid.UpdateVertScrollBar"/>
          <link id="TCustomGrid.ScrollBy"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CalculatePreferredSize">
        <short>Gets the preferred width and height for the control.</short>
        <descr>
          <p>
            Always returns 0 (zero) in the PreferredWidth and PreferredHeight variable arguments.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.CalculatePreferredSize">TWinControl.CalculatePreferredSize</link>
        </seealso>
      </element>
      <element name="TCustomGrid.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomGrid.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomGrid.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TCustomGrid.CanEditShow">
        <short>Indicates whether the cell editor can be displayed and focused in the current column.</short>
        <descr>
          <p>
            <var>CanEditShow</var> is a <var>Boolean</var> function which Indicates whether the cell <var>Editor</var> can be displayed and focused in the current grid column. The return value is <b>False</b> at design-time. The return value is <b>True</b> if <var>Options</var> includes the value <var>goEditing</var>, and the column number in <var>Col</var> is valid and not in a fixed row.
          </p>
          <p>
            When <var>Columns</var> have been Enabled in the grid control, the return value is set to <b>False</b> when the column is marked as ReadOnly in the column definition.
          </p>
          <p>
            CanEditShow is called from the <var>EditorShow</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.EditorShow"/>
          <link id="TGridColumns.Enabled"/>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CanEditShow.Result">
        <short>True at run-time when the column allows focus and editing.</short>
      </element>

      <element name="TCustomGrid.CanGridAcceptKey">
        <short>Returns True if the grid is able to accept the given key.</short>
        <descr>
          <p>
            Always returns True in TCustomGrid.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CanGridAcceptKey.Result">
        <short>True if the grid is able to accept the given key.</short>
      </element>
      <element name="TCustomGrid.CanGridAcceptKey.Key">
        <short>Not used in the current implementation.</short>
      </element>
      <element name="TCustomGrid.CanGridAcceptKey.Shift">
        <short>Not used in the current implementation.</short>
      </element>

      <element name="TCustomGrid.CellClick">
        <short>Processes a mouse click in the cell at the given coordinates.</short>
        <descr>
          <p>
            <var>CellClick</var> has an empty implementation in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CellClick.aCol">
        <short>Column number for the click event.</short>
      </element>
      <element name="TCustomGrid.CellClick.aRow">
        <short>Row number for the click event.</short>
      </element>

      <element name="TCustomGrid.CellExtent">
        <short>Gets the last column number for the cell extent at the specified column and row.</short>
        <descr>
          <p>
            <var>CellExtent</var> gets the extent rectangle for the cell at the coordinated in <var>ACol</var> and <var>ARow</var>. The rectangle bounds in <var>R</var> are updated by calling the <var>CalcCellExtent</var> method.
          </p>
          <p>
            <var>exCol</var> is updated in the method to reflect the last visible column in the cached grid information for the cell extent. The <var>ColRowToOffset</var> method is iteratively called until the extent exceeds the cached right-most column for the visible area in the grid.
          </p>
          <p>
            CellExtent is called from the <var>DrawRow</var> method when column spanning is enabled in the <var>Options</var> for the grid control.
          </p>
          <remark>
            The current implementation does not account for BIDI mode or Right-to-Left usage.
          </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CellExtent.aCol">
        <short>Column number for the cell extent.</short>
      </element>
      <element name="TCustomGrid.CellExtent.aRow">
        <short>Row number for the cell extent.</short>
      </element>
      <element name="TCustomGrid.CellExtent.R">
        <short>TRect with the bounds for the cell extent.</short>
      </element>
      <element name="TCustomGrid.CellExtent.exCol">
        <short>Last usable column number for the cell extent.</short>
      </element>

      <element name="TCustomGrid.CheckLimits">
        <short>Checks column and row limits for the specified cell.</short>
        <descr>
          <p>
            <var>CheckLimits</var> is a procedure used to constrain the specified cell coordinates to the valid values for grid control.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> contain the column and row numbers for a cell in the grid control. CheckLimits ensures that the values represent a valid, non-fixed cell in the grid control.
          </p>
          <p>
            ACol must contain a value in the range <b>0..ColCount-1</b>, and cannot be a fixed column in the grid. The value in <var>FixedCols</var> is assigned to ACol if it is less than the value in FixedCols.<b> ColCount-1</b> is assigned to ACol when it is larger than the upper limit.
          </p>
          <p>
            <var>ARow</var> must contain a value in the range <b>0..RowCount-1</b>, and cannot be a fixed row in the grid. The value in <var>FixedRows</var> is assigned to ARow if it is less than the value in FixedRows. <b>RowCount-1</b> is assigned to ARow when it is larger than the upper limit.
          </p>
          <p>
            <var>CheckLimitsWithError</var> is used when an exception is required for invalid cell coordinates.
          </p>
          <p>
            CheckLimits is used in the implementation of methods like <var>MoveNextSelectable</var> and <var>TryMoveSelection</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CheckLimits.aCol">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.CheckLimits.aRow">
        <short>Row number examined in the method.</short>
      </element>

      <element name="TCustomGrid.CheckLimitsWithError">
        <short>Checks column and row limits for the specified cell, with error trapping.</short>
        <descr>
          <p>
            <var>CheckLimitsWithError</var> is a procedure used to ensure that the specified cell coordinates are valid values for grid control.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> contain the column and row numbers for a cell in the grid control. CheckLimitsWithError ensures that the values represent a valid, non-fixed cell in the grid control. ACol must contain a value in the range <b>0..ColCount-1</b>, and cannot be a fixed column in the grid. ARow must contain a value in the range <b>0..RowCount-1</b>, and cannot be a fixed row in the grid.
          </p>
          <p>
            CheckLimitsWithError calls IsColumnIndexValid and IsRowIndexValid to determine whether the corresponding values are valid. If either method returns False, an EGridException is raised.
          </p>
          <p>
            <var>CheckLimits</var> is used when cell coordinates must be constrained to the values that are valid for the control.
          </p>
          <p>
            CheckLimitsWithError is used in the implementation of methods like SetCol, SetRow, and SetQuickColRow when AllowOutboundEvents is not enabled.
          </p>
        </descr>
        <errors>
          Raises an EGridException exception with the message in rsGridIndexOutOfRange when a column or row number is out of range for the control.
        </errors>
        <seealso/>
      </element>
      <element name="TCustomGrid.CheckLimitsWithError.aCol">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.CheckLimitsWithError.aRow">
        <short>Row number examined in the method.</short>
      </element>

      <element name="TCustomGrid.CMBiDiModeChanged">
        <short>Handles the CM_BIDIMODECHANGED control message for the grid control.</short>
        <descr>
          <p>
            Calls <var>VisualChange</var> to update column sizes and redraw the control, and calls the inherited method to notify child controls of the new BidiMode value.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.CMMouseEnter">
        <short>Handles the control message posted when the mouse enters a cell in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.CMMouseEnter.Message">
        <short>Message handled in the method.</short>
      </element>

      <element name="TCustomGrid.CMMouseLeave">
        <short>Handles the control message posted when a mouse leaves a cell.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.CMMouseLeave.Message">
        <short>Message handled in the method.</short>
      </element>

      <element name="TCustomGrid.ColRowDeleted">
        <short>Performs actions when a column or a row is deleted from the control.</short>
        <descr>
          <p>
            <var>ColRowDeleted</var> has an empty implementation in <var>TCustomGrid</var>. It is overridden in descendent classes to remove the affected cells and perform notifications.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.ColRowDeleted"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ColRowDeleted.IsColumn">
        <short>True to remove a column, False to remove a Row.</short>
      </element>
      <element name="TCustomGrid.ColRowDeleted.Index">
        <short>Ordinal position for the column or row removed in the method.</short>
      </element>

      <element name="TCustomGrid.ColRowExchanged">
        <short>Performs a notification when column or row data is exchanged in the grid.</short>
        <descr>
          <p>
            <var>ColRowExchanged</var> has an empty implementation in <var>TCustomGrid</var>. It is implemented in descendent classes like <var>TCustomDrawGrid</var> to update the content in the grid and signal the <var>OnColRowExchanged</var> event handler (when assigned).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.ColRowExchanged.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.ColRowExchanged.Index">
        <short/>
      </element>
      <element name="TCustomGrid.ColRowExchanged.WithIndex">
        <short/>
      </element>

      <element name="TCustomGrid.ColRowInserted">
        <short>Performs a notification when column or row data is inserted in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ColRowInserted.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.ColRowInserted.Index">
        <short/>
      </element>

      <element name="TCustomGrid.ColRowMoved">
        <short>Performs a notification when column or row data is moved in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ColRowMoved.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.ColRowMoved.FromIndex">
        <short/>
      </element>
      <element name="TCustomGrid.ColRowMoved.ToIndex">
        <short/>
      </element>

      <element name="TCustomGrid.ColRowToOffset">
        <short>Converts a column or row index to starting and ending pixels coordinates.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ColRowToOffset.Result">
        <short>True if a column or row exists for the specified index.</short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.IsCol">
        <short>True when the index is for a column in the grid, False for a row.</short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.Index">
        <short>Ordinal position for the column or row.</short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.StartPos">
        <short>Position where the column or row starts (pixel).</short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.EndPos">
        <short>Position where the column or row ends (pixel).</short>
      </element>

      <element name="TCustomGrid.ColumnIndexFromGridColumn">
        <short>Gets the position of the specified column relative to the first column in the grid.</short>
        <descr>
          <p>
            <var>ColumnIndexFromGridColumn</var> is an Integer function used to get the position of the specified column relative to the first column in the grid. The return value contains the difference between <var>Column</var> and <var>FirstGridColumn</var> when <var>Columns</var> have been enabled in the grid control. <var>RealIndex</var> is called to translate the position used in the return value. If <var>Columns</var> have not been enabled, the return value is <b>-1</b>.
          </p>
          <p>
            ColumnIndexFromGridColumn is used in the implementation of TCustomGrid methods like:
          </p>
          <ul>
            <li>ColumnFromGridColumn</li>
            <li>DoOPExchangeColRow</li>
            <li>DoOPInsertColRow</li>
            <li>DoOPMoveColRow</li>
            <li>DoOPDeleteColRow</li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColumnFromGridColumn"/>
          <link id="TCustomGrid.DoOPExchangeColRow"/>
          <link id="TCustomGrid.DoOPInsertColRow"/>
          <link id="TCustomGrid.DoOPMoveColRow"/>
          <link id="TCustomGrid.DoOPDeleteColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ColumnIndexFromGridColumn.Result">
        <short>Relative position for the specified column.</short>
      </element>
      <element name="TCustomGrid.ColumnIndexFromGridColumn.Column">
        <short>Column number to locate in the grid.</short>
      </element>

      <element name="TCustomGrid.ColumnFromGridColumn">
        <short>Returns the actual grid column given its index.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ColumnFromGridColumn.Result">
        <short/>
      </element>
      <element name="TCustomGrid.ColumnFromGridColumn.Column">
        <short/>
      </element>

      <element name="TCustomGrid.ColumnsChanged">
        <short>Performs actions needed when one or more columns in the grid are changed.</short>
        <descr>
          <p>
            <var>ColumnsChanged</var> is procedure used to perform actions needed when one or more <var>Columns</var> in the grid are changed. <var>AColumn</var> contains the column affected by the change, or signals a change to multiple columns when its value is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            When AColumn is Nil, the row or column count and/or fixed row or fixed column count has been changed. When AColumn contains a valid <var>TGridColumn</var> instance, the modified column is located in the Columns collection and the <var>VisualChange</var> method is called.
          </p>
          <p>
            ColumnsChanged is called from methods like: <var>SetFixedCols</var>, <var>SetRowCount</var>, and <var>OnTitleFontChanged</var>. It is also called when the <var>Update</var> method in Columns is called for the <var>TGridColumns</var> collection.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ColumnsChanged.aColumn">
        <short>Grid column instance for the notification, or Nil.</short>
      </element>

      <element name="TCustomGrid.ColWidthsChanged">
        <short>Performs actions needed when the widths for grid columns have been changed.</short>
        <descr>
          <p>
            ColWidthsChanged has an empty implementation in TCustomGrid.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.CreateColumns">
        <short>Allocates and configures resources for the Columns collection.</short>
        <descr>
          <p>
            <var>CreateColumns</var> is a <var>TGridColumns</var> function used create a new <var>TGridColumns</var> instance for the grid control. <var>TGridColumn</var> is the class type used for items stored in the collection.
          </p>
          <p>
            CreateColumns is called from the <var>Create</var> constructor, and the return value is assigned to the member used for the <var>Columns</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CreateColumns.Result">
        <short>TGridColumns instance created in the method.</short>
      </element>

      <element name="TCustomGrid.CheckNewCachedSizes">
        <short>Checks the values for cached column sizes when have been reset in the grid.</short>
        <descr>
          <p>
            <var>CheckNewCachedSizes</var> has an empty implementation in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CheckNewCachedSizes.AGCache">
        <short/>
      </element>

      <element name="TCustomGrid.CreateWnd">
        <short>Creates and configures the widgetset handle for the grid control.</short>
        <descr>
          <p>
            <var>CreateWnd</var> is an overridden method in <var>TCustomGrid</var>. It calls the inherited method to allocate the <var>Handle</var> for the widgetset class.
          </p>
          <p>
            CreateWnd ensures that internal flags used for horizontal and vertical scrollbar visibility are updated to reflect the states for the control Handle. The <var>CheckPosition</var> method is called to determine the cell selection in the grid. <var>VisualChange</var> is called to refresh the visible area and scrollbars in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CheckPosition"/>
          <link id="TCustomGrid.VisualChange"/>
          <link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
          <link id="#lcl.controls.TWinControl.Handle">TWinControl.Handle</link>
        </seealso>
      </element>

      <element name="TCustomGrid.CreateParams" link="#lcl.controls.TWinControl.CreateParams"/>
      <element name="TCustomGrid.CreateParams.Params">
        <short>Creation parameters updated in the method.</short>
      </element>

      <element name="TCustomGrid.Click">
        <short>Performs actions when a mouse click occurs in the grid control.</short>
        <descr>
          <p>
            <var>Click</var> is an overridden method used to perform action needed when a mouse click occurs in the control. The grid control provides an internal flag to suppress mouse click handling when the event occurs in a "hot zone" (fixed header cells for columns or rows). Click checks the value in the internal flag, and calls the inherited method when the click occurs in the "normal" data cells for the grid.
          </p>
          <p>
            Click is called from methods like <var>SetCol</var>, <var>SetRow</var>, and <var>SetColRow</var> to emulate a mouse click when values are assigned to the <var>Col</var> and/or <var>Row</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.ColRow"/>
          <link id="#lcl.controls.TControl.Click">TControl.Click</link>
        </seealso>
      </element>

      <element name="TCustomGrid.DblClick">
        <short>Performs actions needed to handle mouse double click events in the control.</short>
        <descr>
          <p>
            <var>DblClick</var> is an overridden method used to perform actions needed when a mouse Double Click event occurs in the grid control.
          </p>
          <p>
            <var>SelectActive</var> is set to False to ignore an active cell or range selection in the control. The internal <var>TGridState</var> member for the control is set to <var>gsNormal</var> to reflect the new state for the control.
          </p>
          <p>
            DblClick uses values in the <var>Options</var> property to determine whether double click is enabled for column or row sizing operations in the control. Some of the Options values relevant to DblClick include:
          </p>
          <dl>
            <dt>goColSizing</dt>
            <dd>Column sizing in enabled for the control.</dd>
            <dt>goRowSizing</dt>
            <dd>Row sizing is enabled for the control.</dd>
            <dt>goDblClickAutoSize</dt>
            <dd>A mouse double click resizes the column automatically.</dd>
          </dl>
          <p>
            When the needed Options values are present, and match the current <var>CursorState</var> for the control, the corresponding action is performed. <var>AutoAdjustColumn</var> is called for a column resize action. <var>RestoreCursor</var> is called, and <var>HeaderSized</var> is called to signal completion of the column resize operation. Row resize actions for double click mouse events are not currently implemented.
          </p>
          <p>
            If the values in Options or CursorState do not meet the required conditions, the inherited method is called.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DblClick">TControl.DblClick</link>
        </seealso>
      </element>

      <element name="TCustomGrid.DefaultColWidthIsStored">
        <short>Indicates if the DefaultColWidth property is available in component streaming.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DefaultColWidthIsStored.Result">
        <short/>
      </element>

      <element name="TCustomGrid.DefaultRowHeightIsStored">
        <short>Indicates if the DefaultRowHeight property is available in component streaming.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DefaultRowHeightIsStored.Result">
        <short/>
      </element>

      <element name="TCustomGrid.DefineProperties">
        <short>Defines non-published properties included during LCL component streaming.</short>
        <descr>
          <p>
            <var>DefineProperties</var> is an overridden method used to define non-published properties which are included during LCL component streaming. It sets the read and write routines in <var>Filer</var> used for the following grid properties:
          </p>
          <ul>
            <li>ColWidths </li>
            <li>RowHeights</li>
          </ul>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DefineProperties">TControl.DefineProperties</link>
        </seealso>
      </element>
      <element name="TCustomGrid.DefineProperties.Filer">
        <short>TFiler instance used to read and write the defined properties.</short>
      </element>

      <element name="TCustomGrid.DestroyHandle" link="#lcl.controls.TWinControl.DestroyHandle"/>

      <element name="TCustomGrid.DialogChar">
        <short>Applies an accelerator key for a column in the grid.</short>
        <descr>
          <p>
            <var>DialogChar</var> is an overridden <var>Boolean</var> function used to apply Lazarus messages with accelerator keys for columns in the grid. Message contains the <var>TLMKey</var> instance with the message examined in the method. DialogChar examines each of the <var>Columns</var> defined for the grid to determine if the CharCode for the <var>Message</var> is an accelerator key appearing in the title for the column. When a match is found, the <var>HeaderClick</var> method is called to activate the column.
          </p>
          <p>
            The return value contains the result from the inherited <var>DialogChar</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.HeaderClick"/>
          <link id="#lcl.controls.TWinControl.DialogChar">TWinControl.DialogChar</link>
        </seealso>
      </element>
      <element name="TCustomGrid.DialogChar.Result">
        <short/>
      </element>
      <element name="TCustomGrid.DialogChar.Message">
        <short>Lazarus messaged examined in the method.</short>
      </element>

      <element name="TCustomGrid.DoCompareCells">
        <short>Performs a comparison between the specified cells in the grid control.</short>
        <descr>
          <p>
            <var>DoCompareCells</var> signals the <var>OnCompareCells</var> event handler (when assigned) to perform the comparison. The return value contains the relative sort order for the compared cells, and uses the following values:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>The cell at ACol and ARow occurs comes before the cell at BCol and BRow.</dd>
            <dt>0</dt>
            <dd>The specified cells have the same value.</dd>
            <dt>1</dt>
            <dd>The cell at ACol and ARow occurs comes after the cell at BCol and BRow.</dd>
          </dl>
          <p>
            When OnCompareCells is not assigned, the return value is always <b>0</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnCompareCells"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DoCompareCells.Result">
        <short>Relative sort order for the compared cells.</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.Acol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.Bcol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.BRow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.DoCopyToClipboard">
        <short>Copies the selected data to the clipboard.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DoCutToClipboard">
        <short>Cuts the data from its current site and places it in the clipboard.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DoEditButtonClick">
        <short>Performs actions needed when the button for editor control is clicked.</short>
        <descr>
          <p>
            <var>DoEditButtonClick</var> is a procedure used to perform actions requires when the button for a cell editor or button column is clicked.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> contain the Integer coordinates for the cell where the action occurred.
          </p>
          <p>
            DoEditButtonClick signals the <var>OnEditButtonClick</var> and <var>OnButtonClick</var> event handlers when they have been assigned for the grid control.
          </p>
          <p>
            DoEditButtonClick is used in the implementation of the <var>EditButtonClicked</var> method used in cell editor controls, and the <var>MouseUp</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnEditButtonClick"/>
          <link id="TCustomGrid.OnButtonClick"/>
          <link id="TCustomGrid.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DoEditButtonClick.ACol">
        <short>Column number for the affected cell.</short>
      </element>
      <element name="TCustomGrid.DoEditButtonClick.ARow">
        <short>Row number for the affected cell.</short>
      </element>

      <element name="TCustomGrid.DoEditorHide">
        <short>Performs actions needed to hide the cell Editor in the grid control.</short>
        <descr>
          <p>
            <var>DoEditorHide</var> is a procedure used to hide the cell <var>Editor</var> for the control.
          </p>
          <p>
            When <var>gfEditingDone</var> is included in the <var>GridFlags</var> for the control, and <var>CanFocus</var> indicates that the control can be focused, it is used as the <var>ActiveControl</var> in the parent <var>Form</var>. The <var>Visible</var> property in Editor is set to <b>False</b> to hide the cell editor for the control.
          </p>
          <p>
            DoEditorHide is called from the <var>EditorHide</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.GridFlags"/>
          <link id="TCustomGrid.EditorHide"/>
          <link id="TGridFlags"/>
          <link id="TGridFlagsOption"/>
          <link id="#lcl.forms.TCustomForm.ActiveControl">TCustomForm.ActiveControl</link>
          <link id="#lcl.controls.TWinControl.CanFocus">TWinControl.CanFocus</link>
        </seealso>
      </element>

      <element name="TCustomGrid.DoEditorShow">
        <short>Performs actions needed to show the cell Editor for the grid control.</short>
        <descr>
          <p>
            Calls <var>ScrollToCell</var> to position the grid on the cell indicated by the <var>Col</var> and <var>Row</var> properties.
          </p>
          <p>
            String- and Button-style editor controls are updated to use the alignment defined for the current column. If <var>Columns</var> has not been enabled, the default alignment for the cell is <var>taLeftJustify</var>. Calls <var>EditSetValue</var> to copy the cell content into the cell <var>Editor</var>.
          </p>
          <p>
            The <var>Editor.SetFocus</var> method is called when the grid control currently has focus and the cell editor can receive focus. <var>InvalidateCell</var> is called to redraw the cell at the position in Col and Row.
          </p>
          <p>
            DoEditorShow is called from the <var>EditorShow</var> method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.DoExit" link="#lcl.controls.TWinControl.DoExit"/>
      <element name="TCustomGrid.DoEnter" link="#lcl.controls.TWinControl.DoEnter"/>

      <element name="TCustomGrid.DoLoadColumn">
        <short>Signals the OnLoadColumn event handler for the grid control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoLoadColumn.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aColumn">
        <short>Grid column definition for the event.</short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aColIndex">
        <short>Ordinal position for the column.</short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aCfg">
        <short>XML configuration file with the design-time information for the columns in the grid.</short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aVersion">
        <short>Version number for the streaming format used in the configuration file.</short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aPath">
        <short>XPath-like expression for the column information.</short>
      </element>

      <element name="TCustomGrid.DoSaveColumn">
        <short>Signals the OnSaveColumn event handler for the grid control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoSaveColumn.Sender">
        <short/>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aColumn">
        <short/>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aColIndex">
        <short/>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aCfg">
        <short/>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aVersion">
        <short/>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aPath">
        <short/>
      </element>

      <element name="TCustomGrid.DoMouseWheel">
        <short>Applies mouse wheel options and handles a mouse wheel operation.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoMouseWheel.Result">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheel.Shift">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheel.WheelDelta">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheel.MousePos">
        <short/>
      </element>

      <element name="TCustomGrid.DoMouseWheelDown" link="#lcl.controls.TControl.DoMouseWheelDown"/>
      <element name="TCustomGrid.DoMouseWheelDown.Result">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelDown.Shift">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelDown.MousePos">
        <short/>
      </element>

      <element name="TCustomGrid.DoMouseWheelUp" link="#lcl.controls.TControl.DoMouseWheelUp"/>
      <element name="TCustomGrid.DoMouseWheelUp.Result">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelUp.Shift">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelUp.MousePos">
        <short/>
      </element>

      <element name="TCustomGrid.DoMouseWheelLeft" link="#lcl.controls.TControl.DoMouseWheelLeft"/>
      <element name="TCustomGrid.DoMouseWheelLeft.Result">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelLeft.Shift">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelLeft.MousePos">
        <short/>
      </element>

      <element name="TCustomGrid.DoMouseWheelRight" link="#lcl.controls.TControl.DoMouseWheelRight"/>
      <element name="TCustomGrid.DoMouseWheelRight.Result">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelRight.Shift">
        <short/>
      </element>
      <element name="TCustomGrid.DoMouseWheelRight.MousePos">
        <short/>
      </element>

      <element name="TCustomGrid.DoAutoAdjustLayout">
        <short>Performs actions to apply the auto-layout policy with the specified scaling.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TCustomGrid.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TCustomGrid.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TCustomGrid.DoOnChangeBounds" link="#lcl.controls.TControl.DoOnChangeBounds"/>

      <element name="TCustomGrid.DoOPDeleteColRow">
        <short>Performs a delete operation for a column or a row.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoOPDeleteColRow.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.DoOPDeleteColRow.Index">
        <short/>
      </element>

      <element name="TCustomGrid.DoOPExchangeColRow">
        <short>Performs an exchange for the columns or rows with the specified indexes.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoOPExchangeColRow.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.DoOPExchangeColRow.Index">
        <short/>
      </element>
      <element name="TCustomGrid.DoOPExchangeColRow.WithIndex">
        <short/>
      </element>

      <element name="TCustomGrid.DoOPInsertColRow">
        <short>Performs an inserting for a column or a row at the specified position.</short>
        <descr/>
       <seealso/>
      </element>
      <element name="TCustomGrid.DoOPInsertColRow.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.DoOPInsertColRow.Index">
        <short/>
      </element>

      <element name="TCustomGrid.DoOPMoveColRow">
        <short>Performs a  move operation for the column or row at the specified position.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoOPMoveColRow.IsColumn">
        <short/>
      </element>
      <element name="TCustomGrid.DoOPMoveColRow.FromIndex">
        <short/>
      </element>
      <element name="TCustomGrid.DoOPMoveColRow.ToIndex">
        <short/>
      </element>

      <element name="TCustomGrid.DoPasteFromClipboard">
        <short>Pastes data from the clipboard into the current cell.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DoPrepareCanvas">
        <short>Performs actions needed to prepare the canvas for a drawing operation.</short>
        <descr>
          <p>
            Signals the OnPrepareCanvas event handler (when assigned) to prepare the Canvas for the cell using the specified state. Called from the PrepareCavas method. Allows the default actions performed in the caller to be overridden.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DoPrepareCanvas.aCol">
        <short/>
      </element>
      <element name="TCustomGrid.DoPrepareCanvas.aRow">
        <short/>
      </element>
      <element name="TCustomGrid.DoPrepareCanvas.aState">
        <short/>
      </element>

      <element name="TCustomGrid.DoOnResize">
        <short>Performs actions needed when the grid control is resized.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DoSetBounds" link="#lcl.controls.TControl.DoSetBounds"/>
      <element name="TCustomGrid.DoSetBounds.ALeft">
        <short/>
      </element>
      <element name="TCustomGrid.DoSetBounds.ATop">
        <short/>
      </element>
      <element name="TCustomGrid.DoSetBounds.AWidth">
        <short/>
      </element>
      <element name="TCustomGrid.DoSetBounds.AHeight">
        <short/>
      </element>

      <element name="TCustomGrid.DoUTF8KeyPress">
        <short>Applies a UTF-8-encoded character to the active cell editor in the control.</short>
        <descr>
          <p>
            <var>DoUTF8KeyPress</var> is an overridden method used to apply the UTF-8-encoded character in <var>UTF8Key</var> to the active cell <var>Editor</var> for the control. The return value is <b>True</b> if the character is successfully handled.
          </p>
          <p>
            DoUTF8KeyPress calls the inherited method on entry to determine if the character is handled in the ancestor class. No additional actions are performed in the method when the character is handled in the ancestor.
          </p>
          <p>
            Otherwise, <var>EditingAllowed</var> is called to determine if a cell editor can be displayed for the column number in <var>Col</var>. When allowed, the <var>EditorShowChar</var> method is called to apply the value in UTF8Key to the cell Editor. The value in UTF8Key is set to an empty string (<b>''</b>), and the return is set to <b>True</b> on successful completion of the operation.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoUTF8KeyPress">TWinControl.DoUTF8KeyPress</link>
        </seealso>
      </element>
      <element name="TCustomGrid.DoUTF8KeyPress.Result">
        <short>True if the character was successfully applied in the method.</short>
      </element>
      <element name="TCustomGrid.DoUTF8KeyPress.UTF8Key">
        <short>UTF-8 character value handled in the method.</short>
      </element>

      <element name="TCustomGrid.DrawBorder">
        <short>Draws the border for the grid control.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.DrawBorder"/>
          <link id="TCustomGrid.BorderStyle"/>
          <link id="TCustomGrid.Flat"/>
          <link id="#lcl.controls.TControl.ClientHeight">TControl.ClientHeight</link>
          <link id="#lcl.controls.TControl.ClientWidth">TControl.ClientWidth</link>
        </seealso>
      </element>

      <element name="TCustomGrid.DrawAllRows">
        <short>Draws all of the rows for the grid.</short>
        <descr>
          <p>
            Draws both the fixed rows and any visible data rows using cached information in the grid control. Calls <var>DrawRow</var> to render each row by its row number in the control.
          </p>
          <p>
            <var>DrawAllRows</var> is called from the <var>Paint</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.Paint"/>
          <link id="TGridDataCache"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DrawFillRect">
        <short>Draws the fill rectangle on the specified canvas.</short>
        <descr>
          <p>
            Shifts the specified rectangle by one pixel on the left- and right-hand edges when <var>UseRightToLeftAlignment</var> is set to <b>True</b>. Calls the <var>FillRect</var> method in the <var>TCanvas</var> instance to draw the adjusted rectangle.
          </p>
          <p>
            DrawFillRect is called from the <var>DrawCell</var> method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawFillRect.aCanvas">
        <short>Canvas where the fill rectangle is drawn.</short>
      </element>
      <element name="TCustomGrid.DrawFillRect.R">
        <short>Rectangle with the bounds filled in the method.</short>
      </element>

      <element name="TCustomGrid.DrawCell">
        <short>Draws a cell using a given state at the specified grid location (Col, Row, rectangle).</short>
        <descr>
          <p>
            Calls <var>PrepareCanvas</var> to initialize the <var>Canvas</var> for the control to the state in <var>AState</var>. Calls <var>DrawFillRect</var> to fill the rectangle in <var>ARect</var> using the background for the cell. Calls <var>DrawCellGrid</var> to render fixed or non-fixed cells using the state in AState, including horizontal and vertical grid lines when enabled.
          </p>
          <p>
            DrawCell is called from the <var>DrawRow</var> method when it renders the visible cells in the grid row.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.PrepareCanvas"/>
          <link id="TCustomGrid.DrawFillRect"/>
          <link id="TCustomGrid.DrawCellGrid"/>
          <link id="TCustomGrid.DrawRow"/>
          <link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
        </seealso>
      </element>
      <element name="TCustomGrid.DrawCell.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawCell.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawCell.aRect">
        <short>Rectangle with the dimensions for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawCell.aState">
        <short>State used to render the cell.</short>
      </element>

      <element name="TCustomGrid.DrawCellGrid">
        <short>Draws cell grid lines for the control.</short>
        <descr>
          <p>
            <var>DrawCellGrid</var> is a procedure used to draw cell grid lines for both a fixed and a non-fixed cell in the grid control.
          </p>
          <p>
            DrawCellGrid ensures that the control <var>Canvas</var> (and its <var>Pen</var>) are updated to use the values needed to draw the fixed or non-fixed cell at the location specified in <var>ACol</var> and <var>ARow</var>.
          </p>
          <p>
            For a fixed cell (when <var>gdFixed</var> is in AState), grid lines are drawn when <var>gdoFixedVertLine</var> or <var>gdoFixedHorzLine</var> is found in the <var>Options</var> property. The Pen in the control Canvas is updated to reflect a non-zero value in <var>GridLineWidth</var>.
          </p>
          <p>
            When <var>Flat</var> is set to <b>False</b>, the value in AState is used to determine the color used for the Pen. Canvas drawing methods, like <var>MoveTo</var> and <var>LineTo</var>, are used to draw the cell grid lines at the coordinates in ARect. The value in <var>UseRightToLeftAlignment</var> determines how values in ARect are adjusted for the operation.
          </p>
          <p>
            When Flat is set to <b>True</b>, the value in <var>FixedGridLineColor</var> is used as the color for the Pen.
          </p>
          <p>
            For a non-fixed cell (gdFixed is not in AState), grid lines are drawn when <var>gdoVertLine</var> or <var>gdoHorzLine</var> is found in the Options property. The Pen in the control Canvas is updated to use the GridLineWidth, <var>GridLineStyle</var>, and <var>GridLineColor</var> for the control. Canvas drawing methods, like MoveTo and LineTo, are used to draw the cell grid lines at the coordinates in ARect. The value in UseRightToLeftAlignment determines how values in ARect are adjusted for the operation.
          </p>
          <p>
            DrawCellGrid is called from the <var>DrawCell</var> method after preparing the Canvas and drawing the filled rectangle with the background for the cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.DrawCell"/>
          <link id="TCustomGrid.Flat"/>
          <link id="TCustomGrid.FixedGridLineColor"/>
          <link id="TCustomGrid.GridLineColor"/>
          <link id="TCustomGrid.GridLineStyle"/>
          <link id="TCustomGrid.GridLineWidth"/>
          <link id="#lcl.controls.TControl.UseRightToLeftAlignment">TControl.UseRightToLeftAlignment</link>
        </seealso>
      </element>
      <element name="TCustomGrid.DrawCellGrid.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawCellGrid.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawCellGrid.ARect">
        <short>Rectangle with the screen coordinates for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawCellGrid.AState">
        <short>State for the cell (normal, fixed, pushed, et. al.).</short>
      </element>

      <element name="TCustomGrid.DrawTextInCell">
        <short>Draws the text for a non-fixed cell in the grid.</short>
        <descr>
          <p>
            The implementation for <var>DrawTextInCell</var> is empty in TCustomGrid. It is overridden in descendent classes.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aCol">
        <short/>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aRow">
        <short/>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aRect">
        <short/>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aState">
        <short/>
      </element>

      <element name="TCustomGrid.DrawThemedCell">
        <short>Draws a cell using the theme services for the specified grid drawing state.</short>
        <descr>
          <p>
            <var>DrawThemedCell</var> is a procedure used to draw the cell at the specified coordinates using the theme services for the platform or widget set.
          </p>
          <p>
            <var>aCol</var> contains the column number for the affected cell.
          </p>
          <p>
            <var>aRow</var> contains the row number for the affected cell.
          </p>
          <p>
            <var>aRect</var> contains the screen coordinates for the cell rendered in the method.
          </p>
          <p>
            <var>aState</var> contains the grid drawing state applied to the cell. aState contains a value from the <var>TGridDrawState</var> enumeration that determines the theme service element details used for the drawing operation.
          </p>
          <table>
            <tr>
              <td><b>Grid Draw State</b></td>
              <td><b>Theme Element</b></td>
              <td><b>Description</b></td>
            </tr>
            <tr>
              <td>gdPushed</td>
              <td>thHeaderItemPressed</td>
              <td>Draws the cell using the Pressed state</td>
            </tr>
            <tr>
              <td>gdHot</td>
              <td>thHeaderItemHot</td>
              <td>Draws the cell using the Hotlighted state</td>
            </tr>
            <tr>
              <td>Other states</td>
              <td>thHeaderItemNormal</td>
              <td>Draws the cell using the normal drawing state</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.DefaultDrawCell"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aCol">
        <short>Column number for the affected cell.</short>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aRow">
        <short>Row number for the affected cell.</short>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aRect">
        <short>Screen coordinates for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aState">
        <short>Grid drawing state for the cell.</short>
      </element>

      <element name="TCustomGrid.DrawCellText">
        <short>Draws the specified text in the given text rectangle.</short>
        <descr>
          <p>
            <var>DrawCellText</var> is a procedure used to draw the text specified in <var>AText</var> using the given text rectangle on the <var>Canvas</var> for the control. The Canvas also contains the alignment and layout used for the text drawn in the method.
          </p>
          <p>
            <var>ARect</var> contains the Canvas coordinates for the text is drawn. DrawCellText adjusts the bounds in ARect to account for the cell padding used in the control (<var>varCellPadding</var>) as needed for the text aligment and layout. The <var>TextRect</var> method in the Canvas is called to render the text.
          </p>
          <p>
            Values in the <var>ACol</var>, <var>ARow</var>, and <var>AState</var> parameters are not used in DrawCellText.
          </p>
          <p>
            DrawCellText is used in the implementation of the <var>DrawColumnText</var>, <var>DrawCellAutonumbering</var>, and <var>DrawTextInCell</var> methods where AText contains the column title, row number, or content for a given cell.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawCellText.aCol">
        <short>Not used in the current implementation.</short>
      </element>
      <element name="TCustomGrid.DrawCellText.aRow">
        <short>Not used in the current implementation.</short>
      </element>
      <element name="TCustomGrid.DrawCellText.aRect">
        <short>Text rectangle for the text drawn on the control canvas.</short>
      </element>
      <element name="TCustomGrid.DrawCellText.aState">
        <short>Not used in the current implementation.</short>
      </element>
      <element name="TCustomGrid.DrawCellText.aText">
        <short>Text drawn in the method.</short>
      </element>

      <element name="TCustomGrid.DrawGridCheckboxBitmaps">
        <short>Draws a checkbox bitmap which represents the given state in a cell.</short>
        <descr>
          <p>
            <var>DrawGridCheckboxBitmaps</var> is used to draw a bitmap used for a checkbox at the cell coordinates in <var>ACol</var> and <var>aRow</var>. <var>AState</var> contains the checkbox state for the cell, and determines the image displayed in the specified cell.
          </p>
          <p>
            GetImageForCheckBox is called to get the image list, image index, and/or bitmap used in the cell. Use the OnUserCheckBoxImage or OnUserCheckboxBitmap event handler to get a custom image or bitmap displayed for the value in AState. If GetImageForCheckBox is unable to find either a bitmap or an image, ThemeServices is used to get the theme element details for the checkbox state.
          </p>
          <p>
            The bitmap/image/theme element may be scaled if the control Font uses a display density (PPI) different than the value used for the Screen.
          </p>
          <p>
            When Columns has been Enabled,  the GetColumnAlignment and GetColumnLayout methods are used to determine the image alignment and layout used for the checkbox cell. If Columns has not been enabled, the image is centered horizontally in the cell using the vertical alignment defined for text on the Canvas.
          </p>
          <p>
            DrawGridCheckboxBitmaps adjusts ARect to use the cell padding for the control (varCellPadding) along with the size, alignment and layout needed for the grid column.
          </p>
          <p>
            The checkbox bitmap is drawn using the mechanism needed for the image source; ThemeService.DrawElement, Canvas.StretchDraw, or TScaledImageListResolution.StretchDraw.
          </p>
          <p>
            DrawGridCheckboxBitmaps is called from the DrawCellCheckboxBitmaps method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.GetImageForCheckBox"/>
          <link id="TCustomGrid.OnUserCheckBoxImage"/>
          <link id="TCustomGrid.OnUserCheckBoxBitmap"/>
          <link id="TCustomDrawGrid.DefaultDrawCell"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aCol">
        <short>Column number for the checkbox cell.</short>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aRow">
        <short>Row number for the checkbox cell.</short>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aRect">
        <short>Rectangle with the bounds for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aState">
        <short>Checkbox state used to determine the bitmap drawn in the cell.</short>
      </element>

      <element name="TCustomGrid.DrawButtonCell">
        <short>Draws a cell in a button-style column.</short>
        <descr>
          <p>
            <var>DrawButtonCell</var> is a method used to draw a cell which appears in a button-style column. DrawButtonCell uses ThemeServices to get the theme element details used to render the button for the cell.
          </p>
          <p>
            <var>AState</var> contains the drawing state for the button, and determines the theme element details used for the drawing state. The ThemeServices.DrawElement method is called to render the button on the control <var>Canvas</var> at the location specified in <var>ARect</var>.
          </p>
          <p>
            DrawButtonCell is called from <var>DefaultDrawCell</var> when the column has a button-style definition.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aCol">
        <short>Column number for the button cell.</short>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aRow">
        <short>Row number for the button cell.</short>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aRect">
        <short>Rectangle with the bounds where the button is drawn.</short>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aState">
        <short>Drawing state for the button cell; pushed, hot, or normal.</short>
      </element>

      <element name="TCustomGrid.DrawColRowMoving">
        <short>Draws a column or row when dragging is in effect.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DrawColumnText">
        <short>Draws the text and image for a grid column title at the specified cell coordinates.</short>
        <descr>
          <p>
            <var>DrawColumnText</var> is a method used to draw the text and image for a grid column title at the cell coordinates specified in <var>ACol</var> and <var>ARow</var>. DrawColumnText calls <var>DrawColumnTitleImage</var> to draw the sort indicator for the column. <var>DrawCellText</var> is called to render the text for the cell using the specified drawing state.
          </p>
          <p>
            DrawColumnText is called from the <var>DefaultDrawCell</var> method in descendent classes for cells which are fixed column titles.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawColumnText.aCol">
        <short>Column number for the column title.</short>
      </element>
      <element name="TCustomGrid.DrawColumnText.aRow">
        <short>Row number for the column title.</short>
      </element>
      <element name="TCustomGrid.DrawColumnText.aRect">
        <short>Rectangle with the bounds for the column title.</short>
      </element>
      <element name="TCustomGrid.DrawColumnText.aState">
        <short>Drawing state for the text in the cell.</short>
      </element>

      <element name="TCustomGrid.DrawColumnTitleImage">
        <short>Draws the image(s) used in the column title at the specified index in the grid.</short>
        <descr>
          <p>
            <var>DrawColumnTitleImage</var> is a method used to draw the image(s) used in the column title at the index position in <var>AColumnIndex</var>. <var>ARect</var> contains the bounds for the cell where the image is drawn.
          </p>
          <p>
            When AColumnIndex contains the same value as the <var>SortColumn</var> property, a sort indicator is drawn for the column. <var>GetSortTitleImageInfo</var> is called to determine whether theme services is used to drawn native sort buttons using theme element details. The image size may be scaled when the display density (PPI) for the control <var>Font</var> has a value other than 96.
          </p>
          <p>
            DrawColumnTitleImage ensures that image padding (DEFIMAGEPADDING) is applied to the bounds in ARect. The top and bottom bounds are adjusted so that the image is vertically centered in the area in ARect.
          </p>
          <p>
            DrawColumnTitleImage calls the <var>DrawElement</var> method in <var>ThemeServices</var> to draw the sort indicator.
          </p>
          <p>
            When native sort indicators are not used for the column, an image scaled to the display density is retrieved from the image list. DrawColumnTitleImage ensures that image padding (DEFIMAGEPADDING) is applied to the bounds in ARect. The top and bottom bounds are adjusted so that the image is vertically centered in the area in ARect. The <var>Draw</var> method in the scaled image resolution is called to draw the image on the control Canvas.
          </p>
          <p>
            <var>TitleImageList</var> is used to determine if an additional image is displayed for the column at AColumnIndex. When TitleImageList has been assigned, the <var>GetTitleImageInfo</var> method is called to get the image list and position used for the column. When an image is defined in <var>Columns</var>, an image scaled to the size size needed for the display densitity (PPI) is retrieved from TitleImageList. The bounds in ARect is adjusted to include  padding around the image (DEFIMAGEPADDING) usiing the image layout for the column. The <var>Draw</var> method in the scaled image resolution is called to render the image to the control Canvas.
          </p>
          <p>
            DrawColumnTitleImage is called from the <var>DrawColumnText</var> method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawColumnTitleImage.ARect">
        <short>Rectangle with the bounds for the column title.</short>
      </element>
      <element name="TCustomGrid.DrawColumnTitleImage.AColumnIndex">
        <short>Column Index for the title image drawn in the method.</short>
      </element>

      <element name="TCustomGrid.DrawEdges">
        <short>Draws the edges (and filled background) of the client area for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DrawFocusRect">
        <short>Draws the focus rectangle for the specified cell.</short>
        <descr>
          <p>
            DrawFocusRect has an empty implementation in TCustomGrid. It is overridden in descendent classes.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawFocusRect.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawFocusRect.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomGrid.DrawFocusRect.ARect">
        <short>TRect instance with the bounds for the cell.</short>
      </element>

      <element name="TCustomGrid.DrawRow">
        <short>Draws the columns for the specified row in the grid control.</short>
        <descr>
          <p>
            DrawRow is a method used to draw the columns for the row number specified in ARow. DrawRow calls ColRowToOffSet to get the upper and lower bounds for the row, and ensures that the bounds are within the clipping area for the control Canvas.
          </p>
          <p>
            No actions are performed in the method when the client area for the row does not fit within the  clipping rectangle for the control Canvas.
          </p>
          <p>
            DrawRow iterates over the columns in the visible area in the grid to determine if each cell fits vertically within the clipping rectangle for the control Canvas. If column spanning (goColSpanning) has been enabled in the Options for the grid, the cell extent is determined for each cell. DoDrawCell is called to render the cells.
          </p>
          <p>
            DrawRow draws the focus rectangle for the row when row selection (goRowSelect) is enabled in the Options for the grid control. DrawFocusRect is called to render the focus rectangle.
          </p>
          <p>
            DrawRow draws fixed cells used for title columns when the row is one of the fixed rows.
          </p>
          <p>
            DrawRow is called from the DrawAllRows method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.DrawRow.aRow">
        <short>Row number drawn in the method.</short>
      </element>

      <element name="TCustomGrid.EditButtonClicked">
        <short>Signals the OnEditButtonClick or OnButtonClick event handler (when assigned).</short>
        <descr>
          <p>
            When Sender is the TButtonCellEditor for the control, the DoEditButtonClick method is called using the Col and Row numbers from the TButtonCellEditor class instance. Otherwise, DoEditButtonClick is called using the values in the Col and Row properties.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditButtonClicked.Sender">
        <short>Object for the event notification.</short>
      </element>

      <element name="TCustomGrid.EditorDoGetValue">
        <short>Gets the value for the cell Editor.</short>
        <descr>
          <p>
            EditorDoGetValue creates a GM_GETVALUE TGridMessage with the Col, Row, and value for the cell. It is dispatched to the Editor for the control. SetEditText is called prior to exiting from the method; not used in TCustomGrid - but relevant in descendent classes with an event handler for the action.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorDoResetValue">
        <short>Resets the value in the selected cell when a visible editor is cancelled or hidden.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorDoSetValue">
        <short>Sets the mask and value for a visible cell editor in the grid control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorCanAcceptKey">
        <short>Returns True if the Editor is able to accept the specified UTF-8 key.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorCanAcceptKey.Result">
        <short/>
      </element>
      <element name="TCustomGrid.EditorCanAcceptKey.ch">
        <short/>
      </element>

      <element name="TCustomGrid.EditorIsReadOnly">
        <short>Determines if the current column number is defined as read-only.</short>
        <descr>
          <p>
            Calls GetColumnReadonly using the value in Col as the column number.
          </p>
          <p>
            When the Columns collection has been enabled, the ReadOnly property in the TGridColumn instance determines the return value. Otherwise, the value from GetDefaultColumnReadOnly is used as the return value (False in TCustomGrid).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorIsReadOnly.Result">
        <short/>
      </element>

      <element name="TCustomGrid.EditorHide">
        <short>Hides a visible cell editor in the grid control.</short>
        <descr>
          <p>
            EditorHide ensures that an active, visible cell editor is locked / hidden / unlocked in the method. No actions are performed in the method when EditorLocked returns True, or the Editor is not visible.
          </p>
          <p>
            EditorHide sets the value in EditorMode to False, and sets GridState to gsNormal.
          </p>
          <p>
            No additional actions are performed when the Editor does not have a Parent (when the parent form is closing). If the Editor has an assigned Parent, the Editor is locked and DoEditorHide is called to hide the Editor. If the Editor was focused on entry, SetFocus is called to restore focus to the grid control. The editor is unlocked prior to exiting from the method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorLocked">
        <short>Returns True if the Editor is locked, i.e. unable to accept input or make changes.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorLocked.Result">
        <short>True when LockEditor has been called and UnLockEditor has not yet been called.</short>
      </element>

      <element name="TCustomGrid.EditingAllowed">
        <short>Indicates if the grid and specified column allow editing.</short>
        <descr>
          <p>
            Returns True if both the grid and the specified column allow editing. The return value is True when all of the following conditions are satisfied:
          </p>
          <ul>
            <li>goEditing is included in the Options property</li>
            <li>ACol contains a valid column index</li>
            <li>RowCount has a value larger than the value in FixedRows</li>
            <li>The Columns collection has been Enabled (contains at least one visible column)</li>
            <li>A TGridColumn instance exists for the column index in ACol</li>
            <li>The TGridColumn instance is not marked as read-only</li>
          </ul>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditingAllowed.Result">
        <short>Returns True if both the grid and the current column allow editing.</short>
      </element>
      <element name="TCustomGrid.EditingAllowed.ACol">
        <short>Column number examined in the method.</short>
      </element>

      <element name="TCustomGrid.EditorSelectAll">
        <short>Performs actions to select the entire content in the current cell.</short>
        <descr>
          <p>
            EditorSelectAll is a method used to select the entire content in the current cell when the Editor is active and visible. EditorSelectAll creates, configures, and dispatches a TGridMessage using the GM_SELECTALL message constant to the Editor  in the grid control.
          </p>
          <p>
            No actions are performed in the method when Editor has not been assigned (contains <b>Nil</b>).
          </p>
          <p>
            EditorSelectAll is called from the EditorShow method when its SelAll argument is set to True, and from the IMEStartComposition method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorShow">
        <short>Displays the Editor for the selected cell.</short>
        <descr>
          <p>
            Displays and enables the cell Editor for the selected cell, and optionally selects all content in the cell.
          </p>
          <p>
            No actions are performed in the method at design-time, or during LCL component streaming. The grid control must have an allocated Handle, and be Enabled and Visible (including the Parent). In addition, both the grid and the column must allow editing. Use Options to enable editing in grid cells. Use Columns to define TGridColumn instances with editable columns using the required button style for the column data.
          </p>
          <p>
            No actions are performed in the method when Editor has not been assigned, or has already been displayed, or is currently locked by a call to LockEditor.
          </p>
          <p>
            EditorShow sets the value in EditorMode to True, and saves the existing cell value on entry. EditorShowing is set to True to indicate that the Editor is visible, and calls doEditorShow to display the Editor control.
          </p>
          <p>
            SelAll indicates whether all of the content in the cuirrent cell is selected in the Editor for the control. When set to True, the EditorSelectAll method is called to post the GM_SELECTALL message to the Editor control. The value in GridState is set to gsNormal prior to exiting from the method.
          </p>
          <p>
            EditorShow is called when the value goAlwaysShowEditor is included in the Options for the grid control. It is also called from methods like:
          </p>
          <ul>
            <li>ResetEditor</li>
            <li>MouseDown</li>
            <li>MouseUp</li>
            <li>DoEnter</li>
            <li>KeyDown</li>
            <li>KeyPress</li>
            <li>MoveExtend</li>
            <li>MoveNextSelectable</li>
            <li>EditorShowInCell</li>
            <li>EditorShowChar</li>
            <li>EditorSetMode</li>
          </ul>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorShow.SetAll">
        <short>True to select the entire content for the cell in the Editor.</short>
      </element>

      <element name="TCustomGrid.EditorShowInCell">
        <short>Shows the cell content for the Editor<i>in situ</i>.</short>
        <descr/>
        <seealso/>
        <notes><note>Not used in the current implementation.</note></notes>
      </element>
      <element name="TCustomGrid.EditorShowInCell.aCol">
        <short>Column number where the editor is displayed.</short>
      </element>
      <element name="TCustomGrid.EditorShowInCell.aRow">
        <short>Row number where the editor is displayed.</short>
      </element>

      <element name="TCustomGrid.EditorWidthChanged">
        <short>Performs actions needed when the width for a cell Editor has been changed.</short>
        <descr>
          <p>
            <var>EditorWidthChanged</var> performs actions needed to update the width for the cell Editor when a column width in the grid has been changed. EditorWidthChanged calls the <var>EditorPos</var> method to set the position, bounds, and font for the Editor.
          </p>
          <p>
            EditorWidthChanged is called when a new value is assigned to the indexed <var>ColWidths</var> property, and when column widths are adjusted when <var>AutoFillColumns</var> is set to <b>True</b>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorWidthChanged.aCol">
        <short>Column number for the affected editor.</short>
      </element>
      <element name="TCustomGrid.EditorWidthChanged.aWidth">
        <short>New width for the cell with the editor control.</short>
      </element>

      <element name="TCustomGrid.FirstGridColumn">
        <short>Gets the position of the first column after any fixed columns in the grid.</short>
        <descr>
          <p>
            <var>FirstGridColumn</var> is an <var>Integer</var> function used to get the ordinal position of the first column appearing after any fixed column in the grid control. The return value contains the value in the <var>FixedCols</var> property.
          </p>
          <p>
            FirstGridColumn is used in the implementation of methods including:
          </p>
          <ul>
            <li>GetColWidths</li>
            <li>GetIsCellTitle</li>
            <li>ColumnIndexFromGridColumn</li>
            <li>GridColumnFromColumnIndex</li>
            <li>ColumnsChanged</li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColWidths"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.GetIsCellTitle"/>
          <link id="TCustomGrid.ColumnIndexFromGridColumn"/>
          <link id="TCustomGrid.GridColumnFromColumnIndex"/>
          <link id="TCustomGrid.ColumnsChanged"/>
        </seealso>
      </element>
      <element name="TCustomGrid.FirstGridColumn.Result">
        <short>Position of the first column after any fixed columns in the grid.</short>
      </element>

      <element name="TCustomGrid.FixedGrid">
        <short>Determines if all columns or all rows in the grid are fixed.</short>
        <descr>
          <p>
            <var>FixedGrid</var> is a <var>Boolean</var> function used to determine whether all columns in the grid are defined as fixed columns, or all rows are defined as fixed rows. The return value is <b>True</b> when <var>FixedCols</var> is equal to <var>ColCount</var> <b>OR</b> <var>FixedRows</var> is equal to <var>RowCount</var>.
          </p>
          <p>
            FixedGrid is used in the implementation of methods like: SetFixedCols, SetFixedRows, MouseToGridZone, MouseDown, MouseMove, MouseUp, TryMoveSelect, EditorAlwaysShown, and FixPosition.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.FixedGrid.Result">
        <short>True when all of the row or all of the columns in the control are fixed.</short>
      </element>

      <element name="TCustomGrid.FontChanged">
        <short> Performs actions needed when the font for the control is changed.</short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden method used to perform actions needed when the <var>Font</var> for the control has been changed.
          </p>
          <p>
            FontChanged ensures that the internal default heights for rows and columns are reset to <b>0</b> (<b>zero</b>). This forces the default column and row heights to be recalculated when the <var>DoAutoAdjustLayout</var> method is called.
          </p>
          <p>
            When <var>csCustomPaint</var> is included in <var>ControlState</var>, the Font is assigned to the <var>Canvas</var> for the control.
          </p>
          <p>
            Otherwise, the FontChanged method is called for the ancestor class and the <var>Columns</var> collection (when Enabled). If the default title font is used for the control, the Font is assigned to <var>TitleFont</var> property.
          </p>
          <p>
            FontChanged is assigned as the <var>OnChange</var> event handler for the <var>Font</var> property in the constructor for the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TGridColumn.Title"/>
          <link id="TGridColumnTitle.Font"/>
          <link id="#lcl.controls.TControl.Font">TControl.Font</link>
          <link id="#lcl.controls.TControl.ControlState">TControl.ControlState</link>
          <link id="#lcl.controls.TCustomControl.FontChanged">TCustomControl.FontChanged</link>
          <link id="#lcl.graphics.TFont">TFont</link>
        </seealso>
      </element>
      <element name="TCustomGrid.FontChanged.Sender">
        <short>Object for the event notification.</short>
      </element>

      <element name="TCustomGrid.GetAutoFillColumnInfo">
        <short>Gets auto-fill information for the specified column.</short>
        <descr>
          <p>
            <var>GetAutoFillColumnInfo</var> is a method used to get sizing information for an auto-fill column specified in <var>Index</var>. <var>AMin</var>, <var>AMax</var>, and <var>APriority</var> are variable arguments updated with the values for the requested column.
          </p>
          <p>
            GetAutoFillColumnInfo calls <var>ColumnFromGridColumn</var> to get the <var>TGridColumn</var> instance in <var>Columns</var> with the requested values. If a column exists with the requested Index, its properties are stored in the variable parameters. When Index is a fixed column in the grid, the value in APriority is set to <b>0</b> (<b>zero</b>). If Columns has not been Enabled for the control, or the column index is not valid, APriority is set to <b>1</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColumnFromGridColumn"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumn.MinSize"/>
          <link id="TGridColumn.MaxSize"/>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.Index">
        <short>Position for the grid column examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.aMin">
        <short>Minimum size for the column.</short>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.aMax">
        <short>Maximum size for the column.</short>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.aPriority">
        <short>Sizing priority for the column.</short>
      </element>

      <element name="TCustomGrid.GetCellHintText">
        <short>Gets the hint for the specified cell using the Options enabled in the grid control.</short>
        <descr>
          <p>
            <var>GetCellHintText</var> signals the <link id="TCustomGrid.OnGetCellHint">OnGetCellHint</link> event handler (when assigned) to get the hint text for the cell at the position in <var>ACol</var> and <var>ARow</var>. The return value contains the hint text returned from the event handler, or an empty string (<b>''</b>) when the event handler has not been assigned.
          </p>
          <p>
            GetCellHintText is called from the <var>ShowCellHintWindow</var> method when <var>Options</var> contains the value <var>goCellHints</var> and <var>CellHintPriority</var> is <b>not</b> set to <var>chpTruncOnly</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnGetCellHint"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.CellHintPriority"/>
          <link id="TCustomGrid.GetTruncCellHintText"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetCellHintText.Result">
        <short>String with the hint text for the specified cell.</short>
      </element>
      <element name="TCustomGrid.GetCellHintText.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.GetCellHintText.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.GetCells">
        <short>Gets the cell content at the specified column and row numbers.</short>
        <descr>
          <p>
            Always returns an empty string ('') in TCustomGrid. Overridden in descendent classes.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetCells.Result">
        <short>Content for the specified cell.</short>
      </element>
      <element name="TCustomGrid.GetCells.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.GetCells.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.GetColumnAlignment">
        <short>Gets the horizontal Alignment for the specified column.</short>
        <descr>
          <p>
            Calls <var>ColumnFromGridColumn</var> to get the <var>TGridColumn</var> instance in <var>Columns</var> for the column number in the <var>Column</var> parameter.
          </p>
          <p>
            <var>ForTitle</var> indicates the alignment used as the return value for the specified column number. When set to True, the alignment for the Title in the TGridColumn instance is used as the return value. Otherwise, the alignment property in the TGridColumn instance is used as the return value.
          </p>
          <p>
            Called from the <var>PrepareCanvas</var> and <var>DrawGridCheckboxBitmaps</var> methods.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetColumnAlignment.Result">
        <short>TAlignment value for the column.</short>
      </element>
      <element name="TCustomGrid.GetColumnAlignment.Column">
        <short>Column number examined in the grid.</short>
      </element>
      <element name="TCustomGrid.GetColumnAlignment.ForTitle">
        <short>True when the alignment in the column title is used.</short>
      </element>

      <element name="TCustomGrid.GetColumnColor">
        <short>Gets the Color used to render the background for the specified column number.</short>
        <descr>
           <p>
             <var>GetColumnColor</var> ensures that the correct color value is used to render the background for the specified column number.
           </p>
          <p>
            When the Columns collection has been enabled, the color is retrieved from the TGridColumn instance. The Color property in TGridColumn is used when ForTitle is set to False. Otherwise, the Color in the Title for the column instance is used.
          </p>
          <p>
            If the Columns collection has not been enabled, the color is retrieved from the Color or FixedColor properties in the grid control. FixedColor is used when ForTitle is set to True.
          </p>
          <p>
            GetColumnColor is called from the PrepareCanvas method.
          </p>
          <p>
            Use properties like AlternateColor, FixedHotColor, FocusColor, and SelectedColor to control when the corresponding Options are enabled for the grid control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetColumnColor.Result">
        <short>Color the column.</short>
      </element>
      <element name="TCustomGrid.GetColumnColor.Column">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetColumnColor.ForTitle">
        <short>True when the color for the title in the column is needed.</short>
      </element>

      <element name="TCustomGrid.GetColumnFont">
        <short>Gets the font used to render values for the specified column.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetColumnFont.Result">
        <short>TFont instance used to render values for the column.</short>
      </element>
      <element name="TCustomGrid.GetColumnFont.Column">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetColumnFont.ForTitle">
        <short>True when the font for the column title is needed.</short>
      </element>

      <element name="TCustomGrid.GetColumnLayout">
        <short>Gets the vertical text Layout value for the specified column.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetColumnLayout.Result">
        <short>TTextLayout value for the column.</short>
      </element>
      <element name="TCustomGrid.GetColumnLayout.Column">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetColumnLayout.ForTitle">
        <short>True when the text layout for the column title is needed.</short>
      </element>

      <element name="TCustomGrid.GetColumnReadonly">
        <short>Returns True if the column is marked as ReadOnly.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetColumnReadonly.Result">
        <short>Returns True if the column is marked as ReadOnly.</short>
      </element>
      <element name="TCustomGrid.GetColumnReadonly.Column">
        <short>Column number examined in the method.</short>
      </element>

      <element name="TCustomGrid.GetColumnTitle">
        <short>Gets the text displayed as the column title for the specified column number.</short>
        <descr>
          <p>
            <var>GetColumnTitle</var> is a <var>String</var> function used to get the text displayed as the column title for column number specified in <var>Column</var>. <var>ColumnFromGridColumn</var> is called to get the non-fixed <var>TGridColumn</var> instance at the specified position in the Columns collection.
          </p>
          <p>
            If a column exists at the position in Column, the <var>Caption</var> stored in its <var>Title</var> property is used as the return value. If Column does not represent a valid non-fixed column position, or the Columns collection has not been enabled, the value from the <var>GetDefaultColumnTitle</var> method is used as the return value.
          </p>
          <p>
            GetColumnTitle is called from the <var>DrawColumnText</var> method when the image and text for the column header is drawn.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetColumnTitle.Result">
        <short>Text displayed in the title for the column.</short>
      </element>
      <element name="TCustomGrid.GetColumnTitle.Column">
        <short>Column number for the title text.</short>
      </element>

      <element name="TCustomGrid.GetColumnWidth">
        <short>Gets the width of the column at the specified column number.</short>
        <descr>
          <p>
            <var>GetColumnWidth</var> calls <var>ColumnFromGridColumn</var> to get the <var>TGridColumn</var> instance for the column number in the <var>Column</var> parameter. If the grid column is assigned, its Width property is used as the return value for the method.
          </p>
          <p>
            The grid column may be unassigned (contain <b>Nil</b>) if Column is not a valid column number for the control, or <var>Columns</var> has not been <var>Enabled</var> for the grid. In this situation, <var>GetDefaultColumnWidth</var> is called to get the return value for the method.
          </p>
          <remark>
            GetColumnWidth is never called in TCustomGrid or TCustomDrawGrid. It is called from the internal auto-sizing routine in the <var>TCustomDBGrid</var> descendant.
          </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetColumnWidth.Result">
        <short>Width (in pixels) for the column.</short>
      </element>
      <element name="TCustomGrid.GetColumnWidth.Column">
        <short>Column number examined in the method.</short>
      </element>

      <element name="TCustomGrid.GetDeltaMoveNext">
        <short>Returns the relative cell coordinates for the next cell in the grid navigation order.</short>
        <descr>
          <p>
            <var>AAutoAdvance</var> contains the navigation direction requested in the method. When it is set to <var>aaNone</var>, the values in <var>ACol</var> and <var>ARow</var> always contain <b>0</b> (<b>zero</b>) indicating no relative movement.
          </p>
          <p>
            When <var>Inverse</var> is set to <b>True</b>, the cell navigation order in AAutoAdvance is reversed. When row selection is enabled in the grid <var>Options</var> (using <var>goRowSelect</var>), ACol is set to the first non-fixed column in the grid. Otherwise, it is set to the last column in the grid. Other auto-advance values are handled as follows:
          </p>
          <ul>
            <li>aaLeft is treated as if it were aaRight</li>
            <li>aaRightDown is treated as if it were aaLeftUp</li>
            <li>aaLeftDown is treated as if it were aaRightUp</li>
            <li>aaRightUp is treated as if it were  aaLeftDown</li>
            <li>aaLeftUp is treated as if it were  aaRightDown</li>
          </ul>
          <p>
            The next cell for the navigation order is calculated and returned in the ACol and ARow arguments. The return value is <b>True</b> if the values in ACol and ARow were successfully selected as the current cell in the grid.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.Result">
        <short>True if the calculated cell for the movement is selected in the grid control.</short>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.Inverse">
        <short>True is the navigation order is reversed.</short>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.ACol">
        <short>Column number after the navigation request.</short>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.ARow">
        <short>Column number after the navigation request.</short>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.AAutoAdvance">
        <short>Direction of movement for the request.</short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnAlignment">
        <short>Gets the default horizontal alignment used for values in the grid control.</short>
        <descr>
          <p>
            <var>GetDefaultColumnAlignment</var> is a <var>TAlignment</var> function which provides the default horizontal aligment for text in the columns for the grid control. It is used in the <var>GetColumnAlignment</var> method when <var>Columns</var> are not Enabled for the control. GetDefaultColumnAlignment returns the Alignment value from <var>DefaultTextStyle</var> as stored in the constructor for the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GetColumnAlignment"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.DefaultTextStyle"/>
          <link id="#rtl.classes.TAlignment">TAlignment</link>
        </seealso>
      </element>
      <element name="TCustomGrid.GetDefaultColumnAlignment.Result">
        <short>Default horizontal alignment for the specified column.</short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnAlignment.Column">
        <short>Column number is not used in the method </short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnWidth">
        <short>Gets the default width used for the specified column.</short>
        <descr>
          <p>
            GetDefaultColumnWidth is an Integer function which provides the default width used for the specified Column in the grid control. GetDefaultColumnWidth is used in the GetColumnWidth method when Columns have not been enabled for the control. It returns the value stored in the DefaultColWidth property.
          </p>
          <p>
            Use the indexed ColWidths property to set the width for an individual column when the Columns collection has not been enabled. Or, use Columns collection to maintain the column definitions including their width.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetDefaultColumnWidth.Result">
        <short/>
      </element>
      <element name="TCustomGrid.GetDefaultColumnWidth.Column">
        <short/>
      </element>

      <element name="TCustomGrid.GetDefaultColumnLayout">
        <short>Gets the default vertical layout for text in the specified column.</short>
        <descr>
          <p>
            <var>GetDefaultColumnLayout</var> gets the default vertical layout for text in the specified Column. The <var>DefaultTextStyle</var> property is used as the source for the text Layout, and contains the value assigned in the constructor for the class instance.
          </p>
          <p>
            GetDefaultColumnLayout is called from <var>GetColumnLayout</var> when a <var>TGridColumn</var> instance cannot be located in <var>Columns</var> for the specified column number. This occurs when <var>Column</var> is invalid for the defined Columns in the control, or when Columns has not been <var>Enabled</var> (contains at least one visible column).
          </p>
          <p>
            Change values in the DefaultTextStyle property to override the default values assigned in the Create method. Use the Columns collection to change the text layout used in a column when Columns are Enabled.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetDefaultColumnLayout.Result">
        <short>TTextLayout value for the specified column.</short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnLayout.Column">
        <short>Column number examined in the method.</short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnReadOnly">
        <short>Gets the default setting for the ReadOnly flag in the specified column number.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetDefaultColumnReadOnly.Result">
        <short/>
      </element>
      <element name="TCustomGrid.GetDefaultColumnReadOnly.Column">
        <short/>
      </element>

      <element name="TCustomGrid.GetDefaultColumnTitle">
        <short>Gets the default text used as the column title for the specified column number.</short>
        <descr>
          <p>
            <var>GetDefaultColumnTitle</var> provides the text used for the specified column number when <var>Columns</var> have not been enabled for the grid control. GetDefaultColumnTitle always returns an empty strng ('') in <var>TCustomGrid</var>.
          </p>
          <p>
            GetDefaultColumnTitle is called from the <var>GetColumnTitle</var> method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetDefaultColumnTitle.Result">
        <short>Default text used as the column title for the specified column.</short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnTitle.Column">
        <short>Column number for the default title text.</short>
      </element>

      <element name="TCustomGrid.GetDefaultEditor">
        <short>Gets the default cell editor for the specified column.</short>
        <descr>
          <p>
            <var>GetDefaultEditor</var> is a <var>TWinControl</var> function used to get the default <var>Editor</var> control for the specified column number.
          </p>
          <p>
            GetDefaultEditor calls <var>EditingAllowed</var> to determine if the column can be edited. When editing is permitted, the <var>Columns</var> collection is used to get the ButtonStyle stored in the <var>TGridColumn</var> instance. If the column uses the cbsAuto button style and has a valid non-empty PickList, the cbsPickList button style is used.
          </p>
          <p>
            If Columns has not been enabled, the cbsAuto button style is always used for the Editor control.
          </p>
          <p>
            GetDefaultEditor calls <var>EditorByStyle</var> to create the Editor with the button style needed for the control. The return value is <b>Nil</b> if the column does not allow editing, or the current cell is a fixed column or row header.
          </p>
          <p>
            For an Editor using the cbsPickList button style, its items and drop-down row count are set using values from the column definition in Columns.
          </p>
          <p>
            GetDefaultEditor is called from the <var>SelectEditor</var> method prior to selecting the cell and signalling the <var>OnSelectEditor</var> event handler (when assigned). Use the OnSelectEditor event handler to override the Editor style or its configuration.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetDefaultEditor.Result">
        <short>Control used as the Editor for the specified column number.</short>
      </element>
      <element name="TCustomGrid.GetDefaultEditor.Column">
        <short>Column number examined in the method.</short>
      </element>

      <element name="TCustomGrid.GetDefaultRowHeight">
        <short>Gets the default height for a row in the grid control.</short>
        <descr>
          <p>
            <var>GetDefaultRowHeight</var> is an <var>Integer</var> function used to get the default height for a row in the grid control.
          </p>
          <p>
            GetDefaultRowHeight uses a <var>TCanvas</var> instance to get the height for the text displayed in a row. If the control Canvas is unassigned, or does not have an allocated handle, a temporary TCanvas instance is created using the Font for the control. The TextHeight method in Canvas is called to get the return value for the method.
          </p>
          <p>
            GetDefaultRowHeight is called from the <var>GetDefRowHeight</var> method used to get the value for the <var>DefaultRowHeight</var> property.
          </p>
        </descr>
        <seealso/>
        <notes><note>What are the 7 additional pixels added to the text height?</note></notes>
      </element>
      <element name="TCustomGrid.GetDefaultRowHeight.Result">
        <short>Default value used as the height for rows in the grid.</short>
      </element>

      <element name="TCustomGrid.GetGridDrawState">
        <short>Gets the grid drawing state for the cell with the specified column and row numbers.</short>
        <descr>
          <p>
            <var>GetGridDrawState</var> is a <var>TGridDrawState</var> function used to get the state flags for the cell specified in <var>ACol</var> and <var>ARow</var>. The return value can contain the following enumeration values:
          </p>
          <dl>
            <dt>gdFixed</dt>
            <dd>ARow is one of the FixedRows for the grid.</dd>
            <dt>gdFocused</dt>
            <dd>ACol and ARow have the same values as the Col and Row properties.</dd>
            <dt>gdSelected</dt>
            <dd>
              ACol and ARow have the same values as the Col and Row properties, or the cell is included in a selection range.
            </dd>
            <dt>gdRowHighlight</dt>
            <dd>
              Row highlighting is enabled in Options, Row and aRow have the same value, and the cell is not a fixed cell.
            </dd>
            <dt>gdPushed</dt>
            <dd>ACol and ARow match the cached PushedCell coordinates.</dd>
            <dt>gdHot</dt>
            <dd>ACol and ARow match the cached HotCell coordinates, and the cell is not "pushed".</dd>
          </dl>
          <p>
            GetGridDrawState is called from the DrawRow and ShowCellHintWIndow methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.ShowCellHintWIndow"/>
          <link id="TGridDrawState"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetGridDrawState.Result">
        <short>TGridDrawState instance with the state flags for the specified cell.</short>
      </element>
      <element name="TCustomGrid.GetGridDrawState.ACol">
        <short>Column number for the cell examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetGridDrawState.ARow">
        <short>Row number for the cell examined in the method.</short>
      </element>

      <element name="TCustomGrid.GetImageForCheckBox">
        <short>Gets the bitmap used to draw Checkbox columns in the grid.</short>
        <descr>
          <p>
            <var>GetImageForCheckBox</var> signals the <var>OnUserCheckboxBitmap</var> event handler (when assigned) to get a bitmap used for the checkbox state. If a valid <var>TBitmap</var> instance is not assigned in the event handler, the <var>OnUserCheckBoxImage</var> event handler is signalled (when assigned) to get the <var>TImageList</var>, <var>TBitmap</var>, and <var>ImageIndex</var> used for the purpose.
          </p>
          <p>
            GetImageForCheckBox is used in the implementation of the <var>DrawGridCheckboxBitmaps</var> and <var>DrawCellText</var> methods in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnUserCheckboxBitmap"/>
          <link id="TCustomGrid.OnUserCheckboxImage"/>
          <link id="TCustomGrid.DrawGridCheckboxBitmaps"/>
          <link id="TCustomGrid.DrawCellText"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.aCol">
        <short>Column number for the Checkbox cell.</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.aRow">
        <short>Row number for the Checkbox cell.</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.CheckBoxView">
        <short>Checkbox state for the cell.</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.ImageList">
        <short>Image list with images used for Checkbox drawing states.</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.ImageIndex">
        <short>Ordinal position of the image used for the corresponding Checkbox state.</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.Bitmap">
        <short>Bitmap with the image drawn for the Checkbox state.</short>
      </element>

      <element name="TCustomGrid.GetScrollBarPosition">
        <short>Gets the position for the specified scrollbar.</short>
        <descr>
          <p>
            <var>GetScrollBarPosition</var> is an <var>Integer</var> function used to get the position for the scrollbar specified in Which. GetScrollBarPosition calls the <var>GetScrollInfo</var> routine in the LCL interface to get the <var>TScrollInfo</var> structure with the position for the scrollbar in <var>Which</var>.
          </p>
          <p>
            The return value contain the position from the TScrollInfo structure. The return value is <b>0</b> (<b>zero</b>) if the <var>Handle</var> for the grid control has not been allocated.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.lclintf.GetScrollInfo">GetScrollInfo</link>
          <link id="#lcl.lcltype.TScrollInfo">TScrollInfo</link>
        </seealso>
      </element>
      <element name="TCustomGrid.GetScrollBarPosition.Result">
        <short>Current position in the secified scrollbar.</short>
      </element>
      <element name="TCustomGrid.GetScrollBarPosition.Which">
        <short>Indicates the scrollbar (horizontal or vertical) examined in the method.</short>
      </element>

      <element name="TCustomGrid.GetSmoothScroll">
        <short>Gets the smooth scroll setting in the Options for the grid.</short>
        <descr>
          GetSmoothScroll determines whether the smooth scroll setting (goSmoothScroll) has been included in the Options for the grid control.
        </descr>
        <notes><note>Needs an explanation of what "smooth scroll" really means.</note></notes>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetSmoothScroll.Result">
        <short>True when Options contains the value goSmoothScroll.</short>
      </element>
      <element name="TCustomGrid.GetSmoothScroll.Which">
        <short>Not used in the current implementation.</short>
      </element>

      <element name="TCustomGrid.GetSBVisibility">
        <short>Gets the values for the scrollbar visibility flags in the control.</short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>
      <element name="TCustomGrid.GetSBVisibility.HsbVisible">
        <short>True if the horizontal scrollbar is visible.</short>
      </element>
      <element name="TCustomGrid.GetSBVisibility.VsbVisible">
        <short>True if the vertical scrollbar is visible.</short>
      </element>

      <element name="TCustomGrid.GetSBRanges">
        <short>Gets the range values for the scrollbars when visible.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetSBRanges.HsbVisible">
        <short/>
      </element>
      <element name="TCustomGrid.GetSBRanges.VsbVisible">
        <short/>
      </element>
      <element name="TCustomGrid.GetSBRanges.HsbRange">
        <short/>
      </element>
      <element name="TCustomGrid.GetSBRanges.VsbRange">
        <short/>
      </element>
      <element name="TCustomGrid.GetSBRanges.HsbPage">
        <short/>
      </element>
      <element name="TCustomGrid.GetSBRanges.VsbPage">
        <short/>
      </element>

      <element name="TCustomGrid.GetSelectedState">
        <short>Gets the effective selected state using the control Options and the grid draw state.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetSelectedState.AState">
        <short>Grid draw state values examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetSelectedState.IsSelected">
        <short>True when the state and Options values indicate a selected state.</short>
      </element>

      <element name="TCustomGrid.GetEditMask">
        <short>Gets the edit mask for the specified cell.</short>
        <descr>
          <p>
            Always returns an empty string ('') in TCustomGrid. It is overridden in descendent classes.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetEditMask.Result">
        <short>Edit mask for the specified cell.</short>
      </element>
      <element name="TCustomGrid.GetEditMask.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.GetEditMask.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.GetEditText">
        <short>Gets the text displayed in the Editor for the specified cell.</short>
        <descr>
          <p>
            <var>GetEditText</var> always returns an empty string ('') in <var>TCustomGrid</var>. It is overridden in descendent classes like TCustomDrawGrid and TCustomStringGrid to signal an  <var>OnGetEditText</var> event handler.
          </p>
          <p>
            GetEditText is called from the <var>EditorDoSetValue</var> method when <var>TGridMessages</var> are dispatched to the <var>Editor</var> to set the edit mask and value used in the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetEditText.Result">
        <short>Text displayed in the cell editor.</short>
      </element>
      <element name="TCustomGrid.GetEditText.ACol">
        <short>Column number for the editor text.</short>
      </element>
      <element name="TCustomGrid.GetEditText.ARow">
        <short>Row number for the editor text.</short>
      </element>

      <element name="TCustomGrid.GetFixedColor">
        <short>Gets the value for the FixedColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.FixedColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetFixedColor.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomGrid.GetFirstVisibleColumn">
        <short>Gets the column number for the first visible non-fixed column in the grid.</short>
        <descr>
          <p>
            <var>GetFirstVisibleColumn</var> is an <var>Integer</var> function used to get the column number for the first visible non-fixed column in the grid. A visible column is one which starts after the fixed columns specified in <var>FixedCols</var> and has a non-zero width for the column in <var>ColWidths</var>.
          </p>
          <p>
            The return value contains the column number (zero-based) for the column matching the criteria. If a non-fixed column with a non-zero width is not found, the return value is set to <var>ColCount</var>.
          </p>
          <p>
            GetFirstVisibleColumn is called from the KeyDown method when handling <b>Tab</b> key navigation for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.ColWidths"/>
          <link id="TCustomGrid.KeyDown"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetFirstVisibleColumn.Result">
        <short>Column number for the first visible column.</short>
      </element>

      <element name="TCustomGrid.GetFirstVisibleRow">
        <short>Gets the row number for the first visible non-fixed row in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetFirstVisibleRow.Result">
        <short>Row number for the first visible row.</short>
      </element>

      <element name="TCustomGrid.GetLastVisibleColumn">
        <short>Gets the column number for the last visible non-fixed column in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetLastVisibleColumn.Result">
        <short>Position for the last visible column in the grid.</short>
      </element>

      <element name="TCustomGrid.GetLastVisibleRow">
        <short>Gets the row number for the last visible non-fixed row in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetLastVisibleRow.Result">
        <short>Row number for the last visible non-fixed row.</short>
      </element>

      <element name="TCustomGrid.GetSelectedColor">
        <short>Gets the value for the SelectedColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SelectedColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelectedColor.Result">
        <short>Value for the properly.</short>
      </element>

      <element name="TCustomGrid.GetTitleShowPrefix">
        <short>Gets the prefix option for the title in the specified column number.</short>
        <descr>
          <p>
            <var>GetTitleShowPrefix</var> determines whether the <var>DT_NOPREFIX</var> DrawText flag is included in the <var>Canvas</var> text style for the specified column. When GetTitleShowPrefix returns <b>False</b>, the DT_NOPREFIX flag in included in the text style.
          </p>
          <p>
            GetTitleShowPrefix is called from the <var>PrepareCanvas</var> method when drawing a cell in the fixed rows for the grid.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetTitleShowPrefix.Result">
        <short>True when the TGridColumn is configured to use prefixes.</short>
      </element>
      <element name="TCustomGrid.GetTitleShowPrefix.Column">
        <short>Column number examined in the method.</short>
      </element>

      <element name="TCustomGrid.GetPxTopLeft">
        <short>
          Gets a TPoint instance with the top and left coordinates for the first visible, non-fixed row in the grid control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetPxTopLeft.Result">
        <short>TPoint instance with the coordinates for the row.</short>
      </element>

      <element name="TCustomGrid.GetTruncCellHintText">
        <short>Gets the truncated version of the hint for the cell at the specified position.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetTruncCellHintText.Result">
        <short>Truncated text for the cell hint.</short>
      </element>
      <element name="TCustomGrid.GetTruncCellHintText.ACol">
        <short>Column number for the hint text.</short>
      </element>
      <element name="TCustomGrid.GetTruncCellHintText.ARow">
        <short>Row number for the hint text.</short>
      </element>

      <element name="TCustomGrid.GridColumnFromColumnIndex">
        <short>Returns the column number for the column given its index position.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.GridColumnFromColumnIndex.Result">
        <short/>
      </element>
      <element name="TCustomGrid.GridColumnFromColumnIndex.ColumnIndex">
        <short/>
      </element>

      <element name="TCustomGrid.GridMouseWheel">
        <short>Performs actions needed when the mouse wheel is scrolled in the grid.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.MoveNextSelectable"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GridMouseWheel.Shift">
        <short>Shift state modifier in effect for the action.</short>
      </element>
      <element name="TCustomGrid.GridMouseWheel.Delta">
        <short>Relative change in the current position for the action.</short>
      </element>

      <element name="TCustomGrid.HeaderClick">
        <short>Performs actions needed when a mouse click occurs in a header for a grid column.</short>
        <descr>
          <p>
            <var>HeaderClick</var> ensures that the value in <var>SortOrder</var> is toggled when <var>Index</var> contains the <var>SortColumn</var> defined for the grid control. SortOrder is set to <var>soAscending</var> when Index contains a column number other than SortColumn. SortColumn is updated in the method to use the value in Index as the active sort column.
          </p>
          <p>
            HeaderClick calls the <var>Sort</var> method to sort all non-fixed rows in the grid control using the content from the column number in Index.
          </p>
          <p>
            No actions are perfomed in the method when <var>ColumnClickSorts</var> is set to <b>False</b>.
          </p>
          <p>
            <var>IsColumn</var> indicates whether the header click applies to a column or a row. When set to <b>True</b>, the mouse click occurred in a fixed header for the column number in Index. This parameter implies that similar handling is provided in the method for a header click on a fixed header in a row. No actions are performed for a header click on a row.
          </p>
          <p>
            HeaderClick is overridden in descendent classes like <var>TCustomDrawGrid</var> to perform additional actions.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.HeaderClick.IsColumn">
        <short>True if the click occurred on a column header.</short>
      </element>
      <element name="TCustomGrid.HeaderClick.Index">
        <short>Column (or row) number for the header click.</short>
      </element>

      <element name="TCustomGrid.HeaderSized">
        <short>Performs actions needed when a column or a row has been resized.</short>
        <descr>
          <p>
            <var>HeaderSized</var> is used to perform actions needed when the header for a column or row has been resized in the grid control.
          </p>
          <p>
            <var>IsColumn</var> indicates whether the sizing action applies to a column or a row. When set to <b>True</b>, the column header has been resized. When set to <b>False</b>, the row header was resized.
          </p>
          <p>
            <var>Index</var> indicates the column or row number in the grid where the resizing action occurred.
          </p>
          <p>
            HeaderSized has an empty implementation in <var>TCustomGrid</var>. It is overidden in descendent classes like <var>TCustomDrawGrid</var> to perform additional actions.
          </p>
          <p>
            HeaderSized is called from methods like <var>MouseUp</var> (when column or row sizing is completed) and <var>DblClick</var> (when column sizing is enabled in the grid <var>Options</var>).
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.HeaderSized.IsColumn">
        <short>True if a column was resized, False if a Row was resize.</short>
      </element>
      <element name="TCustomGrid.HeaderSized.Index">
        <short>Column or row number for the resize operation.</short>
      </element>

      <element name="TCustomGrid.HeaderSizing">
        <short>Performs actions to resize a column or row to the specified size.</short>
        <descr>
          <p>
            HeaderSizing has an empty implementation in TCustomGrid. It is overridden in descendent classes.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.HeaderSizing.IsColumn">
        <short>True when the resize action is for a column, or False for a row.</short>
      </element>
      <element name="TCustomGrid.HeaderSizing.AIndex">
        <short>Column or row index resized in the method.</short>
      </element>
      <element name="TCustomGrid.HeaderSizing.ASize">
        <short>New size for the column or row.</short>
      </element>

      <element name="TCustomGrid.HideCellHintWindow">
        <short>Cancels the current hint display and restores the saved hint for the grid control.</short>
        <descr>
          <p>
            <var>HideCellHintWindow</var> is a method used to cancel the current hint display, and to restore the saved <var>Hint</var> for the grid control. HideCellHintWindow calls the <var>CancelHint</var> method in the <var>Application</var> singleton to discard the current hint window.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.InternalSetColCount">
        <short>Performs actions needed to set the column count in the grid control.</short>
        <descr>
          <p>
            Called when a new value is assigned to the ColCount property (SetColCount).
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.SetColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.InternalSetColCount.ACount">
        <short>New column count for the control </short>
      </element>

      <element name="TCustomGrid.IsColumnIndexValid">
        <short>Indicates if the specified index position is valid for the columns in the grid.</short>
        <descr>
          <p>
            Returns <b>True</b> when <var>AIndex</var> is a valid column index in the range <b>0..<var>ColCount</var>-1</b>.
          </p>
          <p>
            IsColumnIndexValid is used in several methods which access a column definition or data by its ordinal position in the grid control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.IsColumnIndexValid.Result">
        <short>True when Index is in range for the column definitions in the grid.</short>
      </element>
      <element name="TCustomGrid.IsColumnIndexValid.AIndex">
        <short>Index position examined in the method.</short>
      </element>

      <element name="TCustomGrid.IsRowIndexValid">
        <short>Indicates if the specified index position is valid for the rows in the grid.</short>
        <descr>
          <p>
            The return value is <b>True</b> when <var>AIndex</var> is in the range <b>0..<var>RowCount</var>-1</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsRowIndexValid.Result">
        <short>True when Index is in range for the rows in the grid.</short>
      </element>
      <element name="TCustomGrid.IsRowIndexValid.AIndex">
        <short>Index position examined in the method.</short>
      </element>

      <element name="TCustomGrid.IsColumnIndexVariable">
        <short>True when the column index is in the range FixedCols..ColCount-1.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.IsColumnIndexVariable.Result">
        <short>True when the column index is in the range FixedCols..ColCount-1.</short>
      </element>
      <element name="TCustomGrid.IsColumnIndexVariable.AIndex">
        <short>Column index position checked in the method.</short>
      </element>

      <element name="TCustomGrid.IsRowIndexVariable">
        <short>
          Indicates if the specified row is a valid, non-fixed row in the grid control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.IsRowIndexVariable.Result">
        <short>True when AIndex is a valid, non-fixed row in the grid control.</short>
      </element>
      <element name="TCustomGrid.IsRowIndexVariable.AIndex">
        <short>Row number to examine in the method.</short>
      </element>

      <element name="TCustomGrid.GetIsCellTitle">
        <short>Indicates if the cell at the specified position is a fixed column header.</short>
        <descr>
          <p>
            Returns <b>True</b> when all of the following conditions are satisfied:
          </p>
          <ul>
            <li>FixedRows contains a positive non-zero value</li>
            <li>ARow contains zero (<b>0</b>) (first row in the grid)</li>
            <li>ACol contains a value &gt;= FirstGridColumn</li>
          </ul>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.GetIsCellTitle.Result">
        <short>True if the cell is a fixed column header.</short>
      </element>
      <element name="TCustomGrid.GetIsCellTitle.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.GetIsCellTitle.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.GetIsCellSelected">
        <short>Gets the value for the indexed IsCellSelected property.</short>
        <descr>
          <p>
            Compares the cell coordinates in <var>ACol</var> and <var>ARow</var> to the current range selection(s) in the grid control. The return value is <b>True</b> if the cell is in the current range selection for the control.
          </p>
          <p>
            If <var>RangeSelectMode</var> is set to <var>rsmMulti</var>, all of the existing range selections are examined for the specified cell. The return is <b>True</b> when the cell is located in the array of rectangles used for multi-selections in the grid control.
          </p>
          <p>
            Otherwise, the return value is set to False.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.IsCellSelected"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetIsCellSelected.Result">
        <short>Boolean value for the indexed property.</short>
      </element>
      <element name="TCustomGrid.GetIsCellSelected.aCol">
        <short>Column number for the cell examined in the method.</short>
      </element>
      <element name="TCustomGrid.GetIsCellSelected.aRow">
        <short>Row number for the cell examined in the method.</short>
      </element>

      <element name="TCustomGrid.IsEmptyRow">
        <short>Indicates if non-fixed cells in the specified row are empty.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.GetCells"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsEmptyRow.Result">
        <short>True when all non-fixed cells in the specified row contain empty strings ('').</short>
      </element>
      <element name="TCustomGrid.IsEmptyRow.ARow">
        <short>Row number to examine in the method.</short>
      </element>

      <element name="TCustomGrid.IsMouseOverCellButton">
        <short>Indicates if the specified mouse position is over a button cell editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.IsMouseOverCellButton.Result">
        <short/>
      </element>
      <element name="TCustomGrid.IsMouseOverCellButton.X">
        <short>Screen coordinates for the mouse pointer.</short>
      </element>
      <element name="TCustomGrid.IsMouseOverCellButton.Y">
        <short>Screen coordinates for the mouse pointer.</short>
      </element>

      <element name="TCustomGrid.KeyDown">
        <short>Handles key down events for the grid control.</short>
        <descr>
          <p>
            <var>KeyDown</var> is overridden in <var>TCustomGrid</var> to ensure that keys handled by the grid or its <var>Editor</var> are properly applied to the control. KeyDown calls the inherited method on entry to signal the OnKeyDown event handler (when assigned) and any key handlers for the control.
          </p>
          <p>
            CanGridAcceptKey is called to determine whether <var>Key</var> and <var>Shift</var> are ignored in the control.
          </p>
          <p>
            KeyDown handles the following key codes:
          </p>
          <dl>
            <dt>VK_TAB</dt>
            <dd>
              Performs cell navigation when goTabs in included in the Options for the grid. Ensures that goAutoAddRowsSkipContentCheck in Options is supported. When TabAdvance is set to aaNone, the key and modifier are forwarded to the Editor control.
            </dd>
            <dt>VK_LEFT</dt>
            <dd>
              Moves to the previous cell when the Editor is not active.
            </dd>
            <dt>VK_RIGHT</dt>
            <dd>
              Moves to the next cell when the Editor is not active.
            </dd>
            <dt>VK_UP</dt>
            <dd>
              Moves the selection to the previous visible row.
            </dd>
            <dt>VK_DOWN</dt>
            <dd>
              Moves the selection to the next visible row.
            </dd>
            <dt>VK_PRIOR (Page Up)</dt>
            <dd>
              Moves upward in the grid by the number of visible rows.
            </dd>
            <dt>VK_NEXT (Page Down)</dt>
            <dd>
              Moves downward in the grid by the number of visible rows.
            </dd>
            <dt>VK_HOME</dt>
            <dd>
              Moves to the first non-fixed row in the grid. The current column is used. When goRelaxedRowSelect is included in Options, the selection is moved to the first non-fixed column in the current row.
            </dd>
            <dt>VK_END</dt>
            <dd>
              Moves to the last non-fixed row in the grid. The current column is used. When goRelaxedRowSelect is included in Options, the selection is moved to the last non-fixed column in the current row.
            </dd>
            <dt>VK_APPS (Menu Pop-up on PC keyboards)</dt>
            <dd>
              Displays the Pop-up menu for the cell Editor when editing is allowed in the column.
            </dd>
            <dt>VK_F2</dt>
            <dd>
              Selects and displays the cell Editor when editing is allowed in the column.
            </dd>
            <dt>VK_BACK (Backspace)</dt>
            <dd>
              Fowards the Backspace character (^H) to the cell Editor when editing is allowed in the column.
            </dd>
            <dt>VK_C</dt>
            <dd>
              Performs a copy to clipboard operation when ssCtrl or ssMeta is in the Shift modifier.
            </dd>
            <dt>VK_V</dt>
            <dd>
              Performs a paste from clipboard operation when ssCtrl or ssMeta is in the Shift modifier.
            </dd>
            <dt>VK_X</dt>
            <dd>
              Performs a cut to clipboard operation when ssShift is in the Shift modifier.
            </dd>
            <dt>VK_DELETE</dt>
            <dd>
              Clears the value in the cell Editor and redraws the current cell when editing is allowed for the column.
            </dd>
            <dt>VK_ESCAPE</dt>
            <dd>
              Resets the value in the cell Editor, and hides the Editor control when it is both assigned and visible.
            </dd>
          </dl>
          <p>
            When Key is handled in the method, it is set to 0 (zero).
          </p>
          <p>
            Called from EditorKeyDown when key down events are enabled in the EditorOptions for the control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
        </seealso>
      </element>
      <element name="TCustomGrid.KeyDown.Key">
        <short>Key code examined in the method.</short>
      </element>
      <element name="TCustomGrid.KeyDown.Shift">
        <short>Shift / Ctrl / Alt modifier for the key code.</short>
      </element>

      <element name="TCustomGrid.KeyUp" link="#lcl.controls.TWinControl.KeyUp"/>
      <element name="TCustomGrid.KeyUp.Key" link="#lcl.controls.TWinControl.KeyUp.Key"/>
      <element name="TCustomGrid.KeyUp.Shift" link="#lcl.controls.TWinControl.KeyUp.Shift"/>

      <element name="TCustomGrid.KeyPress">
        <short>Applies the specified key press to the control.</short>
        <descr>
        <p>
          <var> KeyPress</var> is a method used to apply the character in Key to the grid control. KeyPress is overridden to ensure that a key which originated from the grid control is applied properly to the cell <var>Editor</var> (when needed). It calls the inherited method on entry.
        </p>
        <p>
          The following key press values in <var>Key</var> are handled in the method:
        </p>
        <dl>
          <dt>Enter (#13)</dt>
          <dd>
            Gets and displays the cell Editor when EditMode is False and the column allows editing.
          </dd>
          <dt>Backspace (^H) and characters in the range #32..#255 (data)</dt>
          <dd>
            Applies the key press to the Editor.
          </dd>
        </dl>
        <p>
          When Key is handled in the method, it is set to #0 prior to exit.
        </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.KeyPress">TWinControl.KeyPress</link>
        </seealso>
      </element>
      <element name="TCustomGrid.KeyPress.Key">
        <short>Key press character examined in the method.</short>
      </element>

      <element name="TCustomGrid.LoadContent">
        <short>Loads values for the grid from the specified XML configuration file.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.LoadContent.cfg">
        <short>Configuration file loaded  in the method.</short>
      </element>
      <element name="TCustomGrid.LoadContent.Version">
        <short>Grid version number for the values processed in the method.</short>
      </element>

      <element name="TCustomGrid.LoadGridOptions">
        <short>Loads design-time grid options for an LCL version from an XML configuration file.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.LoadGridOptions.cfg">
        <short>XML configuration file instance examined in the method.</short>
      </element>
      <element name="TCustomGrid.LoadGridOptions.Version">
        <short>LCL version for the grid option data.</short>
      </element>

      <element name="TCustomGrid.Loaded">
        <short>
          Performs actions when the component has been loaded using LCL component streaming.
        </short>
        <descr>
          <p>
            Calls the inherited method on entry, and calls VisualChange to resize columns and redraw the grid control.
          </p>
        </descr>
        <seealso/>
      </element>

        <element name="TCustomGrid.LockEditor">
        <short>Locks the Editor so that it cannot accept input or changes.</short>
        <descr>
          <p>
            Increments the value for the internal lock count used for the Editor.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.MouseButtonAllowed">
        <short>Indicates if the specified mouse button is a mouse down event used in the control.</short>
        <descr>
          <p>
            Called from the MouseDown method to ignore Right mouse clicks at design-time.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.MouseButtonAllowed.Result">
        <short>True if the specified mouse button is valid for the grid control.</short>
      </element>
      <element name="TCustomGrid.MouseButtonAllowed.Button">
        <short>TMouseButton value examined in the method.</short>
      </element>

      <element name="TCustomGrid.MouseDown">
        <short>Handles mouse down events for the grid control.</short>
        <descr>
          <p>
            <var>MouseDown</var> is overridden in <var>TCustomGrid</var> to ensure that cached grid information in <var>GCache</var> is updated for mouse down events, and both GridState and GridFlags are updated for the control.
          </p>
          <p>
            MouseDown calls the inherited method to handle focus changes for the control and drag operations. The OnMouseDown event handler is signalled (when assigned) by the ancestor.
          </p>
          <p>
            No additional actions are performed in the method at design-time, or when the mouse Button is not allowed in the grid control.
          </p>
          <p>
            MouseDown ensures that the grid control is focused and updates GCache with the coordinates for trhe mouse down event. The grid "hot" zone in the cached information determines the value assigned to GridState, GridFlags, CursorState and the actions perfomed for the mouse event.
          </p>
          <p>
            <b>gzFixedCells</b>
          </p>
          <p>
            Sets GridState to gsColSizing when both goColSizing and goFixedColSizing have been included in the Options and the cursor state is gcsColWidthChanging.
          </p>
          <p>
            Otherwise, GridState is set to gsHeaderClicking. The cell is drawn in a "pushed" state when goHeaderPushedLook is included in Options and the grid zone is in HeaderPushZones.
          </p>
          <p>
            <b>gzFixedCols</b>
          </p>
          <p>
            GridState is set to gsColSizing when goColSizing has been included in the Options and the cursor state is gcsColWidthChanging.
          </p>
          <p>
            Otherwise, GridState is set to gsColMoving. The cell is drawn in a "pushed" state when goHeaderPushedLook is included in Options and the grid zone is in HeaderPushZones.
          </p>
          <p>
            <b>gzFixedRows</b>
          </p>
          <p>
            GridState is set to gsRowMoving when goRowSizing is included in Options and CursorState is gcsRowHeightChanging.
          </p>
          <p>
            Otherwise, GridState is set to gsRowMoving. The cell is drawn using the "pushed" state when goHeaderPushedLook is included in Options and the grid zone is in HeaderPushZones.
          </p>
          <p>
            <b>gzNormal</b>
          </p>
          <p>
            When the mouse down event is over a button-style cell, it is drawn in the "pushed" state. No additional actions are needed for the event.
          </p>
          <p>
            Other cells use the values in Options and CursorState to determine whether the mouse event is for column sizing, selection, or enabling/disabling the cell editor. GridState is updated to the corresponding value.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
        </seealso>
      </element>
      <element name="TCustomGrid.MouseDown.Button">
        <short>Mouse button for the event.</short>
      </element>
      <element name="TCustomGrid.MouseDown.Shift">
        <short>Shift state for the event.</short>
      </element>
      <element name="TCustomGrid.MouseDown.X">
        <short>Horizontal coordinate for the mouse event.</short>
      </element>
      <element name="TCustomGrid.MouseDown.Y">
        <short>Vertical coordinate for the mouse event.</short>
      </element>

      <element name="TCustomGrid.MouseMove">
        <short>Applies a change in the mouse pointer position to the grid control.</short>
        <descr>
          <p>
            <var>MouseMove</var> is an overridden method in <var>TCustomGrid</var>. It calls the inherited method on entry to update the DragManager when it is active, and to signal the OnMouseMove event handler (when assigned). No additional actions are performed in the method if a drag operation is already active in the DragManager.
          </p>
          <p>
            If the mouse coordinates are located in the fixed headers for the control, hot tracking and cell down / pushed drawing are applied to the grid control when enabled in Options.
          </p>
          <p>
            Cell selections are handled for the mouse movement depending on grid state values and Options set for the control. No additional actions are performed in the method when gsHeaderClicking or gsButtonColumnClicking are in the grid state for the control. Performs the following for a corresponding mouse movement:
          </p>
          <dl>
            <dt>
              Extend an active selection in the control when needed.
            </dt>
            <dd>
              Calls MoveExtend when the mouse pointer is not in the current selection, not in a fixed header area for the control, and editing is not active or allowed. Occurs when gsSelecting is in the grid state values for the control.
            </dd>
            <dt>
              Move the column under the mouse pointer.
            </dt>
            <dd>
              Occurs when goColMoving is in Options.
            </dd>
            <dt>
              Resize the column under the mouse pointer.
            </dt>
            <dd>
              Occurs when goColSizing is in Options.
            </dd>
            <dt>
              Resize the row under the mouse pointer.
            </dt>
            <dd>
              Occurs when goRowSizing is in Options.
            </dd>
          </dl>
          <p>
            MouseMove sets the Hint displayed for the cell under the mouse pointer when ShowHint is enabled. Values in Hint, CellHintPriority, Options, and the OnGetCellHint event hander are used for the purpose. If the mouse pointer is not over a cell, the Hint for the application is reset to a previous hint or an empty string ('') when saved hint text is not available.
          </p>
          <p>
            Called from WMMouseMove when a LM_MOUSEMOVE window message is handled for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
          <link id="#lcl.controls.TControl.WMMouseMove">TControl.WMMouseMove</link>
        </seealso>
      </element>
      <element name="TCustomGrid.MouseMove.Shift">
        <short>Ctrl, Alt, or Shift modifier for the mouse event.</short>
      </element>
      <element name="TCustomGrid.MouseMove.X">
        <short>Horizontal coordinate for the mouse pointer.</short>
      </element>
      <element name="TCustomGrid.MouseMove.Y">
        <short>Vertical coordinate for the mouse pointer.</short>
      </element>

      <element name="TCustomGrid.MouseUp">
        <short>
          Handles a mouse up event for the grid control.
        </short>
        <descr>
          <p>
            <var>MouseUp</var> is an overridden method in <var>TCustomGrid</var> used to perform actions needed when a mouse up event has been received for the grid control. It calls the inherited method on entry to signal the OnMouseUp event handler (when assigned). MouseUp performs additional actions based on the grid zone where the mouse up event occurred and the current grid state flags for the control.
          </p>
          <p>
            For example:
          </p>
          <dl>
            <dt>
              Mouse event on a fixed header for the grid.
            </dt>
            <dd>
              Calls HeaderClick for the column header under the mouse pointer. Changes the sort order in the column when enabled. Occurs when gsHeaderClicking is in the grid state flags.
            </dd>
            <dt>
              Mouse event on a column button in the grid header.
            </dt>
            <dd>
              Calls DoEditButton to signal the OnEditButtonClick or OnButtonClick event handlers (when assigned). Occurs when gsButtonColumnClicking is in the grid state flags.
            </dd>
            <dt>
              Mouse event on a non-fixed cell in the grid control.
            </dt>
            <dd>
              Selects and displays an editor for the cell, and calls the CellClick method to apply the mouse event to the cell. If a selection is already active in the control, it is extended to include the range of cells ending at the mouse pointer. Occurs when gsNormal or gsSelecting is in the grid state flags.
            </dd>
            <dt>
              The mouse event occurs when dragging a column header.
            </dt>
            <dd>
              Moves the dragged column to the column position under the mouse pointer. Calls HeaderClick to refresh the sort order for cells in the column. Occurs when gsColMoving is in the grid state flags.
            </dd>
            <dt>
              The mouse event occurs when dragging a row header.
            </dt>
            <dd>
              Moves the dragged row to the row position under the mouse pointer. Calls HeaderClick to refresh the sort order for cells in the row. Occurs when gsRowMoving is in the grid state flags.
            </dd>
            <dt>
              The mouse event occurs when resizing a column header.
            </dt>
            <dd>
              Calls ResizeColumn to apply the new column size, and calls the HeaderSized method for the resized column number. Occurs when gsColSizing is in the grid state flags.
            </dd>
            <dt>
              The mouse event occurs when resizing a row header.
            </dt>
            <dd>
              Calls ResizeRow to apply the new row size, and calls the HeaderSized method for the resized row  number. Occurs when gsRowSizing is in the grid state flags.
            </dd>
          </dl>
          <p>
            Values in GridFlags are updated to remove flag values for the handled actions, and the grid state is set to gsNormal prior to exit.
          </p>
          <p>
            MouseUp is called when window messages are handled in the WMLButtonUp, WMRButtonUp, and WMXButtonUp methods in the ancestor class.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridFlags"/>
          <link id="TGridState"/>
          <link id="#lcl.controls.TControl.MouseUp">TControl.MouseUp</link>
          <link id="#lcl.controls.TControl.OnMouseUp">TControl.OnMouseUp</link>
          <link id="#lcl.controls.TControl.WMLButtonUp">TControl.WMLButtonUp</link>
          <link id="#lcl.controls.TControl.WMRButtonUp">TControl.WMRButtonUp</link>
          <link id="#lcl.controls.TControl.WMXButtonUp">TControl.WMXButtonUp</link>
        </seealso>
      </element>
      <element name="TCustomGrid.MouseUp.Button">
        <short>Mouse button for the event notification.</short>
      </element>
      <element name="TCustomGrid.MouseUp.Shift">
        <short>Ctrl, Alt, or Shift modifier for the mouse event.</short>
      </element>
      <element name="TCustomGrid.MouseUp.X">
        <short>Horizontal coordinate for the mouse pointer.</short>
      </element>
      <element name="TCustomGrid.MouseUp.Y">
        <short>Vertical  coordinate for the mouse pointer.</short>
      </element>

      <element name="TCustomGrid.MoveExtend">
        <short>Moves the selected cell or extends a selection using the specified column and row values.</short>
        <descr>
          <p>
            Calls TryMoveSelection to perform the selection change using the specified arguments. No actions are performed in the method when:
          </p>
          <ul>
            <li>
              FixedGrid is True. All cells are fixed and cannot be selected.
            </li>
            <li>
              DCol and DRow are not valid for the Col, Row, ColCount or RowCount for the grid control.
            </li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomGrid.TryMoveSelection"/>
          <link id="TCustomGrid.SelectCell"/>
          <link id="TCustomGrid.FixedGrid"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.MoveExtend.Result">
        <short>True if the selection was moved or extended in the method.</short>
      </element>
      <element name="TCustomGrid.MoveExtend.Relative">
        <short>
          True if the selection is extended by the relative number of columns and rows. False to move the selection to the specified cell coordinates.
        </short>
      </element>
      <element name="TCustomGrid.MoveExtend.DCol">
        <short>Column number for the selection, or the delta when a selection is extended.</short>
      </element>
      <element name="TCustomGrid.MoveExtend.DRow">
        <short>Row number for the selection, or the delta when a selection is extended.</short>
      </element>
      <element name="TCustomGrid.MoveExtend.ForceFullyVisible">
        <short>True if the cell in DCol and DRow must be fully visible after the selection change.</short>
      </element>

      <element name="TCustomGrid.MoveNextAuto">
        <short>Moves to the next cell in the auto-advance sequence.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.MoveNextAuto.Result">
        <short/>
      </element>
      <element name="TCustomGrid.MoveNextAuto.Inverse">
        <short/>
      </element>

      <element name="TCustomGrid.MoveNextSelectable">
        <short>Moves to the next selectable cell.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.Result">
        <short/>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.Relative">
        <short/>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.DCol">
        <short/>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.DRow">
        <short/>
      </element>

      <element name="TCustomGrid.MoveSelection">
        <short>Signals the OnSelection event handler for a new mouse selection.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.Notification">
        <short>
          Performs actions needed when the specified component is added to or removed from the control.
        </short>
        <descr>
          <p>
            Notification is an overridden method in TCustomGrid. It calls the inherited method on entry to handle notifications in ancestor classes and their child components. It ensures that the reference in TitleImageList is set <b>Nil</b> when the component is removed from the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleImageList"/>
          <link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
          <link id="#rtl.classes.TComponent">TComponent</link>
        </seealso>
      </element>
      <element name="TCustomGrid.Notification.AComponent">
        <short>Component for the notification.</short>
      </element>
      <element name="TCustomGrid.Notification.Operation">
        <short>Operation performed for the specified component.</short>
      </element>

      <element name="TCustomGrid.OffsetToColRow">
        <short>Moves to a column or row located at the specified offset.</short>
        <descr/>
        <seealso/>
        <version>
          Index and Rest arguments were changed to output parameters in LCL version 2.1 (revision 65087).
        </version>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Result">
        <short>True if a column and row number was identified for the specified offset.</short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.IsCol">
        <short>True if the offset is for a column, False for a row.</short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Physical">
        <short>True for a physical offset, False for a logical offset.</short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Offset">
        <short>Offset in pixels for the column or row.</short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Index">
        <short>Index position for the column or row in the specified offset.</short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Rest">
        <short>Remaining pixels stating at the value in Index.</short>
      </element>

      <element name="TCustomGrid.Paint">
        <short>Draws the edges, borders, and rows in the grid control.</short>
        <descr>
          <p>
            <var>Paint</var> is an overridden method in <var>TCustomGrid</var> used to update and draw the grid control.
          </p>
          <p>
            Values in <var>GridFlags</var> and <var>GCache</var> are examined to determine if a visual change to the columns or the client area for the control is in progress. For either condition, the <var>ResetSizes</var> method is called to handle the visual change(s) and the flag values are removed from GridFlags.
          </p>
          <p>
            Paint calls the inherited method to signal the <var>OnPaint</var> event handler in the ancestor class.
          </p>
          <p>
            If there are no other active updates for the control, methods are called to draw the edges and all visible rows in the control. If a column move operation is in effect, the <var>Canvas</var> is updated to display a drag cursor with the color defined in the grid. Borders for the control are drawn prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
        </seealso>
      </element>

      <element name="TCustomGrid.PickListItemSelected">
        <short>Signals the OnPickListSelect event handler when a selection is made in a picklist.</short>
        <descr>
          <p>
            Called from the Select method when the text for the cell value is stored.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.PickListItemSelected.Sender">
        <short>Object for the event notification.</short>
      </element>

      <element name="TCustomGrid.PrepareCanvas">
        <short>Prepares the canvas for drawing the cell at the specified location.</short>
        <descr>
          <p>
            <var>PrepareCanvas</var> ensures that the <var>Canvas</var> for the control is properly configured to draw the cell at ACol and ARow using the drawing state specified in <var>AState</var>. Flags in AState and the values from the <var>Options</var>, <var>Enabled</var>, <var>DefaultDrawing</var> and <var>EditorMode</var>  properties determine the <var>Pen</var>, <var>Brush</var>, <var>Font</var>, and <var>TextStyle</var> settings used in the control <var>Canvas</var>.
          </p>
          <p>
            PrepareCanvas is called from <var>ShowCellHintWIndow</var> when truncated cell hints are enabled in the <var>Options</var> for the grid. It is also called from <var>DrawCell</var> before drawing the filled rectangle and grid lines for the cell.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.PrepareCanvas.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.PrepareCanvas.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomGrid.PrepareCanvas.aState">
        <short>Drawing state applied to the canvas for the specified cell.</short>
      </element>

      <element name="TCustomGrid.PrepareCellHints">
        <short>Prepares the control to display hints for a cell.</short>
        <descr>
          <p>
            <var>PrepareCellHints</var> has an empty implementation in <var>TCustomGrid</var>, and may be overridden or re-implemented in descendent classes (like TCustomDBGrid / TDBGrid).
          </p>
          <p>
            PrepareCellHints is called from the <var>ShowCellHintWIndow</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ShowCellHintWIndow"/>
          <link id="#lcl.dbgrids.TCustomDBGrid.PrepareCellHints">TCustomDBGrid.PrepareCellHints</link>
        </seealso>
      </element>
      <element name="TCustomGrid.PrepareCellHints.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.PrepareCellHints.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.ResetDefaultColWidths">
        <short>Restores the default width for columns in the grid.</short>
        <descr>
          <p>
            <var>ResetDefaultColWidths</var> updates an internal member with the list of column widths currently in use for the grid. The width for each column is set to <b>-1</b> to indicate that an explicit value has not been assigned for the column width.
          </p>
          <p>
            ResetDefaultColWidths calls the <var>VisualChange</var> method after resetting the column widths to their default values. No actions are performed in the method when <var>AutoFillColumns</var> contains <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.VisualChange"/>
          <link id="TCustomGrid.AutoFillColumns"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ResetEditor">
        <short>Resets the value in the cell Editor, and optionally re-displays and selects it content.</short>
        <descr>
          <p>
            <var>ResetEditor</var> is a procedure used to reset the value in the cell Editor to the stored content for  the current cell in the grid control.
          </p>
          <p>
            ResetEditor calls <var>EditorGetValue</var> to retrieve the value for the current cell and to perform validation using the <var>OnValidateEntry</var> event handler (when assigned). If the column allows editing and <var>goAlwaysShowEditor</var> has been included in the <var>Options</var> for the grid, the <var>EditorShow</var> method is called to re-display the cell Editor and re-select all of the cell content.
          </p>
          <p>
            ResetEditor is called from the <var>DoExit</var> method when the grid control receives the <var>CM_EXIT</var> control message.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.ResetLastMove">
        <short>Resets the member used to track the last row or column movement.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ResetOffset">
        <short>Resets the offset, checking columns and rows if needed.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ResetOffset.chkCol">
        <short/>
      </element>
      <element name="TCustomGrid.ResetOffset.ChkRow">
        <short/>
      </element>

      <element name="TCustomGrid.ResetSizes">
        <short>Resets the internal column sizes.</short>
        <descr>
          <p>
            No actions are performed in the method when the internal list of column sizes has not been allocated, during component streaming, or when the handle has not been allocated for the grid control.
          </p>
          <p>
            Calls UpdateCachedSizes to recalculate the cached grid information in GCache. Calls CacheVisibleGrid to cache the current visible grid (excluding fixed cells).
          </p>
          <p>
            Called from the Paint method when the client width or height has changed for the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.ResizeColumn">
        <short>Resizes the specified column number to the given width.</short>
        <descr>
          <p>
            <var>ResizeColumn</var> is a method used to set the width for the column number specified in <var>ACol</var> to to the value in <var>AWidth</var>.
          </p>
          <p>
            ResizeColumn ensures that the value in AWidth is at least <b>0</b> (<b>zero</b>). A negative column size is invalid. The value in AWidth is stored to the <var>ColWidths</var> property at the index position in ACol.
          </p>
          <p>
            Use <var>ResizeRow</var> or <var>RowHeights</var> to change the height for a specific row in the grid control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.ResizeColumn.aCol">
        <short>Column number resized in the method.</short>
      </element>
      <element name="TCustomGrid.ResizeColumn.aWidth">
        <short>New width for the column.</short>
      </element>

      <element name="TCustomGrid.ResizeRow">
        <short>Resizes the specified row number to the given height.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ResizeRow.aRow">
        <short>Row number resized in the method.</short>
      </element>
      <element name="TCustomGrid.ResizeRow.aHeight">
        <short>New height for the row.</short>
      </element>

      <element name="TCustomGrid.RowHeightsChanged">
        <short>Performs actions needed when the values in RowHeights have been changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.SaveContent">
        <short> Saves design-time configuration, column, and row settings to an XML file.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.SaveContent.cfg">
        <short>TXMLConfig instance where the content is stored.</short>
      </element>

      <element name="TCustomGrid.SaveGridOptions">
        <short>Saves grid options to the specified XML configuration file.</short>
        <descr>
          <p>
            Stores <var>TGridOption</var> and <var>TGridOption2</var> enumeration values found in the <var>Options</var> and <var>Options2</var> properties to the XML configuration file specified in <var>cfg</var>. Used in the implementation of the <var>SaveContent</var> method.
          </p>
          <p>
            Use <var>LoadContent</var> to load option settings into the current grid class instance.
          </p>
        </descr>
        <seealso>
          <link id="TGridOption"/>
          <link id="TGridOption2"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.Options2"/>
          <link id="TCustomGrid.SaveContent"/>
          <link id="TCustomGrid.LoadContent"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SaveGridOptions.cfg">
        <short>XML configuration file where values are stored.</short>
      </element>

      <element name="TCustomGrid.ScrollBarRange">
        <short>Sets  the range for the specified scrollbar.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ScrollBarRange.Which">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollBarRange.aRange">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollBarRange.aPage">
        <short/>
      </element>

      <element name="TCustomGrid.ScrollBarPosition">
        <short>Sets the position for the specified scrollbar to the given value.</short>
        <descr>
          <p>
            <var>ScrollBarPosition</var> is a method used to set position for the scrollbar specified in <var>Which</var> to the new <var>Value</var>.
          </p>
          <p>
            Which contains either SB_Horz or SB_Vert, and identifies the scrollbar affected in the method.
          </p>
          <p>
            Value contains the new position for the scrollbar.
          </p>
          <p>
            ScrollBarPosition uses the SetScrollInfo routine to update the scrollbar position. It allocates the TScrollInfo structure and stores Value as the scrollbar position in the structure.
          </p>
          <p>
            ScrollBarPosition calls ScrollBarIsVisible to determine if the scrollbar in Which is visible. The visibility is used when calling SetScrollInfo.
          </p>
          <p>
            No actions are performed in the method if the Handle has not been allocated for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ScrollBarPage"/>
          <link id="TCustomGrid.ScrollBarRange"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ScrollBarPosition.Which">
        <short>Scrollbar updated in the method.</short>
      </element>
      <element name="TCustomGrid.ScrollBarPosition.Value">
        <short>New position for the scrollbar.</short>
      </element>

      <element name="TCustomGrid.ScrollBarIsVisible">
        <short>Returns True if the specified scrollbar is visible.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ScrollBarIsVisible.Result">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollBarIsVisible.Which">
        <short/>
      </element>

      <element name="TCustomGrid.ScrollBarPage">
        <short>Performs a page movement of the specified scrollbar.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.ScrollBarPage.Which">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollBarPage.aPage">
        <short/>
      </element>

      <element name="TCustomGrid.ScrollBarShow">
        <short>ScrollBarShow method.</short>
        <descr>
          <p>
            <var>ScrollBarShow</var> is a procedure used to control the visibility of scrollbars in the grid.
          </p>
          <p>
            <var>Which</var> is an <var>Integer</var> argument that specifies the scrollbar(s) affected in the method, and can include the following constant values:
          </p>
          <dl>
            <dt>SB_HORZ</dt>
            <dd>Horizontal scrollbar</dd>
            <dt>SB_VERT</dt>
            <dd>Vertical scrollbar</dd>
            <dt>SB_BOTH</dt>
            <dd>Both horizontal and vertical scrollbars</dd>
          </dl>
          <p>
            <var>aValue</var> is a <var>Boolean</var> argument that indicates if the specified scrollbar(s) are visible or hidden. When aValue contains <b>True</b>, the corresponding scrollbar(s) are displayed. Otherwise, they are hidden.
          </p>
          <p>
            No actions are performed in the method if a handle has not been allocated for the grid  (<var>HandleAllocated</var> returns <b>False</b>). ScrollBarShow ensures that <var>gfUpdatingScrollbar</var> is included in the grid flags prior to calling the <var>ShowScrollBar</var> routine in the LCL interface. The flag value is removed immediately after updating the scrollbar display. Internal members used to track scrollbar visibility are set to the state requested in AValue.
          </p>
        </descr>
        <seealso>
          <link id="TGridFlags"/>
          <link id="TGridFlagsOption"/>
          <link id="#lcl.controls.TWinControl.HandleAllocated">TWinControl.HandleAllocated</link>
          <link id="#lcl.lclintf.ShowScrollBar">ShowScrollBar</link>
        </seealso>
      </element>
      <element name="TCustomGrid.ScrollBarShow.Which">
        <short>Scrollbar(s) affected in the method.</short>
      </element>
      <element name="TCustomGrid.ScrollBarShow.aValue">
        <short>True indicates the scrollbar(s) are visible.</short>
      </element>

      <element name="TCustomGrid.ScrollBarAutomatic">
        <short>
          Indicates whether an automatic scroll bar of the given type is used on the grid control.
        </short>
        <descr>
          <p>
            Translates the value in Which to the automatic equivalent (ssAutoVertical, ssAutoHorizontal, ssAutoBoth), and checks the ScrollBars property for the value(s).
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ScrollBars"/>
          <link id="#lcl.stdctrls.TScrollStyle">TScrollStyle</link>
        </seealso>
      </element>
      <element name="TCustomGrid.ScrollBarAutomatic.Result">
        <short>True if an automatic scroll bar is used for the specified type.</short>
      </element>
      <element name="TCustomGrid.ScrollBarAutomatic.Which">
        <short>Scroll bar type (ssHorizontal or ssVertical) checked in the method.</short>
      </element>

      <element name="TCustomGrid.ScrollBy">
        <short>Scrolls the non-fixed area for the control by the specified delta values.</short>
        <descr>
          <p>
            Calls ScrollWindowEx to perform the scrolling operation for the non-fixed client area in the control. No scrolling is performed when both DeltaX and DeltaY contain 0 (zero).
          </p>
          <p>
            Updates the visible grid area in the cached information for the control, and recalculates the scrollbar ranges.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.ScrollBy">TWinControl.ScrollBy</link>
        </seealso>
      </element>
      <element name="TCustomGrid.ScrollBy.DeltaX">
        <short/>
      </element>
      <element name="TCustomGrid.ScrollBy.DeltaY">
        <short/>
      </element>

      <element name="TCustomGrid.SelectEditor">
        <short>Gets the cell editor for the current cell, and sets its PopupMenu.</short>
        <descr>
          <p>
            Calls <var>GetDefaultEditor</var> to retrieve the default <var>Editor</var> used for the column where the current cell is located (<var>Col</var>).
          </p>
          <p>
            In situations where the current cell is not selectable in the grid, when <var>FixedGrid</var> is <b>True</b> as an example, the default cell Editor is set to <b>Nil</b>. The <var>OnSelectEditor</var> event handler is signalled (when assigned) to determine if a cell Editor (or none) is available for the editable column.
          </p>
          <p>
            If an Editor has been assigned,  but does not have a PopupMenu, the <var>PopupMenu</var> for the grid control is used in the Editor.
          </p>
          <p>
            SelectEditor is called when <var>goEditing</var> is included in the <var>Options</var> for the grid control. It is also called when Options is configured to always display cell editors (<var>goAlwaysShowEditor</var>), and an editable non-fixed cell is selected in the <var>MouseDown</var> method. Similarly, it is called from <var>MouseUp</var> when a mouse click selects a new editable cell in the grid control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.SelectCell">
        <short>Determines whether the specified cell can be selected in the grid control.</short>
        <descr>
          <p>
            <var>SelectCell</var> is a <var>Boolean</var> function used to determine whether the cell specified in <var>ACol</var> and <var>ARow</var> can be selected in the grid control. The return value is <b>True</b> when both <var>ColWidths</var> and <var>RowHeights</var> have positive non-zero values for the column and row numbers where the cell is located.
          </p>
          <p>
            SelectCell is used in the implementation of methods like <var>TryMoveSelection</var>, <var>CheckPosition</var>, <var>SelectEditor</var>, and <var>GetDeltaMoveNext</var>. It is overridden in <var>TCustomDrawGrid</var> to signal the <var>OnSelectCell</var> event handler (when assigned).
          </p>
          <p>
            Component developers may use the <var>SelectCell</var> method to react to focus changes. The <var>Result</var> is true if the cell can be selected.
          </p>
        </descr>
      </element>
      <element name="TCustomGrid.SelectCell.Result">
        <short>True when the cell can be selected in the grid control.</short>
      </element>
      <element name="TCustomGrid.SelectCell.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.SelectCell.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.SetCanvasFont">
        <short>Sets the Canvas font to the specified value.</short>
        <descr>
          <p>
            <var>SetCanvasFont</var> is used to assign the <var>TFont</var> instance in <var>AFont</var> to the <var>Canvas</var> for the grid control.
          </p>
          <p>
            Different fonts can be used to render the title in fixed headers and the data in the cells. The font used determined (and assigned) when the PrepareCanvas method configures the Canvas to draw cells in the grid. SetCanvasFont ensures that new font is stored in an internal member when the font is assigned to the Canvas.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.SetCanvasFont.aFont">
        <short>Font applied to the canvas for the grid.</short>
      </element>

      <element name="TCustomGrid.SetColCount">
        <short>Sets the value in the ColCount property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColCount.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetColor">
        <short>Sets the value in the Color property.</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.Color">TControl.Color</link>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColor.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetColRow">
        <short>Makes the specified column and row the selected cell in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.SetColRow.ACol">
        <short>Column number for the selected cell.</short>
      </element>
      <element name="TCustomGrid.SetColRow.ARow">
        <short>Row number for the selected cell.</short>
      </element>

      <element name="TCustomGrid.SetCursor">
        <short>Changes the cursor shape in the grid to the specified value.</short>
        <descr>
          <p>
            <var>SetCursor</var> is an overridden method in <var>TCustomGrid</var>. SetCursor calls the inherited method to perform the <var>CM_CURSORCHANGED</var> message for the control, and calls <var>ChangeCursor</var> to save the previous Cursor and apply the shape in <var>AShape</var> to the <var>Cursor</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CursorState"/>
          <link id="TCustomGrid.ColSizingCursor"/>
          <link id="TCustomGrid.RowSizingCursor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetCursor.AValue">
        <short>Cursor shape used for the mouse pointer in the grid.</short>
      </element>

      <element name="TCustomGrid.SetEditText">
        <short>Sets the value used in the cell Editor to the specified text.</short>
        <descr>
          <p>
            Sets the the text displayed in the <var>Editor</var> for the cell at the position specified in <var>ACol</var> and <var>ARow</var> to the given value.
          </p>
          <p>
            <var>SetEditText</var> has an empty implementation in <var>TCustomGrid</var>. It is overridden in <var>TCustomDrawGrid</var> to signal the <var>OnSetEditText</var> event handler (when assigned).
          </p>
          <p>
            SetEditText is used in <var>KeyDown</var> when the <b>Escape</b> key (<b>VK_ESCAPE</b>) is not handled by the grid control. It is called from the <var>EditorGetValue</var> method when a visible cell Editor is updated. It is called from <var>EditorTextChanged</var> method when the value in a cell Editor has been altered using the <var>Change</var> or <var>Select</var> methods in the editor control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.SetEditText.ACol">
        <short>Column number for the editor value.</short>
      </element>
      <element name="TCustomGrid.SetEditText.ARow">
        <short>Row number for the editor value.</short>
      </element>
      <element name="TCustomGrid.SetEditText.Value">
        <short>New value for the cell Editor.</short>
      </element>

      <element name="TCustomGrid.SetBorderStyle">
        <short>Sets the value for the BorderStyle property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.BorderStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetBorderStyle.NewStyle">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetFixedColor">
        <short>Sets the value for the FixedColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.FixedColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFixedColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetFixedCols">
        <short>Sets the value for the FixedCols property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFixedCols.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetFixedRows">
        <short>Sets the value for the FixedRows property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.FixedRows"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFixedRows.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.SetRawColWidths">
        <short>Sets the width for the specified column number in the internal list.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.SetRawColWidths.ACol">
        <short>Column number for the specified width.</short>
      </element>
      <element name="TCustomGrid.SetRawColWidths.AValue">
        <short>Width in pixels for the specified column.</short>
      </element>

      <element name="TCustomGrid.SetSelectedColor">
        <short>Sets the value for the SelectedColor property.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SelectedColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetSelectedColor.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomGrid.ShowCellHintWindow">
        <short>Gets and displays the cell hint(s) for the current cell in the grid.</short>
        <descr>
          <p>
            <var>ShowCellHintWindow</var> is a procedure used to gets the value(s) and display cell hint(s) for the cell located at the screen position in <var>APoint</var>. Values in the <var>Options</var> and <var>CellHintPriority</var> properties determine the text available for use as cell hints.
          </p>
          <p>
            <var>GetCellHintText</var> and <var>GetTruncCellHintText</var> are called to get the corresponding hint text for the options and hint priority. <var>AddToHint</var> is called to apply the derived text to the values displayed in the control using its <var>Hint</var> property. <var>Application.ActivateHint</var> is called to display the hint window.
          </p>
          <p>
            No actions are performed in the method when <var>ShowHints</var> contains <b>False</b>,  when the mouse pointer is not positioned over a grid cell, when <var>EditorMode</var> is <b>True</b>, or at design-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.CellHintPriority"/>
          <link id="TCustomGrid.GetCellHintText"/>
          <link id="TCustomGrid.GetTruncCellHintText"/>
          <link id="TCustomGrid.HideCellHintWindow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ShowCellHintWindow.APoint">
        <short>Screen coordinates for the mouse pointer.</short>
      </element>

      <element name="TCustomGrid.SizeChanged">
        <short>Performs actions needed when the number or columns or rows has been changed.</short>
        <descr>
          <p>
            <var>SizeChanged</var> has an empty implementation in <var>TCustomGrid</var>. It is overridden in <var>TCustomDrawGrid</var> to perform a notification when the column and/or row count has been changed for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.SizeChanged.OldColCount">
        <short>Previous number of columns.</short>
      </element>
      <element name="TCustomGrid.SizeChanged.OldRowCount">
        <short>Previous number of rows.</short>
      </element>

      <element name="TCustomGrid.Sort">
        <short>Sorts rows or columns in the grid.</short>
        <descr>
          <p>
            <var>Sort</var> is a method used to sort items in the grid. When <var>ColSorting</var> is <b>True</b>, it sorts the items in a column. Otherwise, it sorts a row. The three index values specify the items to be sorted.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.Sort.ColSorting">
        <short>Indicates if the sort is performed for a column or a row.</short>
      </element>
      <element name="TCustomGrid.Sort.Index">
        <short/>
      </element>
      <element name="TCustomGrid.Sort.IndxFrom">
        <short/>
      </element>
      <element name="TCustomGrid.Sort.IndxTo">
        <short/>
      </element>

      <element name="TCustomGrid.StartPushCell">
        <short>Starts an operation to render a cell in its "pushed" state.</short>
        <descr>
          <p>
            StartPushCell updates the GridState property to the value gsButtonColumnClicking, and calls the DoPushCell method to cache and redraw the clicked cell.
          </p>
          <p>
            StartPushCell is called from the MouseDown method when a mouse click has occurred over a cell using a button-style Editor in the non-fixed area for the grid control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.TopLeftChanged">
        <short>Signals the OnTopLeftChanged event handler (when assigned) at run-time.</short>
        <descr>
          <p>
            TopLeftChanged occurs when the origin for the scrollable area in the control has been changed.
          </p>
          <p>
            <var>TopLeftChanged</var> is called from methods like <var>TrySmoothScrollBy</var>, <var>UpdateCachedSizes</var>, and <var>FixPosition</var>. It is also called when the <var>AutoFillColumns</var> property is set to <b>True</b>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.TryMoveSelection">
        <short>Tries to move the selection by the specified offset; returns True if successful.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.TryMoveSelection.Result">
        <short/>
      </element>
      <element name="TCustomGrid.TryMoveSelection.Relative">
        <short/>
      </element>
      <element name="TCustomGrid.TryMoveSelection.DCol">
        <short/>
      </element>
      <element name="TCustomGrid.TryMoveSelection.DRow">
        <short/>
      </element>

      <element name="TCustomGrid.UnLockEditor">
        <short>Decrements the lock count for the cell Editor following a call to LockEditor.</short>
        <descr>
          <p>
            LockEditor and UnlockEditor are used to surround operations where a cell Editor is hidden or the focus is changed as a result of keyboard navigation or a mouse click event.
          </p>
          <p>
            UnlockEditor is called from methods like: MouseDown and EditorHide.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.UnprepareCellHints">
        <short>Re-implemented in descendent classes.</short>
        <descr>
          <p>
            UnprepareCellHints has an empty implementation in TCustomGrid, but it overridden in descendent classes (like TCustomDBGrid / TDBGrid).
          </p>
          <p>
            UnprepareCellHints is called from the ShowCellHintWindow method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.UpdateHorzScrollBar">
        <short>Updates the horizontal scrollbar to use the specified range, page, and position.</short>
        <descr>
          <p>
            <var>UpdateHorzScrollBar</var> calls <var>ScrollBarShow</var> to updated the scrollbar visibility when it differs from the value in <var>aVisible</var>. The <var>ScrollBarRange</var> is called to apply the values in ARange, APage, and APos to the horizontal scrollbar for the control. No actions are performed if the visibility has not been changed and the scrollbar is not visible.
          </p>
          <p>
            UpdateHorzScrollBar is called from the CalcScrollbarsRange method when the visible area in the grid is scrolled.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.UpdateHorzScrollBar.AVisible">
        <short>True if the scrollbar is already visible.</short>
      </element>
      <element name="TCustomGrid.UpdateHorzScrollBar.ARange">
        <short>Maximum position for the scrollbar.</short>
      </element>
      <element name="TCustomGrid.UpdateHorzScrollBar.APage">
        <short>Page size for a thumb tab in the scrollbar.</short>
      </element>
      <element name="TCustomGrid.UpdateHorzScrollBar.APos">
        <short>Position for the scrollbar.</short>
      </element>

      <element name="TCustomGrid.UpdateSelectionRange">
        <short>Updates the selection range when the grid has changed.</short>
        <descr>
          <p>
            <var>UpdateSelectionRange</var> is a method used to update the <var>Selection</var> property with the cell coordinates for the current cell or row in the grid control. UpdateSelectionRange creates a new <var>TRect</var> instance with the cell coordinates representing the current selection in the grid.
          </p>
          <p>
            UpdateSelectionRange uses values in <var>Options</var> to determine whether the rectangle represents a single cell or the current Row. When <var>goRowSelect</var> has been included in Options, the rectangle contains the non-fixed column and last column numbers in the current Row. Otherwise, the rectangle uses the value in Col and Row to represent both the start and end cells for the Selection.
          </p>
          <p>
            UpdateSelectionRange is called from the <var>ClearSelections</var> and <var>FixPosition</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.Row"/>
        </seealso>
      </element>

      <element name="TCustomGrid.UpdateVertScrollbar">
        <short>Updates the vertical scrollbar to use the specified visibility, range, and page values.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.UpdateVertScrollbar.AVisible">
        <short>True if the scrollbar should be visible.</short>
      </element>
      <element name="TCustomGrid.UpdateVertScrollbar.ARange">
        <short/>
      </element>
      <element name="TCustomGrid.UpdateVertScrollbar.APage">
        <short/>
      </element>

      <element name="TCustomGrid.UpdateBorderStyle">
        <short>Updates the border style used for the control.</short>
        <descr>
          <p>
            <var>UpdateBorderStyle</var> is a method used to apply a <var>BorderStyle</var> for the control that is valid for the value in the <var>Flat</var> property. When Flat is set to <b>False</b>, the value in BorderStyle is used. When Flat is <b>True</b>, the value <var>bsNone</var> is always used as the BorderStyle for the control.
          </p>
          <p>
            UpdateBorderStyle calls the inherited <var>SetBorderStyle</var> method to apply the derived value to the BorderStyle property.
          </p>
          <p>
            UpdateBorderStyle calls <var>VisualChange</var> to refresh the control after the change to the property, and validates the Top and Left for the visual area in the grid. These actions are not performed if the <var>Handle</var> has not been allocated for the control, or during LCL component streaming.
          </p>
          <p>
            UpdateBorderStyle is called when the value for the Flat property has been changed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Flat"/>
          <link id="TCustomGrid.BorderStyle"/>
          <link id="TCustomGrid.VisualChange"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ValidateEntry">
        <short>Validates the value for the specified cell.</short>
        <descr>
          <p>
            <var>ValidateEntry</var> is a <var>Boolean</var> function used to a validate the value for the cell at the specified <var>Col</var> and <var>Row</var> position.
          </p>
          <p>
            ValidateEntry signals the <var>OnValidateEntry</var> event handler (when assigned) to perform validation for the cell. The return value is <b>True</b> when <var>OnValidateEntry</var> completes successfully, or when the event handler has not been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnValidateEntry"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ValidateEntry.Result">
        <short>True when validation completes successfully.</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.ACol">
        <short>Column number for the operation.</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.ARow">
        <short>Row number for the operation.</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.OldValue">
        <short>Value on entry to the method.</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.NewValue">
        <short>Value on exit from the method.</short>
      </element>

      <element name="TCustomGrid.VisualChange">
        <short>Updates the grid after changes to the visual properties in the control.</short>
        <descr>
          <p>
            <var>VisualChange</var> is a procedure used to update the grid when visual aspects of the control have been changed. VisualChange calls <var>UpdateSizes</var> to refresh the size of cells in the grid, and calls <var>Invalidate</var> to force the control to be redrawn.
          </p>
          <p>
            No actions are performed in the method when <var>BeginUpdate</var> has been called to buffer updates to the grid. VisualChange will resume updates when <var>EndUpdate</var> has been called to disable update buffering.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Invalidate"/>
          <link id="TCustomGrid.BeginUpdate"/>
          <link id="TCustomGrid.EndUpdate"/>
        </seealso>
      </element>

      <element name="TCustomGrid.WMSize">
        <short>Handles a WM_SIZE window message for the control.</short>
        <descr>
          <p>
            Ignores the message when updating scrollbars (gfUpdatingScrollbar in GridFlags). Otherwise, the inherited method is called to handle the window size message.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.WMSize">TWinControl.WMSize</link>
        </seealso>
      </element>
      <element name="TCustomGrid.WMSize.Message">
        <short>Message handled in the method.</short>
      </element>

      <element name="TCustomGrid.WMHScroll">
        <short>Handle the system message for horizontal scrolling.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.WMHScroll.message">
        <short/>
      </element>

      <element name="TCustomGrid.WMVScroll">
        <short>Handles the system message for vertical scrolling.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.WMVScroll.message">
        <short/>
      </element>

      <element name="TCustomGrid.WMKillFocus" link="#lcl.controls.TWinControl.WMKillFocus"/>
      <element name="TCustomGrid.WMKillFocus.message">
        <short/>
      </element>

      <element name="TCustomGrid.WMSetFocus" link="#lcl.controls.TWinControl.WMSetFocus"/>
      <element name="TCustomGrid.WMSetFocus.message">
        <short/>
      </element>

      <element name="TCustomGrid.WndProc" link="#lcl.controls.TControl.WndProc"/>
      <element name="TCustomGrid.WndProc.TheMessage">
        <short/>
      </element>

      <element name="TCustomGrid.AllowOutboundEvents">
        <short>Allows a mouse click on an out-of-bounds cell; moves cursor to nearest valid cell.</short>
        <descr>
          <p>
            Normally, when a user clicks on a point over the empty space after cells (for example if grid has three rows but user clicks on imaginary fourth row) the current focused cell will move to the nearest cell to clicked point. We call this an outbound event.
          </p>
          <p>
            The default value or the property is <b>True</b>, as this has been the grid's behavior since the beginning.
          </p>
          <p>
            This was added to mimic Delphi behavior where outbound events are not available; to enable Delphi compatibility, set AllowOutboundEvents to <b>False</b>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.AlternateColor">
        <short>Color used for the background in alternate rows in the grid.</short>
        <descr>
          The color to be used for the background on alternate rows of the grid. Having alternate rows in different colors can make the grid easier to read
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.AutoAdvance">
        <short>Direction used when automatically moving the selection to the next selectable cell.</short>
        <descr>
          <p>
            <var>AutoAdvance</var> is a <var>TAutoAdvance</var> property which indicates the direction of movement applied when the <b>Enter</b> key is pressed to finish editing in an active cell <var>Editor</var>.
          </p>
          <p>
            The default value for the property is <var>aaRight</var>, and indicates the cell selection advances to the right until it reaches the last column in the grid control. Use <var>aaNone</var> to disable the auto-advance feature.
          </p>
          <p>
            For more information about acceptable values and their usage, please refer to <link id="TAutoAdvance">TAutoAdvance</link>.
          </p>
          <p>
            AutoAdvance is used in methods like <var>MoveNextAuto</var> and <var>CheckPosition</var>.
          </p>
          <p>
            Use <var>TabAdvance</var> to control the direction of movement used when the <b>Tab</b> key is pressed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TabAdvance"/>
          <link id="TCustomGrid.MoveNextAuto"/>
          <link id="TCustomGrid.CheckPosition"/>
          <link id="TCustomGrid.Editor"/>
          <link id="TAutoAdvance"/>
        </seealso>
      </element>

      <element name="TCustomGrid.AutoEdit">
        <short>Indicates if edit mode is automatically entered when a cell is selected.</short>
        <descr>
          <p>
            <var>AutoEdit</var> is a <var>Boolean</var> property which indicates if edit mode is automatically entered when a cell is selected in the grid control. The default value for the property is True.
          </p>
          <p>
            When AutoEdit is set to True, the cell Editor is automatically displayed when a non-fixed cell is entered using keyboard navigtation or a mouse click. When AutoEdit is set to False, the cell Editor is not displayed until toggled.  Use the F2 or Enter key to activate a cell Editor. Use a second mouse click in the active cell to display the cell Editor.
          </p>
          <p>
            AutoEdit does not allow a cell to be edited if the column definition in the Columns collection is defined as ReadOnly.
          </p>
          <p>
            Use the Options property to enable or disable editing in the grid control using the value goEditing. Use the value goAlwaysShowEditor to always display the cell Editor.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.AutoFillColumns">
        <short>Automatically resizes columns so they fill all of the visible area in the grid.</short>
        <descr>
          <p>
            When this option is turned on, the grid will resize all columns to fill the grid's client width. The resized columns are determined using the following conditions:
          </p>
          <ol>
            <li><var>Fixed Columns</var> are not resized.</li>
            <li>
              If the grid has <var>Custom Columns</var>, all columns with <var>SizePriority</var> set to 0 are not resized.
            </li>
          </ol>
          <p>
            Note that Custom Columns are initially created with SizePriority set to 1. For TDbGrid, which automatically adds <var>Custom Columns</var>, this means the user will not be able to resize these columns using the mouse.
          </p>
        </descr>
        <notes><note>Need to check whether column resizing is also restricted HERE.</note></notes>
      </element>

      <element name="TCustomGrid.BorderStyle">
        <short>
          Drawing style used for the borders on the control.
        </short>
        <descr>
          <p>
            Only a restricted range of values are available in TCustomGrid: a single border or none.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.BorderStyle">TWinControl.BorderStyle</link>
        </seealso>
      </element>

      <element name="TCustomGrid.BorderColor">
        <short>The color used for the border on the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.CellHintPriority">
        <short>Identifies how text is combined to form the Hint property.</short>
        <descr>
          <p>
            <var>CellHintPriority</var> is a <var>TCellHintPriority</var> that identifies how text is combined to form the Hint property. The default value for the is <var>chpAllNoDefault</var>. See <link id="TCellHintPriority"/> for a description of the enumeration values and their meanings.
          </p>
          <p>
            CellHintPriority is used in the implementation of the <var>ShowCellHintWindow</var>, <var>MouseMove</var>, and <var>GetTruncCellHintText</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TCellHintPriority"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TCustomGrid.GetTruncCellHintText"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Col">
        <short>Column index for the selected grid cell.</short>
        <descr>
          <p>
            <var>Col</var> is an Integer which holds the column index for the current cell or grid cursor. The current grid column can be changed programmatically by setting a new value in this property.
          </p>
          <p>
            Setting a new value for the property causes the limits for the column index to be checked when AllowOutboundEvents is set to False. An exception is raised in the CheckLimitsWithError method when the property value is not a valid column index for the grid control.
          </p>
          <p>
            MoveExtend is called to move the selection to the cell at the coordinates in Row and Col. The cell editor is also retrieved (when available) and is displayed.
          </p>
          <p>
            MoveExtend is called to move the selection to the cell at the coordinates in Row and Col. The cell editor is also retrieved (when available) and is displayed.
          </p>
        </descr>
      </element>

      <element name="TCustomGrid.ColCount">
        <short>Number of columns in the grid.</short>
        <descr>
          <p>
            <var>ColCount</var> is an Integer that represents the number of columns in the grid, including fixed and normal columns. Changing the value in <var>ColCount</var> after <var>Columns</var> have been created causes an <var>EGridException</var> to be raised. Use the <var>Columns</var> collection to add or delete columns defined in the grid.
          </p>
          <p>
            Use <var>FixedCols</var> for the number of fixed columns in the grid.
          </p>
          <p>
            Use <var>VisibleColCount</var> for the number of non-fixed columns in the grid.
          </p>
          <p>
            Use <var>RowCount</var>, <var>FixedRows</var>, and <var>VisibleRowCount</var> to access the row-oriented equivalents.
          </p>
        </descr>
        <errors>
          Raises an <var>EGridException</var> when the value is changed and <var>Columns</var> already exist in the grid.
        </errors>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.VisibleColCount"/>
          <link id="TCustomGrid.VisibleRowCount"/>
          <link id="TGridPropertyBackup"/>
          <link id="EGridException"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ColRow">
        <short>Provides access to current column and row numbers as a TPoint instance.</short>
        <descr>
          <p>
            <var>ColRow</var> is a <var>TPoint</var> property used to provide access to the current values at the position specified in Col and Row. The <var>X</var> member in TPoint is used for the value in the <var>Col</var> property. The <var>Y</var> member in TPoint is used for the value in the <var>Row</var> property.
          </p>
          <p>
            Setting the value for the causes the <var>CheckLimitsWithError</var> method to be called for the X and Y values when <var>AllowOutboundEvents</var> is <b>False</b>. The <var>SetColRow</var> method is called to update the values in the Col and Row properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CheckLimitsWithError"/>
          <link id="TCustomGrid.SetColRow"/>
          <link id="TCustomGrid.AllowOutboundEvents"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ColRowDraggingCursor">
        <short>Cursor shape displayed when a column is dragged.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ColRowDragIndicatorColor">
        <short>Color used to render the drag cursor when a column or row is dragged in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ColSizingCursor">
        <short>Cursor shape displayed when a column is resized.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ColumnClickSorts">
        <short>Indicates if clicking a column header changes its sort order.</short>
        <descr>
          <p>
            <var>ColumnClickSorts</var> is a <var>Boolean</var> used to indicate if clicking a column header changes its sort order. The default value for the is <b>False</b>.
          </p>
          <p>
            ColumnClickSorts is used in the <var>HeaderClick</var> method to determine if the value in the <var>SortOrder</var> is toggled for a click in the header cell for SortColumn.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.HeaderClick"/>
          <link id="TCustomGrid.SortColumn"/>
          <link id="TCustomGrid.SortOrder"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Columns">
        <short>Definitions for the columns in the grid.</short>
        <descr>
          <p>
            <var>Columns</var> is a <var>TGridColumns</var> used to represent column definitions for the grid control. Columns contains the <var>TGridColumn</var> instances which define the attributes for the column such as its Font, Color, Alignment, Layout, Editor style, auto-sizing priority, et. al. Properties and methods in Columns can be used at run-time to access and maintain the column definitions for the grid.
          </p>
          <p>
            See <link id="TGridColumn">TGridColumn</link> for more information about the items stored in the collection.
          </p>
          <p>
            Columns should not be confused with the <i>COLUMNS</i> construct frequently used in <i>SQL</i> programming, which refer to <var>Fields</var> of data. The contents of Fields can be displayed as Columns in a Grid, but they must be seen as separate and distinct. It is irrelevant to refer to the color, font or width of a data field from a database, but these are all very relevant in specifying the appearance of a column in a grid.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns"/>
          <link id="TGridColumn"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ColWidths">
        <short>Provides indexed access to the Width of the column in the grid.</short>
        <descr>
          <p>
            The column is specified with the <var>aCol</var> parameter. The <var>aCol</var> parameter must fall within the valid index range of 0 to <link id="TCustomGrid.ColCount">ColCount</link>-1.
          </p>
          <p>
            The property value is the width of the specified column in pixels.
          </p>
          <p>
            The initial width for a newly created column is specified with the <link id="TCustomGrid.DefaultColWidth">DefaultColWidth</link> property.
          </p>
          <p>
            If the <link id="TCustomGrid.Options">Options</link> property includes the value <var>goColSizing</var>, the column width may also be changed by the user at run-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.DefaultColWidth"/>
          <link id="TCustomGrid.RowHeights"/>
          <link id="TCustomGrid.Options"/>
          <link id="TGridOption"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ColWidths.aCol">
        <short/>
      </element>

      <element name="TCustomGrid.DefaultColWidth">
        <short>Default width used for newly created grid columns.</short>
        <descr>
          <p>
            If new columns of the grid are created by changing the <link id="TCustomGrid.ColCount">ColCount</link> property, the width of these new columns will be set to the value of the <i>DefaultColWidth</i> property.
          </p>
          <p>
            Use 0 for an auto-sized column width.
          </p>
          <p>
            Use GetRealDefaultColWidth for the real value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultRowHeight"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DefaultRowHeight">
        <short>Default row height for newly created grid rows.</short>
        <descr>
          <p>
            If new rows of the grid are created by changing the <link id="TCustomGrid.RowCount">RowCount</link> property, the height of these new rows will be set to the value of the <i>DefaultRowHeight</i>  property.
          </p>
          <p>
            Use 0 for auto-sized row heights.
          </p>
          <p>
            Use GetRealDefaultRowHeight for the real value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultColWidth"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DefaultDrawing">
        <short>Indicates if the default drawing mechanism is used to draw the background for cells.</short>
        <descr>
          <p>
            <var>DefaultDrawing</var> is a <var>Boolean</var> property which indicates if the default drawing mechanism is used to draw the background for cells. The default value for the property is <b>True</b>.
          </p>
          <p>
            Normally, the grid prepares its canvas using the properties needed for the kind cell type that is being painted. DefaultDrawing indicates that the grid control handles drawing the background for the cell (including a visible cell <var>Editor</var>) using the relevant properties.
          </p>
          <p>
            Use the <var>OnDrawCell</var> event handler to handle drawing the value for the cell. Set DefaultDrawing to <b>False</b> when the OnDrawCell event handler is responsible for both the background and content in the cell.
          </p>
          <p>
            Changing the value for the property causes the <var>Invalidate</var> method to be called to redraw the control.
          </p>
          <p>
            DefaultDrawing is used in the PrepareCanvas method to configure the control Canvas for a drawing operation.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.DefaultTextStyle">
        <short>Default style used to display text; includes alignment, layout, and wrapping.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DisabledFontColor">
        <short>Color used to draw text in the grid when Enabled is set to False.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.DragDx">
        <short>The amount (DeltaX) by which an object should be dragged.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.Editor">
        <short>The editor used to modify the value in the current cell.</short>
        <descr>
          <p>
            <var>Editor</var> is a <var>TWinControl</var> descendant which contains the control used to edit the value in the current cell for the grid control.
          </p>
          <p>
            There are several editor styles available for columns in the grid control: String, Button, Composite, and Pick List. Button editors display a button that can be clicked to perform actions which determine the value for the cell. A composite editor uses an editor for the string value and a button for additional actions. A pick list editor allows selection of oneof the predetermined values for the cell. The String editor is essentially a TEdit control, and is the default editor style used in the grid control.
          </p>
          <p>
            The Editor style is determined either by examing values in the column definition stored in the Columns property, or using the OnSelectEditor event handler. OnSelectEditor is signalled  when Columns has not been Enabled in the grid.
          </p>
          <p>
            Editor display behavior is controlled by properties like Options and AutoEdit.
          </p>
          <p>
            Options can be used to enabled / disabled cell editor features using the following:
          </p>
          <dl>
            <dt>goEditing</dt>
            <dd>Cell editing is allowed for the grid control. Omit to disable cell editing.</dd>
            <dt>goAlwaysShowEditor</dt>
            <dd>
              The cell editor for the current cell is always displayed. Omit to disable. The cell editor can be toggled using F2, Enter, or a mouse click in the current cell.
            </dd>
          </dl>
          <p>
            The AutoEdit property determines whether a cell is automatically placed in edit mode as soon as  it is selected. This is basically the same as including goAlwaysShowEditor in the Options property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorBorderStyle">
        <short>The border style for the Editor control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorMode">
        <short>True when the Editor is ready to modify the value for the current cell.</short>
        <descr>
          <p>
            <var>EditorMode</var> is a <var>Boolean</var> property which indicates whether the cell <var>Editor</var> has been enabled for the grid control. Set EditorMode to <b>True</b> to display the cell Editor for the control. Set it to <b>False</b> to hide the cell Editor.
          </p>
          <p>
            The value in EditorMode is updated when handling key presses and mouse clicks, scrolling the visible area for the control, or changing the configration of the grid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.EditorMode"/>
          <link id="TCustomGrid.EditorShow"/>
          <link id="TCustomGrid.EditorHide"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.KeyPress"/>
          <link id="TCustomGrid.ClearCols"/>
          <link id="TCustomGrid.Clear"/>
          <link id="TCustomGrid.ClearRows"/>
          <link id="TCustomGrid.DefaultColWidth"/>
          <link id="TCustomGrid.DefaultRowHeight"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
          <link id="TCustomGrid.PrepareCanvas"/>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomDrawGrid.OnMouseWheel"/>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorKey">
        <short>Indicates if the last key event was triggered by the cell Editor for the grid control.</short>
        <descr>
          <p>
            <var>EditorKey</var> is a <var>Boolean</var> property which indicates if the last key event was generated by the cell <var>Editor</var> for the grid control. The property value is updated in the OnKeyDown, OnKeyPress, and OnKeyUp event handlers used in the Editor control. Its value is used in method like KeyDown, KeyPress, and KeyUp to determine whether a given key needs to be applied / handled for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.KeyDown"/>
          <link id="TCustomGrid.KeyPress"/>
          <link id="TCustomGrid.KeyUp"/>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorOptions">
        <short>The option flags sent to the Editor control in the grid.</short>
        <descr>
          <p>
            EO_HOOKKEYDOWN enables the OnKeyDown event handler in the editor control.
            EO_HOOKKEYPRESS enables the OnKeyPress event handler in the editor control.
            EO_HOOKKEYUP enables the OnKeyUp event handler in the editor control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.EditorShowing">
        <short>True when the cell Editor for the grid control has been displayed.</short>
        <descr>
          <p>
            <var>EditorShowing</var> is a <var>Boolean</var> property which indicates if the cell Editor for the control has been displayed. The property value is updated in methods like EditorShow and EditorHide when the visibility for the Editor control is changed.
          </p>
          <p>
            The property value is used in several methods which handle key events, mouse clicks, and focus changes in the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.ExtendedColSizing">
        <short>Indicates if extended column sizing is enabled in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ExtendedRowSizing">
        <short>Indicates if extended row sizing is enabled for rows in the grid.</short>
        <descr>
          <p>
            ExtendedRowSizing is a Boolean property which indicates if extended row sizing is enabled for the grid control.
          </p>
          <remark>
            ExtendedRowSizing is not maintained in any methods in the class implementation. It is used in DoRowSizing only.
          </remark>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.ExtendedSelect">
        <short>Indicates whether a selection can extend beyond the visible boundary for he grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.FastEditing">
        <short>Indicates if "Fast Editing" is enabled in the grid.</short>
        <descr>
          <p>
            <var>FastEditing</var> is a <var>Boolean</var> property which indicates if cell editing initialized by a KeyDown message instead of a navigation key is used in the grid control. The value in FastEditing is used when a TPickListCellEditor handles KeyDown messages.
          </p>
          <p>
            The default value for the property is <b>True</b> as assigned in the <var>Create</var> constructor.
          </p>
        </descr>
        <seealso>
          <link id="TPickListCellEditor.KeyDown"/>
        </seealso>
      </element>

      <element name="TCustomGrid.AltColorStartNormal">
        <short>Indicates if alternate row coloring starts with the normal row color.</short>
        <descr>
          <p>
            <var>AltColorStartNormal</var> - using a second color to display alternate rows, but starting the first row with the normal color.
          </p>
          <p>
            Using a different color for the background of alternate rows often makes the data in a grid much easier to read.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.FixedCols">
        <short>The number of fixed columns in the grid.</short>
        <descr>
          <p>
            Contains the fixed column count for the grid. A fixed row with fixed columns is normally used to display the headings (titles), images, and sort indicators for the columns in the grid control. The fixed row containing the fixed columns is not scrolled along with the visible area for grid.
          </p>
          <p>
            Setting a new value for the property causes several actions to be performed for the grid control.
          </p>
          <ul>
            <li>
              The values in FixedCols and FixedRows are verified by calling CheckFixedCount, which can raise an exception if an error condition is detected.
            </li>
            <li>
              EditorMode is set to False to hide a visible cell Editor for the control.
            </li>
            <li>
              When Columns has been Enabled, UpdateSelectionRange is called to refresh the selection range for  the control. ColumnsChanged is called to apply the visual change in the control. If Columns has not been Enabled, MoveNextSelectable and UpdateSelectionRange are called to refresh the grid control.
            </li>
          </ul>
          <p>
            Use FixedRows to get or set the number of fixed rows displayed for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedRows">
        <short>Number of the fixed rows in the grid.</short>
        <descr>
          <p>
            Contains the fixed row count for the grid control. A fixed row with fixed columns is normally used to display the headings (titles), images, and sort indicators for the columns in the grid control. The fixed row containing the fixed columns is not scrolled along with the visible area for grid.
          </p>
          <p>
            Setting a new value for the property causes several actions to be performed for the grid control.
          </p>
          <ul>
            <li>
              The values in FixedCols and FixedRows are verified by calling CheckFixedCount, which can raise an exception if an error condition is detected.
            </li>
            <li>
              EditorMode is set to False to hide a visible cell Editor for the control.
            </li>
            <li>
              MoveNextSelectable is called to find the first selectable cell in the current column. UpdateSelectionRange is called to refresh the cell selected in the grid control.
            </li>
          </ul>
          <p>
            Use FixedCols to get or set the number of fixed columns displayed for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.EditorMode"/>
          <link id="TCustomGrid.MoveNextSelectable"/>
          <link id="TCustomGrid.UpdateSelectionRange"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedColor">
        <short>The color used for the fixed cells in the grid.</short>
        <descr>
          <p>
            <var>FixedColor</var> is a <var>TColor</var> property with the color used to paint the background for fixed cells in the grid control. The default value for the property is clBtnFace. Changing the value in FixedColor causes the Invalidate method to be called to redraw the control.
          </p>
          <p>
            Use Color to specify the background color for non-fixed cells in the grid control. Use AlternateColor to specify the background color used for alternate rows in the grid control.
          </p>
          <p>
            Use the Color property in Font to specify the color used for text drawn in the cells for the grid. Use DisabledFontColor to specify the color used for text when the control is disabled.
          </p>
          <p>
            Other colors can be supplied using properties including: BorderColor, GridLineColor, FixedGridLineColor FixedHotColor, FocusColor, and SelectedColor.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedColor"/>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.FixedCols"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedGridLineColor">
        <short>Color used to draw lines around fixed grid cells.</short>
        <descr>
          <p>
            The default value for the is cl3DDKShadow as assigned in the constructor. Changing the value in FixedGridLineColor causes the grid to be redrawn. The color is not used when GridLineWidth contains the value 0 (zero).
          </p>
          <p>
            FixedGridLineColor is used in the implementation of the DrawCellGrid method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridLineWidth"/>
          <link id="TCustomGrid.DrawCellGrid"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedHotColor">
        <short>The color used for selected, hot-lighted, etc. fixed cells in the grid.</short>
        <descr>
          <var>FixedHotColor</var>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.Flat">
        <short>Indicates if cells are displayed using a Flat appearance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.FocusColor">
        <short>The color used for a cell when it has focus.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.FocusRectVisible">
        <short>Indicates if the focus rectangle is visible for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.GCache">
        <short>Contains cached data about the visual layout and state for the grid control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.GridFlags">
        <short>Contains grid-specific state flags active for the control.</short>
        <descr>
          <p>
            <var>GridFlags</var> is a <var>TGridFlags</var> property which contains values that indicate the state or status for the grid control or its editor. It is a set type and may contain zero (0) or more values from the <var>TGridFlagsOption</var> enumeration.
          </p>
          <p>
            Values are included in or excluded from the set as needed during execution of methods in the grid control. See TGridFlagsOption for more information about the values in the enumeration and their meanings.
          </p>
        </descr>
        <seealso>
          <link id="TGridFlags"/>
          <link id="TGridFlagsOption"/>
        </seealso>
      </element>

      <element name="TCustomGrid.GridHeight">
        <short>Total height for all of the rows in the grid control.</short>
        <descr>
          <p>
            <var>GridHeight</var> is a read-only <var>Integer</var> property which contains the calculated height for all of the rows in the grid control. Its value is provided using the cached values stored in GCache when row or column sizes are calculated for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridWidth"/>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.VisualChange"/>
        </seealso>
      </element>

      <element name="TCustomGrid.GridLineColor">
        <short>Color used for the grid lines on the control.</short>
        <descr>
          <p>
            <var>GridLineColor</var> is a <var>TColor</var> property with the color used to draw the grid lines between rows and columns on the control. The default value for the property is <var>clSilver</var>. Changing the value for the property causes the grid control to be redrawn.
          </p>
          <p>
            GridLineColor is used in the <var>DrawCellGrid</var> method to draw the lines around non-fixed cells when <var>GridLineWidth</var> has a non-zero value.
          </p>
          <p>
            Use <var>FixedGridLineColor</var> to set the color used to draw grid lines around  fixed rows and columns on the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawCellGrid"/>
          <link id="TCustomGrid.GridLineWidth"/>
          <link id="TCustomGrid.GridLineStyle"/>
          <link id="TCustomGrid.FixedGridLineColor"/>
        </seealso>
      </element>

      <element name="TCustomGrid.GridLineStyle">
        <short>Style used to draw the grid lines on the control.</short>
        <descr>
          <p>
            <var>GridLineStyle</var> is a <var>TPenStyle</var> property with the pen drawing style used to draw grid lines on the control. The default value for the property is psSolid. Changing the value for the property causes the grid control to be redrawn.
          </p>
          <p>
            GridLineStyle, GridLineWidth, GridLineColor, and FixedGridLineColor are used in the DrawCellGrid method when GridLineWidth is set to a positive non-zero value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawCellGrid"/>
          <link id="TCustomGrid.FixedGridLineColor"/>
          <link id="TCustomGrid.GridLineColor"/>
          <link id="TCustomGrid.GridLineWidth"/>
          <link id="#lcl.graphics.TCanvas.Pen">TCanvas.Pen</link>
          <link id="#lcl.graphics.TPen.Style">TPen.Style</link>
          <link id="#lcl.graphics.TPenStyle">TPenStyle</link>
        </seealso>
      </element>

      <element name="TCustomGrid.GridLineWidth">
        <short>Width (thickness) for grid lines drawn on the control.</short>
        <descr>
          <p>
            <var>GridLineWidth</var> is an <var>Integer</var> property which contains the thickness for the grid lines drawn on the control.
          </p>
          <p>
            The default value for the property is 1, and causes a single  pixel to be used when drawing grid lines. Changing the value for the property causes the grid control to be redrawn.
          </p>
          <p>
            GridLineWidth is used in the <var>DrawCellGrid</var> method when grid lines are drawn for both fixed and non-fixed cells. Set GridLineWidth to <b>0</b> to suppress drawing of grid lines on the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawCellGrid"/>
          <link id="TCustomGrid.GridLineStyle"/>
          <link id="TCustomGrid.GridLineColor"/>
          <link id="TCustomGrid.FixedGridLineColor"/>
        </seealso>
      </element>

      <element name="TCustomGrid.GridWidth">
        <short>Total width for all columns in the Grid including non-visible columns.</short>
        <descr>
          <p>
            <var>GridWidth</var> is a read-only Integer property which contains the calculated width for all of the columns in the grid control, including columns with the visible property set to False. Its value is provided using the cached values stored in GCache when row or column sizes are calculated for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridWidth"/>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.VisualChange"/>
        </seealso>
      </element>

      <element name="TCustomGrid.HeaderHotZones">
        <short>'Hot' zones for cell headers that can be selected, clicked, or ignored.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.HeaderPushZones">
        <short>"Hot" zones for cell headers that have been selected or "pushed" in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ImageIndexSortAsc">
        <short>Ordinal position for the image used for columns sorted in ascending order.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ImageIndexSortDesc">
        <short>Ordinal position of the image used for columns sorted in descending order.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.TabAdvance">
        <short>Controls the behavior for Tab navigation in the grid control.</short>
        <descr>
          <p>
            TabAdvance is a TAutoAdvance used to determine the behavior for Tab navigation is used in the grid control. The default value for the is aaRightDown. See TAutoAdvance for the values and their usage.
          </p>
          <p>
            TabAdvance is used in the implementation of the KeyDown method in TCustomGrid.
          </p>
        </descr>
        <seealso>
          <link id="TAutoAdvance"/>
          <link id="TCustomGrid.KeyDown"/>
        </seealso>
      </element>

      <element name="TCustomGrid.TitleImageList">
        <short>The list with images displayed in column titles.</short>
        <descr>
          <p>
            <var>TitleImageList</var> is a <var>TImageList</var> property which contains the images displayed in the title area for columns in the grid. It can include images used for the non-native column sort indicators.
          </p>
          <p>
            Setting a new value for the property causes the <var>VisualChange</var> method to be called to update the column sizes and redraw the control.
          </p>
          <p>
            TitleImageList is used to get an image resolution using the width specified in <var>TitleImageListWidth</var>. The images are used when rendering the <var>TGridColumn</var> instances in the <var>Columns</var> collection.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.TitleImageListWidth">
        <short>Stores the default width for images used in the title area for fixed cells.</short>
        <descr>
          <p>
            <var>TitleImageListWidth</var> is an <var>Integer</var> which stores the default width for images used in the title area for fixed cells. The default value for the is 0. Changing the value in TitleImageListWidth causes the <var>VisualChange</var> method to be called to update the grid control.
          </p>
          <p>
            The value in TitleImageListWidth is used in methods which draw fixed cells in the grid, such as:
          </p>
          <ul>
            <li>DrawColumnTitleImage</li>
            <li>AutoAdjustColumn</li>
            <li>GetSortTitleImageInfo</li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>

      <element name="TCustomGrid.InplaceEditor">
        <short>Cell editor for the grid control.</short>
        <descr>
          <p>
            <var>InplaceEditor</var> is a read-only <var>TWinControl</var> property that represents the cell <var>Editor</var> for the control. Read access is redirected to the member variable used for the Editor property. It is provided for Delphi code compatibility. Use the Editor property instead.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
        </seealso>
      </element>

      <element name="TCustomGrid.IsCellSelected">
        <short>Provides indexed access to the selected state for a cell by its column and row number.</short>
        <descr>
          <p>
            <var>IsCellSelected</var> is an indexed <var>Boolean</var> property which provides access to the selected state for a cell using its column and row number. <var>ACol</var> and <var>ARow</var> contain the column and row number for the cell.
          </p>
          <p>
            Compares the cell coordinates in <var>ACol</var> and <var>ARow</var> to the current Selection  in the grid control. The return value is <b>True</b> if the cell is in the cell range in <var>Selection</var>.
          </p>
          <p>
            If <var>RangeSelectMode</var> is set to <var>rsmMulti</var>, all of the existing range selections are examined for the specified cell. The property value  is <b>True</b> when the cell is located in the array of rectangles used for multi-selections in the grid control.
          </p>
          <p>
            Otherwise, the property value is set to <b>False</b>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.IsCellSelected.Result">
        <short>True when the cell at the specified column and row is selected.</short>
      </element>
      <element name="TCustomGrid.IsCellSelected.aCol">
        <short>Column number for the cell examined in the method.</short>
      </element>
      <element name="TCustomGrid.IsCellSelected.aRow">
        <short>Row number for the cell examined in the method.</short>
     </element>

     <element name="TCustomGrid.LeftCol">
       <short>Column number for the first visible column on the left edge of the grid.</short>
       <descr/>
       <seealso/>
     </element>

      <element name="TCustomGrid.MouseWheelOption">
        <short>Sets the mouse wheel behavior for the grid control.</short>
        <descr>
          <p>
            <var>MouseWheelOption</var> is a <var>TMouseWheelOption</var> used to set the mouse wheel behavior for the grid control. The default value for the is <var>mwCursor</var>, and indicates that mouse wheel movements change the cursor position on the screen. Use <var>mwGrid</var> to cause mouse wheel movements to change the active selection  in the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TMouseWheelOption"/>
          <link id="TCustomGrid.DoMouseWheel"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Options">
        <short>Contains the set of optional features and/or behaviors enabled for the grid.</short>
        <descr>
          <p>
            <var>Options</var> is a <var>TGridOptions</var> used to store the options enabled for the grid control. Values from the <var>TGridOptions</var> enumeration are included in the set type to enable the features or behaviors. For a list of available options and their usage, see<link id="TGridOptions"/>.
          </p>
          <p>
            The default value for the Options is the <var>DefaultGridOptions</var> set.
          </p>
          <p>
            Use <var>Options2</var> to set scrolling behaviors enabled for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TGridOptions"/>
          <link id="DefaultGridOptions"/>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Options2">
        <short>Contains additional options enabled for the grid control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.RangeSelectMode">
        <short>Controls the range selection mode used for the grid.</short>
        <descr>
          <p>
            <var>RangeSelectMode</var> is a <var>TRangeSelectMode</var> property that controls the range selection mode used for the grid. The default value for the is <var>rsmSingle</var>, and allows selection of a single cell in a range. Use <var>rsmMulti</var> to select multiple cells in a range selection.
          </p>
          <p>
            Changing the value in RangeSelectMode causes the <var>ClearSelections</var> method be called to remove existing selection(s) in the grid control.
          </p>
          <p>
            RangeSelectMode is used in the implementation of methods like:
          </p>
          <ul>
            <li>AddSelectedRange</li>
            <li>GetIsCellSelected</li>
            <li>MouseDown</li>
            <li>InvalidateCell</li>
          </ul>
        </descr>
        <seealso>
          <link id="TRangeSelectMode"/>
          <link id="TCustomGrid.ClearSelections"/>
          <link id="TCustomGrid.AddSelectedRange"/>
          <link id="TCustomGrid.GetIsCellSelected"/>
          <link id="TCustomGrid.MouseDown"/>
          <link id="TCustomGrid.InvalidateCell"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Row">
        <short>Row number for the selected grid cell.</short>
        <descr>
          <p>
            Row is an Integer property which contains the row index for the currently selected cell in the grid control. The value in Row is zero-based, and cannot exceed the value RowCount-1.
          </p>
          <p>
            Setting a new value for the property causes the values in Col and Row to be validated against the ColCount and RowCount for the grid. Error checking is used, and an exception may be raised if the new property value is not in the limits for the control. The selected cell in the control is changed to the new values in the Col and Row properties.
          </p>
          <p>
            Use Col to determine the column number for the currently selected cell in the grid control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.RowCount">
        <short>Number of rows in the grid.</short>
        <descr>
          <p>
            <var>RowCount</var> is an <var>Integer</var> property which contains the number of rows in the grid control, including fixed and normal rows.
          </p>
          <p>
            Changing the value in RowCount causes a visible Editor in the control to be hidden, and EditorMode is set to False. When the Columns collection is Enabled, the ColumnsChanged method is called. Setting RowCount to 0 (zero) causes the ClearRows method to be called.
          </p>
          <p>
            Use ColCount to access the number of columns for the grid control when Columns has not been enabled.
          </p>
          <p>
            Use Col and Row for the current cell selected in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.RowHeights"/>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.EditorMode"/>
          <link id="TCustomGrid.ColumnsChanged"/>
          <link id="TCustomGrid.ClearRows"/>
        </seealso>
      </element>

      <element name="TCustomGrid.RowSizingCursor">
        <short>Cursor shape displayed when the row height is changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.RowHeights">
        <short>Provides indexed access to the height for each row in the grid.</short>
        <descr>
          <p>
            The row is specified with the <var>aRow</var> parameter. The <var>aRow</var> parameter must fall within the valid index range of 0 to <link id="TCustomGrid.RowCount">RowCount</link>-1.
          </p>
          <p>
            The return value of the is the height of this row, measured in pixels.
          </p>
          <p>
            The initial height of a newly created row is specified with the <link id="TCustomGrid.DefaultRowHeight">DefaultRowHeight</link> property. After that the user may redefine this value. If the <link id="TCustomGrid.Options">Options</link> includes the appropriate value, the row height may also be changed by the user at run-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.DefaultRowHeight"/>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>
      <element name="TCustomGrid.RowHeights.aRow">
        <short>Row number affected in the method.</short>
      </element>

      <element name="TCustomGrid.SaveOptions">
        <short>
          Options which control the information saved and loaded for the grid control.
        </short>
        <descr>
          <p>
            SaveOptions is a TSaveOptions property with the set of options enabled when saving values in the grid to a file or stream. The options indicate whether design information, column attributes, cell content and positions are included in the values save for the grid control.  The TSaveOption values included in or excluded from the property affect the following:
          </p>
          <dl>
            <dt>
              soDesign
            </dt>
            <dd>
              Design-time information for the control, including: column count, row count, number of fixed columns and rows, default column width, default row width and height, color, column definitions (when enabled in the control), and row heights with non-default values. Also includes the settings in the Options and Options2 properties for the control.
            </dd>
            <dt>
              soPosition
            </dt>
            <dd>
              Run-time values for the top and left coordinates for the grid, and the current column and row number.
            </dd>
            <dt>
              soRangeSelect
            </dt>
            <dd>
              Requires the soPosition option. Stores the left, top, bottom, and right coordinates for the range in the Selection property.
            </dd>
            <dt>
              soContent
            </dt>
            <dd>
              Stores the UTF-8-encoded text for each of the cells in the grid control.
            </dd>
          </dl>
          <p>
            The default values in SaveOptions are not assigned in TCustomGrid, and must be provided in a descendent class  like TCustomStringGrid.
          </p>
          <p>
            SaveOptions also determines the data available and processed when loading grid information in the LoadFromFile or LoadFromStream methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveToStream"/>
          <link id="TCustomGrid.LoadFromFile"/>
          <link id="TCustomGrid.LoadFromStream"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SelectActive">
        <short>Indicates if a Selection is active in the grid control.</short>
        <descr>
          <p>
            <var>SelectActive</var> is a <var>Boolean</var> property which indicates if a <var>Selection</var> range is active in the grid control. It is set to <b>True</b> when a cell or range of cells is selected using the keyboard or mouse navigation, or by assigning a value to the Selection property. It is set to <b>False</b> in methods like <var>CancelSelection</var>, <var>DoExit</var>, and <var>DoMouseWheel</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.SelectedColor">
        <short>Color used for selected cells in the grid.</short>
        <descr>
          <p>
            <var>SelectedColor</var> is a <var>TColor</var> property which contains the color used for the background in selected cell(s). SelectedColor is used in <var>PrepareCanvas</var> to set the brush color for the control <var>Canvas</var> when <var>IsSelected</var> is <b>True</b>. The default value for the property is <var>clHighlight</var> as assigned in the constructor for the class instance.
          </p>
          <p>
            Changing the value in SelectedColor causes the <var>Invalidate</var> method to be called to redraw the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.SelectedColumn">
        <short>The column instance for the currently selected cell in the grid control.</short>
        <descr>
          <p>
            <var>SelectedColumn</var> is a read-only <var>TGridColumn</var> property which contains the column instance for the current column. <var>Col</var> contains the column number for the selected cell in the grid control, and is used to located the column instance by calling <var>ColumnFromGridColumn</var>. The property may contain <b>Nil</b> if <var>Columns</var> has not been enabled in the control, or when a valid column definition is not found for the current column number.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.Selection">
        <short>Rectangle with the current cell selections in the grid control.</short>
        <descr>
          <p>
            <var>Selection</var> is a <var>TGridRect</var> property with the column and row numbers for the current cell selection in the grid control. The Left and Right members in the property value are column numbers for the cells in the selection. The Top and Bottom members in the property value are row numbers for the cells in the selection.
          </p>
          <p>
            Selection is used when <var>goRangeSelect</var> has been included in the <var>Options</var> for the grid.
          </p>
          <p>
            When a new grid rectangle is assigned for the property, the member values in the rectangle are normalized to ensure they are in the acceptable range of values for the grid control. If all four members have negative values, the current Selection is cleared by calling <var>ClearSelection</var>.
          </p>
          <p>
            Column or row numbers in the rectangle are adjusted to exclude <var>FixedCols</var> and <var>FixedRows</var>.When <var>goSelectionActive</var> has been included in the grid Options, the current selection is extended to include the new selection range. The <var>Invalidate</var> method is called to redraw the grid control with the new Selection value.
          </p>
          <p>
            A value assigned to Selection is ignored when <var>goRangeSelect</var> has <b>not</b> been included in the <var>Options</var> for the grid.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.ScrollBars">
        <short>Scrollbars displayed for the grid control.</short>
        <descr>
          <p>
            <var>ScrollBars</var> is a <var>TScrollStyle</var> property which indicates the scrollbars displayed for the grid control. The default value for the property is <var>ssAutoBoth</var> and causes vertical and horizontal scrollbars to be displayed when needed.
          </p>
          <p>
            See <var>TScrollStyle</var> for more information about values in the enumeration and their meanings.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TScrollStyle">TScrollStyle</link>
        </seealso>
      </element>

      <element name="TCustomGrid.StrictSort">
        <short>Indicates if strict sorting is used.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.TitleFont">
        <short>The font used for text in a column title.</short>
        <descr>
          <p>
            TitleFont is a TFont property with the font used for the text in a fixed column title. By default, TitleFont uses the same Font assigned to the grid control.
          </p>
          <p>
            The OnTitleFontChanged event handler is used as the OnChange event handler for TitleFont, and  ensures that updates to TitleFont are also applied to TGridColumn instances in the Columns collection (when enabled). In addition, the font in TitleFont is ignored when Columns has been Enabled; the Font assigned to the Title property for the TGridColumn instance is used instead.
          </p>
          <p>
            GetColumnFont is called from PrepareCanvas to determine whether TitleFont or a font defined in the Columns collection is used to render the text in fixed cells.
          </p>
          <p>
            Assigning a new value to TitleFont causes the VisualChange method to be called to recalculate column sizes in the grid control.
          </p>
          <p>
            Font sizes (in both Font, TitleFont, and TGridColumn instances) may be scaled at run-time to provide support for high density displays. See ScaleFontsPPI for more information.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.TitleStyle">
        <short>The drawing style used for the fixed column titles.</short>
        <descr>
          <p>
            TitleStyle is a TTitleStyle property which contains the drawing style used when rendering the fixed cells with the column titles. Changing the value in TitleStyle cause the Invalidate method to be called to redraw the grid control.
          </p>
          <p>
            TitleStyle is used in the DrawCellGrid and DefaultDrawCell methods when Flat is set to False, and controls the 3D appearance of the fixed cell.
          </p>
          <dl>
            <dt>tsLazarus</dt>
            <dd>Uses the default appearance common to the supported platforms in Lazarus.</dd>
            <dt>tsNative</dt>
            <dd>Uses the drawing style for the current widgetset or theme.</dd>
            <dt>tsStandard</dt>
            <dd>Uses a more contrasted look similar to Delphi grids.</dd>
          </dl>
          <p>
            Use TitleFont (or the definitions in the Columns collection) to control the font used in fixed cells.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.TopRow">
        <short>The first visible row in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.UseXORFeatures">
        <short>When True, the dotted focus rectangle is painted using an XOR raster operation.</short>
        <descr>
          <p>
            This controls how the dotted focus rectangle appears in the grid. When <b>True</b>, the rectangle is painted using an XOR raster operation. This allows the focus rectangle to be seen regardless of the cell background color. When <b>False</b>, the user can control the color of the dotted focus rectangle using the <var>FocusColor</var> property.
          </p>
          <p>
            It also controls the look of column/row resizing operations. When <b>True</b>, a line shows visually the size that the the column or row will have if the user ends the operation. When <b>False</b>, the column or row resizing takes effect  as the user drags the mouse.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.ValidateOnSetSelection">
        <short>Controls validation when the text for the selected cell is changed.</short>
        <descr>
          <p>
            <var>ValidateOnSetSelection</var> is a <var>Boolean</var> property used to control validation performed when the text for the selected cell is changed in the grid. The default value for ValidateOnSetSelection is <b>False</b>, as assigned in the constructor for the class.
          </p>
          <p>
            ValidateOnSetSelection is used in the <var>SelectionSetText</var> method to determine if the <var>ValidateEntry</var> method is called to validate the content in the cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ValidateEntry"/>
          <link id="TCustomGrid.OnValidateEntry"/>
        </seealso>
      </element>

      <element name="TCustomGrid.VisibleColCount">
        <short>The number of visible columns in the grid control.</short>
        <descr>
          <p>
            <var>VisibleColCount</var> is a read-only <var>Integer</var> property with the number of columns displayed in the visible area for the control. The property value is derived using the cached VisibleGrid information in the GCache property. It is not included in the LCL streaming mechanism, and is an artifact from older LCL versions.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.VisibleRowCount">
        <short>The number of visible rows in the grid control.</short>
        <descr>
          <p>
            VisibleRowCount is a read-only Integer property with the number of rows displayed in the visible area for the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnAfterSelection">
        <short>Event handler signalled after a new Selection is made in the grid.</short>
        <descr>
          <p>
            <var>OnAfterSelection</var> is a <var>TOnSelectEvent</var> property that is the event handler signalled when the Selection for the control has been moved.
          </p>
          <p>
            An application can implement and assign an object procedure using the event signature to perform any action needed for the notification. The arguments passed to the event handler include the column and row numbers <b>prior</b> to moving the Selection .
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnBeforeSelection">
        <short>Event handler signalled before changing the Selection in the grid control.</short>
        <descr>
          <p>
            OnBeforeSelection is a TOnSelectEvent property with the event handler signalled prior to changing the Selection for the grid control. OnBeforeSelection can be used to perform actions needed before the Selection is moved and an Editor is displayed for the newly selected cell.
          </p>
          <p>
            OnBeforeSelection is triggered (when assigned) from the MoveExtend method, and occurs when a new column or row is selected in the grid using keyboard navigation, using the mouse, or by assigning values to the Col or Row properties. It is also triggered when an explicit value is assigned to the Selection property.
          </p>
          <p>
            Use OnAfterSelection to performs actions needed after the Selection has been changed and the Editor has been displayed.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnCheckboxToggled">
        <short>Event handler signalled when the value for a Checkbox cell is toggled.</short>
        <descr>
          <p>
            <var>OnCheckboxToggled</var> is a <var>TToggledCheckboxEvent</var> property with the event handler signalled when the value for a check box-style cell is toggled. OnCheckboxToggled is triggered (when assigned) after the cell value has been changed and stored. OnCheckboxToggled is used descendent classes which implement a Toggle method, like TCustomDrawGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.ToggleCheckbox"/>
          <link id="TToggledCheckboxEvent"/>
        </seealso>
      </element>

      <element name="TCustomGrid.OnCompareCells">
        <short>Event handler signalled to compare the content in grid cells.</short>
        <descr>
          <p>
            OnCompareCells is a TOnCompareCells property with the event handler signalled to compare two cell values in the grid control. OnCompareCells is signalled (when assigned) by the DoCompareCells method, and occurs when column or row values are examined in the Sort method. The Result parameter contains the relative sort order for the compared cell values.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnPrepareCanvas">
        <short>Event handler signalled to prepare the Canvas for drawing.</short>
        <descr>
          <p>
            <var>OnPrepareCanvas</var> is a <var>TOnPrepareCanvasEvent</var> property with the event handler signalled to configure the control <var>Canvas</var> to draw a cell using a specific state. OnPrepareCanvas is signalled (when assigned) from the <var>PrepareCanvas</var> method. It allows the Pen, Brush, Font, and Color defaults assigned in PrepareCanvas to be overridden for a specified column, row, or TGridDrawState value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.PrepareCanvas"/>
          <link id="TOnPrepareCanvasEvent"/>
          <link id="TGridDrawState"/>
        </seealso>
      </element>

      <element name="TCustomGrid.OnDrawCell">
        <short>Event handler signalled to draw a cell in the grid control.</short>
        <descr>
          <p>
            <var>OnDrawCell</var> is a <var>TOnDrawCell</var> property with the event handler signalled to render a cell in the grid control. Parameters passed to the event handler identify the column and row numbers for the cell, and the drawing state.
          </p>
          <p>
            OnDrawCell can be used along with the default drawing mechanism for the grid control. Set the <var>DefaultDrawing</var> property to <b>True</b> to allow the grid to render the cell background, state, and focus. Use OnDrawCell to handle the text which appears in the specified cell.
          </p>
          <p>
            OnDrawCell can be used to render all aspects of a cell by setting DefaultDrawing to <b>False</b>. In this situation, the event handler must handle rendering the background, state, focus, and text for the cell.
          </p>
          <p>
            OnDrawCell is signalled (when assigned) from the <var>DrawCell</var> method at run-time. It is not signalled at design-time. OnDrawCell occurs after the canvas has been configured using <var>PrepareCanvas</var>, and after <var>DefaultDrawCell</var> when DefaultDrawing is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawCell"/>
          <link id="TCustomGrid.DefaultDrawing"/>
          <link id="TCustomGrid.PrepareCanvas"/>
          <link id="TOnDrawCell"/>
        </seealso>
      </element>

      <element name="TCustomGrid.OnEditButtonClick">
        <short>Event handler signalled when the button in an Editor is clicked.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnButtonClick">
        <short>Event handler signalled when a button in a column header is clicked.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnPickListSelect">
        <short>Event handler signalled when an item is selected from a pick list.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnSelection">
        <short>Event handler signalled when an area is selected in the grid control.</short>
        <descr>
          <p>
            The <var>Col</var> and <var>Row</var> parameters contain the column and the row of the highlighted cell.
          </p>
          <p>
            Application developers can use the <var>OnSelection</var> and <var>OnBeforeSelection</var> events to react to focus changes. Component developers should use the ??? method instead.
          </p>
        </descr>
      </element>

      <element name="TCustomGrid.OnSelectEditor">
        <short>Event handler signalled to select a cell Editor for the current cell.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnTopLeftChanged">
        <short>Event handler signalled when the top left cell is changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnUserCheckboxBitmap">
        <short>Event handler signalled to get the user-defined bitmap used for a checkbox cell.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnUserCheckboxImage">
        <short>Event handler signalled to get the user-defined image used for a checkbox cell.</short>
        <descr>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.OnValidateEntry">
        <short>Event handler signalled to perform validation for a cell value.</short>
        <descr>
          <p>
            <var>OnValidateEntry</var> is a <var>TValidateEntryEvent</var> which implements the event handler signalled to perform validation for cells in the <var>ValidateEntry</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ValidateEntry"/>
        </seealso>
      </element>

     <element name="TCustomGrid.FlipRect">
       <short>Flips coordinates in the cell rectangle when BiDi mode or RTL alignment is used.</short>
       <descr/>
       <seealso/>
     </element>
     <element name="TCustomGrid.FlipRect.Result">
       <short/>
     </element>
     <element name="TCustomGrid.FlipRect.ARect">
       <short/>
     </element>

     <element name="TCustomGrid.FlipPoint">
       <short>Flips cell coordinates in the specified point when BiDi mode or RTL alignment is used.</short>
       <descr/>
       <seealso/>
     </element>
     <element name="TCustomGrid.FlipPoint.Result">
       <short/>
     </element>
     <element name="TCustomGrid.FlipPoint.P">
       <short/>
     </element>

     <element name="TCustomGrid.FlipX">
       <short>Flips the horizontal position in the client when BiDi mode or RTL alignment is used.</short>
       <descr/>
       <seealso/>
     </element>
     <element name="TCustomGrid.FlipX.Result">
       <short/>
     </element>
     <element name="TCustomGrid.FlipX.X">
       <short/>
     </element>

     <element name="TCustomGrid.OnGetCellHint">
       <short>Gets the hint text for a cell.</short>
       <descr>
         <p>
           <var>OnGetCellHint</var> is a <var>TGetCellHintEvent</var> with the event handler signalled to get the hint text for a cell in the grid control. OnGetCellHint is signalled when  <var>goCellHints</var> or <var>goTruncCellHints</var> enumeration values are included in the <var>Options</var> property.
         </p>
         <p>
           OnGetCellHint is signalled (when assigned) from the <var>GetCellHintText</var> and <var>GetTruncCellHintText</var> methods called when <var>ShowCellHintWindow</var> applies the <var>CellHintPriority</var> for the grid control.
         </p>
       </descr>
       <seealso>
         <link id="TGridOption"/>
         <link id="TCustomGrid.Options"/>
         <link id="TCustomGrid.CellHintPriority"/>
         <link id="TCustomGrid.GetCellHintText"/>
         <link id="TCustomGrid.GetTruncCellHintText"/>
       </seealso>
     </element>

     <element name="TCustomGrid.OnSaveColumn">
       <short>Event handler signalled when a column is saved in the SaveColumns method.</short>
       <descr/>
       <seealso>
         <link id="TCustomGrid.SaveToFile"/>
         <link id="TCustomGrid.SaveToStream"/>
       </seealso>
     </element>

     <element name="TCustomGrid.OnLoadColumn">
       <short>Event handler signalled when a column is loaded in the LoadColumns method.</short>
       <descr/>
       <seealso>
         <link id="TCustomGrid.LoadFromFile"/>
         <link id="TCustomGrid.LoadFromStream"/>
       </seealso>
     </element>

      <element name="TCustomGrid.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TCustomGrid</var>. Create calls the inherited <var>Create</var> method, allocates the lists with columns and rows, initializes many visual properties and options, creates the various cell editors, and loads any bitmaps required for the control.
          </p>
          <remark>
            The inherited method calls SetBounds and VisualChange, so the grid needs to be fully instantiated it is called.
          </remark>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomGrid.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomGrid.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for <var>TCustomGrid</var>. Destroy frees various resources including editors, columns, rows, and fonts. It calls the inherited <var>Destroy</var> method.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomGrid.Invalidate" link="#lcl.controls.TControl.Invalidate"/>
      <element name="TCustomGrid.EditingDone" link="#lcl.controls.TControl.EditingDone"/>

      <element name="TCustomGrid.AdjustInnerCellRect">
        <short>Adjusts the cell rectangle to account for grid lines drawn around a cell.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.AdjustInnerCellRect.ARect">
        <short>Cell rectangle adjusted in the method.</short>
      </element>

      <element name="TCustomGrid.AutoAdjustColumns">
        <short>Automatically adjusts columns sizes to the width of their content.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.BeginUpdate">
        <short>Begins an update to the grid control.</short>
        <descr>
          <p>
            <var>BeginUpdate</var> is a procedure used to start an update to the layout or content in a grid control. BeginUpdate increments an internal member used to prevent nested calls to the method. The protection remains in effect until the <var>EndUpdate</var> method is called. BeginUpdate is used in the implementation of methods that alter the physical appearance of the grid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.EndUpdate"/>
          <link id="TCustomGrid.VisualChange"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CellRect">
        <short> The coordinates for the specified cell (ACol, ARow) as a standard rectangle (TRect).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.CellRect.Result">
        <short>TRect instance with the coordinates for the cell.</short>
      </element>
      <element name="TCustomGrid.CellRect.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.CellRect.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.CellToGridZone">
        <short>Determines the grid zone for the specified cell.</short>
        <descr>
          <p>
            <var>CellToGridZone</var> is a <var>TGridZone</var> function used to get the grid zone where the specified cell is located. It is similar in nature to the MouseToGridZone method, but uses grid coordinates instead of mouse coordinates. The return value is one of the TGridZone enumeration values.
          </p>
          <dl>
            <dt>gzInvalid</dt>
            <dd>Returned when ACol or ARow contain a negative number.</dd>
            <dt>gzFixedCells</dt>
            <dd>Returned when both ACol and ARow are in the FixedCols and FixedRows for the grid.</dd>
            <dt>gzFixedCol</dt>
            <dd>Returned when ACol is one of the FixedCols for the grid.</dd>
            <dt>gzFixedRow</dt>
            <dd>Returned when ARow is one of the FixedRows for the grid.</dd>
            <dt>gzNormal</dt>
            <dd>Default value returned for a cell that is neither a fixed column nor a fixed row.</dd>
          </dl>
          <p>
            CellToGridZone is used in the implementation of methods like MouseUp, CacheMouseDown, Clean, and LoadContent.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.CellToGridZone.Result">
        <short>TGridZone enumeration value for the cell.</short>
      </element>
      <element name="TCustomGrid.CellToGridZone.aCol">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TCustomGrid.CellToGridZone.aRow">
        <short>Row number examined in the method.</short>
      </element>

      <element name="TCustomGrid.CheckPosition">
        <short>Determines if the cell can be selected, or gets a suitable position using auto-advance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomGrid.ClearCols">
        <short>Clears the values in the FixedCols and Cols properties.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.Clear"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ClearCols.Result">
        <short>True if the columns are cleared in the method.</short>
      </element>

      <element name="TCustomGrid.ClearRows">
        <short>Clears the cached fixed rows and row count values for the grid control.</short>
        <descr>
          <p>
            ClearRows is a Boolean function used to all rows in the grid control. This includes the fixed row for the control. The return value is True if rows are successfully cleared in the method. It is False if the grid is already empty.
          </p>
          <p>
            Sets EditorMode to False if a cell editor is visible on the grid control. Sets values in the FixedRows and and RowCount properties to 0 (zero).
          </p>
          <p>
            It does not change values in the FixedCols or ColCount properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Clear"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ClearRows.Result">
        <short>True if the rows are cleared in the method.</short>
      </element>

      <element name="TCustomGrid.Clear">
        <short>Clear all cells in the grid.</short>
        <descr>
          <p>
            Resets the column and row counts to 0 (zero). The content in the Grid is emptied.
          </p>
          <p>
            Compatibility: This applies to Lazarus grids only; under Delphi/Kylix a grid can't be completely emptied.
          </p>
        </descr>
      </element>

      <element name="TCustomGrid.ClearSelections">
        <short>Clears the current range selection(s) and redraws the grid control.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.MouseDown"/>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorByStyle">
        <short>Select a cell editor control with the specified style.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorByStyle.Result">
        <short>Cell editor for the specified style.</short>
      </element>
      <element name="TCustomGrid.EditorByStyle.Style">
        <short>Editor style selected in the method.</short>
      </element>

      <element name="TCustomGrid.EditorKeyDown">
        <short>Implements the OnKeyDown event handler for the cell editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorKeyDown.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TCustomGrid.EditorKeyDown.Key">
        <short>Key examined in the method.</short>
      </element>
      <element name="TCustomGrid.EditorKeyDown.Shift">
        <short>Shift / Ctrl / Alt modifier for the Key.</short>
      </element>

      <element name="TCustomGrid.EditorKeyPress">
        <short>Implements the OnKeyPress event handler for the cell editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorKeyPress.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TCustomGrid.EditorKeyPress.Key">
        <short>Key press examined in the method.</short>
      </element>

      <element name="TCustomGrid.EditorUTF8KeyPress">
        <short>
          Implements the UTF-8 key press handler for the editor in the grid control.
        </short>
        <descr>
          <p>
            <var>EditorUTF8KeyPress</var> is assigned as the <var>OnUTF8KeyPress</var> event handler for the <var>Editor</var> in the grid control. It calls the inherited <var>UTF8KeyPress</var> method, indicating that the value in <var>UTF8Key</var> is targeted at the Editor control for the grid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TWinControl.UTF8KeyPress"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorUTF8KeyPress.Sender">
        <short>Control for the event notification.</short>
      </element>
      <element name="TCustomGrid.EditorUTF8KeyPress.UTF8Key">
        <short>UTF-8-encoded code point handled in the method.</short>
      </element>

      <element name="TCustomGrid.EditorKeyUp">
        <short>Implements the OnKeyUp event handler for the cell editor.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.EditorKeyUp.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TCustomGrid.EditorKeyUp.key">
        <short>Key examined in the method.</short>
      </element>
      <element name="TCustomGrid.EditorKeyUp.shift">
        <short>Shift / Ctrl / Alt modifier for the Key.</short>
      </element>

      <element name="TCustomGrid.EditorTextChanged">
        <short>Updates the grid control when the value in a cell Editor is changed.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.EditorTextChanged"/>
          <link id="TStringCellEditor"/>
          <link id="TPickListCellEditor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorTextChanged.aCol">
        <short>Column number for the modified cell.</short>
      </element>
      <element name="TCustomGrid.EditorTextChanged.aRow">
        <short>Row number for the modified cell.</short>
      </element>
      <element name="TCustomGrid.EditorTextChanged.aText">
        <short>New value for the cell.</short>
      </element>

      <element name="TCustomGrid.EndUpdate">
        <short>Finishes an update to the grid control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.EndUpdate.aRefresh">
        <short>True when the grid control needs to be redrawn in the method.</short>
      </element>

      <element name="TCustomGrid.EraseBackground">
        <short>Clears the background for the grid control.</short>
        <descr>
          <p>
            EraseBackground is overridden in TCustomGrid, and has an empty implementation.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.EraseBackground.DC">
        <short>Device context for the drawing operation.</short>
      </element>

      <element name="TCustomGrid.FixDesignFontsPPI">
        <short>Adjusts fonts in the control to the specified design-time PixelsPerInch.</short>
        <descr>
          <p>
            <var>FixDesignFontsPPI</var> is an overridden  procedure used to adjust the assigned font size for grid columns and their titles to the specified design-time Pixels Per Inch (PPI). This is needed because the display density (PPI) used for fonts is not stored in Form resource (.LFM) files. When the design-time PPI is different than the run-time setting, font scaling issues can occur.
          </p>
          <p>
            FixDesignFontsPPI restores the design-time font PPI so it can be used in the LCL Scaling mechanism. FixDesignFontsPPI calls the inherited method on entry, and sets the value for the <var>PixelsPerInch</var> property in <var>TitleFont</var> when needed. Column definitions stored in the <var>Columns</var> property are also adjusted (when needed) by calling the FixDesignFontsPPI method for each of the <var>TGridColumn</var> instances in the container.
          </p>
          <p>
            FixDesignFontsPPI is called when scaling is enabled, and the Form which hosts the control calls its <var>Loaded</var> method during LCL streaming.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ScaleFontsPPI"/>
          <link id="TStringGrid.Columns"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn.FixDesignFontsPPI"/>
          <link id="TControl.FixDesignFontsPPI"/>
        </seealso>
      </element>
      <element name="TCustomGrid.FixDesignFontsPPI.ADesignTime">
        <short>Design-time PixelsPerInch needed for fonts in the control.</short>
      </element>

      <element name="TCustomGrid.Focused">
        <short>Indicates if the grid is focused or has an active focused cell Editor.</short>
        <descr>
          <var>Focused</var> in an overridden method in <var>TCustomGrid</var>. It re-implements the method from the ancestor class, and return <b>True</b> if the control or an assigned cell editor for the control has input focus. It does not call the inherited method.
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TWinControl.CanTab"/>
          <link id="TWinControl.HandleAllocated"/>
          <link id="TWinControl.Focused"/>
          <link id="TControl.Visible"/>
        </seealso>
      </element>
      <element name="TCustomGrid.Focused.Result">
        <short>True when the grid or the cell Editor has focus.</short>
      </element>

      <element name="TCustomGrid.HasMultiSelection">
        <short>Indicates if multi-select range selection mode is enabled and in use for the grid.</short>
        <descr>
          <p>
            <var>HasMultiSelection</var> is a <var>Boolean</var> function used to determine if multi-select range selection mode is enabled and in use for the grid. The return value is <b>True</b> when <var>Options</var> includes the value <var>goRangeSelect</var>, <var>RangeSelectMode</var> contains <var>rsmMulti</var>, and <var>Selections</var> contains selection cell rectangles.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.RangeSelectMode"/>
          <link id="TRangeSelectMode"/>
          <link id="TGridOptions"/>
          <link id="TGridOption"/>
        </seealso>
      </element>
      <element name="TCustomGrid.HasMultiSelection.Result">
        <short>True when multi-select range selection mode is enabled and in use for the grid.</short>
      </element>

      <element name="TCustomGrid.HideSortArrow">
        <short> Hides the arrow drawn as the sort indicator for a column.</short>
        <descr>
          <p>
            <var>HideSortArrow</var> is a procedure used to hide the arrow drawn for the sort indicator defined in <var>SortColumn</var>. HideSortArrow sets the value in SortColumn to <b>-1</b> to indicate that the sort column is not defined, and calls <var>InvalidateGrid</var> to redraw the contents in the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SortColumn"/>
          <link id="TCustomGrid.InvalidateGrid"/>
          <link id="TCustomGrid.Sort"/>
        </seealso>
      </element>

      <element name="TCustomGrid.InvalidateCol">
        <short>
          Invalidates all cells in the specified column, and causes them to be redrawn.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.InvalidateCol.ACol">
        <short>Column number for the cells invalidated in the method.</short>
      </element>

      <element name="TCustomGrid.InvalidateCell">
        <short>Renders a cell invalid, and redraws the cell if required.</short>
        <descr>
          <p>
            InvalidateCell is an overloaded method in TCustomGrid used to invalidate the cell at the column and row numbers in ACol and ARow. The Redraw argument is optional, and forces the cell to be re-drawn as soon as it is invalidated. The default value for Redraw is False, and defers the draw operation until the next time the control is updated.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.InvalidateCell.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.InvalidateCell.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomGrid.InvalidateCell.Redraw">
        <short>True to redraw the cell immediately, False to defer until the next update for the control.</short>
      </element>

      <element name="TCustomGrid.InvalidateFromCol">
        <short>
          Invalidates cells starting at the specified column number; all rows from the start position are affected.
        </short>
        <descr>
          <p>
            Calls the InvalidateRect routine to force the cells to be re-drawn. No actions are performed in the method if a Handle has not been allocated for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.InvalidateFromCol.ACol">
        <short>Initial column number updated in the method.</short>
      </element>

      <element name="TCustomGrid.InvalidateGrid">
        <short>Invalidates the client area for the grid control.</short>
        <descr>
          <p>
            Calls the Invalidate method when no other updates are active for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Invalidate"/>
          <link id="TCustomGrid.BeginUpdate"/>
          <link id="TCustomGrid.EndUpdate"/>
        </seealso>
      </element>

      <element name="TCustomGrid.InvalidateFocused">
        <short>Invalidates a focused or highlighted cell or row.</short>
        <descr>
          <p>
            InvalidateFocused uses cached grid data in <var>GCache</var> to determine whether the grid control has valid columns and rows. No actions are performed in the method when columns and rows are not present in the cached grid information.
          </p>
          <p>
            The values in <var>Options</var> are used to determine whether row select or row highlighting are enabled for the control. If either is present in Options, the <var>InvalidateRow</var> method is called for the current <var>Row</var> number. If neither option is used, the <var>InvalidateCell</var> method is called for the current cell in <var>Col</var> and <var>Row</var>.
          </p>
          <p>
            InvalidateFocused is called from methods that respond to focus changes involving the grid control, including: <var>WMKillFocus</var>, <var>WMSetFocus</var>, <var>DoEnter</var>, and <var>DoExit</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.InvalidateRange">
        <short>Invalidates a cell range in the grid invalid, and causes it to be redrawn.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.InvalidateRange.ARange">
        <short>TRect with the range of cells affected in the method.</short>
      </element>

      <element name="TCustomGrid.InvalidateRow">
        <short>Invalidates the drawing rectangle for the specified row number.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.InvalidateRow.ARow">
        <short>Row number affected in the method.</short>
      </element>

      <element name="TCustomGrid.IsCellVisible">
        <short>Determines whether the specified cell is visible.</short>
        <descr>
          <p>
            <var>IsCellVisible</var> is a <var>Boolean</var> function which indicates whether the cell specified by <var>ACol</var> and <var>ARow</var> is in the visible area for the grid control. IsCellVisible uses the internal cached grid information to determine if the cell is within the cached visible coordinates for the control.
          </p>
          <p>
            IsCellVisible is used in methods like <var>DrawRow</var>, <var>DoEnter</var>, and <var>InvalidateCell</var>.
          </p>
          <p>
            Use <var>IsFixedCellVisible</var> to determine whether a specific fixed cell is within the visible area for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.IsFixedCellVisible"/>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.InvalidateCell"/>
          <link id="TGridDataCache"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsCellVisible.Result">
        <short>True if the cell is in the visible area for the grid control.</short>
      </element>
      <element name="TCustomGrid.IsCellVisible.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.IsCellVisible.aRow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.IsFixedCellVisible">
        <short>Determines if the specified cell is a visible fixed cell in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.IsFixedCellVisible.Result">
        <short>True if the specified cell is both fixed and visible in the control.</short>
      </element>
      <element name="TCustomGrid.IsFixedCellVisible.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomGrid.IsFixedCellVisible.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomGrid.LoadFromFile">
        <short>Loads grid data from a file with the specified file name.</short>
        <descr>
          <p>
            FileName contains name of the file with the content loaded in the method, and may included a fully qualified path for the given file name. An Exception is raised with the message in rsGridFileDoesNotExist if a file with the specified path and name is not found.
          </p>
          <p>
            LoadFromFile creates a temporary TXMLConfig instance that is used load the content from the specified file.  The private LoadSub method is called using the configuration file instance to read the content in the file, and may raise an exception if the XML content does not have a valid version element.
          </p>
          <p>
            LoadFromFile reverses the actions performed in the SaveToFile method. Please note that the SaveOptions property determines the information available to be loaded from the file.
          </p>
          <p>
            Use LoadFromStream to read the content in the grid from a TStream instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.LoadFromStream"/>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveOptions"/>
          <link id="#lazutils.laz2_xmlcfg.TXMLConfig">TXMLConfig</link>
        </seealso>
      </element>
      <element name="TCustomGrid.LoadFromFile.FileName">
        <short>Name of the file with the content loaded in the method.</short>
      </element>

      <element name="TCustomGrid.LoadFromStream">
        <short>Loads grid data from the specified stream.</short>
        <descr>
          <p>
            AStream is the TStream instance with the content loaded in the method. The stream must be positioned at the location where the information for the grid begins. The stream position is not changed after its content has been loaded.
          </p>
          <p>
            LoadFromStream creates a temporary TXMLConfig instance that is used load the content from the specified stream.  The private LoadSub method is called using the configuration file instance to read the content in the file, and may raise an exception if the XML content does not have a valid version element.
          </p>
          <p>
            LoadFromStream reverses the actions performed in the SaveToStream method. Please note that the SaveOptions property determines the information available to be loaded from the stream.
          </p>
            <p>
              Use LoadFromFile to read the content in the grid from a file on the local file system.
            </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.LoadFromFile"/>
          <link id="TCustomGrid.SaveToStream"/>
          <link id="TCustomGrid.SaveOptions"/>
          <link id="#lazutils.laz2_xmlcfg.TXMLConfig">TXMLConfig</link>
        </seealso>
      </element>
      <element name="TCustomGrid.LoadFromStream.AStream">
        <short>TStream instance with values loaded in the method.</short>
      </element>

      <element name="TCustomGrid.MouseCoord">
        <short>Finds the mouse coordinates relative to the grid origin.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.MouseCoord.Result">
        <short/>
      </element>
      <element name="TCustomGrid.MouseCoord.X">
        <short/>
      </element>
      <element name="TCustomGrid.MouseCoord.Y">
        <short/>
      </element>

      <element name="TCustomGrid.MouseToCell">
        <short>Converts mouse coordinates to the grid coordinates for a cell in the grid.</short>
        <descr/>
        <seealso/>
        <version>
          ACol and ARow arguments were changed to output parameters in LCL version 2.1 (revision 65087).
        </version>
      </element>
      <element name="TCustomGrid.MouseToCell.Result">
        <short>TPoint instance with the grid coordinates for the cell.</short>
      </element>
      <element name="TCustomGrid.MouseToCell.Mouse">
        <short>TPoint instance with the mouse coordinates converted in the method.</short>
      </element>
      <element name="TCustomGrid.MouseToCell.X">
        <short>Horizontal coordinate for the mouse.</short>
      </element>
      <element name="TCustomGrid.MouseToCell.Y">
        <short>Vertical coordinate for the mouse.</short>
      </element>
      <element name="TCustomGrid.MouseToCell.ACol">
        <short>Column number for the mouse position.</short>
      </element>
      <element name="TCustomGrid.MouseToCell.ARow">
        <short>Row number for the mouse position.</short>
      </element>

      <element name="TCustomGrid.MouseToLogCell">
        <short>Converts mouse coordinates to the position for a logical cell in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.MouseToLogCell.Result">
        <short/>
      </element>
      <element name="TCustomGrid.MouseToLogCell.Mouse">
        <short/>
      </element>

      <element name="TCustomGrid.MouseToGridZone">
        <short>Converts mouse position and cell coordinates to a grid zone.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomGrid.MouseToGridZone.Result">
        <short/>
      </element>
      <element name="TCustomGrid.MouseToGridZone.X">
        <short/>
      </element>
      <element name="TCustomGrid.MouseToGridZone.Y">
        <short/>
      </element>
      <element name="TCustomGrid.MouseToGridZone.CellCoords">
        <short/>
      </element>

      <element name="TCustomGrid.SaveToFile">
        <short>Saves grid information to a file with the specified name.</short>
        <descr>
          <p>
            SaveToFile is a method used to store information from a grid control the file name specified in the FileName argument. FileName can include a fully-qualified path to the file. If the file aready exists on the local file system, it is deleted and re-created before writing values.
          </p>
          <p>
            SaveToFile creates a temporary TXMLConfig instance that is used to write XML values to the specified file, and may include information about the text, layout, cell display settings, grid options, and range selections for the control.
          </p>
          <p>
            SaveToFile calls the SaveContent method to write the needed values to the XML configuration file.
            Please note that the SaveOptions property determines the information stored in the method.
          </p>
          <p>
            Use LoadFromFile to load settings and content from the XML file into the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SaveToStream"/>
          <link id="TCustomGrid.SaveContent"/>
          <link id="TCustomGrid.SaveOptions"/>
          <link id="TCustomGrid.LoadFromFile"/>
          <link id="#lazutils.laz2_xmlcfg.TXmlConfig">TXmlConfig</link>
        </seealso>
      </element>
      <element name="TCustomGrid.SaveToFile.FileName">
        <short>File name where the grid information is stored.</short>
      </element>

      <element name="TCustomGrid.SaveToStream">
        <short>Saves grid information to the specified stream.</short>
        <descr>
          <p>
            <var>SaveToStream</var> is a method used to store information from the grid control to the <var>TStream</var> instance specified in <var>AStream</var>. SaveToStream creates a <var>TXMLConfig</var> class instance that is used to capture the layout, cell display settings, grid options, and range selections for the control.
          </p>
          <p>
            SaveToStream calls the <var>SaveContent</var> method to generate the XML content for the grid control. The XML content is written to <var>AStream</var> using the <var>WriteToStream</var> method in <var>TXMLConfig</var>.
          </p>
          <p>
            Use <var>LoadFromStream</var> to read the grid information stored in the stream.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SaveContent"/>
          <link id="TCustomGrid.SaveGridOptions"/>
          <link id="TCustomGrid.LoadFromStream"/>
          <link id="#lazutils.laz2_xmlcfg.TXMLConfig.WriteToStream">TXMLConfig.WriteToStream</link>
        </seealso>
      </element>
      <element name="TCustomGrid.SaveToStream.AStream">
        <short>TStream instance where grid information is stored.</short>
      </element>

      <element name="TCustomGrid.ScaleFontsPPI">
        <short>Resizes fonts using a target PPI and a scaling factor.</short>
        <descr>
          <p>
            <var>ScaleFontsPPI</var> is an overridden procedure used to resize fonts in the control to the specified display density (Pixels per Inch) using the scaling factor in <var>AProportion</var>. This occurs when the run-time PPI setting for a font differs from the design-time value stored in the component resource.
          </p>
          <p>
            ScaleFontsPPI is overridden to apply the scaling factor to the <var>Font</var> and <var>TitleFont</var> for the control, and any fonts assignments in the <var>Columns</var> collection. The inherited <var>DoScaleFontsPPI</var> method is called to apply the scaling factor to the TFont instance passed as an argument.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn"/>
          <link id="#lcl.controls.TControl.Font"/>
          <link id="#lcl.controls.TControl.ScaleFontsPPI">TControl.ScaleFontsPPI</link>
        </seealso>
      </element>
      <element name="TCustomGrid.ScaleFontsPPI.AToPPI">
        <short>New PPI setting for the scaled font sizes.</short>
      </element>
      <element name="TCustomGrid.ScaleFontsPPI.AProportion">
        <short>Scaling factor applied to the font sizes.</short>
      </element>

      <element name="TCustomGrid.SetFocus">
        <short>Gives focus to the grid control.</short>
        <descr>
          <p>
            <var>SetFocus</var> is an overridden procedure used to make the grid control the currently focused control. SetFocus ensures that pending <b>Tab</b> key navigation for an active cell editor is handled properly. If an Editor is both available and visible, it calls its SetFocus method. Otherwise, the grid control becomes the focused control.
         </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomGrid.CursorState">
        <short>Current cursor state for the grid control.</short>
        <descr>
          <p>
            <var>CursorState</var> is a read-only <var>TGridCursorState</var> property which contains the current cursor state for the grid control. The value in CursorState is updated when methods are called which perform resizing or moving/dragging for columns and rows.
          </p>
          <p>
            Use the <var>ColRowDraggingCursor</var>, <var>ColSizingCursor</var>, or  <var>RowSizingCursor</var> properties to read or write the cursor shapes used for the corresponding actions.
          </p>
          <p>
            Use <var>RestoreCursor</var> to set the cursor state to its default value (gcsDefault).
          </p>
        </descr>
        <seealso>
          <link id="TGridCursorState"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SelectedRange">
        <short>Provides indexed access to TGridRect values in the currently selected range.</short>
        <descr>
          <p>
            <var>SelectedRange</var> is a read-only indexed <var>TGridRect</var> property used to get the cell rectangles in <var>Selections</var> for the grid control. SelectedRange is applicable when multi-select range mode has been enabled in the <var>RangeSelectMode</var> property. Otherwise, the current cell selection at <var>Col</var> and <var>Row</var> is returned as the selected range value.
          </p>
          <p>
            Use <var>SelectedRangeCount</var> to get the number <var>TGridRect</var> instances in <var>SelectedRange</var>.
          </p>
          <p>
            Use <var>AddSelectedRange</var> to add the current cell selection to the multi-select range in <var>Selections</var>.
          </p>
          <p>
            Use <var>ClearSelections</var> to remove the cell rectangles stored in <var>Selections</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RangeSelectMode"/>
          <link id="TCustomGrid.AddSelectedRange"/>
          <link id="TCustomGrid.ClearSelections"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SelectedRangeCount">
        <short>Number of cell rectangles in the selected range for the grid.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SelectedRange"/>
          <link id="TCustomGrid.RangeSelectMode"/>
          <link id="TCustomGrid.AddSelectedRange"/>
          <link id="TCustomGrid.ClearSelections"/>
          <link id="TRangeSelectMode"/>
          <link id="TGridRectArray"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SortOrder">
        <short>Controls the order used for the sort column (ascending or descending).</short>
        <descr>
          <p>
            <var>SortOrder</var> is a <var>TSortOrder</var> property which indicates the sort order used for the column specified in <var>SortColumn</var>. It is used in the <var>DoCompareCells</var> method to determine the order for values during the comparison.
          </p>
          <p>
            SortOrder is used in the <var>HeaderClick</var> method to set or invert the ordering when column header for is clicked. It is also used to determine the image displayed in the column heading for the sort column.
          </p>
          <p>
            The default value for the property is <var>soAscending</var>.
          </p>
        </descr>
        <seealso>
          <link id="TSortOrder"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SortColumn">
        <short>Column number used to sort the rows in the grid.</short>
        <descr>
          <p>
            <var>SortColumn</var> is a read-only <var>Integer</var> that contains the column position used to sort content rows in the grid. SortColumn is used in the <var>HeaderClick</var> method to determine if the click occurred on the fixed header cell represented by the property. It is also used in the <var>DrawColumnTitleImage</var> method if the header cell needs to render an image representing the current sort order.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.HeaderClick"/>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
        </seealso>
      </element>

      <element name="TCustomGrid.TabStop">
        <short>Allows the user to navigate to this control, by pressing the Tab key.</short>
        <descr>
          <p>
            The default value for TabStop is True in TCustomGrid.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
        </seealso>
      </element>

      <element name="TCustomGrid.IMEStartComposition">
        <short>Handles IME Composition start messages.</short>
        <descr>Defined for Windows platforms only.</descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.IMEStartComposition.Message">
        <short/>
      </element>

      <element name="TCustomGrid.IMEComposition">
        <short>Handles IME Composition messages.</short>
        <descr>
          Defined for Windows platforms only.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.IMEComposition.Msg">
        <short/>
      </element>

      <element name="TCustomGrid.IMEEndComposition">
        <short>Handles the WM_IME_ENDCOMPOSITION message.</short>
        <descr>
          <p>
            Handles the Input Method Editor API WM_IME_ENDCOMPOSITION message.
          </p>
          <p>
            Dispatches the message specified in <var>Msg</var> in the current visible and active <var>Editor</var> for the control. Defined for the Windows platform only.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomGrid.IMEEndComposition.Msg">
        <short>Message handled in the method.</short>
      </element>

      <element name="TGetEditEvent">
        <short>Specifies an event handler used to get edit values or masks in a grid.</short>
        <descr>
          <var>TGetEditEvent</var> is an object procedure type used for event handlers which  get edit values or masks in a grid control. TGetEditEvent is the type used for the <var>OnGetEditMask</var> and <var>OnGetEditText</var> event handlers in <var>TCustomDrawGrid</var>.
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnGetEditMask"/>
          <link id="TCustomDrawGrid.OnGetEditText"/>
        </seealso>
      </element>
      <element name="TGetEditEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TGetEditEvent.ACol">
        <short>Column number for the notification.</short>
      </element>
      <element name="TGetEditEvent.ARow">
        <short>Row number for the notification.</short>
      </element>
      <element name="TGetEditEvent.Value">
        <short>Value returned from the event handler.</short>
      </element>

      <element name="TSetEditEvent">
        <short>Specifies an event handler used to set the value for edit text in a grid.</short>
        <descr>
          <p>
            <var>TSetEditEvent</var> is an object procedure type used to implement event handlers which set the edit value for a cell in a grid control. TSetEditEvent is the type used for the <var>OnSetEditText</var> property in <var>TCustomDrawGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnSetEditText"/>
        </seealso>
      </element>
      <element name="TSetEditEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TSetEditEvent.ACol">
        <short>Column number for the notification.</short>
      </element>
      <element name="TSetEditEvent.ARow">
        <short>Row number for the notification.</short>
      </element>
      <element name="TSetEditEvent.Value">
        <short>Value applied to the specified cell in the event handler.</short>
      </element>

      <element name="TGetCheckboxStateEvent">
        <short>Specifies an event handler signalled to get the state for a Checkbox cell in a grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGetCheckboxStateEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TGetCheckboxStateEvent.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TGetCheckboxStateEvent.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TGetCheckboxStateEvent.Value">
        <short>Checkbox state retrieved for the cell.</short>
      </element>

      <element name="TSetCheckboxStateEvent">
        <short>Specifies an event handler signalled to set the state for a Checkbox cell in a grid.</short>
        <descr>
          <p>
            <var>TSetCheckboxStateEvent</var> is an object procedure type which specifies an event handler signalled to set the state for a Checkbox cell in a grid control. TSetCheckboxStateEvent is the type used to implement the <var>OnSetCheckboxState</var> property in <var>TCustomDrawGrid</var>.
          </p>
          <p>
            See <var>TGetCheckboxStateEvent</var> for the event handler signalled to get the value for a checkbox cell in a grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnSetCheckboxState"/>
          <link id="TGetCheckboxStateEvent"/>
        </seealso>
      </element>
      <element name="TSetCheckboxStateEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TSetCheckboxStateEvent.ACol">
        <short>Column number for the modified cell.</short>
      </element>
      <element name="TSetCheckboxStateEvent.ARow">
        <short>Row number for the modified cell.</short>
      </element>
      <element name="TSetCheckboxStateEvent.Value">
        <short>New checkbox state for the cell.</short>
      </element>

      <element name="TCustomDrawGrid">
        <short>The base class for a custom-drawn grid control.</short>
        <descr>
          <p>
            <var>TCustomDrawGrid</var> is a <var>TCustomGrid</var> descendant used as the base class for custom-drawn grids including <var>TDrawGrid</var> and <var>TStringGrid</var>. Applications should not create instance of TCustomDrawGrid; use one of the descendent classes like <var>TDrawGrid</var> or <var>TStringGrid</var>.
          </p>
          <p>
            TCustomDrawGrid provides overridden methods needed to work with cells using the TVirtualGrid class instance in the Grid property. It displays information as a matrix of rows and columns, and is oriented towards rendering both graphical information and textual content.
          </p>
          <p>
            The OnDrawCell event handler is provided to render the cell content in the grid, and can be used to render images or directly access the Canvas for the control. Default cell drawing logic is also implemented using the properties and methods from the ancestor class, and may be accessed from within the OnDrawCell event handler.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
          <link id="TDrawGrid"/>
          <link id="TStringGrid"/>
          <link id="TOnDrawCell"/>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>

      <element name="TCustomDrawGrid.FEditorRow"/>
      <element name="TCustomDrawGrid.FEditorCol"/>
      <element name="TCustomDrawGrid.FOnColRowDeleted"/>
      <element name="TCustomDrawGrid.FOnColRowExchanged"/>
      <element name="TCustomDrawGrid.FOnColRowInserted"/>
      <element name="TCustomDrawGrid.FOnColRowMoved"/>
      <element name="TCustomDrawGrid.FOnGetCheckboxState"/>
      <element name="TCustomDrawGrid.FOnGetEditMask"/>
      <element name="TCustomDrawGrid.FOnGetEditText"/>
      <element name="TCustomDrawGrid.FOnHeaderClick"/>
      <element name="TCustomDrawGrid.FOnHeaderSizing"/>
      <element name="TCustomDrawGrid.FOnSelectCell"/>
      <element name="TCustomDrawGrid.FOnSetCheckboxState"/>
      <element name="TCustomDrawGrid.FOnSetEditText"/>

      <element name="TCustomDrawGrid.CellNeedsCheckboxBitmaps">
        <short>Determines if the cell is valid and enabled, and uses the CheckBox button style.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.CellNeedsCheckboxBitmaps.Result">
        <short>True when the specified cell is valid, enabled, and uses the CheckBox button style.</short>
      </element>
      <element name="TCustomDrawGrid.CellNeedsCheckboxBitmaps.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.CellNeedsCheckboxBitmaps.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomDrawGrid.DrawCellCheckboxBitmaps">
        <short>Draws a cell value using the bitmaps for the CheckBox button style.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.DrawCellCheckboxBitmaps.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DrawCellCheckboxBitmaps.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DrawCellCheckboxBitmaps.ARect">
        <short>Rectangle with the bounds for the cell.</short>
      </element>

      <element name="TCustomDrawGrid.GetEditorValue">
        <short>Posts a grid message to get the value from the Editor control in a cell.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.GetEditorValue.Result">
        <short>Value from the Editor control.</short>
      </element>
      <element name="TCustomDrawGrid.GetEditorValue.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.GetEditorValue.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomDrawGrid.FGrid">
        <short>Contains the virtual grid for the control.</short>
      </element>

      <element name="TCustomDrawGrid.CellClick">
        <short>Performs actions to handle a mouse click in the specified cell.</short>
        <descr>
          <p>
            <var>CellClick</var> is an overridden method used to handle a mouse click in the cell specified by the values in <var>ACol</var> and <var>ARow</var>. <var>Button</var> indicates the mouse button pressed for the click notification.
          </p>
          <p>
            CellClick ensures that a left mouse button click causes the cell value in a column using the CheckBox button style to be toggled. When Button contains <var>mbLeft</var>, the column is examined to determine if it uses the CheckBox button style. When both conditions are met, the <var>ToggleCheckbox</var> method is called to update the cell value and display the correct bitmap for the CheckBox state.
          </p>
          <p>
            CellClick does not occur for a cell that is a fixed header for the column or the row.
          </p>
          <p>
            CellClick is called from the <var>MouseUp</var> method when a mouse click occurs in a cell that has already been selected, or when AutoEdit has been enabled in the grid Options.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CellClick"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.CellClick.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.CellClick.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.CellClick.Button">
        <short>Mouse button for the click notification.</short>
      </element>

      <element name="TCustomDrawGrid.ColRowDeleted">
        <short>Performs actions when a column or a row is deleted from the control.</short>
        <descr>
          <p>
            <var>ColRowDeleted</var> is an overridden method used to remove the specified column or row, and perform a notification for the change.
          </p>
          <p>
            <var>IsColumn</var> indicates whether a column or a row is affected in the method. When set to True, a column is removed. Othewise, a row is removed.
          </p>
          <p>
            <var>Index</var> contains the column or row number removed in the method.
          </p>
          <p>
            ColRowDeleted calls the <var>DeleteColRow</var> method in <var>Grid</var> to remove the pointers in the virtual grid for the column or row. <var>NotifyColRowChange</var> is called to perform a notification for the action by signalling the <var>OnColRowDeleted</var> event handler (when assigned).
          </p>
          <p>
            ColRowDeleted in called from the <var>DoOPDeleteColRow</var> method (in the ancestor class) after removing the column or row in Index from the internal list of column widths, and updating the cached grid information in <var>GCache</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColRowDeleted"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.ColRowDeleted.IsColumn">
        <short/>
      </element>
      <element name="TCustomDrawGrid.ColRowDeleted.Index">
        <short/>
      </element>

      <element name="TCustomDrawGrid.ColRowExchanged" link="#lcl.grids.TCustomGrid.ColRowExchanged"/>
      <element name="TCustomDrawGrid.ColRowExchanged.IsColumn">
        <short/>
      </element>
      <element name="TCustomDrawGrid.ColRowExchanged.Index">
        <short/>
      </element>
      <element name="TCustomDrawGrid.ColRowExchanged.WithIndex">
        <short/>
      </element>

      <element name="TCustomDrawGrid.ColRowInserted" link="#lcl.grids.TCustomGrid.ColRowInserted"/>
      <element name="TCustomDrawGrid.ColRowInserted.IsColumn">
        <short/>
      </element>
      <element name="TCustomDrawGrid.ColRowInserted.Index">
        <short/>
      </element>

      <element name="TCustomDrawGrid.ColRowMoved" link="#lcl.grids.TCustomGrid.ColRowMoved"/>
      <element name="TCustomDrawGrid.ColRowMoved.IsColumn">
        <short/>
      </element>
      <element name="TCustomDrawGrid.ColRowMoved.FromIndex">
        <short/>
      </element>
      <element name="TCustomDrawGrid.ColRowMoved.ToIndex">
        <short/>
      </element>

      <element name="TCustomDrawGrid.CreateVirtualGrid">
        <short>Creates and returns a virtual grid for the control.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.CreateVirtualGrid.Result">
        <short/>
      </element>

      <element name="TCustomDrawGrid.DrawCell" link="#lcl.grids.TCustomGrid.DrawCell"/>
      <element name="TCustomDrawGrid.DrawCell.aCol">
        <short/>
      </element>
      <element name="TCustomDrawGrid.DrawCell.aRow">
        <short/>
      </element>
      <element name="TCustomDrawGrid.DrawCell.aRect">
        <short/>
      </element>
      <element name="TCustomDrawGrid.DrawCell.aState">
        <short/>
      </element>

      <element name="TCustomDrawGrid.DrawCellAutonumbering">
        <short>Draws a cell with auto-numbering.</short>
        <descr>
          <p>
            <var>DrawCellAutonumbering</var> is a method used to draw the text in <var>AValue</var> for the auto-numbered cell at the position in <var>ACol</var> and <var>aRow</var>. DrawCellAutonumbering calls <var>DrawCellText</var> to render the text using the parameter values.
          </p>
          <p>
            DrawCellAutonumbering is called from the <var>DefaultDrawCell</var> method using the relative non-fixed row number as the text for the cell.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.ARect">
        <short>Rectangle with the bounds for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.AValue">
        <short>Text drawn in the cell.</short>
      </element>

      <element name="TCustomDrawGrid.DrawFocusRect">
        <short>Draws the focus rectangle for the control.</short>
        <descr>
          <p>
            <var>DrawFocusRect</var> is an overridden method used to draw the focus rectangle for the specified cell when the grid control or its cell <var>Editor</var> is focused. No actions are performed in the method if <var>DefaultDrawing</var> is set to <b>False</b>, or the grid is not <var>Focused</var>. In addition, the focus rectangle cannot be displayed if <var>goAlwaysShowEditor</var> has been enabled in <var>Options</var> and the Editor is either unassigned (<b>Nil</b>) or not focused.
          </p>
          <p>
            DrawFocusRect calls <var>CalcFocusRect</var> to apply the cached visual information in <var>GCache</var> for the focused cell or row. This includes adjustments for grid lines when enabled for the control.
          </p>
          <p>
            When <var>UseXORFeatures</var> is <b>True</b>, the Pen mode in the <var>Canvas</var> is updated to used the XOR drawing operator and the color needed for the control.  The Canvas state is restored prior to exiting from the method.
          </p>
          <p>
            <var>DrawRubberRect</var> is called to draw the rubber band rectangle with the appropriate borders using the <var>FocusColor</var> in the control.
          </p>
          <p>
            DrawFocusRect is called from the <var>DrawRow</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawFocusRect"/>
          <link id="TCustomGrid.DrawRow"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.DrawFocusRect.ACol">
        <short>Column number for the cell with the focus rectangle.</short>
      </element>
      <element name="TCustomDrawGrid.DrawFocusRect.ARow">
        <short>Row number for the cell with the focus rectangle.</short>
      </element>
      <element name="TCustomDrawGrid.DrawFocusRect.ARect">
        <short>TRect instance with the bounds for the cell with the focus rectangle.</short>
      </element>

      <element name="TCustomDrawGrid.GetCells">
        <short>Gets the value for the specified cell.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.GetCells"/>
          <link id="TCustomGrid.Editor"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.GetCells.Result">
        <short>Value for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.GetCells.ACol">
        <short>Column number for the cell value.</short>
      </element>
      <element name="TCustomDrawGrid.GetCells.ARow">
        <short>Row number for the cell value.</short>
      </element>

      <element name="TCustomDrawGrid.GetCheckBoxState">
        <short>Gets the check box state for the cell at the specified coordinates.</short>
        <descr>
          <p>
            Signals the <var>OnGetCheckboxState</var> event handler (when assigned) to get the value in <var>AState</var>. Called from <var>ToggleCheckbox</var> and the private <var>DrawCellCheckboxBitmaps</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnGetCheckboxState"/>
          <link id="TCustomDrawGrid.ToggleCheckbox"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.GetCheckBoxState.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.GetCheckBoxState.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.GetCheckBoxState.AState">
        <short>Check box state for the cell.</short>
      </element>

      <element name="TCustomDrawGrid.GetEditMask" link="#lcl.grids.TCustomGrid.GetEditMask"/>
      <element name="TCustomDrawGrid.GetEditMask.Result">
        <short/>
      </element>
      <element name="TCustomDrawGrid.GetEditMask.aCol">
        <short/>
      </element>
      <element name="TCustomDrawGrid.GetEditMask.aRow">
        <short/>
      </element>

      <element name="TCustomDrawGrid.GetEditText">
        <short>Gets the text displayed in the Editor for the specified cell.</short>
        <descr>
          <p>
            GetEditText is an overridden method used to get the text displayed in the Editor for the specified cell. GetEditText signals the <var>OnGetEditText</var> event handler (when assigned) to get the text displayed in the Editor. The return value can be an empty string ('') when:
          </p>
          <ul>
            <li>OnGetEditText is not assigned.</li>
            <li>The cell at ACol and ARow is empty.</li>
            <li>Or, a value in ACol or ARow is not valid for the grid.</li>
          </ul>
          <p>
            GetEditText is called from the <var>EditorDoSetValue</var> method when <var>TGridMessages</var> are dispatched to the <var>Editor</var> to set the edit mask and value used in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GetEditText"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.GetEditText.Result">
        <short>Text used as the value in the Editor control.</short>
      </element>
      <element name="TCustomDrawGrid.GetEditText.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.GetEditText.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomDrawGrid.GridMouseWheel">
        <short>Performs actions when the mouse wheel is scrolled in the grid control.</short>
        <descr>
          <p>
            <var>GridMouseWheel</var> is an overridden method in TCustomDrawGrid used to perform actions when the mouse wheel is scrolled while the grid control has focus. Mouse wheel behavior is determined by the <var>MouseWheelOption</var> property.
          </p>
          <p>
            When set to <var>mwCursor</var>, the mouse wheel controls the selected row or column in the grid. It increases or decreases the selected row number in the grid by default. Press <b>Ctrl + Mouse Wheel</b> to change the selected column number in the grid.
          </p>
          <p>
            When set to <var>mwGrid</var>, the mouse wheel scrolls the visible non-fixed columns and rows in the grid control. It scrolls the visible rows up or down by default. Press <b>Ctrl + MouseWheel</b> to scroll the visible columns in the grid control. Mouse wheel movement has no affect when the number of visible columns or rows is not larger than the non-fixed display area for the grid control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.GridMouseWheel.shift">
        <short>Shift state modifier in effect for the action.</short>
      </element>
      <element name="TCustomDrawGrid.GridMouseWheel.Delta">
        <short>Relative change in the current mouse wheel position for the action.</short>
      </element>

      <element name="TCustomDrawGrid.HeaderClick">
        <short>
          Performs actions when a mouse click occurs in a header for a grid column.
        </short>
        <descr>
          <p>
            <var>HeaderClick</var> is an overridden method ensures that the <var>SortOrder</var> for the grid is toggled when <var>Index</var> contains the <var>SortColumn</var> defined for the grid control. HeaderClick calls the inherited method in TCustomGrid to Sort the non-fixed rows in the grid control.
          </p>
          <p>
            HeaderClick signals the <var>OnHeaderClick</var> event handler (when assigned) to performed any actions needed after the data has been sorted in the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.HeaderClick"/>
          <link id="TCustomGrid.SortColumn"/>
          <link id="TCustomGrid.SortOrder"/>
          <link id="TCustomGrid.Sort"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.HeaderClick.IsColumn">
        <short>True when a column has been clicked instead of a row.</short>
      </element>
      <element name="TCustomDrawGrid.HeaderClick.Index">
        <short>Column or row number for the click notification.</short>
      </element>

      <element name="TCustomDrawGrid.HeaderSized">
        <short>Performs actions needed when a column or a row has been resized.</short>
        <descr>
          <p>
            <var>HeaderSized</var> is used to perform actions needed when the header for a column or row has been resized in the grid control.
          </p>
          <p>
            <var>IsColumn</var> indicates whether the sizing action applies to a column or a row. When set to <b>True</b>, the column header has been resized. When set to <b>False</b>, the row header was resized.
          </p>
          <p>
            <var>Index</var> indicates the column or row number in the grid where the resizing action occurred.
          </p>
          <p>
            Calls the inherited method on entry. Signals the <var>OnHeaderSized</var> event handler (when assigned).
          </p>
          <p>
            HeaderSized is called from methods like <var>MouseUp</var> (when column or row sizing is completed) and <var>DblClick</var> (when column sizing is enabled in the grid <var>Options</var>).
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnHeaderSized"/>
          <link id="TCustomGrid.HeaderSized"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.HeaderSized.IsColumn">
        <short>True if a column was resized, False if a Row was resize.</short>
      </element>
      <element name="TCustomDrawGrid.HeaderSized.Index">
        <short>Column or row number for the resize operation.</short>
      </element>

      <element name="TCustomDrawGrid.HeaderSizing">
        <short>Performs actions when resizing a column or row to the specified size.</short>
        <descr>
          <p>
            <var>HeaderSizing</var> is an overridden method used to perform actions when a column or a row is being resized using the mouse. HeaderSizing calls the inherited method on entry, and signals the <var>OnHeaderSizing</var> event handler when assigned.
          </p>
          <p>
            HeaderSizing is called from the <var>DoColSizing</var> and <var>DoRowSizing</var> methods when <var>GridState</var> has the value <var>gsColSizing</var> or <var>gsRowSizing</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.HeaderSizing"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.HeaderSizing.IsColumn">
        <short>True when the resize action is for a column, or False for a row.</short>
      </element>
      <element name="TCustomDrawGrid.HeaderSizing.AIndex">
        <short>Column or row index resized in the method.</short>
      </element>
      <element name="TCustomDrawGrid.HeaderSizing.ASize">
        <short>New size for the column or row.</short>
      </element>

      <element name="TCustomDrawGrid.KeyDown">
        <short>Handles key down events for the grid control.</short>
        <descr>
          <p>
            <var>KeyDown</var> is an overridden method in <var>TCustomDrawGrid</var>, and calls the inherited method on entry. KeyDown ensures that the Space (VK_SPACE) key code is properly applied to the control for a cell using the CheckBox button style.
          </p>
          <dl>
            <dt>VK_SPACE (Space)</dt>
            <dd>
              Calls the ToggleCheckbox method to toggle the checked state for the cell at Col and Row. Key is set to 0 (zero) to indicate that is has been handled in the method.
            </dd>
          </dl>
          <p>
            Called from <var>EditorKeyDown</var> when key down events are enabled in the <var>EditorOptions</var> for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.KeyDown"/>
          <link id="TCustomGrid.EditorKeyDown"/>
          <link id="TCustomGrid.EditorOptions"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.KeyDown.Key">
        <short>Key code examined in the method.</short>
      </element>
      <element name="TCustomDrawGrid.KeyDown.Shift">
        <short>Shift / Alt / Ctrl modifier for the key code.</short>
      </element>

      <element name="TCustomDrawGrid.NotifyColRowChange">
        <short>Performs a notification when a column or row has been changed.</short>
        <descr>
          <p>
            <var>NotifyColRowChange</var> is a method used to signal an event handler when a column or a row in the grid has been changed.
          </p>
          <p>
            <var>WasInsert</var> determines the event handler signalled in the method. When WasInsert is set to <b>True</b>, the <var>OnColRowInserted</var> event handler is signalled (when assigned). When set to <b>False</b>, the <var>OnColRowDeleted</var> event handler is signalled (when assigned).
          </p>
          <p>
            <var>FromIndex</var> and <var>ToIndex</var> indicate the column(s) or row(s) affected by the change. FromIndex has the column or row number where the action was performed. When a column or row was inserted, ToIndex has the same value as FromIndex. For changes to <var>ColCout</var> or <var>RowCount</var>, FromIndex and ToIndex contain the column or row count prior to and following the change.
          </p>
          <p>
            NotifyColRowChange is called from methods like <var>ColRowInserted</var>, <var>ColRowDeleted</var>, and <var>SizeChanged</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.WasInsert">
        <short>True if an insert triggered the notification.</short>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.IsColumn">
        <short>True if a column was affected by the change.</short>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.FromIndex">
        <short>Column or row number affected by the change.</short>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.ToIndex">
        <short>Column or row number affected by the change.</short>
      </element>

      <element name="TCustomDrawGrid.SelectCell">
        <short>Determines whether the specified cell can be selected in the grid control.</short>
        <descr>
          <p>
            <var>SelectCell</var> is an overridden <var>Boolean</var> function used to determine whether the cell specified in <var>ACol</var> and <var>ARow</var> can be selected in the grid control. It is used to respond to focus changes for the control.
          </p>
          <p>
            SelectCell calls the inherited method on entry to get the return value for the method. The return value is <b>True</b> when both <var>ColWidths</var> and <var>RowHeights</var> have positive non-zero values for the column and row numbers where the cell is located.
          </p>
          <p>
            SelectCell signals the <var>OnSelectCell</var> event handler (when assigned). The event handler can be used to override the return value based on the column and / or row number.
          </p>
          <p>
            SelectCell is used in the implementation of methods like <var>TryMoveSelection</var>, <var>CheckPosition</var>, <var>SelectEditor</var>, and <var>GetDeltaMoveNext</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SelectCell"/>
          <link id="TCustomDrawGrid.OnSelectCell"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.SelectCell.Result">
        <short>True when the specified cell can be selected in the grid.</short>
      </element>
      <element name="TCustomDrawGrid.SelectCell.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.SelectCell.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomDrawGrid.SetColor">
        <short>Sets the value for the Color property.</short>
        <descr>
          <p>
            Calls Invalidate to force the grid control to be redrawn.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SetColor"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.SetColor.Value">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomDrawGrid.SetCheckboxState">
        <short>Sets the value for a CheckBox in the specified cell to a given state.</short>
        <descr>
          <p>
            <var>SetCheckboxState</var> is a method used to set the checked, unchecked, or grayed state for a CheckBox in the cell specified by <var>ACol</var> and <var>ARow</var>.<var> AState</var> contains the state value applied to the cell.
          </p>
          <p>
            SetCheckboxState signals the <var>OnSetCheckboxState</var> event handler (when assigned) to perform the actions needed to change the value in the cell. If <var>DefaultDrawing</var> is enabled for the control, the <var>InvalidateCell</var> method is called to force the cell to be redrawn.
          </p>
          <p>
            No actions are performed in the method when OnSetCheckboxState has not been assigned.
          </p>
          <p>
            SetCheckboxState is called from the <var>ToggleCheckbox</var> method to apply the new state value for the CheckBox.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.ToggleCheckbox"/>
          <link id="TCustomDrawGrid.OnSetCheckboxState"/>
          <link id="TCustomDrawGrid.DefaultDrawing"/>
          <link id="TCheckboxState"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.SetCheckboxState.ACol">
        <short>Column number for the cell with the CheckBox.</short>
      </element>
      <element name="TCustomDrawGrid.SetCheckboxState.ARow">
        <short>Row number for the cell with the CheckBox.</short>
      </element>
      <element name="TCustomDrawGrid.SetCheckboxState.AState">
        <short>State value for the CheckBox.</short>
      </element>

      <element name="TCustomDrawGrid.SetEditText">
        <short>Sets the value used in the cell Editor to the specified text.</short>
        <descr>
          <p>
            <var>SetEditText</var> is an overridden method used to set the the text displayed in the <var>Editor</var> for the cell specified in <var>ACol</var> and <var>ARow</var>.
          </p>
          <p>
            SetEditText signals the OnSetEditText event handler (when assigned) to get the <var>Value</var> provided to the cell Editor. The inherited method is called to apply the cell value to the editor control.
          </p>
          <p>
            SetEditText is used in <var>KeyDown</var> when the <b>Escape</b> key (<b>VK_ESCAPE</b>) is not handled by the grid control. It is called from the <var>EditorGetValue</var> method when a visible cell Editor is updated. It is called from <var>EditorTextChanged</var> method when the value in a cell Editor has been altered using the <var>Change</var> or <var>Select</var> methods in the editor control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnSetEditText"/>
          <link id="TCustomGrid.SetEditText"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.SetEditText.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.SetEditText.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.SetEditText.Value">
        <short>New value for the cell Editor.</short>
      </element>

      <element name="TCustomDrawGrid.SizeChanged">
        <short>Performs actions needed when the number or columns or rows has been changed.</short>
        <descr>
          <p>
            <var>SizeChanged</var> is an overridden method in <var>TCustomDrawGrid</var> used to perform actions needed when the number or columns or rows has been changed for the grid control. SizeChanged ensures that the changed values are recorded in the internal virtual grid for the control, and performs a notification for the change.
          </p>
          <p>
            When <var>OldColCount</var> differs from the value in <var>ColCount</var>, the current ColCount is stored in the virtual grid. <var>NotifyColRowChange</var> is called to generate an insert or a delete notification for the change in ColCount.
          </p>
          <p>
            When <var>OldRowCount</var> differs from the value in RowCount, the current <var>RowCount</var> is stored in the virtual grid. <var>NotifyColRowChange</var> is called to generate an insert or a delete notification for the change in RowCount.
          </p>
          <p>
            SizeChanged is called from the <var>AdjustCount</var> and <var>Clear</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SizeChanged"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.SizeChanged.OldColCount">
        <short>Previous number of columns.</short>
      </element>
      <element name="TCustomDrawGrid.SizeChanged.OldRowCount">
        <short>Previous number of rows.</short>
      </element>

      <element name="TCustomDrawGrid.ToggleCheckbox">
        <short>Toggles the state for a checkbox cell between the checked and unchecked values.</short>
        <descr>
          <p>
            <var>ToggleCheckbox</var> is a method used to toggle the state for a checkbox located in the cell at <var>Col</var> and <var>Row</var> in the grid control.
          </p>
          <p>
            No actions are performed in the method when Col is not an editable column in the grid. This can occur when <var>goEditing</var> has <b>not</b> been included in the <var>Options</var> for the control. It can also occur if the column definition in <var>Columns</var> has its <var>ReadOnly</var> property set to <b>True</b>.
          </p>
          <p>
            ToggleCheckbox determines the <var>TCheckboxState</var> value for the cell. The default state  is <var>cbGrayed</var>. <var>GetCheckboxState</var> is called to get the current state using the <var>OnGetCheckboxState</var> event handler (when assigned). The value is toggled (<var>cbChecked</var> becomes <var>cbUnchecked</var>, and vice versa). <var>SetCheckboxState</var> is called to apply the toggled value using the <var>OnSetCheckboxState</var> event handler (when assigned), and to redraw the cell.
          </p>
          <p>
            The <var>OnCheckboxToggled</var> event handler is signalled (when assigned) prior to exiting from the method.
          </p>
          <p>
            ToggleCheckbox is called from the <var>CellClick</var> method when a left mouse button click occurs in the cell. It is also called from the <var>KeyDown</var> method when the <b>Space (VK_SPACE)</b> key is applied for the cell.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnGetCheckboxState">
        <short>Event handler signalled to get the state for a checkbox cell.</short>
        <descr>
          <p>
            <var>OnGetCheckboxState</var> is a <var>TGetCheckboxStateEvent</var> property with the event handler signalled to get the state for a checkbox cell. The <var>ACol</var> and <var>ARow</var> parameters contain the position for the cell. <var>Value</var> contains the <var>TCheckBoxState</var> value for the cell as assigned in the event handler.
          </p>
          <p>
            OnGetCheckboxState provides the only mechanism to get the state value for a Checkbox cell in <var>TCustomDrawGrid</var> / <var>TDrawGrid</var>. This differs from <var>TCustomStringGrid</var> / <var>TStringGrid</var>, where the <var>TGridColumn</var> instance in Columns can is used (when enabled) to get the checked or unchecked value and determine the state for the cell. This approach can be implemented in the event handler; it is not provided by default.
          </p>
          <p>
            OnGetCheckboxState is signalled (when assigned) from the GetCheckBoxState method.
          </p>
          <p>
            Use <var>OnSetCheckboxState</var> to set the state for the CheckBox cell.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnSetCheckboxState">
        <short>Event handler signalled to set the state for a checkbox cell.</short>
        <descr>
          <p>
            <var>OnSetCheckboxState</var> is a <var>TSetCheckboxStateEvent</var> property with the event handler signalled to set the state for a checkbox cell. The <var>ACol</var> and <var>ARow</var> parameters contain the position for the cell. <var>Value</var> contains the <var>TCheckBoxState</var> value stored in the cell.
          </p>
          <p>
            OnSetCheckboxState provides the only mechanism to set the state value for a Checkbox cell in <var>TCustomDrawGrid</var> / <var>TDrawGrid</var>. This differs from <var>TCustomStringGrid</var> / <var>TStringGrid</var>, where the <var>TGridColumn</var> instance in Columns can is used (when enabled) to get the checked or unchecked value and determine the state value stored in the cell. This approach can be implemented in the event handler; it is not provided by default.
          </p>
          <p>
            OnSetCheckboxState is signalled (when assigned) from the SetCheckBoxState method.
          </p>
          <p>
            Use <var>OnGetCheckboxState</var> to get the state for the CheckBox cell.
          </p>
        </descr>
        <seealso/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for <var>TCustomDrawGrid</var>. Creates the  virtual grid used in the control, and calls the inherited constructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Create"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.Create.AOwner">
        <short>Owner of the grid control.</short>
      </element>

      <element name="TCustomDrawGrid.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy frees resources allocated to the member used for the internal virtual grid in the control. Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Destroy"/>
        </seealso>
      </element>

      <element name="TCustomDrawGrid.DeleteColRow">
        <short>Deletes a column or a row at the specified position.</short>
        <descr>
          <p>
            DeleteColRow is a method used to delete the column or row at the specified position.
          </p>
          <p>
            IsColumn determines whether a column or a row is affected in the operation. When set to True, a column is deleted. Otherwise, a row is deleted.
          </p>
          <p>
            Index contains the column or row number deleted in the method. An exception will be raised if Index contains an invalid value for the ColCount or RowCount in the grid control.
          </p>
          <p>
            DeleteColRow calls DoOPDeleteColRow with the parameter values to perform the delete operation.
          </p>
          <p>
            DeleteColRow is used in the implementation of the <var>DeleteCol</var> and <var>DeleteRow</var> methods.
          </p>
          <p>
            Use <var>InsertColRow</var> to insert a column or row at a given position in the grid. Use <var>MoveColRow</var> to move a column or row to a new position in the grid. Use <var>ExchangeColRow</var> to swap column or row values at the specified positions in the grid.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.DeleteColRow.IsColumn">
        <short>True to delete a column in the method, False for a row.</short>
      </element>
      <element name="TCustomDrawGrid.DeleteColRow.Index">
        <short>Column or row number deleted in the method.</short>
      </element>

      <element name="TCustomDrawGrid.DeleteCol">
        <short>Deletes the column at the specified position.</short>
        <descr>
          <p>
            Calls <var>DeleteColRow</var> to delete the column number specified in <var>Index</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.DeleteColRow"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.DeleteCol.Index">
        <short>Position for the column removed in the method.</short>
      </element>

      <element name="TCustomDrawGrid.DeleteRow">
        <short>Deletes the row at the specified position.</short>
        <descr>
          <p>
            Calls <var>DeleteColRow</var> to delete the row number specified in <var>Index</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.DeleteColRow"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.DeleteRow.Index">
        <short>Position for the row removed in the method.</short>
      </element>

      <element name="TCustomDrawGrid.ExchangeColRow">
        <short>Exchanges column or row values at the specified positions.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.ExchangeColRow.IsColumn">
        <short>True when the index positions refer to columns.</short>
      </element>
      <element name="TCustomDrawGrid.ExchangeColRow.Index">
        <short>Position for the first column in the exchange.</short>
      </element>
      <element name="TCustomDrawGrid.ExchangeColRow.WithIndex">
        <short>Position for the second column in the exchange.</short>
      </element>

      <element name="TCustomDrawGrid.InsertColRow">
        <short>Inserts a column or a row at the specified position.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.InsertColRow.IsColumn">
        <short>True when a column should be inserted in the method.</short>
      </element>
      <element name="TCustomDrawGrid.InsertColRow.Index">
        <short>Position where the column or row is inserted in the grid.</short>
      </element>

      <element name="TCustomDrawGrid.MoveColRow">
        <short>
          Moves a column or a row from a specified position to a new position in the grid.
        </short>
        <descr>
          <p>
            Implemented using the DoOPMoveColRow method.
          </p>
          <p>
            Values in FromIndex and ToIndex must be valid column or row numbers for the control. An EGridException is raised if either value is not valid.
          </p>
          <p>
            No actions are performed in the method if FromIndex and ToIndex have the same value.
          </p>
          <p>
            No actions are performed in the method if IsColumn is <b>True</b> and columns are locked using the GridFlags. This occurs when a column index is being updated in the control.
          </p>
          <p>
            Calls ColRowMoved to perform a notification when the column or row has been moved.
          </p>
          <p>
            Calls VisualChange if the Columns collection has not been enabled in the control, or when IsColumn is <b>False</b>.
          </p>
          <p>
            Updates the bounds for the cell editor when it is located in a column or row affected in the method.
          </p>
          <p>
            Updates the value in SortColumn if it is affected in the method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.MoveColRow.IsColumn">
        <short>True when a column is moved in the method.</short>
      </element>
      <element name="TCustomDrawGrid.MoveColRow.FromIndex">
        <short>Position for the column or row moved in the moved.</short>
      </element>
      <element name="TCustomDrawGrid.MoveColRow.ToIndex">
        <short>New position where the column or row is stored.</short>
      </element>

      <element name="TCustomDrawGrid.SortColRow">
        <short>Sorts the data in a column or row using the specified positions.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDrawGrid.SortColRow.IsColumn">
        <short>True when values in a column are sorted, False to sort values in a row.</short>
      </element>
      <element name="TCustomDrawGrid.SortColRow.Index">
        <short>Column or row number sorted in the method.</short>
      </element>
      <element name="TCustomDrawGrid.SortColRow.FromIndex">
        <short>Starting position sorted in the column or row.</short>
      </element>
      <element name="TCustomDrawGrid.SortColRow.ToIndex">
        <short>Ending position sorted in the column or row.</short>
      </element>

      <element name="TCustomDrawGrid.DefaultDrawCell">
        <short>The default method used to draw the cell at the given position using a specific state.</short>
        <descr>
          <p>
            <var>DefaultDrawCell</var> is a method which provides the default drawing routine for the cell at the position specified in <var>ACol</var> and <var>ARow</var>. The bounds for the cell are provided in the <var>ARect</var> parameter. <var>AState</var> contains the drawing state for the cell.
          </p>
          <p>
            DefaultDrawCell handles the following drawing tasks when needed for the specified cell:
          </p>
          <ul>
            <li>
              Draws fixed cells using the TitleStyle for the control. Calls DrawThemedCell when TitleStyle is set to tsNative. Otherwise, DrawFillRect is used.
            </li>
            <li>
              Draws the bitmap needed for a cell using the CheckBox button style. Calls DrawCellCheckboxBitmaps to render the bitmap for the checkbox control.
            </li>
            <li>
              Draws a cell using the Button style. Calls DrawButtonCell to render the button in the required state.
            </li>
            <li>
              Draws auto-numbered fixed row headers when enabled in the Options for the control. Calls DrawCellAutonumbering to render the relative non-fixed row number.
            </li>
            <li>
              Draws the text displayed in the cell. Calls DrawColumnText when the cell is a fixed column header. Otherwise, the DrawTextInCell method is used.
            </li>
          </ul>
          <p>
            DefaultDrawCell is called from the DrawCell method. It is used when the DefaultDrawing property is set to True, and occurs prior to signalling the OnDrawCell event handler (when assigned). It is always called when OnDrawCell has not been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.DrawCell"/>
          <link id="TCustomDrawGrid.DefaultDrawing"/>
          <link id="TCustomDrawGrid.OnDrawCell"/>
          <link id="TCustomGrid.TitleStyle"/>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.ARect">
        <short>Rectangle with the bounds for the cell.</short>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.AState">
        <short>Drawing state for the cell.</short>
      </element>

      <element name="TCustomDrawGrid.AllowOutboundEvents" link="#lcl.grids.TCustomGrid.AllowOutboundEvents"/>
      <element name="TCustomDrawGrid.BorderColor" link="#lcl.grids.TCustomGrid.BorderColor"/>
      <element name="TCustomDrawGrid.Canvas" link="#lcl.controls.TCustomControl.Canvas"/>
      <element name="TCustomDrawGrid.Col" link="#lcl.grids.TCustomGrid.Col"/>
      <element name="TCustomDrawGrid.ColWidths" link="#lcl.grids.TCustomGrid.ColWidths"/>
      <element name="TCustomDrawGrid.ColRow" link="#lcl.grids.TCustomGrid.ColRow"/>
      <element name="TCustomDrawGrid.DisabledFontColor" link="#lcl.grids.TCustomGrid.DisabledFontColor"/>
      <element name="TCustomDrawGrid.Editor" link="#lcl.grids.TCustomGrid.Editor"/>
      <element name="TCustomDrawGrid.EditorBorderStyle" link="#lcl.grids.TCustomGrid.EditorBorderStyle"/>
      <element name="TCustomDrawGrid.EditorMode" link="#lcl.grids.TCustomGrid.EditorMode"/>
      <element name="TCustomDrawGrid.ExtendedColSizing" link="#lcl.grids.TCustomGrid.ExtendedColSizing"/>
      <element name="TCustomDrawGrid.AltColorStartNormal" link="#lcl.grids.TCustomGrid.AltColorStartNormal"/>
      <element name="TCustomDrawGrid.FastEditing" link="#lcl.grids.TCustomGrid.FastEditing"/>
      <element name="TCustomDrawGrid.FixedGridLineColor" link="#lcl.grids.TCustomGrid.FixedGridLineColor"/>
      <element name="TCustomDrawGrid.FocusColor" link="#lcl.grids.TCustomGrid.FocusColor"/>
      <element name="TCustomDrawGrid.FocusRectVisible" link="#lcl.grids.TCustomGrid.FocusRectVisible"/>
      <element name="TCustomDrawGrid.GridHeight" link="#lcl.grids.TCustomGrid.GridHeight"/>
      <element name="TCustomDrawGrid.GridWidth" link="#lcl.grids.TCustomGrid.GridWidth"/>
      <element name="TCustomDrawGrid.IsCellSelected" link="#lcl.grids.TCustomGrid.IsCellSelected"/>
      <element name="TCustomDrawGrid.LeftCol" link="#lcl.grids.TCustomGrid.LeftCol"/>
      <element name="TCustomDrawGrid.Row" link="#lcl.grids.TCustomGrid.Row"/>
      <element name="TCustomDrawGrid.RowHeights" link="#lcl.grids.TCustomGrid.RowHeights"/>
      <element name="TCustomDrawGrid.SaveOptions" link="#lcl.grids.TCustomGrid.SaveOptions"/>
      <element name="TCustomDrawGrid.SelectedColor" link="#lcl.grids.TCustomGrid.SelectedColor"/>
      <element name="TCustomDrawGrid.SelectedColumn" link="#lcl.grids.TCustomGrid.SelectedColumn"/>
      <element name="TCustomDrawGrid.Selection" link="#lcl.grids.TCustomGrid.Selection"/>
      <element name="TCustomDrawGrid.StrictSort" link="#lcl.grids.TCustomGrid.StrictSort"/>
      <element name="TCustomDrawGrid.TopRow" link="#lcl.grids.TCustomGrid.TopRow"/>
      <element name="TCustomDrawGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TCustomDrawGrid.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TCustomDrawGrid.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TCustomDrawGrid.AutoAdvance" link="#lcl.grids.TCustomGrid.AutoAdvance" />
      <element name="TCustomDrawGrid.AutoFillColumns" link="#lcl.grids.TCustomGrid.AutoFillColumns"/>
      <element name="TCustomDrawGrid.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TCustomDrawGrid.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TCustomDrawGrid.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TCustomDrawGrid.ColCount" link="#lcl.grids.TCustomGrid.ColCount" />
      <element name="TCustomDrawGrid.Columns" link="#lcl.grids.TCustomGrid.Columns"/>
      <element name="TCustomDrawGrid.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TCustomDrawGrid.DefaultColWidth" link="#lcl.grids.TCustomGrid.DefaultColWidth"/>
      <element name="TCustomDrawGrid.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>
      <element name="TCustomDrawGrid.DefaultRowHeight" link="#lcl.grids.TCustomGrid.DefaultRowHeight"/>
      <element name="TCustomDrawGrid.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TCustomDrawGrid.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
      <element name="TCustomDrawGrid.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
      <element name="TCustomDrawGrid.FixedHotColor" link="#lcl.grids.TCustomGrid.FixedHotColor"/>
      <element name="TCustomDrawGrid.FixedRows" link="#lcl.grids.TCustomGrid.FixedRows"/>
      <element name="TCustomDrawGrid.Flat" link="#lcl.grids.TCustomGrid.Flat"/>
      <element name="TCustomDrawGrid.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TCustomDrawGrid.GridLineColor" link="#lcl.grids.TCustomGrid.GridLineColor"/>
      <element name="TCustomDrawGrid.GridLineStyle" link="#lcl.grids.TCustomGrid.GridLineStyle"/>
      <element name="TCustomDrawGrid.GridLineWidth" link="#lcl.grids.TCustomGrid.GridLineWidth" />
      <element name="TCustomDrawGrid.Options" link="#lcl.grids.TCustomGrid.Options"/>
      <element name="TCustomDrawGrid.Options2" link="#lcl.grids.TCustomGrid.Options2"/>
      <element name="TCustomDrawGrid.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TCustomDrawGrid.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TCustomDrawGrid.RowCount" link="#lcl.grids.TCustomGrid.RowCount"/>
      <element name="TCustomDrawGrid.ScrollBars" link="#lcl.grids.TCustomGrid.ScrollBars"/>
      <element name="TCustomDrawGrid.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TCustomDrawGrid.TabAdvance" link="#lcl.grids.TCustomGrid.TabAdvance"/>
      <element name="TCustomDrawGrid.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TCustomDrawGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TCustomDrawGrid.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TCustomDrawGrid.VisibleColCount" link="#lcl.grids.TCustomGrid.VisibleColCount"/>
      <element name="TCustomDrawGrid.VisibleRowCount" link="#lcl.grids.TCustomGrid.VisibleRowCount"/>
      <element name="TCustomDrawGrid.OnAfterSelection" link="#lcl.grids.TCustomGrid.OnAfterSelection"/>
      <element name="TCustomDrawGrid.OnBeforeSelection" link="#lcl.grids.TCustomGrid.OnBeforeSelection" />
      <element name="TCustomDrawGrid.OnClick" link="#lcl.controls.TControl.OnClick"/>

      <element name="TCustomDrawGrid.OnColRowDeleted">
        <short>Event handler signalled when a grid column or row is deleted.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnColRowExchanged">
        <short>Event handler signalled when a column or row has been exchanged with another.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnColRowInserted">
        <short>Event handler signalled when a column or row is inserted into the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnColRowMoved">
        <short>Event handler signalled when a column or row in the grid is moved.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnCompareCells">
        <short>Event handler signalled to compare the content in cells </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TCustomDrawGrid.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TCustomDrawGrid.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TCustomDrawGrid.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TCustomDrawGrid.OnDrawCell" link="#lcl.grids.TCustomGrid.OnDrawCell"/>
      <element name="TCustomDrawGrid.OnEditButtonClick" link="#lcl.grids.TCustomGrid.OnEditButtonClick"/>
      <element name="TCustomDrawGrid.OnButtonClick" link="#lcl.grids.TCustomGrid.OnButtonClick"/>
      <element name="TCustomDrawGrid.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TCustomDrawGrid.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TCustomDrawGrid.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TCustomDrawGrid.OnExit" link="#lcl.controls.TWinControl.OnExit"/>

      <element name="TCustomDrawGrid.OnGetEditMask">
        <short>Event handler signalled to get the edit mask used for a grid cell.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnGetEditText">
        <short>Event handler signalled to get the value for a cell editor in the grid.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnHeaderClick">
        <short>Event handler signalled when the fixed header for a column or row is clicked.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnHeaderSized">
        <short>Event handler signalled when a column or row header has been re-sized.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomDrawGrid.OnHeaderSizing">
        <short>Event handler signalled when a column or row header sizing action is performed.</short>
        <descr/>
        <seealso>
          <link id="TCustomDrawGrid.OnHeaderSized"/>
          <link id="THeaderSizingEvent"/>
        </seealso>
      </element>

      <element name="TCustomDrawGrid.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TCustomDrawGrid.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TCustomDrawGrid.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TCustomDrawGrid.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TCustomDrawGrid.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TCustomDrawGrid.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TCustomDrawGrid.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TCustomDrawGrid.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TCustomDrawGrid.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TCustomDrawGrid.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TCustomDrawGrid.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TCustomDrawGrid.OnPickListSelect" link="#lcl.grids.TCustomGrid.OnPickListSelect"/>
      <element name="TCustomDrawGrid.OnPrepareCanvas" link="#lcl.grids.TCustomGrid.OnPrepareCanvas"/>
      <element name="TCustomDrawGrid.OnSelectEditor" link="#lcl.grids.TCustomGrid.OnSelectEditor"/>
      <element name="TCustomDrawGrid.OnSelection" link="#lcl.grids.TCustomGrid.OnSelection"/>

      <element name="TCustomDrawGrid.OnSelectCell">
        <short>Event handler signalled when a grid cell is selected.</short>
        <descr>
          <p>
            <var>OnSelectCell</var> is a <var>TOnSelectCellEvent</var> property with the event handler signalled when a cell is selected in the grid control. OnSelectCell is signalled from the <var>SelectCell</var> method. It occurs when a change in the current cell selection has been or is about to be performed, or when a cell editor is selected for the grid control. The <var>CanSelect</var> argument allows the event handler to control whether the cell at <var>ACol</var> and <var>ARow</var> can be selected.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.SelectCell"/>
          <link id="TCustomGrid.CheckPosition"/>
          <link id="TCustomGrid.SelectEditor"/>
          <link id="TOnSelectCellEvent"/>
        </seealso>
      </element>

      <element name="TCustomDrawGrid.OnSetEditText">
        <short>Event handler signalled when the text in the cell Editor is assigned.</short>
        <descr>
          <p>
            <var>OnSetEditText</var> is a <var>TSetEditEvent</var> property with the event handler signalled when the text in the cell Editor is assigned. OnSetEditText is signalled from the <var>SetEditText</var> method immediately before calling the inherited SetEditText method. The <var>Sender</var> argument is the current grid instance for the notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.SetEditText"/>
          <link id="TCustomGrid.EditorTextChanged"/>
          <link id="TStringCellEditor.KeyDown"/>
          <link id="TSetEditEvent"/>
        </seealso>
      </element>

      <element name="TCustomDrawGrid.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TCustomDrawGrid.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TCustomDrawGrid.OnTopLeftChanged" link="#lcl.grids.TCustomGrid.OnTopLeftChanged"/>
      <element name="TCustomDrawGrid.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TCustomDrawGrid.OnValidateEntry" link="#lcl.grids.TCustomGrid.OnValidateEntry"/>

      <element name="TDrawGrid">
        <short>Implements a custom-drawn grid control.</short>
        <descr>
          <p>
            <var>TDrawGrid</var> is a <var>TCustomDrawGrid</var> descendant which implements a custom-drawn grid control. The control represents it information as a matrix of rows and columns, and is oriented towards rendering both graphical information and textual content.
          </p>
          <p>
            The <var>OnDrawCell</var> event handler is used to render the cell content in the grid, and can be used to render images or directly access the <var>Canvas</var> for the control. Default cell drawing logic is also implemented using the properties and methods from the ancestor class.
          </p>
          <p>
            TDrawGrid sets the visibility for properties introduced in the <var>TCustomDrawGrid</var> ancestor, and does not provide any new functionality.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseGrids"/>
          <link id="TCustomGrid"/>
          <link id="TCustomDrawGrid"/>
          <link id="TOnDrawCell"/>
        </seealso>
      </element>

      <element name="TDrawGrid.InplaceEditor" link="#lcl.grids.TCustomGrid.InplaceEditor"/>
      <element name="TDrawGrid.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TDrawGrid.AlternateColor" link="#lcl.grids.TCustomGrid.AlternateColor"/>
      <element name="TDrawGrid.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TDrawGrid.AutoAdvance" link="#lcl.grids.TCustomGrid.AutoAdvance"/>
      <element name="TDrawGrid.AutoEdit" link="#lcl.grids.TCustomGrid.AutoEdit"/>
      <element name="TDrawGrid.AutoFillColumns" link="#lcl.grids.TCustomGrid.AutoFillColumns"/>
      <element name="TDrawGrid.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TDrawGrid.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TDrawGrid.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TDrawGrid.ColCount" link="#lcl.grids.TCustomGrid.ColCount"/>
      <element name="TDrawGrid.ColRowDraggingCursor" link="#lcl.grids.TCustomGrid.ColRowDraggingCursor"/>
      <element name="TDrawGrid.ColRowDragIndicatorColor" link="#lcl.grids.TCustomGrid.ColRowDragIndicatorColor"/>
      <element name="TDrawGrid.ColSizingCursor" link="#lcl.grids.TCustomGrid.ColSizingCursor"/>
      <element name="TDrawGrid.ColumnClickSorts" link="#lcl.grids.TCustomGrid.ColumnClickSorts"/>
      <element name="TDrawGrid.Columns" link="#lcl.grids.TCustomGrid.Columns"/>
      <element name="TDrawGrid.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TDrawGrid.DefaultColWidth" link="#lcl.grids.TCustomGrid.DefaultColWidth"/>
      <element name="TDrawGrid.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>
      <element name="TDrawGrid.DefaultRowHeight" link="#lcl.grids.TCustomGrid.DefaultRowHeight"/>
      <element name="TDrawGrid.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
      <element name="TDrawGrid.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TDrawGrid.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TDrawGrid.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TDrawGrid.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TDrawGrid.ExtendedSelect" link="#lcl.grids.TCustomGrid.ExtendedSelect"/>
      <element name="TDrawGrid.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
      <element name="TDrawGrid.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
      <element name="TDrawGrid.FixedRows" link="#lcl.grids.TCustomGrid.FixedRows"/>
      <element name="TDrawGrid.Flat" link="#lcl.grids.TCustomGrid.Flat"/>
      <element name="TDrawGrid.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TDrawGrid.GridLineColor" link="#lcl.grids.TCustomGrid.GridLineColor"/>
      <element name="TDrawGrid.GridLineStyle" link="#lcl.grids.TCustomGrid.GridLineStyle"/>
      <element name="TDrawGrid.GridLineWidth" link="#lcl.grids.TCustomGrid.GridLineWidth"/>
      <element name="TDrawGrid.HeaderHotZones" link="#lcl.grids.TCustomGrid.HeaderHotZones"/>
      <element name="TDrawGrid.HeaderPushZones" link="#lcl.grids.TCustomGrid.HeaderPushZones"/>
      <element name="TDrawGrid.ImageIndexSortAsc" link="#lcl.grids.TCustomGrid.ImageIndexSortAsc"/>
      <element name="TDrawGrid.ImageIndexSortDesc" link="#lcl.grids.TCustomGrid.ImageIndexSortDesc"/>
      <element name="TDrawGrid.MouseWheelOption" link="#lcl.grids.TCustomGrid.MouseWheelOption"/>
      <element name="TDrawGrid.Options" link="#lcl.grids.TCustomGrid.Options"/>
      <element name="TDrawGrid.Options2" link="#lcl.grids.TCustomGrid.Options2"/>

      <element name="TDrawGrid.ParentColor">
        <short>
          Uses the Color from the Parent control, when enabled.
        </short>
        <descr>
          <p>
            ParentColor determines if the control should use the Color from the Parent control, when enabled. The default value for the property is False in TDrawGrid.
          </p>
          <p>
            When this property is True, all changes to the Color of the parent will also be applied to the Color of the control, ensuring that they both contain same value. If the Color of the control is changed by the application, then ParentColor will be automatically set to False.
          </p>
         <p>
           Using ParentColor when the Color value is clDefault can cause problems in resolving the actual color value. To obtain the Color property of a control while taking into account clDefault and ParentColor, use the GetColorResolvingParent method. This method might return a non-RGB color, but will never return clDefault. To obtain a purely RGB result use the GetRGBColorResolvingParent method.
         </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
          <link id="#lcl.controls.TControl.Color">TControl.Color</link>
          <link id="#lcl.controls.TControl.GetColorResolvingParent">TControl.GetColorResolvingParent</link>
          <link id="#lcl.controls.TControl.GetRGBColorResolvingParent">TControl.GetRGBColorResolvingParent</link>
        </seealso>
      </element>

      <element name="TDrawGrid.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
      <element name="TDrawGrid.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TDrawGrid.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TDrawGrid.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TDrawGrid.RangeSelectMode" link="#lcl.grids.TCustomGrid.RangeSelectMode"/>
      <element name="TDrawGrid.RowCount" link="#lcl.grids.TCustomGrid.RowCount"/>
      <element name="TDrawGrid.RowSizingCursor" link="#lcl.grids.TCustomGrid.RowSizingCursor"/>
      <element name="TDrawGrid.ScrollBars" link="#lcl.grids.TCustomGrid.ScrollBars"/>
      <element name="TDrawGrid.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TDrawGrid.TabAdvance" link="#lcl.grids.TCustomGrid.TabAdvance"/>
      <element name="TDrawGrid.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TDrawGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TDrawGrid.TitleFont" link="#lcl.grids.TCustomGrid.TitleFont"/>
      <element name="TDrawGrid.TitleImageList" link="#lcl.grids.TCustomGrid.TitleImageList"/>
      <element name="TDrawGrid.TitleImageListWidth" link="#lcl.grids.TCustomGrid.TitleImageListWidth"/>
      <element name="TDrawGrid.TitleStyle" link="#lcl.grids.TCustomGrid.TitleStyle"/>
      <element name="TDrawGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TDrawGrid.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TDrawGrid.VisibleColCount" link="#lcl.grids.TCustomGrid.VisibleColCount"/>
      <element name="TDrawGrid.VisibleRowCount" link="#lcl.grids.TCustomGrid.VisibleRowCount"/>
      <element name="TDrawGrid.OnAfterSelection" link="#lcl.grids.TCustomGrid.OnAfterSelection"/>
      <element name="TDrawGrid.OnBeforeSelection" link="#lcl.grids.TCustomGrid.OnBeforeSelection"/>
      <element name="TDrawGrid.OnCheckboxToggled" link="#lcl.grids.TCustomGrid.OnCheckboxToggled"/>
      <element name="TDrawGrid.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TDrawGrid.OnColRowDeleted" link="#lcl.grids.TCustomDrawGrid.OnColRowDeleted"/>
      <element name="TDrawGrid.OnColRowExchanged" link="#lcl.grids.TCustomDrawGrid.OnColRowExchanged"/>
      <element name="TDrawGrid.OnColRowInserted" link="#lcl.grids.TCustomDrawGrid.OnColRowInserted"/>
      <element name="TDrawGrid.OnColRowMoved" link="#lcl.grids.TCustomDrawGrid.OnColRowMoved"/>
      <element name="TDrawGrid.OnCompareCells" link="#lcl.grids.TCustomGrid.OnCompareCells"/>
      <element name="TDrawGrid.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TDrawGrid.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TDrawGrid.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TDrawGrid.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TDrawGrid.OnDrawCell" link="#lcl.grids.TCustomGrid.OnDrawCell"/>
      <element name="TDrawGrid.OnEditButtonClick" link="#lcl.grids.TCustomGrid.OnEditButtonClick"/>
      <element name="TDrawGrid.OnButtonClick" link="#lcl.grids.TCustomGrid.OnButtonClick"/>
      <element name="TDrawGrid.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
      <element name="TDrawGrid.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TDrawGrid.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TDrawGrid.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TDrawGrid.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TDrawGrid.OnGetCellHint" link="#lcl.grids.TCustomGrid.OnGetCellHint"/>
      <element name="TDrawGrid.OnGetCheckboxState" link="#lcl.grids.TCustomDrawGrid.OnGetCheckboxState"/>
      <element name="TDrawGrid.OnGetEditMask" link="#lcl.grids.TCustomDrawGrid.OnGetEditMask"/>
      <element name="TDrawGrid.OnGetEditText" link="#lcl.grids.TCustomDrawGrid.OnGetEditText"/>
      <element name="TDrawGrid.OnHeaderClick" link="#lcl.grids.TCustomDrawGrid.OnHeaderClick"/>
      <element name="TDrawGrid.OnHeaderSized" link="#lcl.grids.TCustomDrawGrid.OnHeaderSized"/>
      <element name="TDrawGrid.OnHeaderSizing" link="#lcl.grids.TCustomDrawGrid.OnHeaderSizing"/>
      <element name="TDrawGrid.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TDrawGrid.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TDrawGrid.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TDrawGrid.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TDrawGrid.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TDrawGrid.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TDrawGrid.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TDrawGrid.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TDrawGrid.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TDrawGrid.OnMouseWheelDown"  link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TDrawGrid.OnMouseWheelUp"  link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TDrawGrid.OnMouseWheelHorz"  link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TDrawGrid.OnMouseWheelLeft"  link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TDrawGrid.OnMouseWheelRight"  link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TDrawGrid.OnPickListSelect" link="#lcl.grids.TCustomGrid.OnPickListSelect"/>
      <element name="TDrawGrid.OnPrepareCanvas" link="#lcl.grids.TCustomGrid.OnPrepareCanvas"/>
      <element name="TDrawGrid.OnSelectEditor" link="#lcl.grids.TCustomGrid.OnSelectEditor"/>
      <element name="TDrawGrid.OnSelection" link="#lcl.grids.TCustomGrid.OnSelection"/>
      <element name="TDrawGrid.OnSelectCell" link="#lcl.grids.TCustomDrawGrid.OnSelectCell"/>
      <element name="TDrawGrid.OnSetCheckboxState" link="#lcl.grids.TCustomDrawGrid.OnSetCheckboxState"/>
      <element name="TDrawGrid.OnSetEditText" link="#lcl.grids.TCustomDrawGrid.OnSetEditText"/>
      <element name="TDrawGrid.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TDrawGrid.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TDrawGrid.OnTopleftChanged" link="#lcl.grids.TCustomGrid.OnTopLeftChanged"/>
      <element name="TDrawGrid.OnUserCheckboxBitmap" link="#lcl.grids.TCustomGrid.OnUserCheckboxBitmap"/>
      <element name="TDrawGrid.OnUserCheckboxImage" link="#lcl.grids.TCustomGrid.OnUserCheckBoxImage"/>
      <element name="TDrawGrid.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDrawGrid.OnValidateEntry" link="#lcl.grids.TCustomGrid.OnValidateEntry"/>

      <element name="TStringGridStrings">
        <short>Represents strings used as the cell values in TCustomStringGrid / TStringGrid.</short>
        <descr>
          <p>
            <var>TStringGridStrings</var> is a <var>TStrings</var> descendant that represents the strings used to populate the cells in a <var>TStringGrid</var> instance.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TStringGridStrings.FAddedCount"/>
      <element name="TStringGridStrings.FGrid"/>
      <element name="TStringGridStrings.FIsCol"/>
      <element name="TStringGridStrings.FIndex"/>
      <element name="TStringGridStrings.FOwner"/>

      <element name="TStringGridStrings.ConvertIndexLineCol">
        <short>Converts an index position to line and column numbers for the Cells in a grid.</short>
        <descr/>
        <seealso>
          <link id="TStringGridStrings.Add"/>
          <link id="TStringGridStrings.Get"/>
          <link id="TStringGridStrings.Put"/>
          <link id="TStringGridStrings.GetObject"/>
          <link id="TStringGridStrings.PutObject"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Result">
        <short/>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Index">
        <short/>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Line">
        <short/>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Col">
        <short/>
      </element>

      <element name="TStringGridStrings.Get">
        <short>Gets the string at the specified index position.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Strings">TStrings.Strings</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.Get.Result">
        <short>String value at the specified position.</short>
      </element>
      <element name="TStringGridStrings.Get.Index">
        <short>Ordinal position for the string.</short>
      </element>

      <element name="TStringGridStrings.GetCount">
        <short>Gets the value for the Count property.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Count">TStrings.Count</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.GetCount.Result">
        <short>Value for the Count property.</short>
      </element>

      <element name="TStringGridStrings.GetObject">
        <short>Gets the value for the indexed Objects property.</short>
        <descr/>
        <seealso>
          <link id="TStringGridStrings.PutObject"/>
          <link id="#rtl.classes.TStrings.Objects">TStrings.Objects</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.GetObject.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TStringGridStrings.GetObject.Index">
        <short>Ordinal position for the property value.</short>
      </element>

      <element name="TStringGridStrings.Put">
        <short>Sets the value for the indexed Strings property.</short>
        <descr/>
        <seealso>
          <link id="TStringGridStrings.Get"/>
          <link id="#rtl.classes.TStrings.Strings">TStrings.Strings</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.Put.Index">
        <short>Ordinal position for the property value.</short>
      </element>
      <element name="TStringGridStrings.Put.S">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TStringGridStrings.PutObject">
        <short>Sets the value for the indexed Objects property.</short>
        <descr/>
        <seealso>
          <link id="TStringGridStrings.GetObject"/>
          <link id="#rtl.classes.TStrings.Objects">TStrings.Objects</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.PutObject.Index">
        <short>Ordinal position for the indexed property value.</short>
      </element>
      <element name="TStringGridStrings.PutObject.AObject">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TStringGridStrings.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited constructor on entry. Create stores parameter values to the members used for the associated grid and the map used in the class instance.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TStringGridStrings.Create.AGrid">
        <short>Grid for the string values.</short>
      </element>
      <element name="TStringGridStrings.Create.OwnerMap">
        <short>Map with the owner for the class instance.</short>
      </element>
      <element name="TStringGridStrings.Create.AIsCol">
        <short>True when the values represent a column for the associated grid; False for a row.</short>
      </element>
      <element name="TStringGridStrings.Create.AIndex">
        <short>Column or row number in the grid for the data values.</short>
      </element>

      <element name="TStringGridStrings.Destroy">
        <short>Destructor for the class instance.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Destroy">TStrings.Destroy</link>
        </seealso>
      </element>

      <element name="TStringGridStrings.Add">
        <short>Adds the specified string to the class instance.</short>
        <descr/>
        <seealso>
          <link id="TCustomStringGrid.Cells"/>
          <link id="#rtl.classes.TStrings.Add">TStrings.Add</link>
          <link id="#rtl.classes.TStrings.Strings">TStrings.Strings</link>
          <link id="#rtl.classes.TStrings.Values">TStrings.Values</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.Add.Result">
        <short>Ordinal position in the class instance where the value was stored.</short>
      </element>
      <element name="TStringGridStrings.Add.S">
        <short>String value added in the method.</short>
      </element>

      <element name="TStringGridStrings.Assign">
        <short>Stores property values from Source into the current class instance.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Assign">TStrings.Assign</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.Assign.Source">
        <short>Persistent object with the property values copied in the method.</short>
      </element>

      <element name="TStringGridStrings.Clear">
        <short>Removes all values for the column or row represented by the class instance.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Clear">TStrings.Clear</link>
        </seealso>
      </element>

      <element name="TStringGridStrings.Delete">
        <short>Deletes a value stored in the class instance.</short>
        <descr>
            <p>
              <var>Delete</var> is overridden to prevent removing entries in the <var>Strings</var> property. It always raises an <var>EGridException</var> exception.
            </p>
        </descr>
        <errors>
          Raises an <var>EGridException</var> exception with the message <b>'Cannot delete value.'</b>
        </errors>
        <seealso>
          <link id="#rtl.classes.TStrings.Delete">TStrings.Delete</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.Delete.Index">
        <short>Ordinal position for the value to be removed; not used in the method.</short>
      </element>

      <element name="TStringGridStrings.Insert">
        <short>Inserts a value in the class instance.</short>
        <descr>
          Raises an <var>EGridException</var> exception with the message <b>'Cannot insert  value.'</b>
        </descr>
        <seealso>
          <link id="#rtl.classes.TStrings.Insert">TStrings.Insert</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.Insert.Index">
        <short/>
      </element>
      <element name="TStringGridStrings.Insert.S">
        <short/>
      </element>

      <element name="TCustomStringGrid">
        <short>The base class for TStringGrid.</short>
        <descr>
            <p>
              <var>TCustomStringGrid</var> is a <var>TCustomDrawGrid</var> descendant which implements the base class for <var>TStringGrid</var>.
            </p>
            <p>
              TCustomStringGrid provides the familar tabular format used in grid controls, and is designed for use with string content stored in its cells. Internally, columns and rows in the class are mapped to <var>TStringGridStrings</var> instances used to store the values in the grid control. TCustomStringGrid also allows a TObject instance to be stored for each cell in the grid using the <var>Objects</var> property.
            </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.Cells"/>
          <link id="TCustomStringGrid.Cols"/>
          <link id="TCustomStringGrid.Rows"/>
          <link id="TCustomStringGrid.Objects"/>
          <link id="TCustomStringGrid.OnCellProcess"/>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.FModified"/>
      <element name="TCustomStringGrid.FColsMap"/>
      <element name="TCustomStringGrid.FRowsMap"/>
      <element name="TCustomStringGrid.FOnCellProcess"/>

      <element name="TCustomStringGrid.GetCols">
        <short>Gets the values in the specified column number as a TStrings instance.</short>
        <descr>
          <p>
            <var>GetCols</var> is the read access specifier for the indexed <var>Cols</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.Cols"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.GetCols.Result">
        <short>TStrings with row values for the specified column number.</short>
      </element>
      <element name="TCustomStringGrid.GetCols.Index">
        <short>Column number retrieved in the method.</short>
      </element>

      <element name="TCustomStringGrid.GetObjects">
        <short>Gets the value for the indexed Objects property.</short>
        <descr/>
        <seealso>
          <link id="TCustomStringGrid.Objects"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.GetObjects.Result">
        <short>Value for the indexed property.</short>
      </element>
      <element name="TCustomStringGrid.GetObjects.ACol">
        <short>Column number for the object.</short>
      </element>
      <element name="TCustomStringGrid.GetObjects.ARow">
        <short>Row number for the object.</short>
      </element>

      <element name="TCustomStringGrid.GetRows">
        <short>Gets the value for the indexed Rows property.</short>
        <descr/>
        <seealso>
          <link id="TCustomStringGrid.Rows"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.GetRows.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TCustomStringGrid.GetRows.Index">
        <short>Ordinal position for the requested row.</short>
      </element>

      <element name="TCustomStringGrid.MapFree">
        <short>Frees the TStringGridStrings instances in the specified Map.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.MapFree.AMap">
        <short>TMap instance examined and updated in the method.</short>
      </element>

      <element name="TCustomStringGrid.MapGetColsRows">
        <short></short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.Result">
        <short>TStrings instance with the values for the specified column or row.</short>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.IsCols">
        <short>True when columns are returned, False for rows.</short>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.Index">
        <short>Column or row number for values retrieved in the method.</short>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.AMap">
        <short>Map instance used in the method.</short>
      </element>

      <element name="TCustomStringGrid.ReadCells">
        <short>Reads string values for the Cells property using a TReader instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.ReadCells.Reader">
        <short>TReader instance used to read values during LCL streaming.</short>
      </element>

      <element name="TCustomStringGrid.SetCols">
        <short>Sets the value for the indexed Cols property.</short>
        <descr/>
        <seealso>
          <link id="TCustomStringGrid.Cols"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.SetCols.Index">
        <short>Ordinal position for the affected column </short>
      </element>
      <element name="TCustomStringGrid.SetCols.AValue">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TCustomStringGrid.SetObjects">
        <short>Sets the value for the indexed Objects property.</short>
        <descr/>
        <seealso>
          <link id="TCustomStringGrid.Objects"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.SetObjects.ACol">
        <short>Ordinal position for the column.</short>
      </element>
      <element name="TCustomStringGrid.SetObjects.ARow">
        <short>Ordinal position for the row.</short>
      </element>
      <element name="TCustomStringGrid.SetObjects.AValue">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TCustomStringGrid.SetRows">
        <short>Sets the value for the indexed Rows property.</short>
        <descr/>
        <seealso>
          <link id="TCustomStringGrid.Rows"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.SetRows.Index">
        <short>Ordinal position for the row affected.</short>
      </element>
      <element name="TCustomStringGrid.SetRows.AValue">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TCustomStringGrid.WriteCells">
        <short>Writes the string values in the Cells property using the specified TWriter instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.WriteCells.Writer">
        <short/>
      </element>

      <element name="TCustomStringGrid.CopyCellRectToClipboard">
        <short>Copies the content from cell(s) in the specified selection rectangle to the clipboard.</short>
        <descr>
          <remark>
            Only visible cells in the selection rectangle are included in the copied values. Others are quietly discarded. HTML TABLE syntax is used to store the cell values copied in the method. LineEnd and HTML reserved characters are translated into HTML-safe tags or HTML character entities.
          </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.CopyCellRectToClipboard.R">
        <short>Cell selection rectangle with values copied in the method.</short>
      </element>

      <element name="TCustomStringGrid.AssignTo">
        <short>Assigns values from the current class instance to the target class instance.</short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.AssignTo"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.AssignTo.Dest" link="#lcl.grids.TCustomGrid.AssignTo.Dest"/>

      <element name="TCustomStringGrid.AutoAdjustColumn">
        <short>Adjusts the column size for the font, text and images used in the specified column.</short>
        <descr>
          <p>
            Adjusts the column specified in <var>ACol</var> to use the width needed for the font and image(s) for the column. No actions are performed in the method when ACol is not a valid column index.
          </p>
          <p>
            <var>AutoAdjustColumn</var> calculates the width need for the image (if any) used in the column header, and adds the padding specified in the DEFIMAGEPADDING constant. If a sort indicator is used, the same actions are performed for the sort image. The image widths may be scaled to the current display density if the PPI for the control Font differs from the value in TitleImageList.
          </p>
          <p>
            AutoAdjustColumn visits the rows in the grid to calculate the maximum width required for the text in each. A temporary Canvas instance is used to calculate the width for the text. When Columns has been enabled, fonts assigned to the TGridColumn instance are used. When Columns has not been enabled, TitleFont is used for fixed rows or columns. Otherwise, the Font for the grid is used.
          </p>
          <p>
            For multi-line columns, the DrawText routine is called to calculate the text rectangle. For single-line columns, the TextExtent method in the canvas is used. Cell padding is added to the calculated column width using the value in varCellPadding. The derived column width is stored  in the ColWidths property for the column specified in ACol.
          </p>
          <p>
            AutoAdjustColumn is called from the DblClick method when column auto-sizing <b>and</b> double click auto-sizing have been enabled in the Options for the grid. It is also called from the AutoAdjustColumns, AutoSizeColumns, and AutoSizeColumn methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.AutoAdjustColumn"/>
          <link id="TCustomGrid.IsColumnIndexValid"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.AutoAdjustColumn.ACol">
        <short>Column number for values examined in the method.</short>
      </element>

      <element name="TCustomStringGrid.CalcCellExtent">
        <short>Deprecated in the ancestor class.</short>
        <descr>
          <remark>
            CalcCellExtent is marked as deprecated in the ancestor class.
          </remark>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomGrid.CalcCellExtent">TCustomGrid.CalcCellExtent</link>
        </seealso>
      </element>
      <element name="TCustomStringGrid.CalcCellExtent.ACol">
        <short/>
      </element>
      <element name="TCustomStringGrid.CalcCellExtent.ARow">
        <short/>
      </element>
      <element name="TCustomStringGrid.CalcCellExtent.ARect">
        <short/>
      </element>

      <element name="TCustomStringGrid.DefineProperties">
        <short>Defines non-published properties included in LCL component streaming.</short>
        <descr>
          <p>
            <var>DefineProperties</var> is an overridden method used to define non-published properties which are read and written using LCL component streaming. In <var>TCustomStringGrid</var>, it adds read and write routines for the <var>Cells</var> property to the <var>TFiler</var> instance.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.DefineProperties.Filer">
        <short>TFIler instance used to read or write values for the class type.</short>
      </element>

      <element name="TCustomStringGrid.DefineCellsProperty">
        <short>Defines the reader and writer for the Cells property in a TFiler instance.</short>
        <descr>
          <p>
            Called from the DefineProperties method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.DefineCellsProperty.Filer">
        <short>TFiler instance updated in the method.</short>
      </element>

      <element name="TCustomStringGrid.DoCompareCells">
        <short>Performs a comparison between the specified cells in the grid control.</short>
        <descr>
          <p>
            <var>DoCompareCells</var> is an overridden method used to compare cell values in the Sort method. It calls the inherited method when the OnCompareCells event handler has been assigned. The return value from the event handler contains the relative sort order for the compared cells, and uses the following values:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>The cell at ACol and ARow occurs comes before the cell at BCol and BRow.</dd>
            <dt>0</dt>
            <dd>The specified cells have the same value.</dd>
            <dt>1</dt>
            <dd>The cell at ACol and ARow occurs comes after the cell at BCol and BRow.</dd>
          </dl>
          <p>
            When OnCompareCells is not assigned, the <var>UTF8CompareLatinTextFast</var> routine is called to perform the cell comparison and provide the return value for the method. When SortOrder is set to soDescending, the return value is negated.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DoCompareCells"/>
          <link id="TCustomGrid.OnCompareCells"/>
          <link id="#lazutils.lazutf8.UTF8CompareLatinTextFast">UTF8CompareLatinTextFast</link>
        </seealso>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.Result">
        <short>Relative sort order for the compared cell values.</short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.Acol">
        <short>Column number for the first cell value in the comparison.</short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.ARow">
        <short>Row number for the first cell value in the comparison.</short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.Bcol">
        <short>Column number for the second cell value in the comparison.</short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.BRow">
        <short>Row number for the second cell value in the comparison.</short>
      </element>

      <element name="TCustomStringGrid.DoCopyToClipboard" link="#lcl.grids.TCustomGrid.DoCopyToClipboard"/>
      <element name="TCustomStringGrid.DoCutToClipboard" link="#lcl.grids.TCustomGrid.DoCutToClipboard"/>
      <element name="TCustomStringGrid.DoPasteFromClipboard" link="#lcl.grids.TCustomGrid.DoPasteFromClipboard"/>

      <element name="TCustomStringGrid.DoCellProcess">
        <short>Performs actions needed when cell values are copied or pasted using the clipboard.</short>
        <descr>
          <p>
            Signals the OnCellProcess event handler when assigned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.processType">
        <short>Process performed in the method.</short>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.AValue">
        <short>Contains the value after performing the specified process.</short>
      </element>

      <element name="TCustomStringGrid.DrawColumnText">
        <short>Draws the text and image for a grid column title at the specified cell coordinates.</short>
        <descr>
          <p>
            <var>DrawColumnText</var> is an overridden method used to draw the text and image for a grid column title at the cell coordinates specified in <var>ACol</var> and <var>ARow</var>. When Columns has been enabled, the inherited method is called to draw the image, sort indicator, and text when needed. When Columns has not been enabled, the DrawColumnTitleImage and DrawCellText methods are called to draw the sort indicator and text for the column.
          </p>
          <p>
            DrawColumnText is called from the <var>DefaultDrawCell</var> method for cells which contain fixed column titles.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.ARect">
        <short>Rectangle with the bounds for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.AState">
        <short>Drawing state for the cell.</short>
      </element>

      <element name="TCustomStringGrid.DrawTextInCell">
        <short>Draws the text for the specified cell in a given drawing state.</short>
        <descr>
          <p>
            <var>DrawTextInCell</var> is a method used to draw the text for the cell specified in <var>ACol</var> and <var>ARow</var>. It calls the <var>DrawCellText</var> method using the specified arguments.
          </p>
          <p>
            DrawTextInCell is called from the <var>DefaultDrawCell</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawTextInCell"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.ARow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.ARect">
        <short>Rectangle with the bounds for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.AState">
        <short>Drawing state for the cell.</short>
      </element>

      <element name="TCustomStringGrid.DrawCellAutonumbering">
        <short>Performs auto-numbering for a cell in the grid.</short>
        <descr>
          <p>
            Renders the row number for non-fixed rows in the grid control. Calls the inherited DrawCellAutoNumbering method when the cell at ACol and ARow contains an  empty string ('').
          </p>
          <p>
            Called from the DefaultDrawCell method when goFixedRowNumbering is included in Options.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aRect">
        <short>Rectangle where the cell is drawn.</short>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aValue">
        <short>Text to display as the auto-numbering value.</short>
      </element>

      <element name="TCustomStringGrid.GetCells">
        <short>Gets the value for the indexed Cells property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.GetCells.Result">
        <short>Value for the indexed property.</short>
      </element>
      <element name="TCustomStringGrid.GetCells.ACol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.GetCells.ARow">
        <short>Row number for the cell.</short>
      </element>

      <element name="TCustomStringGrid.GetCheckBoxState">
        <short>Gets the state for a cell displayed as a Checkbox.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.GetCheckBoxState.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.GetCheckBoxState.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.GetCheckBoxState.aState">
        <short>Checkbox state derived for the specified cell.</short>
      </element>

      <element name="TCustomStringGrid.GetEditText">
        <short>Gets the text displayed in the Editor for the specified cell.</short>
        <descr>
          <p>
            <var>GetEditText</var> is an overridden method used to get the text displayed in the Editor for the cell with the specified column and row numbers. GetEditText re-implements the method defined in the ancestor class.
          </p>
          <p>
            The return value contains the string stored in <var>Cells</var> at the specified column and row numbers.
          </p>
          <p>
            GetEditText signals the <var>OnGetEditText</var> event handler (when assigned) to validate or modify the return value for the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GetEditText"/>
          <link id="TCustomDrawGrid.GetEditText"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.GetEditText.Result">
        <short>Textual content for the cell at the specified column and row number.</short>
      </element>
      <element name="TCustomStringGrid.GetEditText.aCol">
        <short>Column number for the cell value.</short>
      </element>
      <element name="TCustomStringGrid.GetEditText.aRow">
        <short>Row number for the cell value.</short>
      </element>

      <element name="TCustomStringGrid.LoadContent">
        <short>Loads configuration settings from the specified XML configuration file.</short>
        <descr>
          <p>
            Loads values for the <var>Cells</var> property when enabled in the configuration file.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.LoadContent"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.LoadContent.cfg" link="#lcl.grids.TCustomGrid.LoadContent.cfg"/>
      <element name="TCustomStringGrid.LoadContent.Version" link="#lcl.grids.TCustomGrid.LoadContent.Version"/>

      <element name="TCustomStringGrid.Loaded">
        <short>Performs actions when LCL component streaming has been completed.</short>
        <descr>
          <p>
            Calls the inherited method on entry, and sets the value for the <var>Modified</var> property to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Loaded"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.SaveContent">
        <short>
          Saves configuration settings from SaveOptions and optionally values from Cells in the specified XML configuration file.
        </short>
        <descr/>
        <seealso>
          <link id="TCustomGrid.SaveContent"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.SaveContent.cfg" link="#lcl.grids.TCustomGrid.SaveContent.cfg"/>

      <element name="TCustomStringGrid.SelectionSetText">
        <short>Stores the specified Tab-separated values to the Selection in the grid.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.SelectionSetText.TheText">
        <short/>
      </element>

      <element name="TCustomStringGrid.SelectionSetHTML">
        <short>Sets the value for the current Selection to the specified HTML content.</short>
        <descr>
          <p>
            Extracts text for rows and columns in the grid from the HTML-tagged content in TheHTML. Recognizes and converts the following HTML tags:
          </p>
          <ul>
            <li>BR</li>
            <li>TR</li>
            <li>TD</li>
          </ul>
          <p>
            Converts HTML numeric character entities to their UTF-8-encoded character equivalent. Unrecognized character entities are converted to a Question Mark character (?).
          </p>
          <p>
            Calls DoCellProcess to paste the values extracted from the HTML content. The value in TheText is used when TheHTML does not contain valid HTML that can be handled in the method. Cells affected in the method are assigned as the current Selection in the grid control prior to exit.
          </p>
          <p>
            Called from the DoPasteFromClipboard method when the clipboard supports the HTML format.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.SelectionSetHTML.TheHTML">
        <short>HTML stored in the current selection.</short>
      </element>
      <element name="TCustomStringGrid.SelectionSetHTML.TheText">
        <short>Textual representation for the HTML content.</short>
      </element>

      <element name="TCustomStringGrid.SetCells">
        <short>Sets the value for the indexed Cells property.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.SetCells.ACol">
        <short>Column number for the affected cell.</short>
      </element>
      <element name="TCustomStringGrid.SetCells.ARow">
        <short>Row number for the affected cell.</short>
      </element>
      <element name="TCustomStringGrid.SetCells.AValue">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TCustomStringGrid.SetCheckboxState">
        <short>Sets the checked state for a Checkbox in the specified cell.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.SetCheckboxState.aCol">
        <short>Column number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.SetCheckboxState.aRow">
        <short>Row number for the cell.</short>
      </element>
      <element name="TCustomStringGrid.SetCheckboxState.aState">
        <short>Checked state for the cell.</short>
      </element>

      <element name="TCustomStringGrid.SetEditText">
        <short>Locks, updates, and unlocks the editor and cell text at the specified coordinates.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.SetEditText.aCol">
        <short>Column number for the modified cell.</short>
      </element>
      <element name="TCustomStringGrid.SetEditText.aRow">
        <short>Row number or the modified cell.</short>
      </element>
      <element name="TCustomStringGrid.SetEditText.aValue">
        <short>New value for the modified cell.</short>
      </element>

      <element name="TCustomStringGrid.Modified">
        <short>Indicates if the content in the grid cells has been changed.</short>
        <descr>
          <p>
            The value in <var>Modified</var> is set to <b>False</b> when Loaded using the LCL streaming mechanism. The value in Modified is changed to <b>True</b> when the <var>Cells</var> property is updated in the <var>SetCells</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.Cells"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.OnCellProcess">
        <short>
          Event handler signalled when copying or pasting content for Cells in the grid.
        </short>
        <descr>
          <p>
            Allows the textual value for the clipboard operation (not the HTML interchange data) to be changed before it is applied. Signalled from the DoCellProcess method when assigned.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomStringGrid.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> -is the constructor for <var>TCustomStringGrid</var>. It calls the inherited <var>Create</var> method, and sets default styles, layout and alignment used in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.Create"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomStringGrid.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for <var>TCustomStringGrid</var>. It frees maps of columns and rows, and calls the inherited <var>Destroy</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.Destroy"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.AutoSizeColumn">
        <short>Automatically adjusts the width of a column to accommodate the widest text value.</short>
        <descr>
          <p>
            <var>AutoSizeColumn</var> sets the column width to the length of the widest text found in the column specified by <var>ACol</var>.
          </p>
          <p>
            Tip: Use <var>goDblClickAutoSize</var> in Options to allow columns to be automatically resized when doubleClicking the column border.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.AutoSizeColumns"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.AutoSizeColumn.aCol">
        <short>Column number resized in the method.</short>
      </element>

      <element name="TCustomStringGrid.AutoSizeColumns">
        <short>Resizes all columns to fit in the longest text in each.</short>
        <descr>
          <p>
            Automatically resizes all columns by adjusting them to fit in the longest text in each column. This is a quick way to perform the <var>AutoSizeColumn</var> method for every column in the grid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.AutoSizeColumn"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.Clean">
        <short>Removes cell content using the specified options.</short>
        <descr>
          <p>
            Cleans all cells in the grid subject to the given <var>CleanOptions</var>, optionally specifying a range of cells or a rectangular region. See <link id="TGridZoneSet"/> for more information.
          </p>
          <p>
            The cleaning operation does not change the number of rows and columns. It replaces the content for the affected cells with empty strings ('').
          </p>
          <p>
            Some examples:
          </p>
          <ul>
            <li>Clean all cells: grid.Clean([]); (the same as grid.clean)</li>
            <li>Clean all non-fixed cells: grid.Clean([gzNormal]);</li>
            <li>Clean all cells except grid column headers: Grid.Clean([gzNormal, gzFixedRows]);</li>
          </ul>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.Clean.CleanOptions">
        <short>Set with the grid zones affected in the method.</short>
      </element>
      <element name="TCustomStringGrid.Clean.aRect">
        <short>Rectangle with the bounds for the affected cells.</short>
      </element>
      <element name="TCustomStringGrid.Clean.StartCol">
        <short>Starting column number for the operation.</short>
      </element>
      <element name="TCustomStringGrid.Clean.StartRow">
        <short>Starting row number for the operation.</short>
      </element>
      <element name="TCustomStringGrid.Clean.EndCol">
        <short>Ending column number for the operation.</short>
      </element>
      <element name="TCustomStringGrid.Clean.EndRow">
        <short>Ending row number for the operation.</short>
      </element>

      <element name="TCustomStringGrid.CopyToClipboard">
        <short>Copies the selection cell range to the clipboard.</short>
        <descr>
          <p>
            <var>CopyToClipboard</var> will copy a range of cells into the clipboard; the cells values are TAB separated. The range is defined based on optional <var>AUseSelection</var> parameter (which is <b>False</b> by default) and indicates the range is set to the whole grid, including fixed cols/rows. If <var>AUseSelection</var> is <b>True</b>, the range of cells is set to the current <link id="TCustomGrid.Selection"/>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Selection"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.InsertRowWithValues">
        <short>Inserts a row at the specified row position with the specified cell values.</short>
        <descr>
          <p>
            <var>InsertRowWithValues</var> is a method used to insert a row at the position in <var>Index</var> with the cell content in <var>Values</var>.
          </p>
          <p>
            InsertRowWithValues examines Values to determine whether the grid has a column for each of the string values. When Values has more entries than columns available in ColCount, new columns are added to the grid. When Columns has been Enabled, the Add method in Columns is called to create any missing column definitions. The title for a column added to the collection is set to an empty string (''). When Columns has not been enabled, the value in ColCount is set to the length of the Values array.
          </p>
          <p>
            InsertRowWithValues calls InsertColRow to increment the row count for the grid, and assigns each String in Values to the corresponding Cells in the grid control.
          </p>
          <p>
            Use DeleteRow to remove a row at a specific row number in the grid.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.InsertRowWithValues.Index">
        <short>Row where the values are inserted.</short>
      </element>
      <element name="TCustomStringGrid.InsertRowWithValues.Values">
        <short>Array with string values inserted in the method.</short>
      </element>

      <element name="TCustomStringGrid.LoadFromCSVStream">
        <short>Loads the content for the grid from the delimited values in AStream.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.AStream">
        <short>Stream with the content loaded in the method.</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.ADelimiter">
        <short>Delimiter between cell data in the stream; default is Comma (',').</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.UseTitles">
        <short>Indicates if Column captions are loaded from values in the stream.</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.FromLine">
        <short>Initial line number in the stream included in the grid content; default is 0.</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.SkipEmptyLines">
        <short>Indicates if empty lines in the stream are ignored in the method.</short>
      </element>

      <element name="TCustomStringGrid.LoadFromCSVFile">
        <short>Loads the grid from a file with delimited values for the columns and rows.</short>
        <descr>
          <p>
            Creates a temporary <var>TFileStream</var> instance that is used to load values from the file in <var>AFilename</var> by calling the <var>LoadFromCSVStream</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.LoadFromCSVStream"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.AFilename">
        <short>File name with the content loaded in the method.</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.ADelimiter">
        <short>Delimiter between cell values in the file; default is Comma (',').</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.UseTitles">
        <short>Indicates if column captions are loaded from values in the file.</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.FromLine">
        <short>Initial line number from the file loaded in the method.</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.SkipEmptyLines">
        <short>Indicates if empty lines in the file are ignored in the method.</short>
      </element>

      <element name="TCustomStringGrid.SaveToCSVStream">
        <short>Saves content in the grid as delimited values in the specified stream instance.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.AStream">
        <short>Stream where grid content is stored.</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.ADelimiter">
        <short>Delimiter between cell values; default is Comma (',').</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.WriteTitles">
        <short>Indicates that column captions are stored as the first row of CSV data.</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.VisibleColumnsOnly">
        <short>Indicates if only visible columns are included in the CSV output.</short>
      </element>

      <element name="TCustomStringGrid.SaveToCSVFile">
        <short>Saves grid content as delimited values in the specified file name.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.AFileName">
        <short>File name (with optional path) where CSV data is stored.</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.ADelimiter">
        <short> Delimiter used between cell values in CSV output; default is Comma (',').</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.WriteTitles">
        <short>Indicates if column captions are written as the first row of CSV data in the file.</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.VisibleColumnsOnly">
        <short>Indicates if only visible columns are included in the CSV output.</short>
      </element>

      <element name="TCustomStringGrid.Cells">
        <short>Provides indexed access to a cell value by its column and row number.</short>
        <descr>
          <p>
            <var>Cells</var> is an indexed <var>String</var> property used to read or write the content for a cell in the grid. The ACol and ARow indexes are used the access a value stored at the requested column and row position.
          </p>
          <p>
            Reading the value causes the pointer to the cell in <var>Celda</var> to return its Text value.
          </p>
          <p>
            Setting the value causes the pointer to the cell in Celda to be updated for the specified coordinates. An active cell editor will be cancelled if it is not locked, and the value in <var>Modified</var> is reset to <b>False</b>.
          </p>
          <p>
            Use Objects to read or write an associated TObject instance for a given cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.Modified"/>
          <link id="TVirtualGrid.Celda"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.Cells.ACol">
        <short>Column number for the cell value.</short>
      </element>
      <element name="TCustomStringGrid.Cells.ARow">
        <short>Row number for the cell value.</short>
      </element>

      <element name="TCustomStringGrid.Cols">
        <short>Provides indexed access to the list of values for the specified column number.</short>
        <descr>
          <p>
            <var>Cols</var> is an indexed <var>TStrings</var> property which provides access to the list of values for the column number specified in Index. Calls MapGetColsRows to retrieve the TStrings instance used as the value for the property.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.Cols.Index">
        <short>Column number for the values.</short>
      </element>

      <element name="TCustomStringGrid.DefaultTextStyle" link="#lcl.grids.TCustomGrid.DefaultTextStyle"/>
      <element name="TCustomStringGrid.EditorMode" link="#lcl.grids.TCustomGrid.EditorMode"/>
      <element name="TCustomStringGrid.ExtendedSelect" link="#lcl.grids.TCustomGrid.ExtendedSelect"/>

      <element name="TCustomStringGrid.Objects">
        <short>Provides indexed access to a TObject instance associated with the cell.</short>
        <descr/>
          <p>
            Objects is an indexed TObject property which is used to associate an object instance with the cell specified in the ACol and ARow index values. The property value can be any TObject descendant. The application must allocate and free the object instance, and must ensure it is cast to the correct type when retrieved.
          </p>
          <p>
            While values in Cells and Objects are related, they are handled independently. The value in Objects is not changed when a new value is assigned  to Cells.
          </p>
          <p>
            Values stored in Objects are set to Nil when the Clean method is callled to remove content in the grid. The application is responsible for allocating and freeing resources in Objects.
          </p>
          <p>
            Values for the Objects property are not included in the grid data read and written during LCL component streaming. They are not handled by the LoadContent and SaveContent either. The property values are available at run-time only.
          </p>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.Objects.ACol">
        <short>Column number for the cell with the object instance.</short>
      </element>
      <element name="TCustomStringGrid.Objects.ARow">
        <short>Row number for the cell with the object instance.</short>
      </element>

      <element name="TCustomStringGrid.Rows">
        <short>Provides indexed access to the list of values for the specified row number.</short>
        <descr>
          <p>
            <var>Rows</var> is an indexed <var>TStrings</var> property which provides access to the list with the String values for the row number specified in <var>Index</var>. Calls <var>MapGetColsRows</var> to retrieve the <var>TStrings</var> instance used as the value for the property.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.Rows.Index">
        <short>Row number for the values.</short>
      </element>

      <element name="TCustomStringGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TCustomStringGrid.ValidateOnSetSelection" link="#lcl.grids.TCustomGrid.ValidateOnSetSelection"/>

      <element name="TStringGrid">
        <short>Implements a specialized grid for displaying textual content.</short>
        <descr>
          <p>
            <var>TStringGrid</var> is a <var>TCustomStringGrid</var> descendant which implements a specialized grid for displaying textual content in a matrix of columns and rows.
          </p>
          <p>
            TStringGrid is designed for use with string content stored in its cells. Internally, columns and rows in the class are mapped to <var>TStringGridStrings</var> instances used to store the values in the grid control. TStringGrid also allows a <var>TObject</var> instance to be stored for each cell in the grid using the <var>Objects</var> property.
          </p>
          <p>
            TStringGrid sets the visibility for properties defined in the ancestor class. It has an overridden <var>WSRegisterClass</var> method to register properties (from older LCL versions) which are no longer used in LCL component streaming.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid"/>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>

      <element name="TStringGrid.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TStringGrid.Modified" link="#lcl.grids.TCustomStringGrid.Modified"/>
      <element name="TStringGrid.InplaceEditor" link="#lcl.grids.TCustomGrid.InplaceEditor"/>
      <element name="TStringGrid.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TStringGrid.AlternateColor" link="#lcl.grids.TCustomGrid.AlternateColor"/>
      <element name="TStringGrid.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TStringGrid.AutoAdvance" link="#lcl.grids.TCustomGrid.AutoAdvance"/>
      <element name="TStringGrid.AutoEdit" link="#lcl.grids.TCustomGrid.AutoEdit"/>
      <element name="TStringGrid.AutoFillColumns" link="#lcl.grids.TCustomGrid.AutoFillColumns"/>
      <element name="TStringGrid.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TStringGrid.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TStringGrid.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TStringGrid.CellHintPriority" link="#lcl.grids.TCustomGrid.CellHintPriority"/>
      <element name="TStringGrid.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TStringGrid.ColCount" link="#lcl.grids.TCustomGrid.ColCount"/>
      <element name="TStringGrid.ColRowDraggingCursor" link="#lcl.grids.TCustomGrid.ColRowDraggingCursor"/>
      <element name="TStringGrid.ColRowDragIndicatorColor" link="#lcl.grids.TCustomGrid.ColRowDragIndicatorColor"/>
      <element name="TStringGrid.ColSizingCursor" link="#lcl.grids.TCustomGrid.ColSizingCursor"/>
      <element name="TStringGrid.ColumnClickSorts" link="#lcl.grids.TCustomGrid.ColumnClickSorts"/>
      <element name="TStringGrid.Columns" link="#lcl.grids.TCustomGrid.Columns"/>
      <element name="TStringGrid.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TStringGrid.DefaultColWidth" link="#lcl.grids.TCustomGrid.DefaultColWidth"/>
      <element name="TStringGrid.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>
      <element name="TStringGrid.DefaultRowHeight" link="#lcl.grids.TCustomGrid.DefaultRowHeight"/>
      <element name="TStringGrid.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
      <element name="TStringGrid.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TStringGrid.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TStringGrid.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TStringGrid.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TStringGrid.ExtendedSelect" link="#lcl.grids.TCustomGrid.ExtendedSelect"/>
      <element name="TStringGrid.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
      <element name="TStringGrid.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
      <element name="TStringGrid.FixedRows" link="#lcl.grids.TCustomGrid.FixedRows"/>
      <element name="TStringGrid.Flat" link="#lcl.grids.TCustomGrid.Flat"/>
      <element name="TStringGrid.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TStringGrid.GridLineColor" link="#lcl.grids.TCustomGrid.GridLineColor"/>
      <element name="TStringGrid.GridLineStyle" link="#lcl.grids.TCustomGrid.GridLineStyle"/>
      <element name="TStringGrid.GridLineWidth" link="#lcl.grids.TCustomGrid.GridLineWidth"/>
      <element name="TStringGrid.HeaderHotZones" link="#lcl.grids.TCustomGrid.HeaderHotZones"/>
      <element name="TStringGrid.HeaderPushZones" link="#lcl.grids.TCustomGrid.HeaderPushZones"/>
      <element name="TStringGrid.ImageIndexSortAsc" link="#lcl.grids.TCustomGrid.ImageIndexSortAsc"/>
      <element name="TStringGrid.ImageIndexSortDesc" link="#lcl.grids.TCustomGrid.ImageIndexSortDesc"/>
      <element name="TStringGrid.MouseWheelOption" link="#lcl.grids.TCustomGrid.MouseWheelOption"/>
      <element name="TStringGrid.Options" link="#lcl.grids.TCustomGrid.Options"/>
      <element name="TStringGrid.Options2" link="#lcl.grids.TCustomGrid.Options2"/>
      <element name="TStringGrid.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>

      <element name="TStringGrid.ParentColor">
        <short>
          Uses the Color from the Parent control, when enabled.
        </short>
        <descr>
          <p>
            ParentColor determines if the control should use the Color from the Parent control, when enabled. The default value for the property is False in TStringGrid.
          </p>
          <p>
            When this property is True, all changes to the Color of the parent will also be applied to the Color of the control, ensuring that they both contain same value. If the Color of the control is changed by the application, then ParentColor will be automatically set to False.
          </p>
         <p>
           Using ParentColor when the Color value is clDefault can cause problems in resolving the actual color value. To obtain the Color property of a control while taking into account clDefault and ParentColor, use the GetColorResolvingParent method. This method might return a non-RGB color, but will never return clDefault. To obtain a purely RGB result use the GetRGBColorResolvingParent method.
         </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
          <link id="#lcl.controls.TControl.Color">TControl.Color</link>
          <link id="#lcl.controls.TControl.GetColorResolvingParent">TControl.GetColorResolvingParent</link>
          <link id="#lcl.controls.TControl.GetRGBColorResolvingParent">TControl.GetRGBColorResolvingParent</link>
        </seealso>
      </element>

      <element name="TStringGrid.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
      <element name="TStringGrid.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TStringGrid.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TStringGrid.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TStringGrid.RangeSelectMode" link="#lcl.grids.TCustomGrid.RangeSelectMode"/>
      <element name="TStringGrid.RowCount" link="#lcl.grids.TCustomGrid.RowCount"/>
      <element name="TStringGrid.RowSizingCursor" link="#lcl.grids.TCustomGrid.RowSizingCursor"/>
      <element name="TStringGrid.ScrollBars" link="#lcl.grids.TCustomGrid.ScrollBars"/>
      <element name="TStringGrid.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TStringGrid.TabAdvance" link="#lcl.grids.TCustomGrid.TabAdvance"/>
      <element name="TStringGrid.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TStringGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TStringGrid.TitleFont" link="#lcl.grids.TCustomGrid.TitleFont"/>
      <element name="TStringGrid.TitleImageList" link="#lcl.grids.TCustomGrid.TitleImageList"/>
      <element name="TStringGrid.TitleStyle" link="#lcl.grids.TCustomGrid.TitleStyle"/>
      <element name="TStringGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TStringGrid.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TStringGrid.VisibleColCount" link="#lcl.grids.TCustomGrid.VisibleColCount"/>
      <element name="TStringGrid.VisibleRowCount" link="#lcl.grids.TCustomGrid.VisibleRowCount"/>
      <element name="TStringGrid.OnAfterSelection" link="#lcl.grids.TCustomGrid.OnAfterSelection"/>
      <element name="TStringGrid.OnBeforeSelection" link="#lcl.grids.TCustomGrid.OnBeforeSelection"/>
      <element name="TStringGrid.OnCellProcess" link="#lcl.grids.TCustomStringGrid.OnCellProcess"/>
      <element name="TStringGrid.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
      <element name="TStringGrid.OnCheckboxToggled" link="#lcl.grids.TCustomGrid.OnCheckboxToggled"/>
      <element name="TStringGrid.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TStringGrid.OnColRowDeleted" link="#lcl.grids.TCustomDrawGrid.OnColRowDeleted"/>
      <element name="TStringGrid.OnColRowExchanged" link="#lcl.grids.TCustomDrawGrid.OnColRowExchanged"/>
      <element name="TStringGrid.OnColRowInserted" link="#lcl.grids.TCustomDrawGrid.OnColRowInserted"/>
      <element name="TStringGrid.OnColRowMoved" link="#lcl.grids.TCustomDrawGrid.OnColRowMoved"/>
      <element name="TStringGrid.OnCompareCells" link="#lcl.grids.TCustomDrawGrid.OnCompareCells"/>
      <element name="TStringGrid.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TStringGrid.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TStringGrid.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TStringGrid.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TStringGrid.OnDrawCell" link="#lcl.grids.TCustomGrid.OnDrawCell"/>

      <element name="TStringGrid.OnEditButtonClick">
        <short>Deprecated. Use <var>OnButtonClick</var> instead.</short>
        <descr>
          <p>
            Deprecated. Use <var>OnButtonClick</var> instead.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnButtonClick"/>
        </seealso>
      </element>

      <element name="TStringGrid.OnButtonClick" link="#lcl.grids.TCustomGrid.OnButtonClick"/>
      <element name="TStringGrid.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
      <element name="TStringGrid.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TStringGrid.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TStringGrid.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TStringGrid.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TStringGrid.OnGetCellHint" link="#lcl.grids.TCustomGrid.OnGetCellHint"/>
      <element name="TStringGrid.OnGetCheckboxState" link="#lcl.grids.TCustomDrawGrid.OnGetCheckboxState"/>
      <element name="TStringGrid.OnGetEditMask" link="#lcl.grids.TCustomDrawGrid.OnGetEditMask"/>
      <element name="TStringGrid.OnGetEditText" link="#lcl.grids.TCustomDrawGrid.OnGetEditText"/>
      <element name="TStringGrid.OnHeaderClick" link="#lcl.grids.TCustomDrawGrid.OnHeaderClick"/>
      <element name="TStringGrid.OnHeaderSized" link="#lcl.grids.TCustomDrawGrid.OnHeaderSized"/>
      <element name="TStringGrid.OnHeaderSizing" link="#lcl.grids.TCustomDrawGrid.OnHeaderSizing"/>
      <element name="TStringGrid.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TStringGrid.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TStringGrid.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TStringGrid.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TStringGrid.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TStringGrid.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TStringGrid.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TStringGrid.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TStringGrid.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TStringGrid.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TStringGrid.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TStringGrid.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TStringGrid.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TStringGrid.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TStringGrid.OnPickListSelect" link="#lcl.grids.TCustomGrid.OnPickListSelect"/>
      <element name="TStringGrid.OnPrepareCanvas" link="#lcl.grids.TCustomGrid.OnPrepareCanvas"/>
      <element name="TStringGrid.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TStringGrid.OnSelectEditor" link="#lcl.grids.TCustomGrid.OnSelectEditor"/>
      <element name="TStringGrid.OnSelection" link="#lcl.grids.TCustomGrid.OnSelection"/>
      <element name="TStringGrid.OnSelectCell" link="#lcl.grids.TCustomDrawGrid.OnSelectCell"/>
      <element name="TStringGrid.OnSetCheckboxState" link="#lcl.grids.TCustomDrawGrid.OnSetCheckboxState"/>
      <element name="TStringGrid.OnSetEditText" link="#lcl.grids.TCustomDrawGrid.OnSetEditText"/>
      <element name="TStringGrid.OnShowHint" link="#lcl.controls.TControl.OnShowHint"/>
      <element name="TStringGrid.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TStringGrid.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TStringGrid.OnTopLeftChanged" link="#lcl.grids.TCustomGrid.OnTopLeftChanged"/>
      <element name="TStringGrid.OnUserCheckboxBitmap" link="#lcl.grids.TCustomGrid.OnUserCheckboxBitmap"/>
      <element name="TStringGrid.OnUserCheckboxImage" link="#lcl.grids.TCustomGrid.OnUserCheckboxImage"/>
      <element name="TStringGrid.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TStringGrid.OnValidateEntry" link="#lcl.grids.TCustomGrid.OnValidateEntry"/>

      <element name="DrawRubberRect">
        <short>Draws a rubber banding rectangle.</short>
        <descr>
          <p>
            Draws a dotted rubber banding rectangle around the provided cell rectangle.
          </p>
          <p>
            <var>DrawBits</var> contains a <var>Byte</var> value that indicates the rectangle sides drawn in the routine. By default, all sides for the rectangle are drawn. Use the following byte values or-ed together in <var>DrawBits</var> to specify the sides drawn:
          </p>
          <dl>
            <dt>BF_LEFT</dt>
            <dd>Draws the left side of the rectangle.</dd>
            <dt>BF_RIGHT</dt>
            <dd>Draws the right side of the rectangle.</dd>
            <dt>BF_TOP</dt>
            <dd>Draws the top of the rectangle.</dd>
            <dt>BF_BOTTOM</dt>
            <dd>Draws the bottom of the rectangle.</dd>
          </dl>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="DrawRubberRect.Canvas">
        <short>Canvas where the rubber band rectangle is drawn.</short>
      </element>
      <element name="DrawRubberRect.aRect">
        <short>Coordinates for the rubber band rectangle.</short>
      </element>
      <element name="DrawRubberRect.Color">
        <short>Color for the rubber band rectangle.</short>
      </element>
      <element name="DrawRubberRect.DrawBits">
        <short>Sides drawn for the rubber band rectangle.</short>
      </element>

      <element name="GetWorkingCanvas">
        <short>Ensures that a valid handle for a device context exists for the canvas.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="GetWorkingCanvas.Result">
        <short>The canvas instance with a valid handle.</short>
      </element>
      <element name="GetWorkingCanvas.Canvas">
        <short>Canvas examined in the routine.</short>
      </element>

      <element name="FreeWorkingCanvas">
        <short>Ensures a canvas handle for a device context is freed.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="FreeWorkingCanvas.canvas">
        <short>Canvas examined in the routine.</short>
      </element>

      <element name="Register">
        <short>Registers components in the Lazarus IDE.</short>
        <descr>
          <p>
            <var>Register</var> is the procedure used to register components for use in the Lazarus IDE. Register calls the <var>RegisterComponents</var> routine to add the <var>TStringGrid</var> and <var>TDrawGrid</var> components to the <b>Additional</b> tab in the Lazarus IDE.
          </p>
        </descr>
        <seealso/>
      </element>

      <topic name="HowToUseGrids">
        <short>
          How to use  <var>Grids</var> including  <var>StringGrids</var>,  <var>DrawGrids</var> and  <var>DbGrids</var>.
        </short>
        <descr>
          <p>
            <b>Customizing Grids</b>
          </p>
          <p>
            Grids are components derived from the <var>TCustomControl</var> class and do not  have a native widget associated with them. So they are not restricted by the look of the current interface theme. This can be both an advantage and a disadvantage: usually programmers want to create a uniform-look application. Lazarus grids are flexible enough to allow programmers to make them look similar to other native controls; alternatively they can customize the grid to obtain almost the same look in any platform or widget interface (with the exception of scrollbars, whose look is still determined by the current theme).
          </p>
          <p>
            Some properties can affect the way the grid looks by acting when the cell is about to be painted in <var>PrepareCanvas/OnPrepareCanvas</var> by changing default canvas properties like brush color or font. Following is a list of such properties:
          </p>
          <table>
            <caption>Properties and Events for Customizing Grids</caption>
            <th>
              <td>Property</td>
              <td>Meaning</td>
            </th>
            <tr>
              <td>AlternateColor</td>
              <td>The user can change the background color that appears on alternate rows. This is to allow easy reading of grid rows data.</td>
            </tr>
            <tr>
              <td>Color</td>
              <td>Sets the primary color used to draw non fixed cells' background.</td>
            </tr>
            <tr>
              <td>FixedColor</td>
              <td>The color used to draw fixed cells' background.</td>
            </tr>
            <tr>
              <td>Flat</td>
              <td>Eliminates the 3d look of fixed cells.</td>
            </tr>
            <tr>
              <td>TitleFont</td>
              <td>Font used to draw the text in fixed cells.</td>
            </tr>
            <tr>
              <td>TitleStyle</td>
              <td>
                <p>Changes the 3D look of fixed cells. There are 3 settings:</p>
                <dl>
                  <dt>tsLazarus</dt>
                  <dd>The default look</dd>
                  <dt>tsNative</dt>
                  <dd>Tries to use an appearance that is in concordance with the current widgetset theme</dd>
                  <dt>tsStandard</dt>
                  <dd>A more contrasted look, like Delphi grids</dd>
                </dl>
              </td>
            </tr>
            <tr>
              <td>AltColorStartNormal</td>
              <td>
                If true, alternate color is always in the second row after fixed rows; the first row after fixed rows will always be the default color. If false, default color is set to the first row as if there were no fixed rows.
              </td>
            </tr>
            <tr>
              <td>BorderColor</td>
              <td>
                Sets the grid's border color used when <var>Flat</var>=True and <var>BorderStyle</var>=bsSingle;
              </td>
            </tr>
            <tr>
              <td>EditorBorderStyle</td>
              <td>
                If set to <var>bsNone</var> under Windows the cell editors will not have the border, like in Delphi; set to <var>bsSingle</var> by default because the border can be theme specific in some widgetsets and to allow a uniform look.
            </td>
            </tr>
            <tr>
              <td>FocusColor</td>
              <td>The color used to draw the current focused cell if <var>UseXORFeatures</var> is not set; by default this is <var>clRed</var>.</td>
            </tr>
            <tr>
              <td>FocusRectVisible</td>
              <td>Turns on/off the drawing of focused cell.</td>
            </tr>
            <tr>
              <td>GridLineColor</td>
              <td>Color of grid lines in non fixed area.</td>
            </tr>
            <tr>
              <td>GridLineStyle</td>
              <td>
                Pen style used to draw lines in non fixed area, possible choices are: <var>psSolid</var>, <var>psDash</var>, <var>psDot</var>, <var>psDashDot</var>, <var>psDashDotDot</var>, <var>psinsideFrame</var>, <var>psPattern</var>, <var>psClear</var>; default is <var>psSolid</var>.
              </td>
            </tr>
            <tr>
              <td>SelectedColor</td>
              <td>Color used to draw cell background on selected cells.</td>
            </tr>
            <tr>
              <td>UseXORFeatures</td>
              <td>If set, focus rect is drawn using XOR mode so it should make visible the focus rect in combination with any cell color background. It also affects the way that moving columns look.</td>
            </tr>
            <tr>
              <td>DefaultDrawing</td>
              <td>
                Normally the grid prepares its grid canvas using properties according to the kind of cell that is being painted. If the user has written an <var>OnDrawCell</var> event handler, <var>DefaultDrawing</var> (if set) also paints the cell background; if the user is taking full responsibility for drawing the cell it is better to turn off this so painting is not duplicated. In a StringGrid, if DefaultDrawing is set it draws the text in each cell.
            </td>
            </tr>
            <tr>
              <td>AutoAdvance</td>
              <td>Where the cell cursor will go when pressing enter or tab/shift tab, or after editing.</td>
            </tr>
            <tr>
              <td>ExtendedColSizing</td>
              <td>If true, the  user can resize columns, not just at the headers, but anywhere along the column's height.</td>
            </tr>
          </table>
          <p>
            <b>Other Properties that Affect Grid Appearance:</b>
          </p>
          <p>
            <var>Options</var>
          </p>
          <p>
            This is a set of zero or more choices, with some elements that enable diverse functionality but others that are related directly with grid's look. Options can be set at design-time or run-time.
          </p>
          <dl>
            <dt>
              <var>goFixedVertLine, goFixedHorzLine</var>
            </dt>
            <dd>
              Draws a vertical or horizontal line respectively, delimiting cells or columns in the fixed area; active by default.
            </dd>
            <dt>
              <var>goVertLine, goHorzLine</var>
            </dt>
            <dd>
              The same as previous, but for the normal browseable area. A grid can be made to simulate a listbox by unsetting both of these options.
            </dd>
            <dt>
              <var>goDrawFocusSelected</var>
            </dt>
            <dd>
              If this option is enabled, a selection background is painted in the focused cell in addition to the focused dotted rectangle. Please note:  this doesn't work when the <var>goRowSelect</var> option is set; in such case the row is always painted as if <var>goDrawFocusSelected</var> is set.
            </dd>
            <dt>
              <var>goRowSelect</var>
            </dt>
            <dd>
              Selects the full row instead of individual cells.
            </dd>
            <dt>
              <var>goFixedRowNumbering</var>
            </dt>
            <dd>
              If set, grid will do numbering of rows in first fixed column.
            </dd>
            <dt>
              <var>goHeaderHotTracking</var>
            </dt>
            <dd>
              If set, the grid will try to show a different look when the mouse cursor is over any fixed cell. In order for this to work, desired cell zone needs to be enabled with the <var>HeaderHotZones</var>. Try combining this option with <var>TitleStyle</var>= <var>tsNative</var> to get themed hot tracking look.
            </dd>
            <dt>
              <var>goHeaderPushedLook</var>
            </dt>
            <dd>
              If set, this option enables a pushed look when clicking any fixed cell. The zone of "pushable" cells is enabled using <var>HeaderPushedZones</var> property.
            </dd>
          </dl>
          <p>
            <b>Description of the Grid Drawing Process</b>
          </p>
          <p>
            Like other custom controls, the grid is drawn using the paint method. In general terms the grid is drawn by painting all rows, and each row by painting its individual cells. The process is as follows:
          </p>
          <ul>
            <li>First, the visible cells area is determined: each row is tested to see if it intersects the canvas clipping region; if it's OK, then the visible area is painted by drawing columns of each row.
            </li>
            <li>
              The column and row values are used to identify the cell that is about to be painted and again each column is tested for intersection with the clipping region; if everything is OK, some additional properties like the cell's rectangular extent and visual state are passed as arguments to the DrawCell method.
            </li>
            <li>
              <p>
                As the drawing process is running, the visual state of each cell is adjusted according to grid options and position within grid. The visual state is retained in a variable of type <var>TGridDrawState</var> which is a set with following elements:
              </p>
              <table>
                <tr>
                  <td>gdSelected</td>
                  <td>The cell will have a selected look.</td>
                </tr>
                <tr>
                  <td>gdFocused</td>
                  <td>The cell will have a focused look.</td>
                </tr>
                <tr>
                  <td>gdFixed</td>
                  <td>Cell have to be painted with fixed cell look.</td>
                </tr>
                <tr>
                  <td>gdHot</td>
                  <td>the mouse is over this cell, so paint it with hot tracking look</td>
                </tr>
                <tr>
                  <td>gdPushed</td>
                  <td>the cell is being clicked, paint it with pushed look </td>
                </tr>
              </table>
            </li>
            <li>
              <p>
                <var>DrawCell</var> - The DrawCell method is virtual and may be overridden in descendent grids to do custom drawing. The information passed to <var>DrawCell</var> helps to identify which particular cell is being painted, the physical area occupied on the screen and its visible status. See <link id="TCustomGrid.DrawCell">DrawCell</link> reference for details. For each cell the following occurs:
              </p>
              <ul>
                <li>
                  <b>PrepareCanvas</b>  - If the DefaultDrawing is set, the grid canvas is setup with default properties for brush and font based on current visual state. For several design and run-time properties, the text alignment is set to match programmer selection in custom columns if they exists.  If DefaultDrawing is false, brush color is set to clWindow and Font color to clWindowText, the text alignment is set with grids defaultTextStyle value.
                </li>
                <li>
                  <b>OnPrepareCanvas</b> -  If the programmer wrote an event handler for the
                  <var>OnPrepareCanvas</var> event, it is called at this point. This event can be used for doing simple customization like changing a cell's background color, font's properties like color, font face and style, Text layout like different combinations of left, center, top, bottom, right alignment, etc. Any change made to the canvas for a particular cell in this event would be lost, because the next cell drawing will reset canvas again to a default state. So it's safe doing changes only for a particular cell or cells and forget about it for the rest. Using this event sometimes helps to avoid using the <var>OnDrawCell</var> grid event, where users would be forced to duplicate the grid's drawing code.
                </li>
                <li>
                  <b>OnDrawCell</b> - Next, if no handler for the <var>OnDrawCell</var> event was specified, the grid calls the <var>DefaultDrawCell</var> method which simply paints the cell background using the current canvas brush color and style. If the <var>OnDrawCell</var> handler exists, the grid first paints the cell background, but only if the <var>DefaultDrawing</var> was set; then it calls the <var>OnDrawCell</var> event to do custom cell painting. Usually programmers want to do custom drawing only for particular cells, but standard drawing for others: in this case, they can restrict custom operation to certain cell or cells by looking into <var>ACol, ARow</var> and <var>AState</var> arguments, and for other cells simply call the <var>DefaultDrawCell</var> method and let the grid to take care of it.
                </li>
                <li>
                  <b>Text</b> - At this point, if the <var>DefaultDrawing</var> is true, the cell's text content is painted (only for <var>TStringGrid</var>).
                </li>
                <li>
                  <b>Grid lines</b> - The last step for each cell is to paint the grid lines: if grid options <var>goVertLine, goHorzLine, goFixedVertLine</var> and
                  <var>goFixedHorzLine</var> are specified the cell grid is drawn at this point. Grids with only rows or only cols can be obtained by changing these options. If the programmer elected to have a "themed" look it is done at this point also (see TitleStyle).
                </li>
                <li>
                  <b>FocusRect</b> - When all columns of the current row have been painted it is time to draw the focus rectangle for the current selected cell or for the whole row if the <var>goRowSelect</var> option is set.
                </li>
              </ul>
            </li>
          </ul>
          <p>
            <b>Grid Cell Selection</b>
          </p>
          <p>
            The location of a grid's current (focused) cell (or row) can be changed using keyboard, mouse or through code. In order to change cell focus successfully to another position, we must test  the target position to see if it is allowed to receive cell focus. When using the keyboard, <var>AutoAdvance</var> performs part of the process by finding what should be the next focused cell. When using mouse clicks or moving by code, focus will not move from the current cell unless the target cell is permitted to receive focus.
          </p>
          <p>
            The grid calls <var>SelectCell</var> to see if a cell is focusable: if this function returns true, then the target cell identified with arguments <var>aCol</var> and <var>aRow</var> is focusable (the current implementation of <var>TCustomGrid</var> simply returns true). <var>TCustomDrawGrid</var> and hence <var>TDrawGrid</var> and <var>TStringGrid</var> override this method and check first if  a cell is any wider than 0; normally you don't want a 0 width cell selected so a cell with this characteristics is skipped automatically in the process of finding a suitable cell. The overridden method <var>SelectCell</var> also calls the user configurable event <var>OnSelectCell</var>: this event receives the cell coordinates as arguments and always returns a default result of True.
          </p>
          <p>
            Once a cell is known to be focusable and we are sure a movement will take place, the method <var>BeforeMoveSelection</var> is called; this in turns triggers the <var>OnBeforeSelection</var> event. This method's arguments are the coordinates for the new focused cell; at this point any visible editor is hidden too. The "before" word means that selection is not yet changed and current focused coordinates can be accessed with <var>grid.Col</var> and <var>grid.Row</var> properties.
          </p>
          <p>
            After that, the internal focused cell coordinates are changed and <var>MoveSelection</var> is called; this method's purpose (if set) is to trigger the <var>OnSelection</var> event (this is a notification that the focused cell has changed and the new cell coordinates are available through grid.row and grid.col properties).
          </p>
          <p>
            Note that is not good to use the <var>OnSelectCell</var> event to detect cell focus changes, as this event will be triggered several times even for the same cell in the process of finding a suitable cell. Is better to use <var>OnBeforeSelection</var> or <var>OnSelection</var> events for this purpose.
          </p>
          <p>
            <b>Using Cell Editors</b>
          </p>
          <p>
            Users can specify what editor will be used for a cell using one of two methods.
          </p>
          <ol>
            <li>
              <b>Using a custom column and selecting the ButtonStyle of the column.</b> In this method the user can select the style of the editor that will be shown. Available values are: <var>cbsAuto, cbsEllipsis, cbsNone, cbsPickList, cbsCheckboxColumn</var>.
            </li>
            <li>
              <p>
                <b>Using the OnSelectEditor Grid Event</b>
              </p>
              <p>
                Here the user specifies in the <var>Editor</var> parameter which editor to use for a cell identified by <var>aCol</var>, <var>ARow</var> in a <var>TCustomDrawGrid</var> derived grid or <var>TColumn</var> in <var>TCustomDBGrid</var>. The public <var>EditorByStyle()</var> function takes as parameter one of the following values: <var>cbsAuto, cbsEllipsis, cbsNone, cbsPickList, cbsCheckboxColumn</var>.
              </p>
              <p>
                This method takes precedence over the first one using custom columns. A Custom cell editor can be specified here, with values specific to the cell, row or column.
              </p>
            </li>
          </ol>
          <p>
            <b>Description of Editor Styles</b>
          </p>
          <p>
            The following is a description of the editor styles. They are enumerated values of type <var>TColumnButtonStyle</var> and so they are prefixed by 'cbs'. This type was used to remain compatible with Delphi's <var>DBGrid</var>.
          </p>
          <ul>
            <li>
              <b>cbsAuto</b> - This is the default editor style for TCustomGrid derived grids. The TStringCellEditor derived from TCustomMaskEdit is specialized to edit single line strings and is used by default in TStringGrid and TDrawGrid. When using Custom Columns, if the programmer filled the Column's PickList property, this behaves as if cbsPickList editor style was set. For a TCustomDBGrid that has a field of type Boolean, it behaves as if cbsCheckBoxColumn editor style was specified. This is the recommended value for custom cell editors.
            </li>
            <li>
              <p>
                <b>cbsEllipsis</b> - This editor style is the most generic one. A button with ellipsis (...) appears in the editing cell and the programmer can use the OnEditButtonClick grid event to take any programmed action  when the user presses the button. For example a calendar dialog could pop up to allow the user to select a specific date,  a file open dialog could appear to find files, or a calculator could appear so the user could enter the numeric result of calculations, etc.
              </p>
              <ul>
                <li>
                  OnEditButtonClick is just a notification, to find out in which cell a button has been clicked by taking  a look at the grid.Row and grid.Col properties.
                </li>
                <li>
                  A DBGrid has specific properties to retrieve the active column or field and because this event occurs in the active record, it could update the information in the active field.
                </li>
                <li>
                  This editor style is implemented using TButtonCellEditor, a direct descendant of TButton.
                </li>
              </ul>
            </li>
            <li>
              <b>cbsNone</b> - This editor style instructs the grid not to use any editor for a specific column; it behaves as if the cell were read-only.
            </li>
            <li>
              <p>
                <b>cbsPickList</b> - Used to present the user with a list of values that can be entered. This editor style is implemented using TPickListCellEditor, a component derived from TCustomComboBox. The list of values that are shown is filled in one of two ways depending on the method used to select the editor style.
               </p>
               <p>
                 When using custom columns, programmers can enter a list of values using the PickList property for the column.
               </p>
            </li>
            <li>
              <p>
                <b>cbsCheckboxColumn</b> - This editor style is at the moment only available in TDBGrid. If a field's contents associated with the column are restricted to a pair of values, for example, yes-no, true-false, on-off, 1-0, etc then cbsCheckboxColumn is used to modify the appearance of a column by using a checkbox representation that the user can toggle by using a mouse click or pressing the SPACE key.
              </p>
              <ul>
                <li>
                  If a ButtonStyle for a column is set to cbsAuto and DBGrid detects that the field associated with the column is a Boolean field, then the grid uses this editor style automatically. This automatic selection can be disabled or enabled using DBGrid's OptionsExtra property; setting dgeCheckboxColumn element to false disables this feature.
                </li>
                <li>
                  The values that are used to recognize the checked or unchecked states are set in a column's properties ValueChecked and ValueUnchecked.
                </li>
                <li>
                  At any moment, the field value can be in one of three states: Unchecked, Checked or Grayed.
                </li>
              </ul>
            </li>
          </ul>
        </descr>
        <notes>
          <note>
            ToDo:
            OnDrawCell example.
            Editing a pick list example.
          </note>
        </notes>
      </topic>

    </module>
    <!-- Grids -->
  </package>
</fpdoc-descriptions>
