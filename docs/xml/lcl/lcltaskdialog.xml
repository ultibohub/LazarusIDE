<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
<package name="lcl">
<!--
====================================================================
LCLTaskDialog
====================================================================
-->
<module name="LCLTaskDialog">
<short>Implement a TaskDialog window for LCL.</short>
<descr>
<p>
<file>lcltaskdialog.pas</file> implements a task dialog . It is implemented 
natively on Windows Vista and Windows 7 (or later). On Windows XP, it is 
emulated.
</p>
<p>
This unit was originally a part of the freeware Synopse mORMot framework, 
licensed under a MPL/GPL/LGPL tri-license; version 1.19. It has been 
relicensed with permission from Arnaud Bouchez, the original author, and all 
contributors.
</p>
<p>
The original file name is SynTaskDialog.pas.
</p>
</descr>

<!-- unresolved external references -->
<element name="Windows"/>
<element name="Classes"/>
<element name="SysUtils"/>
<element name="LazUTF8"/>
<element name="LCLType"/>
<element name="LCLStrConsts"/>
<element name="LCLIntf"/>
<element name="InterfaceBase"/>
<element name="LResources"/>
<element name="Menus"/>
<element name="Graphics"/>
<element name="Forms"/>
<element name="Controls"/>
<element name="StdCtrls"/>
<element name="ExtCtrls"/>
<element name="Buttons"/>

<element name="TaskDialogIndirect">
<short/>
<descr>
<p>
Filled once in the initialization block. You can set this reference to Nil to 
force Delphi dialogs even on Windows Vista/Seven (e.g. make sense if 
TaskDialogBiggerButtons is <b>True</b>).
</p>
</descr>
<seealso/>
</element>
<element name="TaskDialogIndirect.Result">
<short/>
</element>
<element name="TaskDialogIndirect.AConfig">
<short/>
</element>
<element name="TaskDialogIndirect.Res">
<short/>
</element>
<element name="TaskDialogIndirect.ResRadio">
<short/>
</element>
<element name="TaskDialogIndirect.VerifyFlag">
<short/>
</element>

<element name="TCommonButton">
<short>
The standard common buttons handled by the Task Dialog.
</short>
<descr>
<p>
<var>TCommonButton</var> is an enumeration type with values that represent 
common or standard buttons which can be displayed on a Task Dialog. Values in 
TCommonButton are stored in the TCommonButtons set type, and used in the 
implementation of the TTaskDialog and TTaskDialogEx record types.
</p>
</descr>
<seealso>
<link id="TCommonButtons"/>
<link id="TTaskDialog.Execute"/>
<link id="TTaskDialogEx"/>
</seealso>
</element>
<element name="TCommonButton.cbOK">
<short>
Represents the <b>OK</b> button.
</short>
</element>
<element name="TCommonButton.cbYes">
<short>
Represents the <b>Yes</b> button.
</short>
</element>
<element name="TCommonButton.cbNo">
<short>
Represents the <b>No</b> button.
</short>
</element>
<element name="TCommonButton.cbCancel">
<short>
Represents the <b>Cancel</b> button.
</short>
</element>
<element name="TCommonButton.cbRetry">
<short>
Represents the <b>Retry</b> button.
</short>
</element>
<element name="TCommonButton.cbClose">
<short>
Represents the <b>Close</b> button.
</short>
</element>

<element name="TCommonButtons">
<short>
Set type used to store values from the TCommonButton enumeration.
</short>
<descr>
<p>
<var>TCommonButtons</var> is a set type used to store zero or more values 
from the <var>TCommonButton</var> enumeration. It represents the common or 
standard buttons which are enabled on a Task Dialog. TCommonButtons and 
TCommonButton are used in the implementation of the TTaskDialog and 
TTaskDialogEx record types. It is passed as an argument to the Execute method 
in TTaskDialog, and used to configure the buttons displayed on the task 
dialog form.
</p>
</descr>
<seealso>
<link id="TCommonButton"/>
<link id="TTaskDialog.Execute"/>
<link id="TTaskDialogEx"/>
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TTaskDialogIcon">
<short/>
<descr>
The available main icons for the Task Dialog.
</descr>
<seealso/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogIcon.tiBlank">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogIcon.tiWarning">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogIcon.tiQuestion">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogIcon.tiError">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogIcon.tiInformation">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogIcon.tiNotUsed">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogIcon.tiShield">
<short/>
</element>

<!-- enumeration type Visibility: default -->
<element name="TTaskDialogFooterIcon">
<short/>
<descr>
The available footer icons for the Task Dialog.
</descr>
<seealso/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFooterIcon.tfiBlank">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFooterIcon.tfiWarning">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFooterIcon.tfiQuestion">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFooterIcon.tfiError">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFooterIcon.tfiInformation">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFooterIcon.tfiShield">
<short/>
</element>

<element name="TTaskDialogFlag">
<short>
Contains flags used to control the display and behavior of a task dialog.
</short>
<descr>
<p>
The available configuration flags for the Task Dialog. Most are standard 
TDF_* flags used for the Windows Vista/Seven native API (see 
<url href="http://msdn.microsoft.com/en-us/library/bb787473(v=vs.85).aspx">
http://msdn.microsoft.com/en-us/library/bb787473(v=vs.85).aspx</url> for TASKDIALOG_FLAGS).
</p>
<p>
tdfQuery and tdfQueryMasked are custom flags, implemented in pure Delphi code 
to handle input query.
</p>
<p>
Our emulation code will handle only tdfUseCommandLinks, 
tdfUseCommandLinksNoIcon, and tdfQuery options.
</p>
</descr>
<seealso/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfEnableHyperLinks">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfUseHIconMain">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfUseHIconFooter">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfAllowDialogCancellation">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfUseCommandLinks">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfUseCommandLinksNoIcon">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfExpandFooterArea">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfExpandByDefault">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfVerificationFlagChecked">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfShowProgressBar">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfShowMarqueeProgressBar">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfCallbackTimer">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfPositionRelativeToWindow">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfRtlLayout">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfNoDefaultRadioButton">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfCanBeMinimized">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfQuery">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfQueryMasked">
<short/>
</element>
<!-- enumeration value Visibility: default -->
<element name="TTaskDialogFlag.tdfQueryFieldFocused">
<short/>
</element>

<!-- set type Visibility: default -->
<element name="TTaskDialogFlags">
<short>
Set type used to store values from the TTaskDialogFlag enumeration.
</short>
<descr>
<p>
Set of available configuration flags for the Task Dialog.
</p>
</descr>
<seealso/>
</element>

<!-- pointer type Visibility: default -->
<element name="PTaskDialog">
<short>
Pointer to the TTaskDialog record type.
</short>
<descr/>
<seealso/>
</element>

<!-- procedure type Visibility: default -->
<element name="TTaskDialogButtonClickedEvent">
<short/>
<descr>
<p>
This callback will be triggered when a task dialog button is clicked. To 
prevent the task dialog from closing, the application must set ACanClose to 
<b>False</b>. Otherwise, the task dialog is closed and the button ID is 
returned via the original TTaskDialog.Execute() result.
</p>
</descr>
<seealso/>
</element>

<!-- argument Visibility: default -->
<element name="TTaskDialogButtonClickedEvent.Sender">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TTaskDialogButtonClickedEvent.AButtonID">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TTaskDialogButtonClickedEvent.ACanClose">
<short/>
</element>

<!-- enumeration type Visibility: default -->
<element name="TTaskDialogElement">
<short/>
<descr>
<p>
The visual components of this Task Dialog. Maps low-level 
TDE_CONTENT...TDE_MAIN_INSTRUCTION constants, the query editor and checkbox. 
tdeEdit is for the query editor. tdeVerif is for the checkbox.
</p>
</descr>
<seealso/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogElement.tdeContent">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogElement.tdeExpandedInfo">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogElement.tdeFooter">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogElement.tdeMainInstruction">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogElement.tdeEdit">
<short/>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTaskDialogElement.tdeVerif">
<short/>
</element>

<!-- class Visibility: default -->
<element name="TEmulatedTaskDialog">
<short/>
<descr>
The actual form class used for emulation.
</descr>
<seealso/>
</element>

<!-- procedure Visibility: protected -->
<element name="TEmulatedTaskDialog.HandleEmulatedButtonClicked">
<short/>
<descr/>
<seealso/>
</element>

<!-- argument Visibility: default -->
<element name="TEmulatedTaskDialog.HandleEmulatedButtonClicked.Sender">
<short/>
</element>

<!-- procedure Visibility: public -->
<element name="TEmulatedTaskDialog.KeyDown">
<short/>
<descr/>
<seealso/>
</element>

<!-- argument Visibility: default -->
<element name="TEmulatedTaskDialog.KeyDown.Key">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TEmulatedTaskDialog.KeyDown.Shift">
<short/>
</element>

<!-- constructor Visibility: public -->
<element name="TEmulatedTaskDialog.CreateNew">
<short/>
<descr/>
<seealso/>
</element>

<!-- argument Visibility: default -->
<element name="TEmulatedTaskDialog.CreateNew.AOwner">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TEmulatedTaskDialog.CreateNew.Num">
<short/>
</element>

<!-- variable Visibility: public -->
<element name="TEmulatedTaskDialog.Owner">
<short/>
<descr>
The Task Dialog structure which created the form.
</descr>
<seealso/>
</element>

<!-- variable Visibility: public -->
<element name="TEmulatedTaskDialog.Element">
<short/>
<descr>
The labels corresponding to the Task Dialog main elements.
</descr>
<seealso/>
</element>

<!-- variable Visibility: public -->
<element name="TEmulatedTaskDialog.Combo">
<short/>
<descr>
The Task Dialog selection list.
</descr>
<seealso/>
</element>

<!-- variable Visibility: public -->
<element name="TEmulatedTaskDialog.Edit">
<short/>
<descr>
The Task Dialog optional query editor.
</descr>
<seealso/>
</element>

<!-- variable Visibility: public -->
<element name="TEmulatedTaskDialog.Verif">
<short/>
<descr>
The Task Dialog optional checkbox.
</descr>
<seealso/>
</element>

<!-- record type Visibility: default -->
<element name="TTaskDialogImplementation">
<short/>
<descr>
<p>
Structure for low-level access to the task dialog implementation. Points 
either to the HWND handle of the new TaskDialog API or to the emulation 
dialog.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogImplementation.OnButtonClicked">
<short/>
<descr/>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogImplementation.Emulated">
<short/>
<descr/>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogImplementation.Wnd">
<short/>
<descr/>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogImplementation.Form">
<short/>
<descr/>
<seealso/>
</element>

<!-- record type Visibility: default -->
<element name="TTaskDialog">
<short/>
<descr>
<p>
Implements a TaskDialog. Uses the new TaskDialog API under Vista/Seven, and 
emulate it with pure Pascal code and standard themed components under XP or 
2K. Creating a TTaskDialog object/record on the stack will initialize all of 
its string parameters to ''. Set the appropriate string parameters, then call 
Execute() with all additional parameters.
</p>
<p>
RadioRes/SelectionRes/VerifyChecked will be used to reflect the state after 
dialog execution.
</p>
<p>
Typical usage:
</p>
<code>
var Task: TTaskDialog;
begin
  Task.Inst := 'Saving application settings';
  Task.Content := 'This is the content';
  Task.Radios := 'Store settings in registry' +#10+ ' Store settings in XML file';
  Task.Verify := 'Do no ask for this setting next time';
  Task.VerifyChecked := true;
  Task.Footer := 'XML file is perhaps a better choice';
  Task.Execute([],0,[],tiQuestion,tfiInformation,200);
  ShowMessage(IntToStr(Task.RadioRes)); // 200=Registry, 201=XML
  if Task.VerifyChecked then
  ShowMessage(Task.Verify);
end;
</code>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Title">
<short>
The main title for the dialog window.
</short>
<descr>
If left void, the title of the application main form is used.
</descr>
<seealso/>
</element>

<element name="TTaskDialog.Inst">
<short/>
<descr>
<p>
The main instruction (first line displayed at the top of dialog). If not 
assigned (contains ''), the text is taken from resource strings for the 
message type defined in <file>LCLStrConsts</file>.
</p>
</descr>
<seealso>
<link id="#lcl.lclstrconsts.rsMtWarning">rsMtWarning</link>
<link id="#lcl.lclstrconsts.rsMtError">rsMtError</link>
<link id="#lcl.lclstrconsts.rsMtInformation">rsMtInformation</link>
<link id="#lcl.lclstrconsts.rsMtConfirmation">rsMtConfirmation</link>
<link id="#lcl.lclstrconsts.rsMtAuthentication">rsMtAuthentication</link>
<link id="#lcl.lclstrconsts.rsMtCustom">rsMtCustom</link>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Content">
<short>
The text displayed as the primary content for the dialog.
</short>
<descr>
<p>
The value is used in the Execute method to add a label displayed in the 
dialog.
</p>
<remark>
In previous LCL versions, '\n' characters sequences were converted to 
LineEnding characters. This action is no longer performed as of revision 
64975.
</remark>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Buttons">
<short>
Delimited list of captions for the custom buttons displayed on the dialog.
</short>
<descr>
<p>
A #13#10 or #10 separated list of custom buttons. They will be identified 
with an ID number starting at 100. By default, the buttons will be created at 
the dialog bottom, just like the common buttons. If tdfUseCommandLinks flag 
is set, the custom buttons will be created as big button in the middle of the 
dialog window; in this case, any '\n' will be converted as note text (shown 
with smaller text under native Vista/Seven TaskDialog, or as popup hint 
within Delphi emulation).
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Radios">
<short>
Delimited list of captions for radio buttons on the dialog.
</short>
<descr>
<p>
A <b>#13#10</b> or <b>#10</b> delimited list of custom radio buttons. They 
will be identified with an ID number starting at 200. aRadioDef parameter can 
be set to define the default selected value. '\n' will be converted as note 
text (shown with smaller text under native Vista/Seven TaskDialog, or as 
popup hint within Delphi emulation).
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Info">
<short/>
<descr>
<p>
The expanded information content text. The Delphi emulation will always show 
the Info content (there is no collapse/expand button).
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.InfoExpanded">
<short/>
<descr>
<p>
The button caption to be displayed when the information is expanded. Not used 
under XP: the Delphi emulation will always show the Info content.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.InfoCollapse">
<short/>
<descr>
<p>
The button caption to be displayed when the information is collapsed. Not 
used under XP. The Delphi emulation will always show the Info content.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Footer">
<short>
The text content displayed in the footer area for the dialog.
</short>
<descr/>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Verify">
<short/>
<descr>
<p>
The text for the bottom-most optional checkbox.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Selection">
<short>
A delimited list of items which can be selected in the dialog.
</short>
<descr>
<p>
A #13#10 or #10 separated list of items to be selected. If set, a Combo Box 
will be displayed to select. If tdfQuery is in the flags, the combo box will 
be in addition mode and the user will be able to edit the Query text or fill 
the field with one item of the selection. This selection is not handled via 
the Vista/Seven TaskDialog, but with our Delphi emulation code (via a 
TComboBox).
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Query">
<short/>
<descr>
<p>
Text to be edited. If tdfQuery is in the flags, will contain the default 
query text.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.RadioRes">
<short/>
<descr>
<p>
The selected radio item; the first is numbered 0.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.SelectionRes">
<short/>
<descr>
<p>
After execution, contains the selected item from the Selection list.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.VerifyChecked">
<short/>
<descr>
<p>
Reflect the bottom-most optional checkbox state. If Verify is not '', should 
be set before execution. After execution, will contain the final checkbox 
state.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialog.Dialog">
<short/>
<descr>
<p>
Low-level access to the task dialog implementation.
</p>
</descr>
<seealso/>
</element>

<!-- function Visibility: default -->
<element name="TTaskDialog.Execute">
<short>
Launches the TaskDialog form.
</short>
<descr>
<p>
Some common buttons can be set via aCommonButtons. In emulation mode, aFlags 
will handle only tdfUseCommandLinks, tdfUseCommandLinksNoIcon, and tdfQuery 
options.
</p>
<p>
Will return 0 on error, or the Button ID (e.g. mrOk for the OK button or 100 
for the first custom button defined in Buttons string).
</p>
<p>
If Buttons was defined, aButtonDef can set the selected Button ID. If Radios 
was defined, aRadioDef can set the selected Radio ID.
</p>
<p>
aDialogIcon and aFooterIcon are used to specify the icons on the dialog form.
</p>
<p>
aWidth can be used to force a custom form width (in pixels).
</p>
<p>
aParent can be set to any HWND - by default, Application.DialogHandle.
</p>
<p>
If aNonNative is <b>True</b>, the Delphi emulation code will always be used. 
aEmulateClassicStyle can be set to enforce conformity with the non-themed 
user interface - see 
<url href="http://synopse.info/forum/viewtopic.php?pid=2867#p2867">
http://synopse.info/forum/viewtopic.php?pid=2867#p2867
</url>.
</p>
<p>
aOnButtonClicked can be set to a callback executed when a button is clicked.
</p>
</descr>
<seealso/>
</element>
<element name="TTaskDialog.Execute.Result">
<short>
Modal result value returned from the dialog.
</short>
</element>
<element name="TTaskDialog.Execute.aCommonButtons">
<short>
Set of common or standard buttons enabled on the task dialog form.
</short>
</element>
<element name="TTaskDialog.Execute.aButtonDef">
<short>
Indicates the button which the default for the task dialog form.
</short>
</element>
<element name="TTaskDialog.Execute.aFlags">
<short>
Set of flags used to configure the task dialog and specify its behavior.
</short>
</element>
<element name="TTaskDialog.Execute.aDialogIcon">
<short>
Specifies the main icon displayed on the task dialog.
</short>
</element>
<element name="TTaskDialog.Execute.aFooterIcon">
<short>
Specifies the icon displayed in the footer area for the task dialog.
</short>
</element>
<element name="TTaskDialog.Execute.aRadioDef">
<short>
Ordinal position for the default radio button selected on the task dialog.
</short>
</element>
<element name="TTaskDialog.Execute.aWidth">
<short>
Specifies the display width for the task dialog form.
</short>
</element>
<element name="TTaskDialog.Execute.aParent">
<short>
Window handle for the parent window of the task dialog. 0 causes the active 
form on the current monitor to be used.
</short>
</element>
<element name="TTaskDialog.Execute.aNonNative">
<short>
<b>True</b> causes Delphi emulation code to be used during execution of the 
task dialog.
</short>
</element>
<element name="TTaskDialog.Execute.aEmulateClassicStyle">
<short>
True enforces conformity with a non-themed user interface.
</short>
</element>
<element name="TTaskDialog.Execute.aOnButtonClicked">
<short>
Contains the callback executed when a button is clicked.
</short>
</element>

<!-- procedure Visibility: default -->
<element name="TTaskDialog.SetElementText">
<short/>
<descr>
<p>
Allow a OnButtonClicked callback to change the Task Dialog main elements. 
Note that tdeVerif could be modified only in emulation mode, since the API 
does not give any run-time access to the checkbox caption. Other elements 
will work in both emulated and native modes.
</p>
</descr>
<seealso/>
</element>

<!-- argument Visibility: default -->
<element name="TTaskDialog.SetElementText.element">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TTaskDialog.SetElementText.Text">
<short/>
</element>

<!-- record type Visibility: default -->
<element name="TTaskDialogEx">
<short/>
<descr>
<p>
A wrapper around the TTaskDialog.Execute method. Used to provide a "flat" 
access to task dialog parameters.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.Base">
<short/>
<descr>
<p>
The associated main TTaskDialog instance.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.CommonButtons">
<short/>
<descr>
<p>
Some common buttons to be displayed.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.ButtonDef">
<short/>
<descr>
The default button ID.
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.Flags">
<short/>
<descr>
<p>
The associated configuration flags for this Task Dialog. In emulation mode, 
aFlags will handle only tdfUseCommandLinks, tdfUseCommandLinksNoIcon, and 
tdfQuery options.
</p>
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.DialogIcon">
<short/>
<descr>
Used to specify the dialog icon.
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.FooterIcon">
<short/>
<descr>
Used to specify the footer icon.
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.RadioDef">
<short/>
<descr>
The default radio button ID.
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.Width">
<short/>
<descr>
Can be used to force a custom form width (in pixels).
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.NonNative">
<short/>
<descr>
If <b>True</b>, the Delphi emulation code will always be used.
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.EmulateClassicStyle">
<short/>
<descr>
Can be used to enforce conformity with the non-themed user interface.
</descr>
<seealso/>
</element>

<!-- variable Visibility: default -->
<element name="TTaskDialogEx.OnButtonClicked">
<short/>
<descr>
This event handler will be fired on a button dialog click.
</descr>
<seealso/>
</element>

<!-- procedure Visibility: default -->
<element name="TTaskDialogEx.Init">
<short>
Will initialize the dialog parameters.
</short>
<descr>
<p>
Can be used to display some information with less parameters. For example:
</p>
<code>
var TaskEx: TTaskDialogEx;
// ...
TaskEx.Init;
TaskEx.Base.Title := 'Task Dialog Test';
TaskEx.Base.Inst := 'Callback Test';
TaskEx.Execute;
</code>
</descr>
<seealso/>
</element>

<!-- function Visibility: default -->
<element name="TTaskDialogEx.Execute">
<short/>
<descr>
<p>
Main (and unique) method used to show the dialog. It is a wrapper around the 
TTaskDialog.Execute method.
</p>
</descr>
<seealso/>
</element>

<!-- function result Visibility: default -->
<element name="TTaskDialogEx.Execute.Result">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TTaskDialogEx.Execute.aParent">
<short/>
</element>

<!-- function Visibility: default -->
<element name="UnAmp">
<short/>
<descr>
<p>
Return the text without '&amp;' (Ampersand) characters.
</p>
</descr>
<seealso/>
</element>

<!-- function result Visibility: default -->
<element name="UnAmp.Result">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="UnAmp.s">
<short/>
</element>

<!-- variable Visibility: default -->
<element name="DefaultTaskDialog">
<short/>
<descr>
<p>
A default Task Dialog wrapper instance. Can be used to display some 
information with fewer parameters, just like the TTaskDialogEx.Init method. 
For example:
</p>
<code>
var TaskEx: TTaskDialogEx;
// ...
TaskEx := DefaultTaskDialog;
TaskEx.Base.Title := 'Task Dialog Test';
TaskEx.Base.Inst := 'Callback Test';
TaskEx.Execute;
</code>
</descr>
<seealso/>
</element>

<!-- function type Visibility: default -->
<element name="TTaskDialogTranslate">
<short/>
<descr>
Function used to translate captions.
</descr>
<seealso/>
</element>

<!-- function result Visibility: default -->
<element name="TTaskDialogTranslate.Result">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TTaskDialogTranslate.aString">
<short/>
</element>

<!-- variable Visibility: default -->
<element name="TaskDialog_Translate">
<short/>
<descr/>
<seealso/>
</element>

<!-- function Visibility: default -->
<element name="DefaultFont">
<short/>
<descr>
<p>
Will map a default font, according to the available fonts. If Calibri is 
installed, it will be used by default. Falls back to Tahoma otherwise.
</p>
</descr>
<seealso/>
</element>
<element name="DefaultFont.Result">
<short/>
</element>

</module>
<!-- LCLTaskDialog -->
</package>
</fpdoc-descriptions>
