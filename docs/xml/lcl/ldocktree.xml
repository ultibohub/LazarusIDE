<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
    ====================================================================
      LDockTree
    ====================================================================
    -->
    <module name="LDockTree">
      <short>This unit defines TLazDockTree, the default TDockTree used in the LCL.</short>
      <descr>
          <p>
            <file>ldocktree.pas</file> contains <var>TLazDockTree</var>, the default TDockTree used in the LCL.
          </p>
          <p>
            This file is part of the Lazarus Component Library (LCL).
          </p>
      </descr>
      <descr/>

      <!-- unresolved type reference Visibility: default -->
      <element name="Math"/>
      <element name="Types"/>
      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="TypInfo"/>
      <element name="LazLoggerBase"/>
      <element name="LCLProc"/>
      <element name="LCLType"/>
      <element name="LCLIntf"/>
      <element name="LCLStrConsts"/>
      <element name="Graphics"/>
      <element name="Controls"/>
      <element name="ExtCtrls"/>
      <element name="Forms"/>
      <element name="Menus"/>
      <element name="Themes"/>
      <element name="ComCtrls"/>
      <element name="LMessages"/>
      <element name="LResources"/>

      <!-- object Visibility: default -->
      <element name="TLazDockZone">
        <short>
          <var>TLazDockZone</var> - a zone for docking in a Lazarus form.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <!-- variable Visibility: private -->
      <element name="TLazDockZone.FPage"/>
      <element name="TLazDockZone.FPages"/>
      <element name="TLazDockZone.FSplitter"/>

      <!-- destructor Visibility: public -->
      <element name="TLazDockZone.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for <var>TLazDockZone</var>, It calls FreeSubComponents to free resources allocated to Page, Pages, and Splitter. It calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TLazDockZone.FreeSubComponents"/>
          <link id="TLazDockZone.Page"/>
          <link id="TLazDockZone.Pages"/>
          <link id="TLazDockZone.Splitter"/>
        </seealso>
      </element>

      <element name="TLazDockZone.FreeSubComponents">
        <short>
          <var>FreeSubComponents</var> - frees and nils the local splitter and page/pages components, ready for destroying the control.
        </short>
      </element>

      <!-- function Visibility: public -->
      <element name="TLazDockZone.GetCaption">
        <short>
          <var>GetCaption</var> - if there is a child control, returns the caption for that control; else returns the Index of the control as a string value.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockZone.GetCaption.Result">
        <short/>
      </element>

      <!-- function Visibility: public -->
      <element name="TLazDockZone.GetParentControl">
        <short>
          <var>GetParentControl</var> - returns the identity of the Parent control if there is one; otherwise returns the Root zone if this is, in fact, the Root, or the Child control.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockZone.GetParentControl.Result">
        <short/>
      </element>

      <!-- property Visibility: public -->
      <element name="TLazDockZone.Splitter">
        <short>The <var>Splitter</var> to be use to control the docking of this Zone.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TLazDockZone.Pages">
        <short>The <var>Pages</var> (as in a Notebook) included in the dock zone.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TLazDockZone.Page">
        <short>A <var>Page</var> in the Notebook included in the Dock Zone.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDockHeaderMouseState">
        <short>
          Record type used to track mouse position and button state in a dock header.
        </short>
        <descr>
          <p>
            Used in the implementation of TLazDockTree and TLazDockForm.
          </p>
        </descr>
        <seealso>
          <link id="TLazDockTree"/>
          <link id="TLazDockForm"/>
        </seealso>
      </element>
      <element name="TDockHeaderMouseState.Rect">
        <short/>
      </element>
      <element name="TDockHeaderMouseState.IsMouseDown">
        <short/>
      </element>

      <element name="TDockHeaderImageKind">
        <short>
          Enumerated type with values representing the images used in a dock header.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TDockHeaderImageKind.dhiRestore">
        <short>Image for the restore button in a dock header.</short>
      </element>
      <element name="TDockHeaderImageKind.dhiClose">
        <short>Image for the close button in a dock header.</short>
      </element>

      <element name="TDockHeaderImages">
        <short>Array type used to store bitmap images used in a dock header.</short>
        <descr>
          <p>
            Elements in TDockHeaderImages can be accessed using the enumeration values in TDockHeaderImageKind. Used in the implementation of TLazDockTree and TLazDockForm.
          </p>
        </descr>
        <seealso>
          <link id="TDockHeaderImageKind"/>
          <link id="TLazDockTree"/>
          <link id="TLazDockForm"/>
        </seealso>
      </element>

      <!-- object Visibility: default -->
      <element name="TLazDockTree">
        <short>
          <var>TLazDockTree</var> - a tree of <var>TLazDockZones</var> found in a docked window.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <!-- variable Visibility: private -->
      <element name="TLazDockTree.FAutoFreeDockSite"/>
      <element name="TLazDockTree.FMouseState"/>
      <element name="TLazDockTree.FDockHeaderImages"/>

      <element name="TLazDockTree.AnchorDockLayout">
        <short>
          <var>AnchorDockLayout</var> - sets up anchors between all docked controls and helper controls.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockTree.AnchorDockLayout.Zone">
        <short/>
      </element>

      <element name="TLazDockTree.CreateDockLayoutHelperControls">
        <short>
          <var>CreateDockLayoutHelperControls</var> - creates any splitters and pages needed for the dock layout, including recursive creation for child controls.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockTree.CreateDockLayoutHelperControls.Zone">
        <short/>
      </element>

      <element name="TLazDockTree.ResetSizes">
        <short>
          <var>ResetSizes</var> - splits available size of Zone between children.
        </short>
      </element>

      <element name="TLazDockTree.BreakAnchors">
        <short>
          <var>BreakAnchors</var> - detach the anchors of all child controls.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockTree.BreakAnchors.Zone">
        <short/>
      </element>

      <element name="TLazDockTree.PaintDockFrame">
        <short>
          <var>PaintDockFrame</var> - finds the cursor position and paints the dock frame of the specified size on the nominated canvas.
        </short>
      </element>

      <element name="TLazDockTree.UndockControlForDocking">
        <short>
          <var>UndockControlForDocking</var> - frees anchors from parent and sibling controls.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TLazDockTree.UndockControlForDocking.AControl">
        <short/>
      </element>

      <element name="TLazDockTree.DefaultDockGrabberSize">
        <short>
          <var>DefaultDockGrabberSize</var> - returns the default size for the dock grabber.
        </short>
      </element>

      <element name="TLazDockTree.Create">
        <short>
          <var>Create</var> - constructor for <var>TLazDockTree</var>: creates a docking form if required, sets up a dock manager then calls inherited <var>Create</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockTree.Create.TheDockSite">
        <short/>
      </element>

      <element name="TLazDockTree.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TLazDockTree</var>: frees the dock site, annuls the Docksite manager, destroys any images then calls inherited <var>Destroy</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TLazDockTree.AdjustDockRect">
        <short>
          <var>AdjustDockRect</var> - offset one of the borders of control rect in order to get space for frame.
        </short>
      </element>

      <element name="TLazDockTree.InsertControl">
        <short>
          <var>InsertControl</var> - undocks <var>AControl</var> and docks it into the tree.
        </short>
        <descr>
          <p>
            <var>InsertControl</var> - undocks AControl and docks it into the tree.
          </p>
          <p>
            It creates a new TDockZone for AControl and inserts it as a new leaf.
            It automatically changes the tree, so that the parent of the new TDockZone
            will have the Orientation for InsertAt.
          </p>
          <p>
            <b>Example 1:</b>
          </p>
          <p>
            A newly created TLazDockTree has only a DockSite (TLazDockForm) and a single
            TDockZone - the RootZone, which has as ChildControl the DockSite.
          </p>
          <p>
            Visual:
          </p>
<code>
+-DockSite--+
|           |
+-----------+
</code>
    <p>
      Tree of TDockZone:
    </p>
<code>RootZone (DockSite,doNoOrient)</code>
    <p>
      Inserting the first control:
    </p>
<code>InsertControl(Form1,alLeft,nil);</code>
    <p>
      Visual:
    </p>
<code>
+-DockSite---+
|+--Form1---+|
||          ||
|+----------+|
+------------+
</code>
    <p>
      Tree of TDockZone:
    </p>
<code>
RootZone (DockSite,doHorizontal)
 +-Zone2 (Form1,doNoOrient)
</code>
    <p>
      Dock Form2 right of Form1:
    </p>
<code>InsertControl(Form2,alLeft,Form1);</code>
    <p>
      Visual:
    </p>
<code>
+-DockSite----------+
|+-Form1-+|+-Form2-+|
||        ||       ||
|+-------+|+-------+|
+-------------------+
</code>
    <p>
      Tree of TDockZone:
    </p>
<code>
RootZone (DockSite,doHorizontal)
  +-Zone2 (Form1,doNoOrient)
  +-Zone3 (Form2,doNoOrient)
</code>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TLazDockTree.InsertControl.AControl">
        <short/>
      </element>
      <element name="TLazDockTree.InsertControl.InsertAt">
        <short/>
      </element>
      <element name="TLazDockTree.InsertControl.DropControl">
        <short/>
      </element>

      <element name="TLazDockTree.RemoveControl">
        <short>
          <var>RemoveControl</var> - destroy child zone and all parents if they does not contain anything else, then removes the dock control.
        </short>
      </element>
      <element name="TLazDockTree.RemoveControl.AControl">
        <short/>
      </element>

      <element name="TLazDockTree.BuildDockLayout">
        <short>
          <var>BuildDockLayout</var> - breaks the current anchors, forms the appropriate helper controls then re-establishes the anchors.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockTree.BuildDockLayout.Zone">
        <short/>
      </element>

      <element name="TLazDockTree.FindBorderControls">
        <short>
          <var>FindBorderControls</var> - makes splitters for all bordering controls along the specified <var>Side</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockTree.FindBorderControls.Zone">
        <short/>
      </element>
      <element name="TLazDockTree.FindBorderControls.Side">
        <short/>
      </element>
      <element name="TLazDockTree.FindBorderControls.List">
        <short/>
      </element>

      <element name="TLazDockTree.FindBorderControl">
        <short>Gets the control with the specified dock zone and anchor side.</short>
        <descr>
          <p>
            Returns the DockSite if no controls are found using the specified zone and anchor side.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TLazDockTree.FindBorderControl.Result">
        <short/>
      </element>
      <element name="TLazDockTree.FindBorderControl.Zone">
        <short/>
      </element>
      <element name="TLazDockTree.FindBorderControl.Side">
        <short/>
      </element>

      <element name="TLazDockTree.GetAnchorControl">
        <short>
          <var>GetAnchorControl</var> - find a control to anchor the Zone's Side.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockTree.GetAnchorControl.Result">
        <short/>
      </element>
      <element name="TLazDockTree.GetAnchorControl.Zone">
        <short/>
      </element>
      <element name="TLazDockTree.GetAnchorControl.Side">
        <short/>
      </element>
      <element name="TLazDockTree.GetAnchorControl.OutSide">
        <short/>
      </element>

      <element name="TLazDockTree.PaintSite">
        <short>
          <var>PaintSite</var> - paint bounds for each control and close button (using the supplied handle).
        </short>
      </element>
      <element name="TLazDockTree.PaintSite.DC">
        <short/>
      </element>

      <element name="TLazDockTree.MessageHandler">
        <short>
          <var>MessageHandler</var> - checks the state of the mouse and takes the appropriate action. Checks whether redraw is needed because of mouse move or change in mouse button status, text needs to be added, etc.
        </short>
      </element>
      <element name="TLazDockTree.MessageHandler.Sender">
        <short/>
      </element>
      <element name="TLazDockTree.MessageHandler.Message">
        <short/>
      </element>

      <element name="TLazDockTree.DumpLayout">
        <short>
          <var>DumpLayout</var> - writes layout of Zone to a file, for debugging purposes etc.
        </short>
      </element>
      <element name="TLazDockTree.DumpLayout.FileName">
        <short/>
      </element>

      <element name="TLazDockTree.AutoFreeDockSite">
        <short>
          <var>AutoFreeDockSite</var> - determines whether the dock site is free.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TLazDockHeaderPart">
        <short>Enumerated type representing the parts in a dock header.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockHeaderPart.ldhpAll">
        <short>Total header rectangle.</short>
      </element>
      <element name="TLazDockHeaderPart.ldhpCaption">
        <short>Header caption.</short>
      </element>
      <element name="TLazDockHeaderPart.ldhpRestoreButton">
        <short>Header restore button.</short>
      </element>
      <element name="TLazDockHeaderPart.ldhpCloseButton">
        <short>Header close button.</short>
      </element>

      <!-- TODO: Outdated. TCustomAnchoredDockManager no longer exists. -->
      <element name="TLazDockForm">
        <short>
          <var>TLazDockForm</var> - the default DockSite for a TLazDockTree and for TCustomAnchoredDockManager.
        </short>
        <descr>
          <p>
            <var>TLazDockForm</var> - the default DockSite for a TLazDockTree and for TCustomAnchoredDockManager
          </p>
          <p>
            Note: There are two docking managers: TLazDockTree uses TLazDockZone to allow docking in rows and columns. TCustomAnchoredDockManager does not use TLazDockZone and allows arbitrary layouts.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>

      <element name="TLazDockForm.FMainControl"/>
      <element name="TLazDockForm.FMouseState"/>
      <element name="TLazDockForm.FDockHeaderImages"/>
      <element name="TLazDockForm.SetMainControl"/>
      <element name="TLazDockForm.SetMainControl.AValue"/>

      <element name="TLazDockForm.Notification">
        <short>
          <var>Notification</var> - if the required operation is removal, sets MainControl to nil, then calls inherited <var>Notification</var>.
        </short>
        <seealso>
          <link id="#lcl.forms.TCustomForm.Notification">TCustomForm.Notification</link>
        </seealso>
      </element>

      <element name="TLazDockForm.UpdateMainControl">
        <short>
          <var>UpdateMainControl</var> - sets MainControl to a new value.
        </short>
      </element>

      <element name="TLazDockForm.MouseUp">
        <short>
          <var>MouseUp</var> - calls inherited MouseUp then finds position and appropriate header.
        </short>
        <seealso>
          <link id="#LCL.Controls.TControl.MouseUp">TControl.MouseUp</link>
        </seealso>
      </element>

      <element name="TLazDockForm.MouseDown">
        <short>
          <var>MouseDown</var> - performs inherited MouseDown, then finds position and appropriate header.
        </short>
        <seealso>
          <link id="#LCL.Controls.TControl.MouseDown">TControl.MouseDown</link>
        </seealso>
      </element>

      <element name="TLazDockForm.MouseMove">
        <short>
          <var>MouseMove</var> - performs inherited MouseMove, then finds position and appropriate header.
        </short>
        <seealso>
          <link id="#LCL.Controls.TControl.MouseMove">TControl.MouseMove</link>
        </seealso>
      </element>

      <element name="TLazDockForm.MouseLeave">
        <short>
          <var>MouseLeave</var> - performs inherited MouseLeave, and sets the local store of position to indicate absence of the mouse.
        </short>
        <seealso>
          <link id="#LCL.Controls.TControl.MouseLeave">TControl.MouseLeave</link>
        </seealso>
      </element>

      <element name="TLazDockForm.PaintWindow">
        <short>
          <var>PaintWindow</var> - calls inherited PaintWindow, then creates new canvas and handle at cursor position, inserts header caption, title and images.
        </short>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.PaintWindow">TCustomControl.PaintWindow</link>
        </seealso>
      </element>
      <element name="TLazDockForm.PaintWindow.DC">
        <short/>
      </element>

      <element name="TLazDockForm.TrackMouse">
        <short>
          <var>TrackMouse</var> - finds position of the mouse, which part of the control it occupies (whether header or main part of control), and state of buttons.
        </short>
      </element>
      <element name="TLazDockForm.TrackMouse.X">
        <short/>
      </element>
      <element name="TLazDockForm.TrackMouse.Y">
        <short/>
      </element>

      <element name="TLazDockForm.Create">
        <short>
          <var>Create</var> - constructor for <var>TLazDocForm</var>: calls inherited Create, then fills in the header.
        </short>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.Create">TCustomForm.Create</link>
        </seealso>
      </element>
      <element name="TLazDockForm.Create.AOwner">
        <short>Owner of the object instance.</short>
      </element>

      <element name="TLazDockForm.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TLazDockForm</var>: removes header then calls inherited Destroy.
        </short>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.Destroy">TCustomForm.Destroy</link>
        </seealso>
      </element>

      <element name="TLazDockForm.CloseQuery">
        <short>
          <var>CloseQuery</var> - calls inherited method, then asks all top level forms if form can close.
        </short>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.CloseQuery">TCustomForm.CloseQuery</link>
        </seealso>
      </element>

      <element name="TLazDockForm.UpdateCaption">
        <short>
          <var>UpdateCaption</var> - brings caption up-to-date if there have been changes.</short>
      </element>

      <element name="TLazDockForm.UpdateMainControlInParents">
        <short>
          <var>UpdateMainControlInParents</var> - make sure all parents recognize the presence of MainControl.
        </short>
      </element>
      <element name="TLazDockForm.UpdateMainControlInParents.StartControl">
        <short/>
      </element>

      <element name="TLazDockForm.FindMainControlCandidate">
        <short>
          <var>FindMainControlCandidate</var> - finds forms and controls in the docktree hierarchy that could act as the MainControl.
        </short>
      </element>
      <element name="TLazDockForm.FindMainControlCandidate.Result">
        <short/>
      </element>

      <element name="TLazDockForm.FindHeader">
        <short>
          <var>FindHeader</var> - identifies the part of the dock form that is the header, and returns a TControl.
        </short>
      </element>
      <element name="TLazDockForm.FindHeader.Result">
        <short/>
      </element>
      <element name="TLazDockForm.FindHeader.x">
        <short/>
      </element>
      <element name="TLazDockForm.FindHeader.y">
        <short/>
      </element>
      <element name="TLazDockForm.FindHeader.Part">
        <short/>
      </element>

      <element name="TLazDockForm.InsertControl">
        <short>
          <var>InsertControl</var> - calls inherited method then updates the main control.
        </short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.InsertControl">TWinControl.InsertControl</link>
        </seealso>
      </element>
      <element name="TLazDockForm.InsertControl.AControl">
        <short/>
      </element>
      <element name="TLazDockForm.InsertControl.Index">
        <short/>
      </element>

      <element name="TLazDockForm.IsDockedControl">
        <short>
          <var>IsDockedControl</var> - checks if control is a child, not a TLazDockSplitter and properly anchor docked; returns <b>True</b> if OK.
        </short>
      </element>
      <element name="TLazDockForm.IsDockedControl.Result">
        <short/>
      </element>

      <element name="TLazDockForm.ControlHasTitle">
        <short>
          <var>ControlHasTitle</var> - returns <b>True</b> if nominated control is visible, is a docked control and has a border spacing greater than zero.
        </short>
      </element>
      <element name="TLazDockForm.ControlHasTitle.Result">
        <short/>
      </element>

      <element name="TLazDockForm.GetTitleRect">
        <short>
          <var>GetTitleRect</var> - returns the coordinates of the title rectangle for the nominated control.</short>
      </element>
      <element name="TLazDockForm.GetTitleRect.Result">
        <short/>
      </element>
      <element name="TLazDockForm.GetTitleRect.Control">
        <short/>
      </element>

      <element name="TLazDockForm.GetTitleOrientation">
        <short>
          <var>GetTitleOrientation</var> - returns the orientation (horizontal or vertical) of the title in the nominated control.
        </short>
      </element>
      <element name="TLazDockForm.GetTitleOrientation.Result">
        <short/>
      </element>
      <element name="TLazDockForm.GetTitleOrientation.Control">
        <short/>
      </element>

      <element name="TLazDockForm.MainControl">
        <short>
          The identity of the <var>MainControl</var> in the docked form (used for the default caption).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TLazDockPage">
        <short>
          <var>TLazDockPage</var> - an entity similar to a <var>TLazDockForm</var>, but forming a page in a notebook of <var>TLazDockPages</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <!-- variable Visibility: private -->
      <element name="TLazDockPage.FDockZone"/>
      <element name="TLazDockPage.GetPageControl"/>
      <element name="TLazDockPage.GetPageControl.Result"/>

      <!-- public -->
      <element name="TLazDockPage.InsertControl">
        <short>
          <var>InsertControl</var> - calls inherited method, then ensures that all parents recognize the <var>MainControl</var>.
        </short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.InsertControl">TWinControl.InsertControl</link>
        </seealso>
      </element>
      <element name="TLazDockPage.InsertControl.AControl">
        <short/>
      </element>
      <element name="TLazDockPage.InsertControl.Index">
        <short/>
      </element>

      <!-- property Visibility: public -->
      <element name="TLazDockPage.DockZone">
        <short>The <var>DockZone</var> in which this page is located.</short>
        <descr/>
        <seealso/>
      </element>

      <!-- property Visibility: public -->
      <element name="TLazDockPage.PageControl">
        <short>The <var>PageControl</var> or notebook in which this page is located (its parent).</short>
        <descr/>
        <seealso/>
      </element>

      <!-- object Visibility: default -->
      <element name="TLazDockPages">
        <short>
          <var>TLazDockPages</var> a notebook in which each page is a <var>TLazDockPage</var>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TLazDockPages.GetActiveNotebookPageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TLazDockPages.GetActiveNotebookPageComponent.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TLazDockPages.GetNoteBookPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TLazDockPages.GetNoteBookPage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLazDockPages.GetNoteBookPage.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TLazDockPages.SetActiveNotebookPageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLazDockPages.SetActiveNotebookPageComponent.AValue">
        <short/>
      </element>

      <element name="TLazDockPages.GetFloatingDockSiteClass">
        <short>
          <var>GetFloatingDockSiteClass</var> - returns a default class of <var>TLazDockForm</var>, overriding the inherited value.
        </short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetFloatingDockSiteClass">TControl.GetFloatingDockSiteClass</link>
        </seealso>
      </element>
      <element name="TLazDockPages.GetFloatingDockSiteClass.Result">
        <short/>
      </element>

      <element name="TLazDockPages.GetPageClass">
        <short>
          Gets the TLazDockPage class type used as the page class for the tabbed control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TLazDockPages.GetPageClass.Result">
        <short>TLazDockPage class type used for the page class.</short>
      </element>

      <element name="TLazDockPages.Change">
        <short>
          <var>Change</var> - calls inherited method, then ensures that all parents recognize MainControl.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.comctrls.TCustomTabControl.Change">TCustomTabControl.Change</link>
        </seealso>
      </element>

      <element name="TLazDockPages.Page">
        <short>
          <var>Page</var> - an individual <var>TLazDockPage</var> in the notebook, referred by its <var>Index</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLazDockPages.Page.Index">
        <short/>
      </element>

      <element name="TLazDockPages.ActivePageComponent" link="#lcl.comctrls.TCustomTabControl.ActivePageComponent"/>
      <element name="TLazDockPages.Pages" link="#lcl.comctrls.TCustomTabControl.Pages"/>

      <element name="TLazDockSplitter">
        <short>
          <var>TLazDockSplitter</var> - a splitter used with Lazarus docking components.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TLazDockSplitter.Create">
        <short>
          <var>Create</var> - constructor for <var>TLazDockSplitter</var>: calls inherited <var>Create</var> and initializes minimum size.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.extctrls.TCustomSplitter.Create">TCustomSplitter.Create</link>
        </seealso>
      </element>

      <element name="DockAlignOrientations">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TAnchorControlsRect">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="GetLazDockSplitter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="GetLazDockSplitter.Result">
        <short/>
      </element>
      <element name="GetLazDockSplitter.Control">
        <short/>
      </element>
      <element name="GetLazDockSplitter.Side">
        <short/>
      </element>
      <element name="GetLazDockSplitter.Splitter">
        <short/>
      </element>

      <element name="GetLazDockSplitterOrParent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="GetLazDockSplitterOrParent.Result">
        <short/>
      </element>
      <element name="GetLazDockSplitterOrParent.Control">
        <short/>
      </element>
      <element name="GetLazDockSplitterOrParent.Side">
        <short/>
      </element>
      <element name="GetLazDockSplitterOrParent.AnchorControl">
        <short/>
      </element>

      <element name="CountAnchoredControls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="CountAnchoredControls.Result">
        <short/>
      </element>
      <element name="CountAnchoredControls.Control">
        <short/>
      </element>
      <element name="CountAnchoredControls.Side">
        <short/>
      </element>

      <element name="NeighbourCanBeShrinked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="NeighbourCanBeShrinked.Result">
        <short/>
      </element>
      <element name="NeighbourCanBeShrinked.EnlargeControl">
        <short/>
      </element>
      <element name="NeighbourCanBeShrinked.Neighbour">
        <short/>
      </element>
      <element name="NeighbourCanBeShrinked.Side">
        <short/>
      </element>

      <element name="ControlIsAnchoredIndirectly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="ControlIsAnchoredIndirectly.Result">
        <short/>
      </element>
      <element name="ControlIsAnchoredIndirectly.StartControl">
        <short/>
      </element>
      <element name="ControlIsAnchoredIndirectly.Side">
        <short/>
      </element>
      <element name="ControlIsAnchoredIndirectly.DestControl">
        <short/>
      </element>

      <element name="GetAnchorControlsRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="GetAnchorControlsRect.Control">
        <short/>
      </element>
      <element name="GetAnchorControlsRect.ARect">
        <short/>
      </element>

      <element name="GetEnclosingControlRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="GetEnclosingControlRect.Result">
        <short/>
      </element>
      <element name="GetEnclosingControlRect.ControlList">
        <short/>
      </element>
      <element name="GetEnclosingControlRect.ARect">
        <short/>
      </element>

      <element name="GetEnclosedControls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="GetEnclosedControls.Result">
        <short/>
      </element>
      <element name="GetEnclosedControls.ARect">
        <short/>
      </element>

    </module>
    <!-- LDockTree -->
  </package>
</fpdoc-descriptions>
