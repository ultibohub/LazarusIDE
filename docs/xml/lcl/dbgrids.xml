<?xml version="1.0" encoding="UTF-8"?>
<!--

Documentation for LCL (Lazarus Component Library) and LazUtils (Lazarus 
Utilities) are published under the Creative Commons Attribution-ShareAlike 4.0 
International public license.

https://creativecommons.org/licenses/by-sa/4.0/legalcode.txt
file://../../cc-by-sa-4-0.txt

Copyright (c) 1997-2023, by the Lazarus Development Team.

-->
<fpdoc-descriptions>
<package name="lcl">
<!-- DBGrids  -->
<module name="DBGrids">
<short>
Implements a data-aware grid to display and operate on information in a 
database.
</short>
<descr>
<p>
<file>dbgrids.pas</file> contains classes and types needed to implement a 
database-aware grid control. The following components are added to the 
<b>Data Controls</b> tab in the Lazarus IDE Component Palette:
</p>
<ul>
<li>TDBGrid</li>
</ul>
<p>
The unit also includes the <var>TComponentDatalink</var> component, which is 
used as the data link for TCustomDBGrid. It was taken from an article by 
Joanna Carter: <b><i>"The Ultimate Datalink?"</i></b>, published in Delphi 
Magazine Issue #30 February 1998.
</p>
</descr>

<!-- used units -->
<element name="Classes"/>
<element name="SysUtils"/>
<element name="Math"/>
<element name="FileUtil"/>
<element name="DB"/>
<element name="LazUTF8"/>
<element name="LazLoggerBase"/>
<element name="LCLStrConsts"/>
<element name="LCLIntf"/>
<element name="LCLType"/>
<element name="LMessages"/>
<element name="LResources"/>
<element name="Controls"/>
<element name="StdCtrls"/>
<element name="Graphics"/>
<element name="Grids"/>
<element name="Dialogs"/>
<element name="Themes"/>
<element name="Variants"/>
<element name="Clipbrd"/>
<element name="ImgList"/>
<element name="Laz2_XMLCfg"/>

<element name="DEFINDICATORCOLWIDTH">
<short>
Default width for the row indicator column in a grid control.
</short>
<descr>
<p>
Used to set the width for the row indicator column (when enabled in the grid 
options). The value may be scaled for the display density (PPI) used for the 
Font in the grid control. Used when a TCustomDBGrid control updates it layout 
and appearance after a change to its Options property.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Options"/>
</seealso>
</element>

<element name="EInvalidGridOperation">
<short>
Exception raised for an invalid grid operation.
</short>
<descr>
<p>
<var>EInvalidGridOperation</var> is an Exception class raised when an invalid 
grid operations is performed.
</p>
</descr>
<seealso>
</seealso>
</element>

<element name="TDBGridOption">
<short>
Enumerated type containing options available for use in a database grid 
control.
</short>
<descr>
<p>
<var>TDBGridOption</var> is an enumerated type containing options available 
for a database grid control. Each enumeration value indicates if the 
associated feature or behavior is enabled in a database grid control.
</p>
<p>
Values from the enumeration are stored in the <var>TDBGridOptions</var> set 
type, and are used in the <var>TDBGrid.Options</var> property.
</p>
</descr>
<seealso>
<link id="#lcl.dbgrids.TDBGridOptions">TDBGridOptions</link>
<link id="#lcl.dbgrids.TDBGrid.Options">TDBGrid.Options</link>
</seealso>
</element>
<element name="TDBGridOption.dgEditing">
<short>
Indicates cells in the grid can be edited.
</short>
</element>
<element name="TDBGridOption.dgTitles">
<short>
Indicates titles are displayed in fixed row headers for columns on the grid.
</short>
</element>
<element name="TDBGridOption.dgIndicator">
<short>
Enables drawing a row indicator in the fixed header for the currently selected 
row on the grid.
</short>
</element>
<element name="TDBGridOption.dgColumnResize">
<short>
Indicates columns in the grid can be resized.
</short>
</element>
<element name="TDBGridOption.dgColumnMove">
<short>
Indicates the order of columns in the grid can be changed.
</short>
</element>
<element name="TDBGridOption.dgColLines">
<short>
Indicates vertical lines are drawn between columns in the grid.
</short>
</element>
<element name="TDBGridOption.dgRowLines">
<short>
Indicates horizontal lines are drawn between rows in the grid.
</short>
</element>
<element name="TDBGridOption.dgTabs">
<short>
Indicates the Tab key can be used to navigate between cells in the grid.
</short>
</element>
<element name="TDBGridOption.dgAlwaysShowEditor">
<short>
Indicates an edit control is always displayed for the current cell in the 
grid. When omitted, editing must be initiated by mouse click, or by pressing 
the <b>Enter</b> or <b>F2</b> keys.
</short>
</element>
<element name="TDBGridOption.dgRowSelect">
<short>
Indicates the entire row is highlighted when column(s) are selected.
</short>
</element>
<element name="TDBGridOption.dgAlwaysShowSelection">
<short>
Indicates the current selection is displayed even when the control loses 
focus.
</short>
</element>
<element name="TDBGridOption.dgConfirmDelete">
<short>
Indicates a confirmation dialog is displayed when deleting a record in the 
grid.
</short>
</element>
<element name="TDBGridOption.dgCancelOnExit">
<short>
Indicates an active editing operation is cancelled when the control loses 
focus.
</short>
</element>
<element name="TDBGridOption.dgMultiselect">
<short>
Allows more than one cell in a row, or more than one row to be selected on 
the grid.
</short>
</element>
<element name="TDBGridOption.dgHeaderHotTracking">
<short>
Indicates column headers are highlighted when the column has mouse focus 
(hovered).
</short>
</element>
<element name="TDBGridOption.dgHeaderPushedLook">
<short>
Indicates a column header can be drawn with a "button down" or pushed 
appearance when clicked.
</short>
</element>
<element name="TDBGridOption.dgPersistentMultiSelect">
<short>
Indicates multiple selections are retained (when enabled) when the control 
loses focus. When omitted, multi-selections are discarded when the exiting the 
control.
</short>
</element>
<element name="TDBGridOption.dgAutoSizeColumns">
<short>
Indicates columns are automatically resized to fit their content.
</short>
</element>
<element name="TDBGridOption.dgAnyButtonCanSelect">
<short>
Indicates that any mouse button can change the selection in the grid.
</short>
</element>
<element name="TDBGridOption.dgDisableDelete">
<short>
Indicates that deleting records with <b>Ctrl+Delete</b> is disabled.
</short>
</element>
<element name="TDBGridOption.dgDisableInsert">
<short>
Indicates whether inserting (and appending) records is disabled.
</short>
</element>
<element name="TDBGridOption.dgCellHints">
<short>
Indicates if displaying a hint for an individual cell is enabled.
</short>
</element>
<element name="TDBGridOption.dgTruncCellHints">
<short>
Indicates if cell hints are truncated when they are too long.
</short>
</element>
<element name="TDBGridOption.dgCellEllipsis">
<short>
Indicates if an Ellipsis character is added to the end of cells longer than 
the display area for the cell.
</short>
</element>
<element name="TDBGridOption.dgRowHighlight">
<short>
Indicates if the current row in the grid is highlighted instead of the 
current cell.
</short>
</element>
<element name="TDBGridOption.dgThumbTracking">
<short>
Indicates if the current selection is changed when the mouse thumb wheel is 
scrolled.
</short>
</element>
<element name="TDBGridOption.dgDblClickAutoSize">
<short>
Indicates if double clicking on borders or headers for a column causes it to 
be automatically resized to its contents.
</short>
</element>
<element name="TDBGridOption.dgDisplayMemoText">
<short>
Causes the content in a memo field to be displayed instead of the '(Memo)' 
string literal. Applies to fields using the ftMemo data type.
</short>
</element>

<element name="TDbGridOptions">
<short>
Stores values from the <var>TDbGridOption</var> enumeration.
</short>
<descr>
<var>TDbGridOptions</var> is a set type used to store values from the 
<var>TDbGridOption</var> enumeration. <var>TDbGridOptions</var> is the type 
used for the <var>Options</var> property in <var>TDBGrid</var>.
</descr>
<seealso>
<link id="TDBGridOption">TDBGridOption</link>
<link id="TDBGrid.Options">TDBGrid.Options</link>
</seealso>
</element>

<element name="TDbGridExtraOption">
<short>
Enumerated type that specifies extra options available in a database grid.
</short>
<descr>
<p>
<var>TDbGridExtraOption</var> is an enumerated type that specifies extra 
options available in a database grid. Values from TDbGridExtraOption are 
stored in the <var>TDbGridExtraOptions</var> set type, and used in the 
<var>OptionsExtra</var> property in <var>TDBGrid</var>.
</p>
</descr>
<seealso>
<link id="#lcl.dbgrids.TDBGrid.OptionsExtra">TDBGrid.OptionsExtra</link>
</seealso>
</element>
<element name="TDbGridExtraOption.dgeAutoColumns">
<short>
Indicates if Fields in the dataset are automatically added as columns in the 
database grid.
</short>
</element>
<element name="TDbGridExtraOption.dgeCheckboxColumn">
<short>
Indicates that check box controls are used to edit Boolean Fields in the grid 
dataset.
</short>
</element>

<element name="TDbGridExtraOptions">
<short>
<var>TDbGridExtraOptions</var> is a set of values from the 
<var>TDbGridExtraOption</var> enumeration.
</short>
<descr>
<p>
<var>TDbGridExtraOptions</var> is a set type used to store zero (<b>0</b>) or 
more values from the <var>TDbGridExtraOption</var> enumeration. 
TDbGridExtraOptions is the type used to implement the <var>OptionsExtra</var> 
property in <var>TCustomDBGrid</var> and descendent classes.
</p>
</descr>
<seealso>
<link id="TCustomDbGrid.OptionsExtra"/>
<link id="TDbGrid.OptionsExtra"/>
<link id="TDbGridExtraOption"/>
</seealso>
</element>

<element name="TDbGridStatusItem">
<short>
Enumerated type with values for status messages used in a database grid.
</short>
<descr>
<p>
<var>TDbGridStatusItem</var> is an enumerated type with values for status 
messages used in a database grid. Values from TDbGridStatusItem are stored in 
<var>TDbGridStatus</var>, and used in the <var>GridStatus</var> property in 
<var>TCustomDBGrid</var>.
</p>
</descr>
<seealso>
<link id="TDbGridStatus"/>
<link id="TCustomDBGrid.GridStatus"/>
</seealso>
</element>
<element name="TDbGridStatusItem.gsUpdatingData">
<short>
Indicates the grid is updating after a change to its data.
</short>
</element>
<element name="TDbGridStatusItem.gsAddingAutoColumns">
<short>
Indicates automatic columns are being added for the grid control.
</short>
</element>
<element name="TDbGridStatusItem.gsRemovingAutoColumns">
<short>
Indicates automatic columns are being removed from the grid control.
</short>
</element>
<element name="TDbGridStatusItem.gsAutoSized">
<short>
Indicates automatically sized columns are currently in use in the grid 
control.
</short>
</element>
<element name="TDbGridStatusItem.gsStartEditing">
<short>
Indicates the data link for a grid control is updating the value in its 
Editing property.
</short>
</element>
<element name="TDbGridStatusItem.gsLoadingGrid">
<short>
Indicates the grid control is loading its settings from a file or stream.
</short>
</element>

<element name="TDbGridStatus">
<short>
Set type used to store <var>TDbGridStatusItem</var> enumeration values.
</short>
<descr>
<p>
<var>TDbGridStatus</var> is a set type used to store 
<var>TDbGridStatusItem</var> enumeration values. Values added to 
TDbGridStatus indicate that a feature or behavior has been enabled in a 
TDBGrid control.
</p>
<p>
TDbGridStatus is used to implement the <var>GridStatus</var> property in 
<var>TCustomDBGrid</var> and descendent classes.
</p>
</descr>
<seealso>
<link id="TDbGridStatusItem"/>
<link id="TCustomDBGrid.GridStatus"/>
</seealso>
</element>

<element name="TDatasetScrolledEvent">
<short>
Specifies an event handler signalled after scrolling a dataset.
</short>
<descr>
<p>
<var>TDatasetScrolledEvent</var> specifies an event handler signalled after 
scrolling a dataset. TDatasetScrolledEvent can be used to perform actions 
required when the position in the DataSet has changed.
</p>
<p>
DataSet is the TDataset instance for the event notification.
</p>
<p>
Distance indicates both the number of rows and the direction for the event 
notification, for example:
</p>
<dl>
<dt><b>Value</b></dt>
<dd><b>Meaning</b></dd>
<dt><var>&lt;0</var></dt>
<dd>Scroll toward the beginning of the DataSet</dd>
<dt><var>0</var></dt>
<dd>Current row in the DataSet has been refreshed</dd>
<dt><var>&gt;0</var></dt>
<dd>Scroll toward the end of the DataSet </dd>
</dl>
<p>
TDatasetScrolledEvent is the type used for the OnDataSetScrolled property in 
TComponentDataLink.
</p>
<p>
See the TCustomDBGrid.OnDataSetScrolled procedure for an example 
implementation of TDatasetScrolledEvent.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TDatasetScrolledEvent.Dataset">
<short>Dataset for the event.</short>
</element>
<element name="TDatasetScrolledEvent.Distance">
<short>Number of rows and direction for the event.</short>
</element>

<element name="TFocusControlEvent">
<short>
Event handler signalled to coordinate Field selection and control focus.
</short>
<descr>
<p>
<var>TFocusControlEvent</var> specifies an event handler signalled to 
coordinate Field selection and control focus.
</p>
</descr>
<seealso>
<link id="TComponentDataLink.OnFocusControl"/>
</seealso>
</element>
<element name="TFocusControlEvent.aField">
<short>Field reference for the focus event.</short>
</element>

<element name="TDBGridClickEvent">
<short>
Specifies an event handler signalled when a grid column in is clicked.
</short>
<descr>
<p>
<var>TDBGridClickEvent</var> specifies an event handler signalled when a 
column in the database grid is clicked
</p>
</descr>
<seealso></seealso>
</element>
<element name="TDBGridClickEvent.Column">
<short>Column for the event.</short>
</element>

<element name="TMovedEvent">
<short>
Specifies an event handler signalled when the display order of rows or 
columns is changed.
</short>
<descr>
<p>
<var>TMovedEvent</var> specifies an event handler signalled when the display 
order of rows or columns is changed. TMovedEvent is the type used for the 
OnColumnMoved and OnRowMoved properties in TDBGrid.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.OnColumnMoved"/>
<link id="TCustomDBGrid.OnRowMoved"/>
</seealso>
</element>
<element name="TMovedEvent.Sender">
<short>Grid control for the event.</short>
</element>
<element name="TMovedEvent.FromIndex">
<short>Previous ordinal position for the event.</short>
</element>
<element name="TMovedEvent.ToIndex">
<short>New ordinal position for the event.</short>
</element>

<element name="TDrawColumnCellEvent">
<short>
Specifies an event handler for drawing a cell in a grid control.
</short>
<descr>
<p>
<var>TDrawColumnCellEvent</var> specifies an event handler used to draw a 
cell in a column for a grid control. TDrawColumnCellEvent is the type used 
for the OnDrawColumnCell property in TDBGrid, and signalled from its DrawCell 
method.
</p>
</descr>
<seealso>
<link id ="#lcl.DBGrids.TCustomDBGrid.OnDrawColumnCell"/>
<link id ="#lcl.DBGrids.TCustomDBGrid.DrawCell"/>
</seealso>
</element>
<element name="TDrawColumnCellEvent.Sender">
<short>Grid control for the event.</short>
</element>
<element name="TDrawColumnCellEvent.Rect">
<short>Canvas rectangle where the cell is drawn.</short>
</element>
<element name="TDrawColumnCellEvent.DataCol">
<short>Position of the Field used to get data for the event.</short>
</element>
<element name="TDrawColumnCellEvent.Column">
<short>Column definition for the event`</short>
</element>
<element name="TDrawColumnCellEvent.State">
<short>Drawing state for the event.</short>
</element>

<element name="TGetDbEditMaskEvent">
<short>
Specifies an event handler used to get the Edit Mask for a cell in a grid.
</short>
<descr>
<p>
<var>TGetDbEditMaskEvent</var> specifies an event handler used to get the 
Edit Mask for a cell in a database grid control. TGetDbEditMaskEvent can be 
used to provide an edit mask for the specified Field. TGetDbEditMaskEvent is 
the type used for the OnFieldEditMask property in TDBGrid.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.OnFieldEditMask">TCustomDBGrid.OnFieldEditMask</link>
</seealso>
</element>
<element name="TGetDbEditMaskEvent.Sender">
<short>Grid control for the event.</short>
</element>
<element name="TGetDbEditMaskEvent.Field">
<short>Field for the event.</short>
</element>
<element name="TGetDbEditMaskEvent.Value">
<short>Default value for the edit mask.</short>
</element>

<element name="TDbGridSelEditorEvent">
<short>
Specifies an event handler used to select a cell editor in a database grid.
</short>
<descr>
<p>
<var>TDbGridSelEditorEvent</var> specifies an event handler used to
select an editor for a cell in a database grid.
</p>
</descr>
<seealso>
<link id="#lcl.dbgrids.TDBGrid.OnSelectEditor">TDBGrid.OnSelectEditor</link>
<link id="#lcl.dbgrids.TCustomDBGrid.SelectEditor">TCustomDBGrid.SelectEditor</link>
</seealso>
</element>
<element name="TDbGridSelEditorEvent.Sender">
<short>Control signalling the event.</short>
</element>
<element name="TDbGridSelEditorEvent.Column">
<short>Column for the control.</short>
</element>
<element name="TDbGridSelEditorEvent.Editor">
<short>Editor for the specified column.</short>
</element>

<element name="TPrepareDbGridCanvasEvent">
<short>
Specifies an event handler which prepares the canvas for drawing a database 
grid.
</short>
<descr>
<p>
<var>TPrepareDbGridCanvasEvent</var> specifies an event handler used to 
prepare the canvas which draws the content in a database grid. 
TPrepareDbGridCanvasEvent allows an application to override or enhance the 
drawing behavior of cells in a database grid.
</p>
<p>
<var>TPrepareDbGridCanvasEvent</var> is used to implement the 
<var>OnPrepareCanvas</var> event handler in <var>TDBGrid</var>.
</p>
</descr>
<seealso>
<link id="#lcl.dbgrids.TDBGrid.OnPrepareCanvas">TDBGrid.OnPrepareCanvas</link>
</seealso>
</element>
<element name="TPrepareDbGridCanvasEvent.Sender">
<short>Control for the event notification.</short>
</element>
<element name="TPrepareDbGridCanvasEvent.DataCol">
<short>Ordinal position for the column.</short>
</element>
<element name="TPrepareDbGridCanvasEvent.Column">
<short>TColumn definition for the specified column number.</short>
</element>
<element name="TPrepareDbGridCanvasEvent.AState">
<short>Drawing state for the selection.</short>
</element>

<element name="TDbGridCheckBoxBitmapEvent">
<short>
Specifies an event handler signalled to get the user-specified Bitmap for a 
check box column in a grid control.
</short>
<descr>
<p>
<var>TDbGridCheckBoxBitmapEvent</var> is the type used implement the 
TCustomDBGrid.OnCheckboxBitmap property.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.OnUserCheckboxBitmap"/>
<link id="#lcl.grids.TCustomGrid.GetImageForCheckBox">TCustomGrid.GetImageForCheckBox</link>
</seealso>
</element>
<element name="TDbGridCheckBoxBitmapEvent.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TDbGridCheckBoxBitmapEvent.CheckedState">
<short>Checked state for the bitmap returned from the event handler.</short>
</element>
<element name="TDbGridCheckBoxBitmapEvent.ABitmap">
<short>Bitmap instance for the specified checked state.</short>
</element>

<element name="TDbGridCheckboxStateEvent">
<short>
Specifies an event handler signalled to get the user-specified state for a 
check box column on the grid control.
</short>
<descr>
<p>
<var>TDbGridCheckboxStateEvent</var> is the type used to implement the 
OnUserCheckboxState property in TCustomDBGrid.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.OnUserCheckboxState"/>
</seealso>
</element>
<element name="TDbGridCheckboxStateEvent.Sender">
<short>Object (grid control) for the event notification.</short>
</element>
<element name="TDbGridCheckboxStateEvent.Column">
<short>
TColumn definition for the data represented in the check box image.
</short>
</element>
<element name="TDbGridCheckboxStateEvent.AState">
<short>Checked state for the check box.</short>
</element>

<element name="TDbGridCellHintEvent">
<short>
Specifies an event handler signalled to get the hint text for a cell in a 
grid control.
</short>
<descr>
<p>
<var>TDbGridCellHintEvent</var> is the type used to implement the 
OnGetCellHint property in TCustomDBGrid.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.OnGetCellHint"/>
</seealso>
</element>
<element name="TDbGridCellHintEvent.Sender">
<short>Object (grid control) for the event notification.</short>
</element>
<element name="TDbGridCellHintEvent.Column">
<short>TColumn definition for the cell.</short>
</element>
<element name="TDbGridCellHintEvent.AText">
<short>Returns the cell hint text derived in the handler.</short>
</element>

<element name="TBookmarkedRecordEnumeratorOptions">
<short>
Enumeration with option values for the bookmarked record enumerator.
</short>
<descr>
<p>
<var>TBookmarkedRecordEnumeratorOptions</var> is a set type with option 
values that control the actions performed in 
<var>TBookmarkedRecordEnumerator</var>. TBookmarkedRecordEnumeratorOptions is 
the type used to implement the <var>TBookmarkedRecordEnumerator.Options</var> 
property.
</p>
</descr>
<seealso>
<link id="TBookmarkedRecordEnumerator">TBookmarkedRecordEnumerator</link>
</seealso>
</element>
<element name="TBookmarkedRecordEnumeratorOptions.breDisableDataset">
<short>Disables controls attached to the dataset.</short>
</element>
<element name="TBookmarkedRecordEnumeratorOptions.breStopOnInvalidBookmark">
<short>Stops enumerating when an invalid bookmark is encountered.</short>
</element>
<element name="TBookmarkedRecordEnumeratorOptions.breRestoreCurrent">
<short>Restores the current bookmark when exiting the enumerator.</short>
</element>

<element name="TBookmarkedRecordEnumerator">
<short>Defines a bookmarked record enumeration class.</short>
<descr>
<p>
<var>TBookmarkedRecordEnumerator</var> is a Class which defines a bookmarked 
record enumerator for use in <var>TBookmarklist</var>.
</p>
</descr>
<seealso>
<link id="#lcl.dbgrids.TBookmarkList">TBookmarkList</link>
</seealso>
</element>

<element name="TBookmarkedRecordEnumerator.fBookmarkList"/>
<element name="TBookmarkedRecordEnumerator.fBookmarkIndex"/>
<element name="TBookmarkedRecordEnumerator.fCurrent"/>
<element name="TBookmarkedRecordEnumerator.fBook"/>
<element name="TBookmarkedRecordEnumerator.fDataset"/>
<element name="TBookmarkedRecordEnumerator.fOptions"/>

<element name="TBookmarkedRecordEnumerator.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for the class instance. Create calls the 
inherited constructor, and stores the arguments to the method in its 
BookmarkList, Dataset, and Options properties.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkedRecordEnumerator.Create.bookList">
<short>Bookmark list for the enumerator.</short>
</element>
<element name="TBookmarkedRecordEnumerator.Create.aGrid">
<short>Grid control for the enumerator.</short>
</element>
<element name="TBookmarkedRecordEnumerator.Create.anOptions">
<short>Options for the enumerator.</short>
</element>

<element name="TBookmarkedRecordEnumerator.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the destructor for the class instance. Destroy uses 
values in the Options property to perform actions needed before the class 
instance is freed, including:
</p>
<ul>
<li>Restore the dataset to the position in Bookmark</li>
<li>Re-enable controls attached to the dataset if disabled</li>
</ul>
<p>
Destroy calls the inherited destructor before exit.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TBookmarkedRecordEnumerator.MoveNext">
<short>
Moves to the next bookmark in the list.
</short>
<descr>
<p>
<var>MoveNext</var> is a Boolean function used to move the enumerator to the 
next item in the bookmark list. Move next increments the value in 
BookmarkIndex, and examines the Options property to see if any actions are 
required, such as: setting the value of the Current Bookmark before 
navigation, or disabling controls attached to the dataset.
</p>
<p>
MoveNext updates the current bookmark and checks the dataset to see if the 
bookmark is still valid. The return value is <b>False</b> if the record for 
the bookmark no longer exists in the dataset and Options indicates the 
enumerator should halt for an invalid bookmark. <b>False</b> is also returned 
when the value in BookmarkIndex exceeds the number of items in the 
BookmarkList.
</p>
<p>
The return value is <b>True</b> when the action has been performed 
successfully.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkedRecordEnumerator.MoveNext.Result">
<short><b>True</b> when the action has been performed successfully.</short>
</element>

<element name="TBookmarkedRecordEnumerator.GetEnumerator">
<short>
Returns the current class instance (Self).
</short>
<descr>
<p>
<var>GetEnumerator</var> is a TBookmarkedRecordEnumerator function used to 
the current class instance (Self).
</p>
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkedRecordEnumerator.GetEnumerator.Result">
<short>The current class instance.</short>
</element>

<element name="TBookmarkedRecordEnumerator.Current">
<short>
Current bookmark for the enumerator.
</short>
<descr>
<p>
<var>Current</var> is a read-only <var>TBookmark</var> property which returns 
the current bookmark for the enumerator. The value in Current in updated when 
the MoveNext method is called.
</p>
</descr>
<seealso>
<link id="TBookmarkedRecordEnumerator.MoveNext"/>
<link id="#fcl.db.TBookmark">TBookmark</link>
</seealso>
</element>

<element name="TBookmarkedRecordEnumerator.Options">
<short>
Controls the actions performed when Bookmarks are visited.
</short>
<descr>
<p>
<var>Options</var> is a TBookmarkedRecordEnumeratorOptions property which 
controls the actions performed when Bookmarks in the enumerator are visited. 
Values are included in the set type to enable the corresponding feature in 
the enumerator.
</p>
<p>
See TBookmarkedRecordEnumeratorOptions for more information about option 
values and their meanings.
</p>
<p>
The initial values in the set are passed as parameters to the Create method. 
Values stored in Options are examined in methods including Destroy and 
MoveNext.
</p>
</descr>
<seealso>
</seealso>
</element>

<element name="TBookmarkList">
<short>
Implements a list of Bookmarks in a database grid.
</short>
<descr>
<p>
<var>TBookmarkList</var> is a class used to implement a list of Bookmarks in 
a database grid. TBookmarkList is the type used for the 
<var>SelectedRows</var> property in <var>TCustomDBGrid</var> and descendent 
classes.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.SelectedRows"/>
<link id="TDBGrid.SelectedRows"/>
</seealso>
</element>

<element name="TBookmarkList.FList"/>
<element name="TBookmarkList.FGrid"/>
<element name="TBookmarkList.fDataset"/>
<element name="TBookmarkList.fCanDoBinarySearch"/>

<element name="TBookmarkList.GetCount">
<short>
Gets the value for the Count property.
</short>
<descr>
<var>GetCount</var> is an Integer function used to get the value for the 
Count property. Use the Items property to access TBookmark instances stored 
in the list.
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkList.GetCount.Result">
<short>Number of bookmarks in the list.</short>
</element>

<element name="TBookmarkList.GetCurrentRowSelected">
<short>
Gets the value in the for the CurrentRowSelected property.
</short>
<descr>
<p>
<var>GetCurrentRowSelected</var> is a <var>Boolean</var> function used to get 
the value for the <var>CurrentRowSelected</var> property. 
GetCurrentRowSelected calls the CheckActive method to ensure that the Dataset 
for the list is properly configured. See CheckActive for more information.
</p>
<p>
The return value is <b>True</b> when a TBookmark instance for the current row 
already exists in the list.
</p>
</descr>
<seealso>
<link id="TBookmarkList.CurrentRowSelected"/>
</seealso>
</element>
<element name="TBookmarkList.GetCurrentRowSelected.Result">
<short>
<b>True</b> when a bookmark for the current row already exists in the list.
</short>
</element>

<element name="TBookmarkList.GetItem">
<short>
Gets the value for the bookmark stored at the specified position in the list.
</short>
<descr>
<p>
<var>GetItem</var> is a TBookmark function that implements the read access 
specifier for the Items property. GetItems returns the bookmark stored at the 
specified ordinal position in the list. AIndex is the ordinal position to 
retrieve in the range <var>0 .. Count - 1</var>. Use the Items property to 
access the bookmarks stored in the list.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkList.GetItem.Result">
<short>The bookmark at the specified position.</short>
</element>
<element name="TBookmarkList.GetItem.AIndex">
<short>Ordinal position in the list for the bookmark.</short>
</element>

<element name="TBookmarkList.SetCurrentRowSelected">
<short>
Sets the value in the CurrentRowSelected property.
</short>
<descr>
<p>
<var>SetCurrentRowSelected</var> is a procedure which provides write access 
for the CurrentRowSelected property. SetCurrentRowSelected gets a bookmark 
for the current row, and calls Find to determine if the bookmark already 
exists in the list. When AValue contains <b>False</b>, an existing bookmark 
is freed and removed from the bookmark list. A Bookmark not in the list is 
created and added when AValue is <b>True</b>.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkList.SetCurrentRowSelected.AValue">
<short>
<b>True</b> to select the current row. <b>False</b> to de-selected the 
current row.
</short>
</element>

<element name="TBookmarkList.CheckActive">
<short>
Ensures that the dataset for the bookmark list is properly configured and 
active.
</short>
<descr>
<p>
CheckActive is a procedure used to ensure that the bookmark list is active 
and properly configured. CheckActive examines the DataLink for the Grid to 
determine if it is active. An EInvalidGridOperation exception is raised if 
the dataset is not already active.
</p>
<p>
CheckActive compares the dataset in the bookmark list to the the dataset in 
the associated Grid control. If they are the same Dataset, no additional 
processing is performed in the method. Otherwise, the Dataset for the 
bookmark list is set to the Dataset from the associated Grid control.
</p>
<p>
CheckActive sets the value for the internal flag which indicates if a binary 
search can be used to locate bookmarks. Hint: Binary search is not used for 
TSQLQuery and TBufDataset descendants.
</p>
</descr>
<errors>
<dl>
<dt>EInvalidGridOperation</dt>
<dd>
Raised when the DataLink in the Grid control has an inactive Dataset; the 
exception message is 'Dataset Inactive'.
</dd>
</dl>
</errors>
<seealso></seealso>
</element>

<element name="TBookmarkList.Create">
<short>
<var>Create</var> is the constructor for TBookmarkList.
</short>
<descr>
<p>
<var>Create</var> is the constructor for the TBookmarkList class instance. 
Create calls the inherited constructor. Create stores the AGrid argument 
internally to keep an association to the grid for the Bookmarks. Finally, 
Create initializes the internal list used to store Bookmarks added to the 
class instance.
</p>
</descr>
<seealso>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TBookmarkList.Create.AGrid">
<short>Grid control that owns the bookmark list.</short>
</element>

<element name="TBookmarkList.Destroy">
<short>
<var>Destroy</var> is the destructor for <var>TBookmarkList</var>.
</short>
<descr>
<p>
<var>Destroy</var> is an overridden destructor for the 
<var>TBookmarkList</var> class instance. Destroy ensures that 
<var>TBookmark</var> items are removed from the list and freed before the 
list is freed. Destroy calls the inherited destructor.
</p>
</descr>
<seealso>
<link id="TBookmark" >TBookmark</link>
</seealso>
</element>

<element name="TBookmarkList.Clear">
<short>
<var>Clear</var> removes all Items in the bookmark list.
</short>
<descr>
<p>
<var>Clear</var> is a procedure used to remove all of the Items stored in the 
list. Clear calls the TDataset.FreeBookmark method for each of the TBookmark 
instances in Items. The length of the Bookmark is set to 0 to decrease the 
reference count for the memory allocation.
</p>
<p>
Clear uses the Invalidate method in the associated Grid control and causes it 
to be redrawn.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TBookmarkList.Delete">
<short>
Deletes rows in the Dataset represented by bookmarks in the list.
</short>
<descr>
<p>
<var>Delete</var> is a procedure used to delete rows in the Dataset 
represented by bookmarks in the list. Delete processes the Items in the list 
in reverse order. Each bookmark is located in the Dataset and the 
TDataset.Delete method is called to remove the data from the dataset. The 
Dataset.FreeBookmark method is called to free the Bookmark, and it is removed 
from the Items in the list.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TBookmarkList.Find">
<short>
<var>Find</var> locates the specified Bookmark and its position in the 
bookmark list.
</short>
<descr>
<p>
<var>Find</var> is a <var>Boolean</var> function used to locate the bookmark 
specified in <var>Item</var> in the Items for the bookmark list. No actions 
are performed in the method, and the return value is <b>False</b>, when a 
<var>TBookmark</var> instance has not been assigned to Item.
</p>
<p>
For datasets where the bookmark contains an index value, a binary search is 
used to locate the bookmark in Items. For other datasets, like TSQLQuery and 
TBufDataset, each bookmark in Items is visited to compare the values.
</p>
<p>
Find calls the <var>TDataset.CompareBookmarks</var> method to compare the 
value in Item to the bookmarks in Items. <var>AIndex</var> is set to the 
position in Items where the bookmark was located. The return value is 
<b>True</b> when the specified bookmark is located in the bookmark list.
</p>
</descr>
<seealso>
<link id="TBookmarkList.Items"/>
<link id="TBookmark"/>
<link id="#fcl.db.TDataset.CompareBookmarks">TDataset.CompareBookmarks</link>
</seealso>
</element>
<element name="TBookmarkList.Find.Result">
<short><b>True</b> when the bookmark is located in the list.</short>
</element>
<element name="TBookmarkList.Find.Item">
<short>Bookmark to locate.</short>
</element>
<element name="TBookmarkList.Find.AIndex">
<short>Position in the list for the bookmark.</short>
</element>

<element name="TBookmarkList.IndexOf">
<short>
<var>IndexOf</var> returns the ordinal position for the specified Bookmark in 
the list.
</short>
<descr>
<p>
<var>IndexOf</var> is an Integer function used to get the ordinal position in 
the list for the specified Bookmark. The return value contains the position 
in the list where the TBookmark instance was located. IndexOf calls Find to 
locate the bookmark and to capture the return value for the method. The 
return value is in the range <var>0..Count-1</var> when the bookmark exists 
in the list or <var>-1</var> when the bookmark is not found.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkList.IndexOf.Result">
<short>Position in the list for the bookmark.</short>
</element>
<element name="TBookmarkList.IndexOf.Item">
<short>Bookmark to find in the list.</short>
</element>

<element name="TBookmarkList.Refresh">
<short>
Searches for and removes invalid Bookmarks in the list.
</short>
<descr>
<p>
<var>Refresh</var> searches for and removes invalid Bookmarks in the list. 
The return value is <b>True</b> if an invalid TBookmark instance was found 
and removed in the method; it also indicates that the Invalidate method in 
the associated Grid control was called prior to exiting from the method.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TBookmarkList.Refresh.Result">
<short>
<b>True</b> when the bookmark list was updated and the grid was refreshed.
</short>
</element>

<element name="TBookmarkList.GetEnumerator">
<short>
Gets an enumerator for the bookmark list.
</short>
<descr>
<p>
<var>GetEnumerator</var> is a TBookmarkedRecordEnumerator function used to 
get an enumerator for bookmarked records in the list. GetEnumerator creates 
an instance of TBookmarkedRecordEnumerator with the specified arguments, and 
uses the instance as the return value for the method.
</p>
</descr>
<seeslo>
<link id="TBookmarkedRecordEnumerator">TBookmarkedRecordEnumerator</link>
</seeslo>
</element>
<element name="TBookmarkList.GetEnumerator.Result">
<short>The bookmark list enumerator.</short>
</element>
<element name="TBookmarkList.GetEnumerator.opt">
<short>Options to use in the bookmark list enumerator.</short>
</element>

<element name="TBookmarkList.Count">
<short>
Indicates the number of Bookmarks in the list.
</short>
<descr>
<p>
<var>Count</var> is a read-only Integer property that indicates the number of 
Bookmarks stored in the list. GetCount is the read access specifier for the 
property value.
</p>
</descr>
<seealso/>
</element>

<element name="TBookmarkList.CurrentRowSelected">
<short>
Indicates if the current row in the Dataset is selected.
</short>
<descr>
<p>
<var>CurrentRowSelected</var> is a Boolean property which indicates if the 
current row in the Dataset is selected.
</p>
<p>
GetCurrentRowSelected is the read access specifier for the property value. 
GetCurrentRowSelected checks to see if the Bookmark for the current row 
exists in BookmarkList.
</p>
<p>
SetCurrentRowSelected is the write access specifier for the property value. 
SetCurrentRowSelected tries to locate a Bookmark for the current row in the 
Dataset, and adds or removes the Bookmark based on the AValue argument. The 
Grid control is redrawn after changing the selection state for the row.
</p>
</descr>
<seealso>
</seealso>
</element>

<element name="TBookmarkList.Items">
<short>
Provides indexed access to Bookmarks in the list.
</short>
<descr>
<p>
<var>Items</var> is a read-only <var>TBookmark</var> property that provides 
indexed access to Bookmarks in the list. Bookmarks can be accessed by their 
ordinal position in the list (in the range <var>0..Count-1</var>).
</p>
<p>
GetItem is the read access specifier for the Items property, and retrieves 
the TBookmark stored at the specified position in the list.
</p>
<p>
Items is the default property in TBookmarkList.
</p>
<p>
Use CurrentSelectedRow, Clear, Delete, and Refresh to maintain bookmarks 
stored in the list.
</p>
</descr>
<seealso>
</seealso>
</element>
<element name="TBookmarkList.Items.AIndex">
<short>Ordinal position for the bookmark to retrieve from the list.</short>
</element>

<element name="TComponentDataLink">
<short>
Maintains an association between a component and a dataset.
</short>
<descr>
<p>
<var>TComponentDataLink</var> is a <var>TDatalink</var> descendant that 
maintains an association between a component and its linked dataset. 
TComponentDataLink coordinates the actions of the component and the dataset, 
and allows the component to respond to data events. TComponentDataLink 
defines event handlers which can be used to forward dataset events to the 
component implementation.
</p>
<p>
TComponentDataLink is the type used to implement the 
<var>TCustomDBGrid.DataLink</var> property.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DataLink"/>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>

<element name="TComponentDataLink.FDataset"/>
<element name="TComponentDataLink.FDatasetName"/>
<element name="TComponentDataLink.FModified"/>
<element name="TComponentDataLink.FOnDatasetChanged"/>
<element name="TComponentDataLink.FOnDataseClose"/>
<element name="TComponentDataLink.FOnDataseOpen"/>
<element name="TComponentDataLink.FOnDataseScrolled"/>
<element name="TComponentDataLink.FOnFocusControl"/>
<element name="TComponentDataLink.FOnEditingChanged"/>
<element name="TComponentDataLink.FOnInvalidDataset"/>
<element name="TComponentDataLink.FOnInvalidDataSource"/>
<element name="TComponentDataLink.FOnLayoutChanged"/>
<element name="TComponentDataLink.FOnNewdataset"/>
<element name="TComponentDataLink.FOnRecordChanged"/>
<element name="TComponentDataLink.FOnUpdateData"/>

<element name="TComponentDataLink.GetDatasetName">
<short>
Gets the value for the DatasetName property.
</short>
<descr>
<p>
<var>GetDatasetName</var> is a String function that provides the value for 
the DataSetName property. GetDatasetName returns the value in the Name 
property for the DataSet.
</p>
<p>
Use DatasetName to read or write the value for the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TComponentDataLink.GetDatasetName.Result">
<short>Name for the linked dataset.</short>
</element>

<element name="TComponentDataLink.GetFields">
<short>
Gets the Field at the specified position.
</short>
<descr>
<p>
<var>GetFields</var> is a <var>TField</var> function that implements read 
access for the Fields property. GetFields returns the TField instance at the 
specified position in the Fields for the DataSet. The return value is 
<b>Nil</b> if Index is not in the range <var>0..FieldCount-1</var>.
</p>
<p>
Use Fields to read values in the indexed property.
</p>
</descr>
<seealso>
<link id="TComponentDataLink.Fields"/>
<link id="#fcl.db.TDataLink.DataSet">TDataLink.DataSet</link>
</seealso>
</element>
<element name="TComponentDataLink.GetFields.Result">
<short>Field stored at the specified position.</short>
</element>
<element name="TComponentDataLink.GetFields.Index">
<short>Position to get from the Fields in the dataset.</short>
</element>

<element name="TComponentDataLink.SetDatasetName">
<short>
Sets the name for the dataset.
</short>
<descr>
<p>
<var>SetDatasetName</var> is a procedure used to store the specified value in 
the DatasetName property. SetDatasetName is the write access specifier for 
the DatasetName property. The value in AValue is stored in the member 
variable for the class instance. It does not change the value stored the 
linked TDataset.
</p>
<p>
Use DatasetName to read or write the value for the property.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink.DataSet">TDataLink.DataSet</link>
</seealso>
</element>
<element name="TComponentDataLink.SetDatasetName.AValue">
<short>Name to use for the dataset.</short>
</element>

<element name="TComponentDataLink.RecordChanged">
<short>
Signals the <var>OnRecordChanged</var> event handler when assigned.
</short>
<descr>
<p>
<var>RecordChanged</var> is an overridden procedure used to signal the 
OnRecordChanged event handler when the specified Field is changed. 
RecordChanged calls the event handler when it has been assigned in the class 
instance. No action is performed when OnRecordChanged has not been assigned.
</p>
</descr>
<seealso>
<link id="TComponentDataLink.OnRecordChanged"/>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>
<element name="TComponentDataLink.RecordChanged.Field">
<short>Modified Field for the event notification.</short>
</element>

<element name="TComponentDataLink.DatasetChanged">
<short>
Signals the <var>OnDatasetChanged</var> event handler when assigned.
</short>
<descr>
<p>
<var>DatasetChanged</var> is a procedure used to signal the OnDatasetChanged 
event handler when the dataset has been changed. DatasetChanged calls the 
event handler when it has been assigned in the class instance. No action is 
performed when OnDatasetChanged has not been assigned.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink">TDataLink</link>
<link id="TComponentDataLink.OnDatasetChanged">TComponentDataLink.OnDatasetChanged</link>
</seealso>
</element>

<element name="TComponentDataLink.ActiveChanged">
<short>
Signals an event handler when the Active property is changed.
</short>
<descr>
<p>
<var>ActiveChanged</var> is a procedure used to call event handlers when the 
value in Active is changed.
</p>
<p>
When Active contains <b>True</b>, the Dataset for the class is read and 
compared to the value in the DatasetName property. When it differs from the 
stored value the change is for a new dataset, and the OnNewDataset event 
handler is signalled. If DatasetName is the same as the stored value, the 
OnDataseOpen event handler is signalled.
</p>
<p>
When Active contains <b>False</b>, the Datasource and Dataset are checked to 
ensure that the contain valid class instances. If Datasource is unassigned, 
the OnInvalidDataSource event handler is signalled. If Dataset is unassigned, 
the Dataset is being freed, and the OnInvalidDataSet event handler is 
signalled. If Dataset is assigned, the dataset has been closed and the 
OnDataSetClose event handler is signalled.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>

<element name="TComponentDataLink.LayoutChanged">
<short>
Signals the OnLayoutChanged event handler when assigned.
</short>
<descr>
<p>
<var>LayoutChanged</var> is a procedure used to signal the OnLayoutChanged 
event handler when assigned in the class instance.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.LayoutChanged"/>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>

<element name="TComponentDataLink.DatasetScrolled">
<short>
Signals the OnDataSetScrolled event handler when assigned.
</short>
<descr>
<p>
<var>DatasetScrolled</var> is a procedure used to signal the 
OnDataSetScrolled event handler when it has been assigned in the class 
instance.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink.ActiveRecord">TDataLink.ActiveRecord</link>
</seealso>
</element>
<element name="TComponentDataLink.DatasetScrolled.Distance">
<short>Number of records for the event notification.</short>
</element>

<element name="TComponentDataLink.FocusControl">
<short>
Signals the OnFocusControl event handler when assigned.
</short>
<descr>
<p>
<var>FocusControl</var> is a procedure used to signal the OnFocusControl 
event handler when assigned in the class instance.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>
<element name="TComponentDataLink.FocusControl.Field">
<short>Field receiving focus in the event notification.</short>
</element>

<element name="TComponentDataLink.CheckBrowseMode" link="#fcl.db.TDataLink.CheckBrowseMode">
<short>
Calls the inherited method.
</short>
<descr>
<p>
<var>CheckBrowseMode</var> is a procedure used to call the inherited method.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.EditingChanged">
<short>
Signals the OnEditingChanged event handler when assigned.
</short>
<descr>
<p>
<var>EditingChanged</var> is a procedure used to signal the OnEditingChanged 
event handler when assigned in the class instance.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>

<element name="TComponentDataLink.UpdateData">
<short>
Signals the OnUpdateData event handler when assigned.
</short>
<descr>
<p>
<var>UpdateData</var> is a procedure used to signal the OnUpdateData event 
handler when assigned in the class instance.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>

<element name="TComponentDataLink.MoveBy">
<short>
Moves the position in the dataset by the specified number of rows.
</short>
<descr>
<p>
<var>MoveBy</var> is an Integer function used to move the current position in 
the dataset by the specified number of rows. MoveBy calls the inherited 
method.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink">TDataLink</link>
</seealso>
</element>
<element name="TComponentDataLink.MoveBy.Result">
<short>Actual number of rows moved in the method.</short>
</element>
<element name="TComponentDataLink.MoveBy.Distance">
<short>Number of rows to move in the dataset.</short>
</element>

<element name="TComponentDataLink.Modified">
<short>
Indicates if the component or the linked dataset has been changed.
</short>
<descr>
<p>
<var>Modified</var> is a Boolean property that indicates if the component or 
the linked dataset has been changed.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnRecordChanged">
<short>
<var>OnRecordChanged</var> - event handler for a change in the current record.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnDatasetChanged">
<short>
<var>OnDataseChanged</var> - event handler for a change in the attached 
dataset.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnNewdataset">
<short>
<var>OnNewdataset</var> - event handler for formation of a link to a new 
dataset.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnDatasetOpen">
<short>
<var>OnDataseOpen</var> - event handler when the dataset is open.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnInvalidDataset">
<short>
<var>OnInvalidDataset</var> - event handler when the dataset is invalid.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnInvalidDataSource">
<short>
<var>OnInvalidDataSource</var> - event handler when the data source is 
invalid.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnFocusControl">
<short>Event handler signalled when the grid control receives focus.</short>
<descr>
<p>
<var>OnFocusControl</var> is a <var>TFocusControlEvent</var> property that 
implements the event handler signalled when the grid control receives focus.
</p>
<p>
OnFocusControl is signalled (when assigned) from the <var>FocusControl</var> 
method.
</p>
</descr>
<seealso>
<link id="TFocusControlEvent">TFocusControlEvent</link>
</seealso>
</element>

<element name="TComponentDataLink.OnLayoutChanged">
<short>
<var>OnLayoutChanged</var> - event handler when the layout of the dataset has
changed.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnDatasetClose">
<short>
<var>OnDataseClose</var> - event handler when the dataset is closed.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnDatasetScrolled">
<short>
<var>OnDataseScrolled</var> - event handler when the dataset is scrolled.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnEditingChanged">
<short>
Event handler signalled when the value for the Editing property has been 
changed.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.OnUpdateData">
<short>
Event handler signalled to perform actions for pending changes to the linked 
dataset.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TComponentDataLink.DatasetName">
<short>
Contains the name for the linked dataset.
</short>
<descr>
<p>
<var>DatasetName</var> is a <var>String</var> property with the name for the 
linked dataset in the component. The property value is retrieved from the 
Name property in DataSet (when assigned). Otherwise, the member value is used.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataSet">TDataSet</link>
<link id="#rtl.classes.TComponent.Name">TComponent.Name</link>
</seealso>
</element>

<element name="TComponentDataLink.Fields">
<short>
Provides indexed access to fields in the linked dataset by their ordinal 
position.
</short>
<descr>
<p>
<var>Fields</var>s a read-only indexed <var>TField</var> property which 
provides access to fields in Dataset by their ordinal position. The return 
value contains the TField instance in DataSet at the ordinal position in 
Index. The property value is <b>Nil</b> if Index is not valid for the number 
of fields in DataSet.
</p>
<p>
Use DataSet.FieldCount to get the number of fields defined in the linked 
dataset.
</p>
</descr>
<seealso>
<link id="#fcl.db.TDataLink.DataSet">TDataLink.DataSet</link>
<link id="#fcl.db.TDataLink.DataSource">TDataLink.DataSource</link>
<link id="#fcl.db.TField">TField</link>
</seealso>
</element>
<element name="TComponentDataLink.Fields.Index">
<short>
Ordinal position for the TField instance returned for the linked dataset.
</short>
</element>

<element name="TComponentDataLink.VisualControl" link="#fcl.db.TDataLink.VisualControl"/>

<element name="TColumnTitle">
<short>
<var>TColumnTitle</var> is a <var>TGridColumnTitle</var> descendant.
</short>
<descr>
<p>
<var>TColumnTitle</var> is a <var>TGridColumnTitle</var> descendant which 
ensures the correct caption is used as the title for a column in a data-aware 
grid.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TColumnTitle.GetDefaultCaption">
<short>Gets the default caption used as the title for the grid column.</short>
<descr>
<p>
<var>GetDefaultCaption</var> is an overridden String function in
<var>TColumnTitle</var> which provides the default caption used as the title
for a grid column.
</p>
<p>
If a Field has been created for the column, the value of its DisplayName
property is used as the caption. If only the FieldName property is set, it is
used as the caption. Otherwise, the inherited method is called to get the
default caption for the column.
</p>
</descr>
<seealso>
<link id="TColumn">TColumn</link>
<link id="#fcl.db.TField">TField</link>
<link id="#lcl.grids.TGridColumnTitle.GetDefaultCaption">TGridColumnTitle.GetDefaultCaption</link>
</seealso>
</element>
<element name="TColumnTitle.GetDefaultCaption.Result">
<short>Default value used as the title for the column.</short>
</element>

<element name="TColumn">
<short>
Implements a display column for the TDBGrid control.
</short>
<descr>
<p>
<var>TColumn</var> is a <var>TGridColumn</var> descendant that represents a 
display column in a database grid control. TColumn extends the ancestor class 
to provide support for using TField for data access, display formatting, 
alignment, as well as use of check box and lookup list Fields. TColumn also 
implements support for features in TDBGrid like: automatic rows, and 
design-time vs run-time column ordering.
</p>
<p>
TColumn provides properties and methods needed to access and maintain the 
Dataset, Field, FieldName, and DisplayFormat for the column. TColumn provides 
overridden functions which implement facilities from the ancestor class.
</p>
<p>
TColumn instances can be created at run-time or design-time;  properties are 
provided to indicate when the instance was created. The display order for 
columns need not correspond to the order of the Fields in the dataset, nor do 
all Fields in the dataset need to be represented by a display column.
</p>
<p>
TColumn instances are used as the collection item for the 
<var>TDBGridColumns</var> collection.
</p>
</descr>
<seealso>
<link id="TDBGrid.Columns"/>
<link id="TDBGridColumns"/>
<link id="#lcl.grids.TGridColumn">TGridColumn</link>
<link id="#fcl.db.TField">TField</link>
<link id="#fcl.db.TDataset">TDataset</link>
</seealso>
</element>

<element name="TColumn.FDisplayFormat"/>
<element name="TColumn.FDisplayFormatChanged"/>
<element name="TColumn.FFieldName"/>
<element name="TColumn.FField"/>
<element name="TColumn.FIsAutomaticColumn"/>
<element name="TColumn.FDesignIndex"/>

<element name="TColumn.ApplyDisplayFormat">
<short>
Applies a new display format to the Field which gets data for the column.
</short>
<descr>
<p>
<var>ApplyDisplayFormat</var> is a procedure used to apply a new value in 
DisplayFormat to the Field used to get data for the column. Field must 
contain a valid TField instance, or no actions are performed in the method.
</p>
<p>
ApplyDisplayFormat ensures that the new value for DisplayFormat is properly 
applied to Fields using the TNumericField or TDateTimeField class types. 
ApplyDisplayFormat is used in the implementation of the LinkField method.
</p>
</descr>
<seealso>
<link id="TColumn.LinkField">TColumn.LinkField</link>
</seealso>
</element>

<element name="TColumn.GetDataset">
<short>Gets the Dataset for the column.</short>
<descr>
<p>
<var>GetDataset</var> is a TDataset function used to get the dataset which 
provides data for the column. GetDataset uses Grid (cast to a TCustomDBGrid 
instance) to access its DataLink and get the DataSet for the column 
definition. The return value is <b>Nil</b> if the Grid control has not been 
assigned for the column.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid">TCustomDBGrid</link>
<link id="#lcl.grids.TGridColumn.Grid">TGridColumn.Grid</link>
<link id="#fcl.db.TDataset">TDataset</link>
</seealso>
</element>
<element name="TColumn.GetDataset.Result">
<short>Dataset for the column definition.</short>
</element>

<element name="TColumn.GetDisplayFormat">
<short>
Get the value for the DisplayFormat property.
</short>
<descr>
<p>
<var>GetDisplayFormat</var> is a String function used to get the value for 
the DisplayFormat property. The value in the member variable is returned when 
it is different than the stored value for DisplayFormat. Otherwise, the value 
from GetDefaultDisplayFormat is used as the return value.
</p>
<p>
Use DisplayFormat to read and write the value for the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TColumn.GetDisplayFormat.Result">
<short>Value for the DisplayFormat property.</short>
</element>

<element name="TColumn.GetField">
<short>
Gets the value for the Field property.
</short>
<descr>
<p>
<var>GetField</var> is a TField function used to get the value for the Field 
property. GetField ensures that Field has been assigned, and that FieldName 
has been set for the class instance. The LinkField method is called to find 
and store the TField instance used as the return value for the method. The 
return value is <b>Nil</b> if a Field with the name in FieldName cannot be 
found.
</p>
<p>
Use Field to read or write the value in the property.
</p>
</descr>
<seealso>
<link id="TColumn.Field">TColumn.Field</link>
<link id="TColumn.LinkField">TColumn.LinkField</link>
<link id="#fcl.db.TField">TField</link>
</seealso>
</element>
<element name="TColumn.GetField.Result">
<short>Field used to access data for the column.</short>
</element>

<element name="TColumn.GetIsDesignColumn">
<short>
Gets the value for the IsDesignColumn property.
</short>
<descr>
<p>
<var>GetIsDesignColumn</var> is a Boolean function used to get the value for 
the IsDesignColumn property. The return value is <b>True</b> when DesignIndex 
contains a value in the range <var>0..9999</var>.
</p>
<p>
The upper range for DesignIndex is a result of the value assigned in Create. 
The value <var>10000</var> is used in the property when Grid has not assigned 
for the collection, or Grid includes csLoading in its ComponentState property.
</p>
<p>
Use IsDesignColumn to read the value for the property.
</p>
</descr>
<seealso>
<link id="TColumn.DesignIndex">TColumn.DesignIndex</link>
<link id="TDBGridColumns">TDBGridColumns</link>
<link id="TDBGrid.Columns">TDBGrid.Columns</link>
</seealso>
</element>
<element name="TColumn.GetIsDesignColumn.Result">
<short>Value for the IsDesignColumn property.</short>
</element>

<element name="TColumn.IsDisplayFormatStored">
<short>
Determines the storage specifier for the DisplayFormat property.
</short>
<descr>
<p>
<var>IsDisplayFormatStored</var> is a Boolean function used as the storage 
specifier for the DisplayFormat property. The return value is <b>True</b> if 
the member variable for the DisplayFormat property is different than the one 
used for the Field.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TColumn.IsDisplayFormatStored.Result">
<short>
<b>True</b> when DisplayFormat is different the one used for the Field.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TColumn.SetDisplayFormat">
<short>
Sets the value in the DisplayFormat property.
</short>
<descr>
<p>
<var>SetDisplayFormat</var> is a procedure used to set the value in the 
DisplayFormat property. SetDisplayFormat compares the value stored in the 
member variable to the new value for the property. If they are different, the 
new value is stored and a flag is set to indicate that the display format has 
changed. SetDisplayFormat calls the ColumnChanged method to indicate that the 
column definition has been updated.
</p>
<p>
No actions are performed in the method when the DisplayFormat has not been 
changed.
</p>
<p>
Use DisplayFormat to read or write the value for the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TColumn.SetDisplayFormat.AValue">
<short>New value for the DisplayFormat property.</short>
</element>

<element name="TColumn.SetField">
<short>
Sets the value in the Field property.
</short>
<descr>
<p>
<var>SetField</var> is a procedure used to set the value in the Field 
property. SetField compares the new value for the property to the value 
stored in the member variable. When they are different, the new value is 
stored in the member variable. If the new value is not <b>Nil</b>, its 
FieldName is updated as well. SetField calls the ColumnChanged method to 
indicate that the column definition has been updated.
</p>
<p>
No actions are performed in the method when the new Field value is the same 
as the value stored in the member variable .
</p>
<p>
Use Field to read or write the value for the property.
</p>
</descr>
<seealso>
<link id="TColumn.Field">TColumn.Field</link>
<link id="TColumn.FieldName">TColumn.FieldName</link>
</seealso>
</element>
<element name="TColumn.SetField.AValue">
<short>New value for the Field property.</short>
</element>

<element name="TColumn.SetFieldName">
<short>
Sets the value in the FieldName property.
</short>
<descr>
<p>
<var>SetFieldName</var> is a procedure used to set the value in the FieldName 
property. SetFieldName compares the new value to the value stored in the 
member variable for the property. No actions are performed in the method when 
they are the same.
</p>
<p>
SetFieldName stores the new value for the property in its member variable, 
and calls the LinkField method to find the Field with the specified name. 
DisplayFormat is updated when a matching Field is located in the dataset for 
the column.
</p>
</descr>
<seealso>
<link id="TColumn.LinkField">TColumn.LinkField</link>
<link id="TColumn.DisplayFormat">TColumn.DisplayFormat</link>
</seealso>
</element>
<element name="TColumn.SetFieldName.AValue">
<short>New value for the FieldName property.</short>
</element>

<element name="TColumn.CreateTitle">
<short>
Creates the title used for the grid column.
</short>
<descr>
<p>
<var>CreateTitle</var> is an overridden TGridColumnTitle function used to 
create the title used as a fixed caption for the column.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TGridColumn.CreateTitle">TGridColumn.CreateTitle</link>
</seealso>
</element>
<element name="TColumn.CreateTitle.Result">
<short>Title for the column.</short>
</element>

<element name="TColumn.GetDefaultAlignment">
<short>
Gets the default alignment for the Field in the column definition.
</short>
<descr>
<p>
<var>GetDefaultAlignment</var> is an overridden TAlignment function that gets 
the default alignment for the Field in the column definition. 
GetDefaultAlignment gets the button style used by the default editor for 
Field. For check box and button-style editors, center alignment is used. 
Otherwise, the Alignment in Field is used. If Field has not been assigned, 
left alignment is used.
</p>
</descr>
<seealso>
</seealso>
</element>
<element name="TColumn.GetDefaultAlignment.Result">
<short>Alignment for the Field and/or editor style.</short>
</element>

<element name="TColumn.GetDefaultDisplayFormat">
<short>
Gets the default display format for the Field in a column.
</short>
<descr>
<p>
<var>GetDefaultDisplayFormat</var> is a String function used to get the 
default display format provided for the Field in a column definition. 
GetDefaultDisplayFormat uses the Field property to get its DisplayFormat for 
use as the return value in the method. The return value is a empty string 
<var>('')</var> when Field has not been assigned for the column definition.
</p>
<p>
GetDefaultDisplayFormat is used in the implementation of the GetDisplayFormat 
method.
</p>
</descr>
<seealso>
<link id="TColumn.Field"/>
<link id="TColumn.DisplayFormat"/>
</seealso>
</element>
<element name="TColumn.GetDefaultDisplayFormat.Result">
<short>Default display format for the Field in the column.</short>
</element>

<element name="TColumn.GetDefaultValueChecked">
<short>
Gets the default value for a check box in the Checked state as a String.
</short>
<descr>
<p>
<var>GetDefaultValueChecked</var> is an overridden String function used to 
get the default value used for a check box column in the Checked state. When 
Field has been assigned for the column, and the data type is ftBoolean, the 
return value is <var>'TRUE'</var>. If Field has not been assigned, the return 
value is <var>'1'</var>.
</p>
</descr>
<seealso>
</seealso>
</element>
<element name="TColumn.GetDefaultValueChecked.Result">
<short>'TRUE' or '1'</short>
</element>

<element name="TColumn.GetDefaultValueUnchecked">
<short>
Gets the default String value for a check box in the UnChecked state.
</short>
<descr>
<p>
<var>GetDefaultValueUnchecked</var> is an overridden String function used to 
get the default value used for a check box column in the UnChecked state. 
When Field has been assigned for the column, and the data type is ftBoolean 
the return value is <var>'FALSE'</var>. If Field has not been assigned, the 
return value is <var>'0'</var>.
</p>
</descr>
<seealso>
</seealso>
</element>
<element name="TColumn.GetDefaultValueUnchecked.Result">
<short>'FALSE' or '0'</short>
</element>

<element name="TColumn.GetDefaultVisible">
<short>
Indicates if the Field for the column is Visible.
</short>
<descr>
<p>
<var>GetDefaultVisible</var> is an overridden Boolean function that indicates 
if the Field for the column is Visible. GetDefaultVisible uses Field to get 
its Visible property for use as the return value in the method. If Field has 
not been assigned in the column, the return value is <b>True</b>.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TGridColumn.GetDefaultVisible">TGridColumn.GetDefaultVisible</link>
</seealso>
</element>
<element name="TColumn.GetDefaultVisible.Result">
<short><b>True</b> when the Field for the column is visible.</short>
</element>

<element name="TColumn.GetDisplayName">
<short>
Gets the display name for the collection item.
</short>
<descr>
<p>
<var>GetDisplayName</var> is an overridden String function used to get the 
display name for the column. The display name is used at design-time to get 
the name for the collection item, and at run-time when a dataset for the 
column has not been assigned or opened.
</p>
<p>
The value in FieldName is used as the return value for the method, when it 
has been assigned in the column. Otherwise, the inherited GetDisplayName 
method is called to get the return value.
</p>
<p>
Use FieldName to set the name of the Field used for the column.
</p>
</descr>
<seealso>
<link id="TColumn.FieldName"/>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>
<element name="TColumn.GetDisplayName.Result">
<short>Display name for the collection item.</short>
</element>

<element name="TColumn.GetDefaultReadOnly">
<short>
Gets the default value for the ReadOnly property.
</short>
<descr>
<p>
<var>GetDefaultReadOnly</var> is an overridden Boolean function which gets 
the default value for the ReadOnly property. GetDefaultReadOnly combines the 
ReadOnly values found in both the Grid and the Field for the dataset to 
derive the value for the method. The return value is <b>True</b> when Grid or 
Field is not assigned for the column.
</p>
</descr>
<seealso>
<link id="TGridColumn.GetDefaultReadOnly"/>
<link id="TCustomDBGrid.ReadOnly"/>
<link id="#fcl.db.TField.ReadOnly">TField.ReadOnly</link>
</seealso>
</element>
<element name="TColumn.GetDefaultReadOnly.Result">
<short>Effective value for the ReadOnly property.</short>
</element>

<element name="TColumn.GetDefaultWidth">
<short>
Gets the effective width for the column.
</short>
<descr>
<p>
<var>GetDefaultWidth</var> is an overridden Integer function used to get the 
effective width for the column. The return value is calculated using the Grid 
and its Canvas to find the space needed for the Field in the column. When the 
Grid has Options that include the value dgTitles, Title.Caption and 
Title.Font are included in the calculation. GetDefaultWidth calls the 
CalcColumnFieldWidth function to get the canvas width used as the return 
value.
</p>
<p>
The return value is -1 if the Grid has not been assigned for the column. The 
return value contains Grid.DefaultColWidth when Field has not been assigned 
in the column.
</p>
</descr>
<seealso>
<link id="TGridColumn.GetDefaultWidth">TGridColumn.GetDefaultWidth</link>
</seealso>
</element>
<element name="TColumn.GetDefaultWidth.Result">
<short>Effective width for the the column.</short>
</element>

<element name="TColumn.GetPickList">
<short>
Gets the values in the pick list for the column.
</short>
<descr>
<p>
<var>GetPickList</var> is an overridden TStrings function which gets the 
values in the pick list for the column. GetPickList calls the inherited 
method, and provides support for Lookup Fields in the column definition.
</p>
<p>
When Field is assigned and contains a Lookup Field (fkLookup in its FieldKind 
property), values from the LookupList or the LookupDataset are included in 
the return value. When LookupDataset is used, the result includes values from 
the LookupResultField for each of the rows in the dataset.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TGridColumn.PickList">TGridColumn.PickList</link>
<link id="#fcl.db.TField">TField</link>
</seealso>
</element>
<element name="TColumn.GetPickList.Result">
<short>Values available for the lookup-style column.</short>
</element>

<element name="TColumn.IsAutomaticColumn">
<short>
Indicates if the column was automatically added at run-time.
</short>
<descr>
<p>
<var>IsAutomaticColumn</var> is a read-only Boolean property that indicates 
if the column was automatically added to the collection at run-time. The 
value in IsAutomaticColumn is updated when TDBGrid.AddAutomaticColumns and 
TDBGridColumns.RemoveAutoColumns add or remove items in the collection.
</p>
<p>
Use IsDesignColumn to determine if the column was added at design-time. Use 
TDBGridColumns.HasAutomaticColumns to determine if any automatic columns are 
stored in the collection. Use TDBGrid.OptionsExtra to enable or disable 
automatically columns in a database grid control.
</p>
</descr>
<seealso>
<link id="TColumn.IsDesignColumn">TColumn.IsDesignColumn</link>
<link id="TDBGridColumns">TDBGridColumns</link>
<link id="TDBGrid.Columns">TDBGrid.Columns</link>
<link id="TDBGrid.OptionsExtra">TDBGrid.OptionsExtra</link>
</seealso>
</element>

<element name="TColumn.IsDesignColumn">
<short>
Indicates if the column was added at design-time.
</short>
<descr>
<p>
<var>IsDesignColumn</var> is a read-only Boolean property which indicates if 
the column was added at design-time. GetIsDesignColumn is the read access 
specifier for the IsDesignColumn property.
</p>
<p>
Use IsAutomaticColumn to determine if the column was added at run-time. Use 
TDBGridColumns.HasDesignColumns to determine if any design-time columns are 
stored in the collection.
</p>
</descr>
<seealso>
<link id="TColumn.IsAutomaticColumn">TColumn.IsAutomaticColumn</link>
<link id="TDBGridColumns.HasDesignColumns">TDBGridColumns.HasDesignColumns</link>
<link id="TDBGrid.OptionsExtra">TDBGrid.OptionsExtra</link>
</seealso>
</element>

<element name="TColumn.LinkField">
<short>
Establishes a link between the FieldName and the Field in a Dataset.
</short>
<descr>
<p>
<var>LinkField</var> is a procedure used to establish a link between the 
FieldName in the column and the Field in its Dataset. LinkField requires Grid 
to be assigned in order to access the DataLink and its Dataset. When Grid is 
unassigned, the value for Field is <var>Nil</var>. The DataLink in Grid must 
be Active to access the Fields in the dataset. When DataLink in not Active, 
the value in Field is <var>Nil</var>.
</p>
<p>
LinkField finds the Field in the linked dataset with the name specified in 
FieldName. The TField instance is stored in the Field property. LinkField 
calls the ApplyDisplayFormat method to update the DisplayFormat used for the 
column.
</p>
<p>
LinkField is called when reading the value for the Field property and it has 
not already been assigned.
</p>
</descr>
<seealso>
<link id="TColumn.LinkField"/>
<link id="TColumn.DisplayFormat"/>
<link id="TColumn.Field"/>
<link id="TCustomDBGrid.DataLink"/>
</seealso>
</element>

<element name="TColumn.Create">
<short>
Constructor for the <var>TColumn</var> instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for the <var>TColumn</var> instance. 
Create calls the inherited <var>Create</var> constructor and sets the 
DesignIndex used for the new entry in the
<link id="#rtl.classes.TCollection">TCollection</link>. Create is called by the <link id="#rtl.classes.TCollection.Add">TCollection.Add</link> method and should not be called directly under normal circumstances.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TGridColumn.Create">TGridColumn.Create</link>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>
<element name="TColumn.Create.ACollection">
<short>Collection that owns the collection item.</short>
</element>

<element name="TColumn.Assign">
<short>
Stores properties from a persistent class in the current class instance.
</short>
<descr>
<p>
<var>Assign</var> is an overridden procedure which stores properties from 
Source in the current class instance. Assign calls the inherited Assign 
method. When Source is a TColumn class instance, the values for the following 
are stored in the current class instance:
</p>
<ul>
<li>FieldName</li>
<li>DisplayFormat</li>
<li>ValueChecked</li>
<li>ValueUnchecked</li>
</ul>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="TColumn.Assign.Source">
<short>Persistent class with values stored in the method.</short>
</element>

<element name="TColumn.IsDefault">
<short>
Indicates if the column uses its default display format.
</short>
<descr>
<p>
<var>IsDefault</var> is an overridden Boolean function that indicates if the 
column uses its default display format. The return value is <b>True</b> when 
the value in the DisplayFormat property has not been changed. IsDefault calls 
the inherited method to get the return value for the method.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TGridColumn.IsDefault">TGridColumn.IsDefault</link>
</seealso>
</element>
<element name="TColumn.IsDefault.Result">
<short><b>True</b> when DisplayFormat has been changed.</short>
</element>

<element name="TColumn.DesignIndex">
<short>
Order for the column in its collection at design-time.
</short>
<descr>
<p>
<var>DesignIndex</var> is a read-only Integer property that contains the 
order for the column in its collection at design-time. The value in 
DesignIndex is used primarily when TDBGridColumns.ResetColumnsOrder compares 
and sorts the items in its collection.
</p>
</descr>
<seealso>
<link id="TDBGridColumns.ResetColumnsOrder"/>
<link id="TColumn.Create"/>
</seealso>
</element>

<element name="TColumn.Field">
<short>
<var>Field</var> in the <var>Dataset</var> associated with this 
<var>Column</var>.
</short>
<descr>
<p>
<var>Field</var> is a <var>TField</var> property that provides access to the 
content and other attributes for the dataset Field represented by the column. 
GetField reads the value for the property. SetField writes the value for the 
property.
</p>
</descr>
<seealso>
<link id="TColumn.LinkField"/>
<link id="#fcl.db.TField">TField</link>
</seealso>
</element>

<element name="TColumn.FieldName">
<short>
Name of the Field with data for the column.
</short>
<descr>
<p>
<var>FieldName</var> is a String property which contains the name of the 
Field used to get data for the column. <var>SetFieldName</var> is the write 
access specifier for the property. Changing the value in FieldName causes 
LinkField to be called to find the Field with the specified name. The value 
in DisplayFormat is also modified when the property was has changed.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TColumn.DisplayFormat">
<short>The format to be used for display in this column.</short>
<descr>
<p>
<var>DisplayFormat</var> is a String property which specifies a format string 
used for displaying the value of a Field with the name in FieldName. Use of 
DisplayFormat in TColumn is consistent with its use in TField (and 
descendants), but can assign a value that overrides the default display 
format for the Field.
</p>
<p>
<var>GetDisplayFormat</var> is the read access specifier for the property. 
<var>SetDisplayFormat</var> is the write access specifier for the property. 
Changing the value in DisplayFormat causes the ColumnChanged method to be 
called when the column definition has been updated.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TColumnOrder">
<short>
Enumerated type defining alternate ordering for columns.
</short>
<descr>
<p>
<var>TColumnOrder</var> is an enumerated type which defines alternate 
ordering for columns in a collection. The values specify whether the 
design-time or run-time index is used when ordering TColumn instances in the 
TDBGridColumns collection.
</p>
</descr>
<seealso>
<link id="#lcl.dbgrids.TColumn">TColumn</link>
<link id="#lcl.dbgrids.TDBGridColumns">TDBGridColumns</link>
<link id="#lcl.dbgrids.TDBGrid.Columns">TDBGrid.Columns</link>
</seealso>
</element>
<element name="TColumnOrder.coDesignOrder">
<short>Columns are ordered using the DesignIndex value.</short>
</element>
<element name="TColumnOrder.coFieldIndexOrder">
<short>Columns are order by the Index for the Field.</short>
</element>

<element name="TDbGridColumns">
<short>Implements a collection for columns in a database-aware grid.</short>
<descr>
<p>
<var>TDBGridColumns</var> is a TGridColumns descendant which implements a 
collection for columns added to TDBGrid.
</p>
<p>
TDBGridColumns extends the ancestor class to include support for adding and 
removing automatic columns at run-time. Automatic columns are a feature in 
TDBGrid that, when enabled, ensures the collection has a column definition 
for each Field in the linked dataset for its grid control. Methods and 
Properties are provided to identify columns added at run-time, and to order 
entries in the collection by their design-time or run-time indices.
</p>
<p>
Items is the default property for the collection. TColumn is the class type 
used for Items added to the collection.
</p>
<p>
Use the Add method to create a new collection item in the Items property. Use 
LinkFields to update the association between an item in the collection and 
the TField used to access its data. Use ResetColumnsOrder to change the order 
of Items in the collection.
</p>
</descr>
<seealso>
<link id="TDBGridColumns.Items"/>
<link id="TDBGridColumns.Add"/>
<link id="TDBGridColumns.LinkFields"/>
<link id="TDBGridColumns.ResetColumnsOrder"/>
<link id="TColumn"/>
<link id="#lcl.grids.TGridColumns">TGridColumns</link>
<link id="#lcl.grids.TGridColumn">TGridColumn</link>
</seealso>
</element>

<element name="TDBGridColumns.GetColumn">
<short>
Gets the collection item stored at the specified ordinal position.
</short>
<descr>
<p>
<var>GetColumn</var> is a TColumn function which gets the column at the 
specified position in the collection. GetColumn is the read access specifier 
for the Items property.
</p>
<p>
Use Items to read and write values in the collection.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TDBGridColumns.GetColumn.Result">
<short>Collection item at the specified position.</short>
</element>
<element name="TDBGridColumns.GetColumn.Index">
<short>Position in the collection.</short>
</element>

<element name="TDBGridColumns.SetColumn">
<short>
Stores the collection item at the specified position.
</short>
<descr>
<p>
<var>SetColumn</var> is a procedure which stores the column in Value at the 
specified position in the collection. SetColumn is the write access specifier 
for the Items property. SetColumn uses the Assign method to store the new 
Value in the collection.
</p>
<p>
Use Items to read and write values in the collection.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TDBGridColumns.SetColumn.Index">
<short>Position where the collection item is stored </short>
</element>
<element name="TDBGridColumns.SetColumn.Value">
<short>Collection item to store at the specified position.</short>
</element>

<element name="TDBGridColumns.Update">
<short>
Redraws the Grid control that owns the column collection.
</short>
<descr>
<p>
<var>Update</var> causes the TDBGrid control which owns the column collection 
to be redrawn. The value in Grid must be assigned, or no actions are 
performed in the method. In addition, the Grid control will not be updated if 
component streaming is active (csLoading in its ComponentState). Update calls 
TDBGrid.LayoutChanged to cause the Grid control to be redrawn.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TGridColumns">TGridColumns</link>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>
<element name="TDBGridColumns.Update.Item">
<short>Collection item triggering the update.</short>
</element>

<element name="TDBGridColumns.ColumnFromField">
<short>
<var>ColumnFromField</var> returns the collection item for the specified 
Field.
</short>
<descr>
<p>
<var>ColumnFromField</var> returns the collection item for the specified 
Field. The return value is <var>Nil</var> when Field has not been assigned.
</p>
<p>
ColumnFromField iterates over the Items in the collection to locate the 
specified Field. The return value is <var>Nil</var> when Field cannot be 
located in the Items for the collection.
</p>
<p>
ColumnFromField is used in the TDBGrid.AddAutomaticColumns method.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TDBGridColumns.ColumnFromField.Result">
<short>Collection item for the specified Field.</short>
</element>
<element name="TDBGridColumns.ColumnFromField.Field">
<short>Field to locate in the collection.</short>
</element>

<element name="TDBGridColumns.HasAutomaticColumns">
<short>
<var>HasAutomaticColumns</var> indicates if any items in the collection are 
an automatic column.
</short>
<descr>
<p>
<var>HasAutomaticColumns</var> is a <var>Boolean</var> function that 
indicates if any items in the collection are an automatic column added at 
run-time. Automatic columns are a feature in TDBGrid enabled by adding the 
appropriate value to its OptionsExtra property. HasAutomaticColumns returns 
<b>True</b> if a TColumn instance in the Items property has its 
IsAutomaticColumn property set.
</p>
</descr>
<seealso>
<link id="TDBGrid.OptionsExtra">TDBGrid.OptionsExtra</link>
<link id="TDBGridColumns.RemoveAutoColumns">TDBGridColumns.RemoveAutoColumns</link>
</seealso>
</element>
<element name="TDBGridColumns.HasAutomaticColumns.Result">
<short>
<b>True</b> when automatic columns are stored in the collection.
</short>
</element>

<element name="TDBGridColumns.HasDesignColumns">
<short>
<var>HasDesignColumns</var> indicates if the collection contains any items 
explicitly added at design-time.
</short>
<descr>
<p>
<var>HasDesignColumns</var> is a Boolean function that indicates if the 
collection contains any items explicitly added at design-time. 
HasDesignColumns returns <b>True</b> if Items contains a TColumn instance 
with its IsDesignColumn property set.
</p>
</descr>
<seealso>
<link id="TDBGridColumns.Items"/>
<link id="TDBGridColumns.ResetColumnsOrder"/>
<link id="TColumn.IsDesignColumn"/>
</seealso>
</element>
<element name="TDBGridColumns.HasDesignColumns.Result">
<short><b>True</b> an item has its IsDesignColumn property set.</short>
</element>

<element name="TDBGridColumns.RemoveAutoColumns">
<short>
<var>RemoveAutoColumns</var> removes automatic columns in the collection.
</short>
<descr>
<p>
<var>RemoveAutoColumns</var> is a procedure used to remove any automatic 
columns in the collection. RemoveAutoColumns uses HasAutomaticColumns to 
determine if any action is required.
</p>
<p>
When HasAutomaticColumns returns <b>True</b> the Grid updates its GridStatus 
to include the value gsRemovingAutoColumns. RemoveAutoColumns calls the 
Delete method for any column having its IsAutomaticColumn property set to 
<b>True</b>. gsRemovingAutoColumns is removed from the GridStatus property in 
the Grid prior to exiting from the method.
</p>
<p>
Applications do not normally call the RemoveAutoColumns method. Use 
OptionsExtra in TDBGrid to disable the automatic columns feature for the grid 
control.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.GridStatus"/>
<link id="TCustomDBGrid.OptionsExtra"/>
</seealso>
</element>

<element name="TDBGridColumns.Add">
<short>
<var>Add</var> creates and stores a new item in the collection.
</short>
<descr>
<p>
<var>Add</var> creates and stores a new TColumn instance in the collection.
</p>
<p>
Add uses the Grid property (and the value in its GridStatus property) to 
determine whether the column is being explicitly added to the collection or 
added as a result of the automatic columns option in the grid. If the Grid 
contains the value gsAddingAutoColumns in its GridStatus property, existing 
automatic columns are left in the collection. Otherwise, RemoveAutoColumns is 
called prior to creating and storing the new TColumn instance.
</p>
<p>
Add calls the inherited Add method to create and store the new TColumn 
instance.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
</seealso>
</element>
<element name="TDBGridColumns.Add.Result">
<short>TColumn added to the collection.</short>
</element>

<element name="TDBGridColumns.ColumnByFieldname">
<short>Gets the collection item with the specified field name.</short>
<descr>
<p>
<var>ColumnByFieldname</var> is a <var>TColumn</var> function used to get the 
collection item with the field name in <var>aFieldname</var>. Performs a 
case-insensitive comparison between the FieldName property in the collection 
items and the value in aFieldname. The return value is <b>Nil</b> if a column 
is not found with the specified name.
</p>
</descr>
<seealso/>
</element>
<element name="TDBGridColumns.ColumnByFieldname.Result">
<short>TColumn instance with the specified name, or <b>Nil</b>.</short>
</element>
<element name="TDBGridColumns.ColumnByFieldname.AFieldname">
<short>Field name to locate the collection items.</short>
</element>

<element name="TDBGridColumns.ColumnByTitle">
<short>Gets the collection item with the specified column title.</short>
<descr>
<p>
<var>ColumnByTitle</var> is a <var>TColumn</var> function used to get the 
collection item with the column title specified in aTitle. ColumnByTitle is 
an overridden method, and calls the inherited method to get the TColumn 
return value.
</p>
</descr>
<seealso/>
</element>
<element name="TDBGridColumns.ColumnByTitle.Result">
<short>
Column instance with the specified title, or <b>Nil</b> when not found.
</short>
</element>
<element name="TDBGridColumns.ColumnByTitle.ATitle">
<short>Column title to located in the collection items.</short>
</element>

<element name="TDBGridColumns.LinkFields">
<short>
Associates column items with the corresponding Fields in the Dataset.
</short>
<descr>
<p>
<var>LinkFields</var> is a procedure which associates column items to the 
corresponding Fields in the Dataset for the Grid. LinkFields uses Grid to 
call its BeginLayout and EndLayout methods prior to and immediately after 
linking the Items in the collection to fields in the Dataset. This forces the 
Grid control to be updated when the method has completed. LinkFields calls 
the TColumn.LinkField method for each of the Items in the collection.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TDBGridColumns.ResetColumnsOrder">
<short>
<var>ResetColumnsOrder</var> arranges columns in the collection to the 
specified order.
</short>
<descr>
<p>
<var>ResetColumnsOrder</var> is a procedure used to arrange columns in the 
collection to the order specified in the ColumnOrder argument. ColumnOrder 
can contain the following values:
</p>
<dl>
<dt>coDesignOrder</dt>
<dd>
TColumn.DesignIndex (when available) is used to order collection items.
</dd>
<dt>coFieldIndex</dt>
<dd>
The index for the TColumn.Field (when available) is used to order collection 
items.
</dd>
</dl>
<p>
Otherwise, the index of the collection item is unchanged.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TDBGridColumns.ResetColumnsOrder.ColumnOrder">
<short>Sort order for columns in the collection.</short>
</element>

<element name="TDBGridColumns.Items">
<short>
<var>Items</var> provides indexed access to columns added to the collection.
</short>
<descr>
<p>
<var>Items</var> is a TColumn property that provides indexed access to 
columns in the collection by their ordinal position (in the range 
<var>0..Count-1</var>). Read and write access to columns in the Items 
property are cast to the TColumn class type used in the collection. Write 
access calls the Assign method in the TColumn instance stored at the 
specified position.
</p>
<p>
Items is the default property for the collection.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TDBGridColumns.Items.Index">
<short>Position for the collection item.</short>
</element>

<element name="TCustomDBGrid">
<short>
<var>TCustomDBGrid</var> is the base class for <var>TDBGrid</var>.
</short>
<descr>
<p>
<var>TCustomDBGrid</var> is a <var>TCustomGrid</var> descendant and the base 
class for <var>TDBGrid</var>. TCustomDBGrid adds capabilities needed to 
implement a database-aware grid control. One key feature is the 
TComponentDataLink in DataLink used to coordinate access and event handlers 
between the grid control and its linked dataset. Another key feature is the 
use of the Options and OptionsExtra properties to enable/disable features or 
behaviors in the grid control.
</p>
<p>
TCustomDBGrid overrides certain features from the ancestor class to provide 
consistent use with Fields, Field kinds, and values in TDataset.
</p>
<p>
Applications should use the TDBGrid descendant which sets the scope of 
properties, methods, and event handlers to public or published.
</p>
</descr>
<seealso>
<link id="#lcl.grids.HowToUseGrids">How To Use Grids</link>
<link id="#lcl.dbctrls.HowToUseDataAwareControls">How To Use Data-Aware Controls</link>
</seealso>
</element>

<element name="TCustomDBGrid.FDataLink"/>
<element name="TCustomDBGrid.FExtraOptions"/>
<element name="TCustomDBGrid.FOnCellClick"/>
<element name="TCustomDBGrid.FOnColEnter"/>
<element name="TCustomDBGrid.FOnColExit"/>
<element name="TCustomDBGrid.FOnColumnMoved"/>
<element name="TCustomDBGrid.FOnColumnSized"/>
<element name="TCustomDBGrid.FOnDrawColumnCell"/>
<element name="TCustomDBGrid.FOnDrawColumnTitle"/>
<element name="TCustomDBGrid.FOnFieldEditMask"/>
<element name="TCustomDBGrid.FOnTitleClick"/>
<element name="TCustomDBGrid.FOnSelectEditor"/>
<element name="TCustomDBGrid.FOnCheckboxBitmap"/>
<element name="TCustomDBGrid.FOnCheckboxState"/>
<element name="TCustomDBGrid.FOptions"/>
<element name="TCustomDBGrid.FReadOnly"/>
<element name="TCustomDBGrid.FColEnterPending"/>
<element name="TCustomDBGrid.FLayoutChangedCount"/>
<element name="TCustomDBGrid.FTempText"/>
<element name="TCustomDBGrid.FDrawingActiveRecord"/>
<element name="TCustomDBGrid."/>
<element name="TCustomDBGrid.FDrawingMultiSelRecord"/>
<element name="TCustomDBGrid.FDrawingEmptyDataset"/>
<element name="TCustomDBGrid.FEditingColumn"/>
<element name="TCustomDBGrid.FOldPosition"/>
<element name="TCustomDBGrid.FDefaultColWidths"/>
<element name="TCustomDBGrid.FGridStatus"/>
<element name="TCustomDBGrid.FOldControlStyle"/>
<element name="TCustomDBGrid.FSelectedRows"/>
<element name="TCustomDBGrid.FOnPrepareCanvas"/>
<element name="TCustomDBGrid.FKeySign"/>
<element name="TCustomDBGrid.FSavedRecord"/>
<element name="TCustomDBGrid.FOnGetCellHint"/>
<element name="TCustomDBGrid.FOnRowMoved"/>
<element name="TCustomDBGrid.FFixedRowsExtra"/>

<element name="TCustomDBGrid.EmptyGrid">
<short>
Clears the data display area for the grid control.
</short>
<descr>
<p>
<var>EmptyGrid</var> is a procedure used to clear the data content for the 
grid control. EmptyGrid calls the <var>Clear</var> method to remove the 
visual display for data in the grid control. Please note that stored data is 
not removed; only the visual display for the control is affected. EmptyGrid 
ensures that fixed display columns are retained. EmptyGrid also resets the 
width of the row indicator to its default value when <var>dgIndicator</var> 
is included in the <var>Options</var> for the control.
</p>
<p>
EmptyGrid is used in the implementation of the <var>DoLayoutChanged</var> 
method.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.GetColumns">
<short>
Gets the value for the Columns property.
</short>
<descr>
<p>
GetColumns is re-implemented in TCustomDBGrid to return the TDBGridCoumns 
type, instead of the TGridColumns types used in the TCustomGrid ancestor.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Columns"/>
<link id="#lcl.grids.TCustomGrid.Columns">TCustomGrid.Columns</link>
</seealso>
</element>
<element name="TCustomDBGrid.GetColumns.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomDBGrid.GetCurrentColumn">
<short>
Gets the value for the SelectedColumn property.
</short>
<descr>
<p>
<var>GetCurrentColumn</var> is a <var>TColumn</var> function used as the read 
access specifier for the SelectedColumn property. GetCurrentColumn checks the 
<var>Columns</var> property to ensure that it is enabled for the control. The 
return value is the TColumn instance stored at SelectedIndex in Columns when 
Enabled. The return value is <var>Nil</var> if Columns has not been enabled 
for the control.
</p>
<p>
Use SelectedColumn to get the currently selected column in the grid control. 
Use SelectedField to the TField which reads and writes data for the currently 
selected column in the grid control.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetCurrentColumn.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomDBGrid.GetCurrentField">
<short>
Gets the value in the SelectedField property.
</short>
<descr>
<p>
<var>GetCurrentField</var> is a TField function used to get the value in the 
SelectedField property. GetCurrentField is the read access specifier for the 
SelectedField property. GetCurrentField calls GetFieldFromGridColumn to get 
the TField instance used as the value for the property.
</p>
<p>
Use SelectedField to read and write value for the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetCurrentField.Result">
<short>Value for the SelectedField property.</short>
</element>

<element name="TCustomDBGrid.GetDataSource">
<short>
Gets the value for the DataSource property.
</short>
<descr>
<p>
<var>GetDataSource</var> is a TDataSource function used to get the value for 
the DataSource property. GetDataSource is the read access specifier for the 
DataSource property. GetDataSource gets the DataSource property stored in 
DataLink as the return value for the method.
</p>
<p>
Use DataSource to read or write values in the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetDataSource.Result">
<short>Value for the DataSource property.</short>
</element>

<element name="TCustomDBGrid.GetFirstColumn">
<short>
Gets the value for the FirstColumn property.
</short>
<descr/>
<seealso>
<link id="TCustomDBGrid.FirstColumn"/>
</seealso>
</element>
<element name="TCustomDBGrid.GetFirstColumn.Result">
<short>Value for the FirstColumn property.</short>
</element>

<element name="TCustomDBGrid.GetLastColumn">
<short>
Gets the value for the LastColumn property.
</short>
<descr/>
<seealso>
<link id="TCustomDBGrid.LastColumn"/>
</seealso>
</element>
<element name="TCustomDBGrid.GetLastColumn.Result">
<short>Value for the LastColumn property.</short>
</element>

<element name="TCustomDBGrid.GetRecordCount">
<short>
Gets the number of records in the linked dataset.
</short>
<descr>
<p>
<var>GetRecordCount</var> is an Integer function used to get the number of 
records in the linked dataset. GetRecordCount uses the DataLink for the grid 
to get the RecordCount in its DataSet property. The record count is used as 
the return value for the method.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetRecordCount.Result">
<short>Number of records in the linked dataset.</short>
</element>

<element name="TCustomDBGrid.GetSelectedFieldRect">
<short>
Gets the value for the SelectedFieldRect property.
</short>
<descr/>
<seealso>
<link id="TCustomDBGrid.SelectedFieldRect"/>
</seealso>
</element>
<element name="TCustomDBGrid.GetSelectedFieldRect.Result">
<short>Value for the SelectedFieldRect property.</short>
</element>

<element name="TCustomDBGrid.GetSelectedIndex">
<short>
Gets the value for the SelectedIndex property.
</short>
<descr>
<p>
<var>GetSelectedIndex</var> is an Integer function used as the read access 
specifier for the <var>SelectedIndex</var> property. GetSelectedIndex returns 
the ordinal position of the currently selected column in the Columns 
property. If Columns has not been Enabled for the control, the ordinal 
position of the Field for the currently selected column is returned.
</p>
<p>
Use SelectedIndex to read or write values for the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetSelectedIndex.Result">
<short>Ordinal position of the currently selected column.</short>
</element>

<element name="TCustomDBGrid.OnRecordChanged">
<short>
Default implementation for the OnRecordChanged event handler in 
TComponentDataLink.
</short>
<descr>
<p>
<var>OnRecordChanged</var> is a procedure which provides a default 
implementation for the OnRecordChanged event handler in TComponentDataLink. 
OnRecordChanged ensures that the grid control and the linked dataset are 
synchronized when refreshing the active record, selecting the current column, 
and re-enabling the edit control when EditMode is active.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnRecordChanged.Field">
<short>
TField instance for the modified field, or Nil to update the entire record.
</short>
</element>

<element name="TCustomDBGrid.OnDatasetChanged">
<short>
Default implementation for the OnDatasetChanged event handler in 
TComponentDataLink.
</short>
<descr>
<p>
<var>OnDatasetChanged</var> is a procedure which provides a default 
implementation for the OnDatasetChanged event handler in TComponentDataLink.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnDatasetChanged.aDataset">
<short>Dataset with the name included in debugging messages.</short>
</element>

<element name="TCustomDBGrid.OnDatasetOpen">
<short>
Default implementation for the OnDatasetOpen event handler in 
TComponentDataLink.
</short>
<descr>
<p>
<var>OnDatasetOpen</var> provides a default implementation for the event 
handler in TComponentDataLink.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnDatasetOpen.aDataset">
<short>Not used in the current implementation.</short>
</element>

<element name="TCustomDBGrid.OnDatasetClose">
<short>
Implementation for the OnDatasetClose event handler in TComponentDataLink.
</short>
<descr>
<var>OnDatasetClose</var> provides a default implementation for the event 
handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnDatasetClose.aDataset">
<short>Not used in the current implementation.</short>
</element>

<element name="TCustomDBGrid.OnEditingChanged">
<short>
Implementation for the OnEditingChanged event handler in TComponentDataLink.
</short>
<descr>
<var>OnEditingChanged</var> provides a default implementation for the event 
handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnEditingChanged.aDataset">
<short>Dataset for the event notification.</short>
</element>

<element name="TCustomDBGrid.OnInvalidDataset">
<short>
Implementation for the OnInvalidDataSet event handler in TComponentDataLink.
</short>
<descr>
<var>OnInvalidDataSet</var> provides a default implementation for the event 
handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnInvalidDataset.ADataset">
<short>Dataset for the event notification.</short>
</element>

<element name="TCustomDBGrid.OnInvalidDataSource">
<short>
Implementation for the event handler in TComponentDataLink.
</short>
<descr>
<var>OnInvalidDataSourcet</var> provides a default implementation for the 
event handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnInvalidDataSource.ADataset">
<short>Dataset for the event notification.</short>
</element>

<element name="TCustomDBGrid.OnFocusControl">
<short>
Implements an event handler signalled when a control gets focus.
</short>
<descr>
<p>
<var>OnFocusControl</var> is a procedure which implements the event handler 
signalled when a control gets focus in the database grid. It cannot be 
overridden. Use the OnFocusControl property in DataLink to override the event 
handler.
</p>
<p>
OnFocusControl ensures that SelectedField is updated with the specified Field 
and calls the SetFocus method. No actions are performed if CanFocus indicates 
the control cannot be focused, or a column is not found for the specified 
Field.
</p>
</descr>
<seealso>
<link id="TFocusControlEvent">TFocusControlEvent</link>
<link id="TComponentDataLink">TComponentDataLink</link>
</seealso>
</element>
<element name="TCustomDBGrid.OnFocusControl.aField">
<short>Field reference for the event.</short>
</element>

<element name="TCustomDBGrid.OnLayoutChanged">
<short>
Implementation for the event handler in TComponentDataLink.
</short>
<descr>
<var>OnLayoutChanged</var> provides a default implementation for the event 
handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnLayoutChanged.ADataset">
<short>Dataset for the event notification.</short>
</element>

<element name="TCustomDBGrid.OnNewDataset">
<short>
Implementation for the event handler in TComponentDataLink.
</short>
<descr>
<var>OnNewDataset</var> provides a default implementation for the event 
handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnNewdataset.ADataset">
<short>Not used in the current implementation.</short>
</element>

<element name="TCustomDBGrid.OnDatasetScrolled">
<short>
Implementation for the OnDatasetScrolled event handler in TComponentDataLink.
</short>
<descr>
<var>OnDatasetScrolled</var> provides a default implementation for the event 
handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnDatasetScrolled.ADataset">
<short>Dataset for the event notification.</short>
</element>
<element name="TCustomDBGrid.OnDatasetScrolled.Distance">
<short>Number of rows and relative direction for the scroll event.</short>
</element>

<element name="TCustomDBGrid.OnUpdateData">
<short>
Implementation for the OnUpdateData event handler in TComponentDataLink.
</short>
<descr>
<var>OnUpdateData</var> provides a default implementation for the event 
handler in TComponentDataLink.
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.OnUpdateData.ADataset">
<short>Dataset for the event notification.</short>
</element>

<element name="TCustomDBGrid.SetColumns">
<short>Sets the value for the Columns property.</short>
<descr>
</descr>
<seealso>
<link id="TCustomDBGrid.Columns"/>
</seealso>
</element>
<element name="TCustomDBGrid.SetColumns.AValue">
<short>New value for the Columns property.</short>
</element>

<element name="TCustomDBGrid.SetCurrentField">
<short>
Sets the value for the SelectedField property.
</short>
<descr>
<p>
<var>SetCurrentField</var> is a procedure used to set the value in the 
SelectedField property. SetCurrentField is the write access specifier for the 
SelectedField property. SetCurrentField calls GetGridColumnFromField to 
ensure that the Field in AValue becomes the current column in the control. No 
actions are performed in the method when AValue contains the same value as 
the SelectedField property.
</p>
<p>
Use SelectedField to read or write the value for the property.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.SelectedField"/>
</seealso>
</element>
<element name="TCustomDBGrid.SetCurrentField.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomDBGrid.SetDataSource">
<short>
Sets the value in the DataSource property.
</short>
<descr>
<p>
<var>SetDataSource</var> is a procedure used to set the value in the 
DataSource property. SetDataSource is the write access specifier for the 
DataSource property. SetDataSource stores the value in AValue in the 
DataSource property for DataLink, refreshes the column widths for the 
control, and calls UpdateActive.
</p>
<p>
Use DataSource to read or write the value in the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.SetDataSource.AValue">
<short>New data source for the property value.</short>
</element>

<element name="TCustomDBGrid.SetExtraOptions">
<short>
Write access specifier for the ExtraOptions property.
</short>
<descr>
<p>
<var>SetExtraOptions</var> is a procedure used as the write access specifier 
for the <var>ExtraOptions</var> property. SetExtraOptions ensures that new 
<var>TDBGridExtraOption</var> values in AValue are properly applied to the 
grid control. This includes repainting the control when check box columns are 
enabled or disabled, and when adding or removing the automatic columns 
option. SetExtraOptions calls <var>UpdateActive</var> when automatic columns 
have been added or removed.
</p>
<p>
Use ExtraOptions to read or write values in the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.SetExtraOptions.AValue">
<short>New value for the ExtraOptions property.</short>
</element>

<element name="TCustomDBGrid.SetFixedRowsExtra">
<short>Sets the value for the FixedRowsExtra property.</short>
<descr/>
<seealso>
<link id="TCustomDBGrid.FixedRowsExtra"/>
</seealso>
</element>
<element name="TCustomDBGrid.SetFixedRowsExtra.AValue">
<short>New value for the FixedRowsExtra property.</short>
</element>

<element name="TCustomDBGrid.SetOptions">
<short>
Sets the values in the Options property.
</short>
<descr>
<p>
<var>SetOptions</var> is a procedure used to set the values in the Options 
property. SetOptions is the write access specifier for the Options property. 
SetOptions causes other aspects of the grid control to be updated to reflect 
changes in the property value. ChangedOptions is updated to reflect the 
enumeration values added or removed in the request. Some enumeration values 
force other features or behaviors to be disabled. For instance: row 
selection. Enabling row selection forces the options for editing, always 
displaying the editor, and row highlighting to be removed from the Options 
property. Finally, removing multi-selection from the Options property forces 
the SelectedRows property to be cleared.
</p>
<p>
AValue is a TDBGridOptions argument that specifies features or behaviors that 
will be enabled or disabled in the grid control. Please note that these 
options are different than the TGridOption values used in the ancestor class.
</p>
<p>
As a result, SetOptions must translate any TDBGridOption values to their 
TGridOption equivalents and store them in the inherited Options property.
</p>
<p>
Options contains the following default values when the control is created:
</p>
<ul>
<li>dgColumnResize</li>
<li>dgColumnMove</li>
<li>dgTitles</li>
<li>dgIndicator</li>
<li>dgRowLines</li>
<li>dgColLines</li>
<li>dgConfirmDelete</li>
<li>dgCancelOnExit </li>
<li>dgTabs</li>
<li>dgEditing</li>
<li>dgAlwaysShowSelection</li>
</ul>
<p>
See TDBGridOption for more information about values in the enumeration.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.SetOptions.AValue">
<short>New values for the Options property.</short>
</element>

<element name="TCustomDBGrid.SetRowMoved">
<short>Sets the value for the RowMoved property.</short>
<descr/>
<seealso>
<link id="TCustomDBGrid.RowMoved"/>
</seealso>
</element>
<element name="TCustomDBGrid.SetRowMoved.AValue">
<short>New value for the RowMoved property.</short>
</element>

<element name="TCustomDBGrid.SetSelectedIndex">
<short>
Write access specifier for the SelectedIndex property.
</short>
<descr>
<p>
<var>SetSelectedIndex</var> is a procedure used as the write access specifier 
for the <var>SelectedIndex</var> property. SetSelectedIndex updates the 
ordinal position of the currently selected column to the specified value.
</p>
<p>
Use SelectedIndex to read or write values for the property.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.SetSelectedIndex.AValue">
<short>New value for the SelectedIndex property.</short>
</element>

<element name="TCustomDBGrid.UpdateBufferCount">
<short>
Sets the number of records buffered for the linked dataset.
</short>
<descr>
<p>
<var>UpdateBufferCount</var> is a procedure used to set the number of records 
buffered for the linked dataset. UpdateBufferCount requires that DataLink be 
marked as Active to set the buffer count. If DataLink.Active contains 
<b>False</b>, no actions are performed in the method.
</p>
<p>
UpdateBufferCount calls GetBufferCount to determine the number of rows that 
can be displayed in the control with the DefaultRowHeight. When Options 
includes the value dgTitles, the buffer count is decreased by 1 to account 
for the fixed title row. UpdateBufferCount stores the new value in the 
BufferCount property in DataLink.
</p>
<p>
UpdateBufferCount is called from the UpdateGridCounts method.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.GetColumnCount">
<short>
Gets the number of visible columns or Fields in the grid.
</short>
<descr>
<p>
<var>GetColumnCount</var> is an Integer function used to get the number of 
visible columns or Fields for the grid control. GetColumnCount uses the 
Columns collection (when its has been Enabled) to get the value in 
VisibleCount. When Columns is not Enabled, and OptionsExtra has 
dgeAutoColumns enabled, the linked dataset is used to determine the number of 
Fields with their Visible flag set. The Dataset cannot be examined if the 
DataLink is not marked as Active.
</p>
<p>
GetColumnCount is called from the UpdateGridCounts method.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetColumnCount.Result">
<short>Number of visible Fields or columns in the grid.</short>
</element>

<element name="TCustomDBGrid.DefaultFieldColWidth">
<short>
Gets the default column width for the specified Field.
</short>
<descr>
<p>
<var>DefaultFieldColWidth</var> is an Integer function used to get the 
default column width for the specified Field. When the specified Field 
contains <b>Nil</b>, the value from DefaultColWidth is used. Otherwise, the 
DisplayWidth property in the TField instance is used to get the 
Canvas.TextWidth for the DisplayName in the Field.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.DefaultFieldColWidth.Result">
<short>Default column width for the field.</short>
</element>
<element name="TCustomDBGrid.DefaultFieldColWidth.F">
<short>Field to examine in the method.</short>
</element>

<element name="TCustomDBGrid.UpdateGridColumnSizes">
<short>
Updates sizes for automatically sized columns in the grid.
</short>
<descr>
<p>
<var>UpdateGridColumnSizes</var> is a procedure used to update the sizes for 
automatically sized columns in the grid control. UpdateGridColumnSizes 
requires DefaultColWidths to be in use for the grid. No actions are performed 
in the method when DefaultColWidths contains <b>False</b>.
</p>
<p>
UpdateGridColumnSizes also requires the Options property to include the value 
dgAutoSizeColumns which enables the auto-sized columns feature. No actions 
are performed if the feature has not been enable for the grid control.
</p>
<p>
UpdateGridColumnSizes calls the UpdateAutoSizeColumns method to calculate the 
widths for the auto-sized columns.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.UpdateScrollbarRange">
<short>
Updates the scroll bar range, page, and position for a visible vertical 
scroll bar.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomDBGrid.DoLayoutChanged">
<short>
Update the grid and its scroll bars when its layout has changed.
</short>
<descr>
<p>
<var>DoLayoutChanged</var> is a procedure used to update the grid and its 
scroll bars when the layout for the control has changed. No actions are 
performed in the method when the control is freed (contains csDestroying in 
its ComponentState).
</p>
<p>
DoLayoutChanged calls BeginUpdate to signal changes to the control, and 
UpdateGridCounts to determine the number of rows for the update. When 
UpdateGridCounts returns 0, the EmptyGrid method is called to clear the grid 
control. DoLayoutChanged calls EndUpdate to allow pending changes to be 
applied to the control. DoLayoutChanged calls UpdateScrollbarRange to update 
scroll bars (when used) for the control.
</p>
<p>
DoLayoutChanged is called from the EndLayout method.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.RestoreEditor">
<short>
Re-enables the editor control after scroll bar messages.
</short>
<descr>
<p>
<var>RestoreEditor</var> is a procedure used to re-enable the editor control 
in the grid after processing scroll bar messages. RestoreEditor is used when 
EditorMode contains <b>True</b>. No actions are performed in the method when 
EditorMode contains <b>False</b>. RestoreEditor toggles the value in 
EditorMode to force the editor to be refreshed and redrawn.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.ISEOF">
<short>
Indicates if the linked dataset is positioned at the end-of-file.
</short>
<descr>
<p>
<var>ISEOF</var> is a Boolean function used to indicate if the linked dataset 
is positioned at the end-of-file. ISEOF uses the DataLink for the control to 
access its Active and Dataset properties. DataLink must be Active (contains 
<b>True</b>) to access its Dataset. The return value is <b>True</b> when the 
TDataset.EOF method returns <b>True</b>. The return value is <b>False</b> 
when DataLink is not Active, or TDataset.EOF returns <b>False</b>.
</p>
<p>
ISEOF is used in the KeyDown and MouseDown methods.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.ISEOF.Result">
<short>EOF state for the linked dataset.</short>
</element>

<element name="TCustomDBGrid.ValidDataset">
<short>
Indicates the DataLink contains a valid and active Dataset.
</short>
<descr>
<p>
ValidDataSet is a Boolean function used to indicate if the DataLink for the 
control contains a valid and active Dataset. The return value is <b>True</b> 
when DataLink has a Dataset assigned to the property, and it has been marked 
as Active.
</p>
<p>
ValidDataSet is used in the implementation of various methods including 
KeyDown, MouseDown, and DoExit.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.ValidDataset.Result">
<short><b>True</b> when the control points to a valid dataset.</short>
</element>

<element name="TCustomDBGrid.InsertCancelable">
<short>
Indicates if the dataset can cancel an active insert.
</short>
<descr>
<p>
InsertCancelable is a Boolean function that indicates if the dataset for the 
control can cancel an active insert operation. InsertCancelable uses the 
DataSet in DataLink to ensure that the State contains dsInsert. The return 
value is <b>False</b> if DataSet state has any value other than dsInsert. 
InsertCancelable also examines both DataSet and DataLink to see if either of 
their Modified properties has been set. The return value is <b>False</b> when 
either has been modified.
</p>
<p>
InsertCancelable is used in the implementation of methods like KeyDown, 
MouseDown, and DoExit.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.InsertCancelable.Result">
<short><b>True</b> when the insert can be cancelled.</short>
</element>

<element name="TCustomDBGrid.StartUpdating">
<short>
Prepares the grid control for updates to its display area.
</short>
<descr>
<p>
<var>StartUpdating</var> is a procedure used to prepare the grid control for 
updates to its display area. StartUpdating checks the value from UpdatingData 
to see if the procedure has already been called. No actions are performed in 
the method when UpdatingData returns <b>True</b>.
</p>
<p>
StartUpdating updates the GridStatus property to include the value 
gsUpdatingData. The value in the ControlStyle property is also updated to 
include the value csActionClient. Finally, the LockEditor method is called to 
prevent changes in the editor control while the update is in progress.
</p>
<p>
StartUpdating and EndUpdating are used in the implementation of the 
UpdateData method to prevent multiple calls to UpdateData.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.EndUpdating">
<short>
Restores the status of the control after updating its display area.
</short>
<descr>
<p>
<var>EndUpdating</var> is a procedure used to restore the status of the 
control after an update to its display area. EndUpdating ensures that the 
value gsUpdatingData is removed from the GridStatus property, and restores 
the value in ControlStyle to its value prior to starting the update; the 
value csActionClient is removed from the property. The UnLockEditor method is 
called to re-enable an editor control in the grid.
</p>
<p>
StartUpdating and EndUpdating are used in the implementation of the 
UpdateData method to prevent multiple calls to UpdateData.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.UpdatingData">
<short>
Indicates if UpdateData has already been called for the control.
</short>
<descr>
<p>
UpdatingData is a Boolean function that indicates if the UpdateData method 
has already been called for the grid control. UpdatingData returns 
<b>True</b> if the GridStatus property contains the value gsUpdatingData. The 
GridStatus value is added in the StartUpdating method. UpdatingData prevents 
multiple calls to UpdateData.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.UpdatingData.Result">
<short><b>True</b> when UpdateData has been called for the control.</short>
</element>

<element name="TCustomDBGrid.SwapCheckBox">
<short>
Toggles the Boolean value for a check box-style cell in the current column.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.ToggleSelectedRow">
<short>
Toggles the bookmark in SelectedRows for the current grid row.
</short>
<descr>
<p>
<var>ToggleSelectedRow</var> is a procedure used add or remove the bookmark 
for the current row in the <var>SelectedRows</var> property. 
ToggleSelectedRow calls the <var>SelectRecord</var> method to toggle the 
value in SelectRows using its <var>CurrentRowSelected</var> property. 
ToggleSelectedRow is used in the <var>KeyDown</var> or <var>MouseDown</var> 
methods when <var><b>Ctrl + Multiply</b> (Num Pad *)</var> or <var><b>Ctrl + 
MBLeft</b></var> are pressed.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.SelectRecord">
<short>
Changes the selection in the SelectedRows property.
</short>
<descr>
<p>
<var>SelectRecord</var> is a procedure used to change the 
SelectedRows.CurrentRowSelected property to the specified value. SelectRecord 
checks the Options property to see if the value dgMultiSelect is included, 
and updates SelectedRows.CurrentRowSelected. No action is performed in the 
method if Options does not include the value dgMultiSelect.
</p>
<p>
SelectRecord is used in the implementation of various methods such as: 
KeyDown, MouseDown, ToggleSelectedRow, and ClearSelection.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.SelectRecord.AValue">
<short><b>True</b> when the current record should be selected.</short>
</element>

<element name="TCustomDBGrid.GetScrollbarParams">
<short>
Adjusts scroll bars using the record count and the visible rows for the 
control.
</short>
<descr>
<p>
<var>GetScrollbarParams</var> is a procedure used to adjust scroll bars using 
the record count for the dataset and the number of visible rows for the 
control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.GetScrollbarParams.aRange">
<short>
Returns the maximum value for the scroll range in scroll bar information.
</short>
</element>
<element name="TCustomDBGrid.GetScrollbarParams.aPage">
<short>
Returns the current page represented by the visible rows in the scroll bar.
</short>
</element>
<element name="TCustomDBGrid.GetScrollbarParams.aPos">
<short>
Returns the current scroll bar position.
</short>
</element>

<element name="TCustomDBGrid.CMGetDataLink">
<short>Handles a CM_GETDATALINK control message for the grid.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomDBGrid.CMGetDataLink.Message">
<short>Control message examined and handled in the method.</short>
</element>

<element name="TCustomDBGrid.ClearSelection">
<short>Clears the current multi-selected rows in the grid control.</short>
<descr>
<p>
If the bookmark list in SelectRows is not empty, its Clear method is called 
to remove all bookmarked rows. No actions are performed in the method under 
the following conditions:
</p>
<ul>
<li>dgPersistentMultiSelect has been included in the Options for the grid 
control.</li>
<li>dgMultiSelect has <b>not</b> been included in the Options for the grid 
control.</li>
</ul>
<p>
If selCurrent contains <b>True</b>, the current row in the DataSet is 
re-selected by making it the current row selection in SelectedRows.
</p>
<p>
ClearSelection is called from the KeyDown method when the next record is made 
without pressing the Shift key to extend the current selection(s).
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.SelectedRows"/>
<link id="TCustomDBGrid.Options"/>
<link id="TCustomDBGrid.KeyDown"/>
<link id="TDBGridOptions"/>
<link id="TBookmarkList"/>
</seealso>
</element>
<element name="TCustomDBGrid.ClearSelection.selCurrent">
<short>
<b>True</b> to re-select the current row after any multi-selections have been 
cleared.
</short>
</element>

<!-- private -->
<element name="TCustomDBGrid.NeedAutoSizeColumns"/>
<element name="TCustomDBGrid.NeedAutoSizeColumns.Result"/>

<element name="TCustomDBGrid.RenewColWidths"/>

<element name="TCustomDBGrid.InternalAutoSizeColumn"/>
<element name="TCustomDBGrid.InternalAutoSizeColumn.ACol"/>
<element name="TCustomDBGrid.InternalAutoSizeColumn.ACanvas"/>
<element name="TCustomDBGrid.InternalAutoSizeColumn.ADatalinkActive"/>

<element name="TCustomDBGrid.DoHeaderClick"/>
<element name="TCustomDBGrid.DoHeaderClick.Index"/>

<!-- protected -->
<element name="TCustomDBGrid.AddAutomaticColumns">
<short>
Automatically adds a column definition for each Field in the dataset.
</short>
<descr>
<p>
<var>AddAutomaticColumns</var> is a procedure used to automatically add 
column definitions for each Field in the DataSet.
</p>
<p>
Please note that AddAutomaticColumns can be performed at run-time only; no 
actions are performed in the method at design-time.
</p>
<p>
AddAutomaticColumns requires an active dataset to access the Fields that must 
be added to the grid control. No actions are performed if the dataset in 
DataLink has not been assigned or marked as Active.
</p>
<p>
AddAutomaticColumns cannot be performed when GridStatus contains either 
gsRemovingAutoColumns or gsLoadingGrid. No actions are performed in the 
method when these values are included in the GridStatus property.
</p>
<p>
AddAutomaticColumns is enabled by including the value dgeAutoColumns in the 
OptionsExtra property. No actions are performed in the method when the 
feature has not been enabled in the OptionsExtra property.
</p>
<p>
AddAutomaticColumns uses DataLink to get the Fields for the dataset, and 
checks the Columns collection to see if a column already exists for each 
Field. If the Field is already in the collection, it is skipped to avoid 
duplicate Fields. Missing Fields are added to Columns using its Add method, 
and sets the IsAutomaticColumn and Visible properties to <b>True</b> for 
each. When missing Fields have been added, the ResetColumnsOrder method in 
Columns is called using the coFieldIndexOrder column ordering option.
</p>
<p>
AddAutomaticColumns updates the GridStatus property prior to adding columns 
to include the value gsAddingAutoColumns. The value is removed from 
GridStatus when adding columns has completed. This prevents the 
TDBGridColumns.Add method from removing automatic columns while the add 
operation is still active.
</p>
<p>
See RemoveAutomaticColumns and OptionsExtra for information about removing 
automatic columns in the Columns collection.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.GridStatus"/>
<link id="TCustomDBGrid.OptionsExtra"/>
</seealso>
</element>

<element name="TCustomDBGrid.AssignTo">
<short>Copies property values to the specified persistent object.</short>
<descr>
<p>
<var>AssignTo</var> is an overridden method in <var>TCustomDBGrid</var> used 
to copy property values from the class instance to the persistent object 
specified in <var>Dest</var>. It prevents the inherited method from being 
called when Dest is a <var>TCustomDBGrid</var> instance. Otherwise, the 
inherited method is called.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.AssignTo">TCustomGrid.AssignTo</link>
</seealso>
</element>
<element name="TCustomDBGrid.AssignTo.Dest">
<short>Persistent object where the property values are stored.</short>
</element>

<element name="TCustomDBGrid.AutoAdjustColumn">
<short>
Adjust properties in the specified column to display the longest value.
</short>
<descr>
<p>
<var>AutoAdjustColumn</var> is an overridden method in 
<var>TCustomDBGrid</var> used to adjust column properties to accommodate the
largest value in the specified column. It re-implements the method from the 
ancestor class.
</p>
<p>
AutoAdjustColumn uses the column definition, or the field from the linked 
dataset, to determine the column or field size needed for the data displayed 
on the control canvas. A temporary TCanvas instance is created and used to 
measure the text width for the column. The calculated width is stored in the 
inherited ColWidths property.
</p>
<remark>
Columns which use the ftMemo field type do not display the content for the 
memo field <b>unless</b> <var>dgDisplayMemoText</var> has been included in 
the <var>Options</var> for the grid control.
</remark>
<p>
AutoAdjustColumn is called from the DblClick method when the values 
goColSizing and goDblClickAutoSize have been included in the Options property.
</p>
<p>
Use AutoAdjustColumns to resize all automatically-sized columns in the 
control.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.AutoAdjustColumns"/>
<link id="TCustomDBGrid.Columns"/>
<link id="TCustomDBGrid.Options"/>
<link id="#lcl.grids.TCustomGrid.AutoAdjustColumn">TCustomGrid.AutoAdjustColumn</link>
<link id="#lcl.grids.TCustomGrid.ColWidths">TCustomGrid.ColWidths</link>
</seealso>
</element>
<element name="TCustomDBGrid.AutoAdjustColumn.ACol">
<short>Column (or field) number affected in the method.</short>
</element>

<element name="TCustomDBGrid.BeforeMoveSelection">
<short>
Performs actions needed before the selected column in the grid is changed.
</short>
<descr>
<p>
<var>BeforeMoveSelection</var> is an overridden method in 
<var>TCustomDbGrid</var> used to perform actions needed before the selected 
column in the grid is changed.
</p>
<p>
<var>DCol</var> and <var>DRow</var> contain the column and row number for the 
cell selection that will be selected following the selection change.
</p>
<p>
BeforeMoveSelection calls the inherited method on entry to signal the 
OnBeforeSelection event handler (when assigned). When DCol is different than 
the value in the Col property, the OnColExit event handler is signalled (when 
assigned). An internal flag is set to indicate that a column enter event is 
pending.
</p>
<p>
BeforeMoveSelection is called from the inherited MoveExtend method.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.BeforeMoveSelection">TCustomGrid.BeforeMoveSelection</link>
</seealso>
</element>
<element name="TCustomDBGrid.BeforeMoveSelection.DCol">
<short>Destination column for the selection change.</short>
</element>
<element name="TCustomDBGrid.BeforeMoveSelection.DRow">
<short>Destination row for the selection change.</short>
</element>

<element name="TCustomDBGrid.BeginLayout">
<short>
<var>BeginLayout</var> starts producing layout changes for the grid control.
</short>
<descr>
<p>
<var>BeginLayout</var> is a procedure which starts producing layout changes 
for the grid control. BeginLayout is used along with EndLayout to minimize 
the number of times layout changed notification events are triggered by the 
control. Layout changes occur when the control enables certain values in its 
Options property, when AutoAdjustColumn is called, and when the Columns 
collection links to Fields in the associated dataset.
</p>
<p>
BeginLayout increments the LayoutChangedCount variable that tracks the number 
of times the method is called for the control. <var>EndLayout</var> 
decrements that counter, and when it reaches 0 (zero), the DoLayoutChanged 
method is called.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.CellClick">
<short>
<var>CellClick</var> calls the <var>OnCellClick</var> event handler if it is
assigned for this particular cell.
</short>
<descr>
<p>
<var>CellClick</var> calls the <var>OnCellClick</var> event handler if it is
assigned for this particular cell.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.CellClick.aCol">
<short>Column number for the click notification.</short>
</element>
<element name="TCustomDBGrid.CellClick.aRow">
<short>Row number for the click notification.</short>
</element>

<element name="TCustomDBGrid.CheckDisplayMemo">
<short>
Indicates if the field is a Memo that needs to be displayed in the grid.
</short>
<descr>
<p>
<var>CheckDisplayMemo</var> is a <var>Boolean</var> function used to 
determine if the specified field is a Memo field that needs to be displayed 
in the grid control. The return value is <b>True</b> when the specified field 
has the value ftMemo in its DataType property, and the Options property 
includes the value dgDisplayMemoText.
</p>
<p>
CheckDisplayMemo is called from various methods which measure or render the 
content for the grid, including:
</p>
<ul>
<li>DefaultDrawCell</li>
<li>DefaultDrawColumnCell</li>
<li>DrawColumnText</li>
<li>GetEditText</li>
<li>GetTruncCellHintText</li>
<li>EditorCanAcceptKey</li>
</ul>
</descr>
<seealso>
<link id="TCustomDBGrid.Options"/>
<link id="#fcl.db.TField.DataType">TField.DataType</link>
</seealso>
</element>
<element name="TCustomDBGrid.CheckDisplayMemo.aField">
<short>Field examined in the method.</short>
</element>
<element name="TCustomDBGrid.CheckDisplayMemo.Result">
<short>
<b>True</b> if the field is a memo field type and the display memo text 
option is enabled.
</short>
</element>

<element name="TCustomDBGrid.InvalidateSizes">
<short>
Makes column sizes invalid, recalculates column sizes and refreshes the 
control.
</short>
<descr>
<p>
<var>InvalidateSizes</var> is a procedure which causes the grid to 
recalculate column sizes and to repaint its display area. InvalidateSizes 
updates the GridFlags for the control to include the value gfVisualChange.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.ColRowMoved">
<short>
Signals event handlers when a row or a column is moved in the grid control.
</short>
<descr>
<p>
<var>ColRowMoved</var> is an overridden procedure used to signal event 
handlers when a row or a column is moved in the grid control. When IsColumn 
contains <b>False</b>, the OnRowMoved event handler is signalled (when 
assigned). When IsColumn contains <b>True</b>, the OnColumnMoved event 
handler is signalled (when assigned) if Columns have not been Enabled in the 
grid control. If Columns have been Enabled, the inherited ColRowMoved method 
is called.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.ColRowMoved">TCustomGrid.ColRowMoved</link>
</seealso>
</element>
<element name="TCustomDBGrid.ColRowMoved.IsColumn">
<short>
<b>True</b> if a column affected in the method. <b>False</b> if a row is 
affected.
</short>
</element>
<element name="TCustomDBGrid.ColRowMoved.FromIndex">
<short>
Original ordinal position for the column or row moved in the method.
</short>
</element>
<element name="TCustomDBGrid.ColRowMoved.ToIndex">
<short>New ordinal position for the column or row moved in the method.</short>
</element>

<element name="TCustomDBGrid.ColumnEditorStyle">
<short>
<var>ColumnEditorStyle</var> gets the button style for the column being 
edited.
</short>
<descr>
<p>
<var>ColumnEditorStyle</var> is a <var>TColumnButtonStyle</var> function used 
to get the button style for the specified column number or Field in the grid 
control. ColumnEditorStyle assumes the default button style is cbsAuto unless 
overridden by settings in the Columns collection or by the Field definition 
in the dataset.
</p>
<p>
ColumnEditorStyle calls ColumnFromGridColumn to get the TColumn instance for 
the specified column number. Its ButtonStyle property is used as the return 
value if Columns has been Enabled. Otherwise, DefaultEditorStyle is called 
for the specified TField to get the return value for the method. 
DefaultEditorStyle will use cbsCheckBoxColumn as the button style when 
dgeCheckboxColumn has been included in the OptionsExtra property.
</p>
<p>
ColumnEditorStyle is used in the implementation of various methods including: 
CellClick, DefaultDrawCell, DefaultDrawColumnCell, EditorByStyle, KeyDown and 
MouseDown.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.ColumnEditorStyle.Result">
<short>Button style for the column or Field.</short>
</element>
<element name="TCustomDBGrid.ColumnEditorStyle.aCol">
<short>Ordinal position for the column or field.</short>
</element>
<element name="TCustomDBGrid.ColumnEditorStyle.F">
<short>TField instance for the specified column number.</short>
</element>

<element name="TCustomDBGrid.CreateColumns">
<short>
Creates the Columns collection for the grid control.
</short>
<descr>
<p>
<var>CreateColumns</var> is an overridden <var>TGridColumns</var> function 
used to create the Columns collection for the grid control. In TDBGrid, the 
Columns collection is implemented using the TDBGridColumns class type (a 
descendant of TGridColumns). CreateColumns creates an instance of 
TDBGridColumns which is used as the return value for the method.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.CreateColumns">TCustomGrid.CreateColumns</link>
</seealso>
</element>
<element name="TCustomDBGrid.CreateColumns.Result">
<short>Columns collection for the grid control.</short>
</element>

<element name="TCustomDBGrid.CreateWnd">
<short>
<var>CreateWnd</var> - creates the window adjusts its layout and adds scroll 
bars when needed.
</short>
<descr></descr>
<seealso>
<link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
</seealso>
</element>

<element name="TCustomDBGrid.DefineProperties">
<short>
Re-implements the inherited method to prevent reading or writing unused 
properties.
</short>
<descr>
<remark>
<var>DefineProperties</var> has an empty implementation and avoids calling 
the inherited DefineProperties method. TCustomGrid defines ColWidths, 
RowHeights and Cells properties which do not use the Columns, Datasource, or 
linked Dataset available in the data-aware grid control. XML configuration 
files are used instead.
</remark>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid">TCustomGrid</link>
</seealso>
</element>
<element name="TCustomDBGrid.DefineProperties.Filer">
<short>Not used in the current implementation.</short>
</element>

<element name="TCustomDBGrid.DefaultDrawCell">
<short>
Default method used to drawing a cell at the specified location.
</short>
<descr>
<p>
<var>DefaultDrawCell</var> is a procedure that provides the default method 
for drawing a cell at the specified location using different cell types. 
DefaultDrawCell draws the background for the cell with the specified drawing 
state. For a cell which appears in a fixed row or column, the text for the 
cell is also drawn.
</p>
<p>
When the DataSet for the grid control has rows, the Field for the specified 
column is retrieved and the cell is drawn using its column editor style. For 
check box columns, the DrawCheckBoxBitmaps is called. For columns with a 
button-style editor, the DrawButtonCell method is used. For Fields with a 
ftMemo data type, the CheckDisplayMemo method is called to determine whether 
the content in the memo or the DisplayText for the column definition is 
drawn. Finally, the DrawCellText method is called to draw the specified cell 
using its state and value.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.DefaultDrawCell.aCol">
<short>Column number for the cell.</short>
</element>
<element name="TCustomDBGrid.DefaultDrawCell.aRow">
<short>Row number for the cell.</short>
</element>
<element name="TCustomDBGrid.DefaultDrawCell.aRect">
<short>Display rectangle for the specified cell.</short>
</element>
<element name="TCustomDBGrid.DefaultDrawCell.aState">
<short>Drawing style for the cell background.</short>
</element>

<element name="TCustomDBGrid.DefaultEditorStyle">
<short>Gets the default editor style for the specified field.</short>
<descr>
<p>
<var>DefaultEditorStyle</var> is a <var>TColumnButtonStyle</var> function 
used to get the default editor style used for the column with the field 
specified in <var>F</var>.
</p>
<p>
The <var>Style</var> argument indicates the preferred editor style, while the 
return value contains the realized editor style. When F is a boolean field, 
and Style is cbsAuto, the return value is set to cbsCheckBoxColumn when 
dgeCheckboxColumn has been included in the Options for the grid control.
</p>
<p>
DefaultEditorStyle is used in the implementation of the ColumnEditorStyle and 
TColumn.GetDefaultAlignment methods.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.ColumnEditorStyle"/>
</seealso>
</element>
<element name="TCustomDBGrid.DefaultEditorStyle.Result">
<short>Actual editor style for the column using the specified field.</short>
</element>
<element name="TCustomDBGrid.DefaultEditorStyle.Style">
<short>Preferred editor style for the field.</short>
</element>
<element name="TCustomDBGrid.DefaultEditorStyle.F">
<short>Dataset field for the editor style.</short>
</element>

<element name="TCustomDBGrid.DoCopyToClipboard">
<short>
Copies the field value for the current column and row to the clipboard.
</short>
<descr>
<p>
<var>DoCopyToClipboard</var> is an overridden method in 
<var>TCustomDBGrid</var> used to copy the field value for the selected column 
and row in the grid to the clipboard. No actions are performed in the method 
when the linked dataset is not active.
</p>
<p>
DoCopyToClipboard calls <var>GetFieldFromGridColumn</var> to get the field 
definition for the current column in the grid. If the field is not <b>Nil</b> 
(unassigned), the String value for the field is stored to the global 
<var>Clipboard</var> instance using its <var>AsText</var> method.
</p>
<p>
DoCopyToClipboard re-implements the method from the ancestor class.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomDBGrid.DoExit">
<short>
<var>DoExit</var> closes the editor and the datalink for the control.
</short>
<descr>
<p>
<var>DoExit</var> is an overridden procedure in TCustomDBGrid used to close 
the editor and the datalink for the control. A valid dataset must be assigned 
in the DataLink property and inserts must be cancellable for the dataset. The 
Options property must include the dgCancelOnExit enumeration value for the 
grid. If any of these conditions are not met, no actions are performed in the 
method on either the dataset or the Field editor.
</p>
<p>
DoExit calls the inherited method to perform any actions implemented in the 
ancestor class.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.DoExit">TWinControl.DoExit</link>
</seealso>
</element>

<element name="TCustomDBGrid.DoMouseWheelDown">
<short>
Handles mouse wheel down events in the grid control.
</short>
<descr>
<p>
<var>DoMouseWheelDown</var> is an overridden <var>Boolean</var> function used 
to handle mouse wheel down events in the grid control. The return value is 
<b>True</b> when the mouse wheel event has been handled in the method. 
DoMouseWheelDown signals the OnMouseWheelDown event handler when it has been 
assigned to handle the mouse event. If OnMouseWheelDown cannot handle the 
mouse event, and the DataLink is marked as Active, DataLink calls its MoveBy 
method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DoMouseWheelDown">TControl.DoMouseWheelDown</link>
</seealso>
</element>
<element name="TCustomDBGrid.DoMouseWheelDown.Result">
<short><b>True</b> when the mouse event is handled in the method.</short>
</element>
<element name="TCustomDBGrid.DoMouseWheelDown.Shift">
<short>Shift state for the mouse wheel event.</short>
</element>
<element name="TCustomDBGrid.DoMouseWheelDown.MousePos">
<short>Location of the mouse wheel event.</short>
</element>

<element name="TCustomDBGrid.DoMouseWheelUp">
<short>
Handles a mouse wheel up event in the grid control.
</short>
<descr>
<p>
<var>DoMouseWheelUp</var> is an overridden <var>Boolean</var> function used 
to handle mouse wheel up events in the grid control. The return value is 
<b>True</b> when the mouse wheel event has been handled in the method. 
DoMouseWheelUp signals the OnMouseWheelUp event handler when it has been 
assigned to handle the mouse event. If OnMouseWheelUp cannot handle the mouse 
event, and the DataLink is marked as Active, DataLink calls its MoveBy method.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.DoMouseWheelUp.Result">
<short><b>True</b> when the mouse event is handled in the method.</short>
</element>
<element name="TCustomDBGrid.DoMouseWheelUp.Shift">
<short>Shift state for the mouse wheel event.</short>
</element>
<element name="TCustomDBGrid.DoMouseWheelUp.MousePos">
<short>Location of the mouse wheel event.</short>
</element>

<element name="TCustomDBGrid.DoOnChangeBounds">
<short>
Calls the inherited method and adjusts the size and layout for the control 
when needed.
</short>
<descr></descr>
<seealso>
<link id="#lcl.controls.TControl.DoOnChangeBounds">TControl.DoOnChangeBounds</link>
</seealso>
</element>

<element name="TCustomDBGrid.DoPrepareCanvas">
<short>
Prepares the canvas and signals the OnPrepareCanvas event handler.
</short>
<descr>
<p>
<var>DoPrepareCanvas</var> is an overridden procedure used to prepare the 
Canvas to draw a cell in the grid control. DoPrepareCanvas applies to data 
cells and performs no actions in the method when aRow refers to a fixed row 
in the control. In addition, DoPrepareCanvas applies only when DefaultDrawing 
contains <b>False</b>. No actions are performed in the method when 
DefaultDrawing is enabled.
</p>
<p>
DoPrepareCanvas calls GetSelectedState to determine if the Canvas is updated 
with brush and font colors used to draw in the specified state. 
DoPrepareCanvas signals the OnPrepareCanvas event handler (when assigned) 
using the specified column number and drawing state.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.DoPrepareCanvas">TCustomGrid.DoPrepareCanvas</link>
</seealso>
</element>
<element name="TCustomDBGrid.DoPrepareCanvas.aCol">
<short>Column number for the operation.</short>
</element>
<element name="TCustomDBGrid.DoPrepareCanvas.aRow">
<short>Row number for the operation.</short>
</element>
<element name="TCustomDBGrid.DoPrepareCanvas.aState">
<short>Drawing state for the operation.</short>
</element>

<element name="TCustomDBGrid.DoLoadColumn">
<short>Loads a column definition from an XML configuration file.</short>
<descr>
<p>
<var>DoLoadColumn</var> is an overridden method in <var>TCustomDBGrid</var> 
used to load the <var>TGridColumn</var> definition for the specified column 
from the XML configuration file in <var>aCfg</var>. Values for the 
<var>FieldName</var> and <var>DisplayFormat</var> properties are read from 
the XML file and stored in <var>aColumn</var>.
</p>
<p>
Calls the inherited method to signal the <var>OnLoadColumn</var> event 
handler (when assigned).
</p>
<p>
DoLoadColumn is called from the <var>LoadColumns</var> and 
<var>LoadContent</var> methods in the ancestor class.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.DoLoadColumn.Sender">
<short>Object instance with the Grid control.</short>
</element>
<element name="TCustomDBGrid.DoLoadColumn.AColumn">
<short>TGridColumn instance loaded in the method.</short>
</element>
<element name="TCustomDBGrid.DoLoadColumn.AColIndex">
<short>Position in the grid for the column definition.</short>
</element>
<element name="TCustomDBGrid.DoLoadColumn.ACfg">
<short>XML configuration file with the definition for the column.</short>
</element>
<element name="TCustomDBGrid.DoLoadColumn.AVersion">
<short>
Version number for the XML storage format in the configuration file.
</short>
</element>
<element name="TCustomDBGrid.DoLoadColumn.APath">
<short>Path to the XML node with the data for the column.</short>
</element>

<element name="TCustomDBGrid.DoSaveColumn">
<short>
Saves the specified column definition to the specified XML configuration file.
</short>
<descr>
<p>
<var>DoSaveColumn</var> is an overridden method in <var>TCustomDBGrid</var>. 
It ensures that AColumn is cast to the TColumn type used in the Columns 
collection, and the FieldName and DisplayFormat properties for the column are 
written to the XML configuration file. It calls the inherited method to 
signal the OnSaveColumn event handler (when assigned).
</p>
<p>
DoSaveColumn is called from the SaveContent method in the TCustomGrid 
ancestor.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Columns"/>
<link id="TColumn.FieldName"/>
<link id="TColumn.DisplayFormat"/>
<link id="#lcl.grids.TCustomGrid.DoSaveColumn">TCustomGrid.DoSaveColumn</link>
<link id="#lcl.grids.TCustomGrid.SaveContent">TCustomGrid.SaveContent</link>
</seealso>
</element>
<element name="TCustomDBGrid.DoSaveColumn.Sender">
<short>Grid control with the column information stored in the method.</short>
</element>
<element name="TCustomDBGrid.DoSaveColumn.AColumn">
<short>
TGridColumn instance with the columnn information stored in the method.
</short>
</element>
<element name="TCustomDBGrid.DoSaveColumn.AColIndex">
<short>Ordinal position for the column in the Columns collection.</short>
</element>
<element name="TCustomDBGrid.DoSaveColumn.ACfg">
<short>XML configuration file where the column information is stored.</short>
</element>
<element name="TCustomDBGrid.DoSaveColumn.AVersion">
<short>
Value for the GRIDFILEVERSION constant used in the implementation.
</short>
</element>
<element name="TCustomDBGrid.DoSaveColumn.APath">
<short>
XPATH-like path where the column information is stored in the XML document.
</short>
</element>

<element name="TCustomDBGrid.DrawAllRows">
<short>
Draws all data rows in grid control.
</short>
<descr>
<p>
DrawAllRows is an overridden procedure used to draw all data rows for the 
control. DrawAllRows checks the DataLink property to determine if a DataSet 
is available for the operation. When DataLink is marked as Active, its 
ActiveRecord is used to reposition the DataSet after the drawing operation is 
completed. DrawAllRows calls the inherited method, and restores the position 
of the DataSet prior to exiting from the method.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.DrawAllRows">TCustomGrid.DrawAllRows</link>
</seealso>
</element>

<element name="TCustomDBGrid.DrawFocusRect">
<short>
Draws the current selection in the grid in a focused state.
</short>
<descr>
<p>
<var>DrawFocusRect</var> is an overridden procedure used to draw the current 
selection in the grid in a focused state.
</p>
<p>
The grid control must have focus before the current selection can be drawn. 
In addition the DataLink for the control must refer to an active dataset. 
DrawFocusRect checks the Options property to ensure that 
dgAlwaysShowSelection has been included for the control. Finally 
DefaultDrawing must be enabled to allow drawing of the focus rectangle using 
the rubber band style on the Canvas for the control.
</p>
<p>
If any of the previous conditions are not met, no actions are performed in 
the method.
</p>
<p>
DrawFocusRect calls CalcFocusRect to get the bounds for the focus rectangle 
adjusted for optional grid lines. The DrawRubberRect method is called to 
render the focus rectangle with the needed borders using the FocusColor for 
the control.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.DrawFocusRect">TCustomGrid.DrawFocusRect</link>
<link id="#lcl.grids.TCustomGrid.CalcFocusRect">TCustomGrid.CalcFocusRect</link>
<link id="#lcl.grids.TCustomGrid.FocusColor">TCustomGrid.FocusColor</link>
</seealso>
</element>
<element name="TCustomDBGrid.DrawFocusRect.aCol">
<short>Column number for the cell drawn with the focus rectangle.</short>
</element>
<element name="TCustomDBGrid.DrawFocusRect.aRow">
<short>Row number for the cell drawn with the focus rectangle.</short>
</element>
<element name="TCustomDBGrid.DrawFocusRect.ARect">
<short>Rectangle for the focus "rubberband" calculated in the method.</short>
</element>

<element name="TCustomDBGrid.DrawRow">
<short>Draws the specified row in the grid control.</short>
<descr>
<p>
<var>DrawRow</var> is an overridden procedure used to draw the specified row 
number in the grid control.
</p>
<p>
ARow contains the row number to be drawn and refers to an ordinal position 
relative to the FixedRows for the control. When ARows contains a value that 
would be in the FixedRows the state flags that track drawing an active record 
or multi-selection are reset. DrawRow also requires that DataLink refer to an 
active dataset. No actions are performed in the method if these conditions 
are not satisfied.
</p>
<p>
DrawRow sets the active record in DataLink for selected rows in the control 
and updates the DrawingActiveRecord and DrawingMultiSelRecord flags as 
needed. The Options property must include the value dgMultiSelect to enable 
drawing of multiple selections in the control.
</p>
<p>
DrawRow calls the inherited method to perform any actions implemented in the 
ancestor class.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.DrawRow">TCustomGrid.DrawRow</link>
</seealso>
</element>

<element name="TCustomDBGrid.DrawCell">
<short>
DrawCell renders the specified grid cell using the specified drawing state.
</short>
<descr>
<p>
<var>DrawCell</var> is an overridden method in <var>TCustomDBGrid</var>. It 
re-implements the method introduced in the ancestor class, and does <b>not</b> 
call the inherited method.
</p>
<p>
DrawCell is used to render a cell at the specified coordinates with the 
specified drawing state. It calls PrepareCanvas to update the settings in the 
control Canvas to use the Color, Brush color and style, and Font typeface and 
style properties needed for the control.
</p>
<p>
DrawCell calls DefaultDrawCell when DefaultDrawing is enabled for the grid 
control. DrawCellBackground is called when DefaultDrawing has not been 
enabled.
</p>
<p>
The DrawCellGrid method is called to render the separator lines for the grid 
control prior to exit.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.DrawCell.ACol">
<short>Column number for the cell.</short>
</element>
<element name="TCustomDBGrid.DrawCell.ARow">
<short>Row number for the cell.</short>
</element>
<element name="TCustomDBGrid.DrawCell.ARect">
<short>Rectangle where the cell is drawn.</short>
</element>
<element name="TCustomDBGrid.DrawCell.AState">
<short>Drawing state for the cell.</short>
</element>

<element name="TCustomDBGrid.DrawCellBackground">
<short>Draws the background for the cell at the specified coordinates.</short>
<descr>
<p>
<var>DrawCellBackground</var> uses the value in aState and the TitleStyle 
property to determine the drawing method for the cell. Fixed cells using the 
native title style are drawn by calling the DrawThemedCell method. Otherwise, 
the FillRect method in the control Canvas is called to draw the cell 
background.
</p>
<p>
DrawCellBackground is called from the DrawCell method.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.DrawCellBackground.ACol">
<short>Column number for the cell drawn in the method.</short>
</element>
<element name="TCustomDBGrid.DrawCellBackground.ARow">
<short>Row number for the cell drawn in the method.</short>
</element>
<element name="TCustomDBGrid.DrawCellBackground.ARect">
<short>Display rectangle for the specified cell.</short>
</element>
<element name="TCustomDBGrid.DrawCellBackground.AState">
<short>Drawing state for the specified cell.</short>
</element>

<element name="TCustomDBGrid.DrawCheckboxBitmaps">
<short>
Draws a check box bitmap for the specified Boolean column.
</short>
<descr>
<p>
<var>DrawCheckboxBitmaps</var> is a procedure used to draw the check box 
bitmap for the specified column. DrawCheckboxBitmaps draws the check box 
bitmap only when the editor for the column is not visible; otherwise, no 
actions are performed in the method.
</p>
<p>
DrawCheckboxBitmaps examines the specified Field argument to ensure that it 
uses a Boolean data type. If the Field IsNull, the value cbGrayed is assigned 
to the aState argument. Otherwise, the TField.AsBoolean method is used to 
determine if aState is set to cbChecked or cbUnChecked. For Fields that do 
not use ftBoolean in the data type, the TField.AsString method is used to 
determine if the Field matches the value in TColumn.ValueChecked or 
TColumn.ValueUnChecked.
</p>
<p>
DrawCheckboxBitmaps signals the DrawCheckboxBitmaps event handler when it has 
been assigned in the control.
</p>
<p>
DrawCheckboxBitmaps calls the DrawGridCheckboxBitmaps method to render the 
check box bitmap with the necessary drawing state.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.DrawCheckboxBitmaps.aCol">
<short>Column number to draw.</short>
</element>
<element name="TCustomDBGrid.DrawCheckboxBitmaps.aRect">
<short>Canvas rectangle for the operation.</short>
</element>
<element name="TCustomDBGrid.DrawCheckboxBitmaps.F">
<short>Field with data for the column.</short>
</element>

<element name="TCustomDBGrid.DrawFixedText">
<short>
Draws the fixed text at the specified row and column numbers.
</short>
<descr>
<p>
<var>DrawFixedText</var> is a procedure used to draw a fixed (or caption) 
cell at the specified row and column numbers. DrawFixedText calls the 
DrawIndicator method for the active record when aCol contains 0 (zero) and 
Options includes the value dgIndicator. Otherwise, the DrawColumnText method 
is called using the arguments passed to the method.
</p>
<p>
DrawFixedText is used in the implementation for the DefaultDrawCell method.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.DrawFixedText.aCol">
<short>Column number to draw.</short>
</element>
<element name="TCustomDBGrid.DrawFixedText.aRow">
<short>Row number to draw.</short>
</element>
<element name="TCustomDBGrid.DrawFixedText.aRect">
<short>Canvas rectangle for the drawing operation.</short>
</element>
<element name="TCustomDBGrid.DrawFixedText.aState">
<short>Drawing state for the operation.</short>
</element>

<element name="TCustomDBGrid.DrawColumnText">
<short>Draws the text for the cell at the specified coordinates.</short>
<descr>
<p>
<var>DrawColumnText</var> is an overridden method in <var>TCustomDBGrid</var> 
used to draw the text for the cell at the position in ACol and ARow.
</p>
<p>
If the cell is a fixed column title, the inherited method is called to render 
the image and /or text for the column header.
</p>
<p>
For data cells,the field type for the cell is checked. For a Memo field, the 
content in the field is used when dgDisplayMemoText has been included in the 
Options property. Otherwise, the DisplayText for the field is used.
</p>
<p>
The DrawCellText method is called to render the text value with the drawing 
state in aState.
</p>
<p>
DrawColumnText is called from the DrawFixedText and DefaultDrawCell methods.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.DrawColumnText.ACol">
<short>Column number for the cell drawn in the method.</short>
</element>
<element name="TCustomDBGrid.DrawColumnText.ARow">
<short>Row number for the cell drawn in the method.</short>
</element>
<element name="TCustomDBGrid.DrawColumnText.ARect">
<short>Display rectangle for the cell.</short>
</element>
<element name="TCustomDBGrid.DrawColumnText.AState">
<short>Grid drawing state for the cell.</short>
</element>

<element name="TCustomDBGrid.DrawIndicator">
<short>
Draws the row indicator for the grid control with cues for dataset and 
multi-selection state.
</short>
<descr>
<p>
<var>DrawIndicator</var> is a method used to draw the row indicator for the 
grid control. The row indicator is a marker which identifies the current row 
selected in the grid control. It may also indicate the current dataset and 
multi-selection states as passed in the Opt and MultiSel arguments.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.DrawIndicator.ACanvas">
<short>Canvas for the control where the row indicator is drawn.</short>
</element>
<element name="TCustomDBGrid.DrawIndicator.R">
<short>Cell rectangle where the row indicator is drawn.</short>
</element>
<element name="TCustomDBGrid.DrawIndicator.Opt">
<short>
Current TDataSetState value representing the state for the dataset.
</short>
</element>
<element name="TCustomDBGrid.DrawIndicator.MultiSel">
<short><b>True</b> if multi-selection is enabled for the grid control.</short>
</element>

<element name="TCustomDBGrid.EditingColumn">
<short>
<var>EditingColumn</var> sets or resets the column being edited in the 
control.
</short>
<descr>
<p>
<var>EditingColumn</var> is a procedure used to set or reset the column being 
edited in the control .
</p>
<p>
aCol indicates the ordinal column number and is stored internally for use in 
other methods of the control. Ok indicates that editing is active when set 
and causes the DataLink to set its Modified flag to <b>True</b>. When Ok 
contains <b>False</b> the internal column number is reset to its default 
value indicating that no column is currently being edited.
</p>
<p>
EditingColumn is used in the implementation of other methods in the grid 
control such as UpdateData, EditorCancelEditing, EditorIsReadOnly, and DoExit.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.UpdateData">TCustomDBGrid.UpdateData</link>
<link id="TCustomDBGrid.EditorCancelEditing">TCustomDBGrid.EditorCancelEditing</link>
<link id="TCustomDBGrid.EditorIsReadOnly">TCustomDBGrid.EditorIsReadOnly</link>
<link id="TCustomDBGrid.DoExit">TCustomDBGrid.DoExit</link>
</seealso>
</element>
<element name="TCustomDBGrid.EditingColumn.aCol">
<short>
Ordinal column number for the column with the active editor control.
</short>
</element>
<element name="TCustomDBGrid.EditingColumn.Ok">
<short>
<b>True</b> if the column number is invalid and should be reset to the 
uninitialized value (-1).
</short>
</element>

<element name="TCustomDBGrid.EditorCancelEditing">
<short>
<var>EditorCancelEditing</var> cancels pending changes and disables the 
editor.
</short>
<descr>
<p>
<var>EditorCancelEditing</var> is a procedure used to cancel pending changes 
and to halt the editing process.
</p>
<p>
EditorCancelEditing calls the EditingColumn method to disable the editor in 
the currently selected cell for the control. The EditorMode property is 
cleared when set, but is restored if the Options property includes the value 
dgAlwaysShowEditor.
</p>
<p>
EditorCancelEditing is used in the implementation of methods like DoOperation 
MoveSel and MouseDown.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.EditorDoGetValue">
<short>
<var>EditorDoGetValue</var> gets the value used in the editor for the control.
</short>
<descr>
<p>
<var>EditorDoGetValue</var> is an overridden procedure used to get the value 
used in the editor for the control. EditorDoGetValue calls the inherited 
EditorDoGetValue method. UpdateData is called to retrieve the value for the 
editor from its column in the underlying dataset.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.EditorDoGetValue">TCustomGrid.EditorDoGetValue</link>
</seealso>
</element>

<element name="TCustomDBGrid.EditorCanAcceptKey">
<short>
<var>EditorCanAcceptKey</var> determines if the specified character can be 
applied to the Field for the editor.
</short>
<descr>
<p>
<var>EditorCanAcceptKey</var> is an overridden Boolean function which 
determines if the cell editor can accept the character specified in 
<var>ch</var>. EditorCanAcceptKey requires that the linked dataset be active 
to access the SelectedField for the control. The Field cannot be an 
AutoIncrement, Lookup, Calculated, or Blob Field type. The return value is 
<b>False</b> if any of these conditions are not satisfied.
</p>
<p>
EditorCanAcceptKey calls the IsValidChar routine to determine if the 
UTF8-encoded value in ch can be applied to the dataset for the control.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.EditorCanAcceptKey">TCustomGrid.EditorCanAcceptKey</link>
</seealso>
</element>
<element name="TCustomDBGrid.EditorCanAcceptKey.ch">
<short>Key to examine in the method.</short>
</element>
<element name="TCustomDBGrid.EditorCanAcceptKey.Result">
<short><b>True</b> when the character can be applied to the field.</short>
</element>

<element name="TCustomDBGrid.EditorIsReadOnly">
<short>
<var>EditorIsReadOnly</var> determines if the editor can be enabled for the 
selected cell in the control.
</short>
<descr>
<p>
<var>EditorIsReadOnly</var> is a Boolean function used to determine if the 
editor can be enabled for the selected cell in the control.
</p>
<p>
EditorIsReadOnly calls the inherited method to ensure that requirements from 
the ancestor class are respected. If the ancestor class returns <b>True</b> 
no actions are performed in the method.
</p>
<p>
EditorIsReadOnly locates the TField used to store data for the selected cell, 
and calls its CanModify method to determine if the Field can be modified. 
Additional logic is applied for lookup Fields; the TField.KeyFields for the 
Field are also examined to determine if any of them are marked as read-only.
</p>
<p>
EditorIsReadOnly ensures the dataset in DataLink is in edit mode. The 
GridStatus property is updated to include gsStartEditing prior to changing 
the dataset state, and removed from GridStatus after the dataset state has 
changed.
</p>
<p>
EditorIsReadOnly calls the EditingColumn method to synchronize the cell 
editor state to the value returned by the method.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.EditorIsReadOnly">TCustomGrid.EditorIsReadOnly</link>
</seealso>
</element>
<element name="TCustomDBGrid.EditorIsReadOnly.Result">
<short><b>True</b> when an editor cannot modify the select cell.</short>
</element>

<element name="TCustomDBGrid.EditorTextChanged">
<short>Applies a changed value from a cell Editor to the grid control.</short>
<descr>
<p>
<var>EditorTextChanged</var> is an overridden method in 
<var>TCustomDBGrid</var>. It re-implements the method from the ancestor 
class, and does not call the inherited method.
</p>
<p>
EditorTextChanged is used to apply a cell value which was modified in the 
Editor for the control to the field with the value for the cell. The modified 
value is stored in a temporary buffer by calling SetEditText, and is 
eventually applied to the database field in the UpdateData method.
</p>
<p>
EditorTextChanged is called from methods in cell editor classes, like 
TStringCellEditor and TPickListCellEditor, when their Change or Select 
methods are executed.
</p>
<p>
The cell value is not updated when the grid control or the cell Editor has 
its ReadOnly property set to <b>True</b>.
</p>
<p>
EditorTextChanged calls the EditingColumn method prior to exit to update both 
the column number changed in the grid and the Modified property in the 
DataLink for the control.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.EditorIsReadOnly"/>
<link id="TCustomDBGrid.SetEditText"/>
<link id="TCustomDBGrid.EditingColumn"/>
<link id="TCustomDBGrid.UpdateData"/>
</seealso>
</element>
<element name="TCustomDBGrid.EditorTextChanged.ACol">
<short>Column number for the cell value applied in the method.</short>
</element>
<element name="TCustomDBGrid.EditorTextChanged.ARow">
<short>Row number for the cell value applied in the method.</short>
</element>
<element name="TCustomDBGrid.EditorTextChanged.AText">
<short>Text applied to the specified cell in the grid control.</short>
</element>

<element name="TCustomDBGrid.EndLayout">
<short>
<var>EndLayout</var> finishes layout changes for the control.
</short>
<descr>
<p>
<var>EndLayout</var> is a procedure used along with BeginLayout to minimize 
the number of times layout changed notification events are triggered by the 
control. Layout changes occur when the control enables certain values in its 
Options property when AutoAdjustColumn is called and when the Columns 
collection links to Fields in the associated dataset.
</p>
<p>
The grid maintains an internal counter that tracks the number of times 
BeginLayout has been called to start a layout change for the control. 
EndLayout decrements that counter, and when it reaches 0 (zero), the 
DoLayoutChanged method is called.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.BeginLayout"/>
<link id="TCustomDBGrid.LayoutChanged"/>
<link id="TCustomDBGrid.Options"/>
<link id="TCustomDBGrid.AutoAdjustColumn"/>
<link id="TDBGridColumns.LinkFields"/>
<link id="TDBGridColumns.Update"/>
</seealso>
</element>

<element name="TCustomDBGrid.FieldIndexFromGridColumn">
<short>
<var>FieldIndexFromGridColumn</var> returns the index for the database Field 
corresponding to the stated grid column.
</short>
<descr>
<p>
<var>FieldIndexFromGridColumn</var> returns the index for the database Field 
corresponding to the stated grid column.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.FieldIndexFromGridColumn.Result">
<short>Position of the field for the specified column.</short>
</element>
<element name="TCustomDBGrid.FieldIndexFromGridColumn.Column">
<short>Column to locate in the fields for the control.</short>
</element>

<element name="TCustomDBGrid.FirstGridColumn">
<short>
Gets the position for the first column in the grid control after the optional 
row indicator column.
</short>
<descr>
<p>
The return value is <b>1</b> when dgIndicator has been included in the 
Options for the grid control. Otherwise, the return value is <b>0</b>.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Options"/>
<link id="TDBGridOptions"/>
<link id="TDBGridOption"/>
</seealso>
</element>
<element name="TCustomDBGrid.FirstGridColumn.Result">
<short>Ordinal position for the first data column in the grid.</short>
</element>

<element name="TCustomDBGrid.GetBufferCount">
<short>
Gets the number of rows to buffer in the grid control.
</short>
<descr>
<p>
<var>GetBufferCount</var> is a virtual Integer function used to get the 
number of rows to buffer for display in the grid control. The return value 
contains the number of rows that can be displayed using the DefaultRowHeight 
for the control. The return value is decreased by 1 when column titles are 
enabled in the Options property with the dgTitles enumeration value.
</p>
<p>
GetBufferCount is called from the UpdateBufferCount method.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetBufferCount.Result">
<short>Number of data rows visible in the grid control.</short>
</element>

<element name="TCustomDBGrid.GetCellHintText">
<short>Gets the hint text for a data cell in the grid control.</short>
<descr>
<p>
<var>GetCellHintText</var> is an overridden method in 
<var>TCustomDBGrid</var>. It re-implements the method from the ancestor class 
to ignore fixed title cells when getting the hint text. The OnGetCellHint 
event handler is signalled (when assigned) to get the cell hint text used in 
the return value.
</p>
<p>
GetCellHintText does <b>not</b> call the inherited method.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.GetCellHintText.Result">
<short>Hint text for the specified cell.</short>
</element>
<element name="TCustomDBGrid.GetCellHintText.ACol">
<short>Column number for the cell.</short>
</element>
<element name="TCustomDBGrid.GetCellHintText.ARow">
<short>Row number for the cell.</short>
</element>

<element name="TCustomDBGrid.GetDefaultColumnAlignment">
<short>
Gets the default alignment for the column.
</short>
<descr>
<p>
<var>GetDefaultColumnAlignment</var> is an overridden <var>TAlignment</var> 
function used to get the default alignment for data at the specified column 
number. GetDefaultColumnAlignment gets the TField for the specified column 
when assigned, and uses its Alignment property as the return value for the 
method. The value taLeftJustify is used when a TField cannot be found for the 
specified column number.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetDefaultColumnAlignment.Result">
<short>Default alignment for the column.</short>
</element>
<element name="TCustomDBGrid.GetDefaultColumnAlignment.Column">
<short>Column number to use from the dataset.</short>
</element>

<element name="TCustomDBGrid.GetDefaultColumnWidth">
<short>
Gets the default width for the specified column.
</short>
<descr>
<p>
<var>GetDefaultColumnWidth</var> is an overridden <var>Integer</var> function 
used to get the default width for the specified column number. 
GetDefaultColumnWidth calls the DefaultFieldColWidth method for the specified 
column. The return value is the width of the column calculate using either 
the display name or the display width for the TField in the column.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetDefaultColumnWidth.Result">
<short>Default width of the column.</short>
</element>
<element name="TCustomDBGrid.GetDefaultColumnWidth.Column">
<short>Column number to use for the calculation.</short>
</element>

<element name="TCustomDBGrid.GetDefaultColumnReadOnly">
<short>
Gets the default ReadOnlyvalue for the specified column.
</short>
<descr>
<p>
<var>GetDefaultColumnReadOnly</var> is an overridden <var>Boolean</var> 
function used to get the ReadOnly value for the grid control. 
GetDefaultColumnReadOnly determines the effective read only status for the 
control using the ReadOnly property, as well as the DataLink property and the 
TField used for the specified column.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetDefaultColumnReadOnly.Result">
<short><b>True</b> when the column cannot be modified.</short>
</element>
<element name="TCustomDBGrid.GetDefaultColumnReadOnly.Column">
<short>Column number to examine.</short>
</element>

<element name="TCustomDBGrid.GetDefaultColumnTitle">
<short>
Gets the default title displayed for the specified column.
</short>
<descr>
<p>
<var>GetDefaultColumnTitle</var> is an overridden <var>String</var> function 
used to get the default title displayed for the specified column number. 
GetDefaultColumnTitle gets the TField used for the column (when available) 
and uses its DisplayName as the return value for the method. The return value 
is an empty String ('') when a TField instance is not available for the 
specified column.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetDefaultColumnTitle.Result">
<short>Default title for the column.</short>
</element>
<element name="TCustomDBGrid.GetDefaultColumnTitle.Column">
<short>Column number to locate in the Fields for the grid control.</short>
</element>

<element name="TCustomDBGrid.GetDefaultRowHeight">
<short>
Get the default row height for records displayed in the grid.
</short>
<descr>
<p>
<var>GetDefaultRowHeight</var> is an overridden <var>Integer</var> function 
used to get the default row height for records displayed in the grid control. 
GetDefaultRowHeight calls the inherited GetDefaultRowHeight method to get the 
return value for the method. The calculated row height is decreased by 2 
pixels to allow space for borders on the editors overlaid onto the grid 
control.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.GetDefaultRowHeight">TCustomGrid.GetDefaultRowHeight</link>
</seealso>
</element>
<element name="TCustomDBGrid.GetDefaultRowHeight.Result">
<short>Default height for records displayed in the control.</short>
</element>

<element name="TCustomDBGrid.GetDsFieldFromGridColumn">
<short>
<var>GetDsFieldFromGridColumn</var> returns the identity of the dataset Field 
corresponding to the nominated grid column.
</short>
<descr>
<p>
<var>GetDsFieldFromGridColumn</var> returns the identity of the dataset Field 
corresponding to the nominated grid column.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetDsFieldFromGridColumn.Result">
<short>Field to use for the specified column.</short>
</element>
<element name="TCustomDBGrid.GetDsFieldFromGridColumn.Column">
<short>Column with the field to locate in the method.</short>
</element>

<element name="TCustomDBGrid.GetEditMask">
<short>
<var>GetEditMask</var> gets the EditMask for the Field at the specified Row 
and Column.
</short>
<descr>
<p>
<var>GetEditMask</var> is an overridden <var>String</var> function used to 
get the EditMask for the TField that reads and writes data for specified Row 
and Column.
</p>
<p>
The linked dataset for the grid control must be active to access the Field 
definition at the specified column number. GetEditMask calls the 
GetFieldFromGridColumn method to get the TField instance with the EditMask 
for the column.
</p>
<p>
The return value can contain an empty string ('') is the dataset is not 
active, or a Field cannot be located for the specified column, or the 
EditMask has not been assigned in the Field definition.
</p>
<p>
GetEditMask signals the OnFieldEditMask event handler when it has been 
assigned for the control. Use OnFieldEditMask to return a user-specified 
value for the EditMask.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.GetEditMask">TCustomGrid.GetEditMask</link>
</seealso>
</element>
<element name="TCustomDBGrid.GetEditMask.Result">
<short>Edit mask for the specified cell.</short>
</element>
<element name="TCustomDBGrid.GetEditMask.aCol">
<short>Column in the grid.</short>
</element>
<element name="TCustomDBGrid.GetEditMask.aRow">
<short>Row in the grid.</short>
</element>

<element name="TCustomDBGrid.GetEditText">
<short>
<var>GetEditText</var> gets the Text value for the specified Field.
</short>
<descr>
<p>
<var>GetEditText</var> is an overridden <var>String</var> function used to 
get the Text value for the Field at the specified Row and Column.
</p>
<p>
GetEditText requires that the linked dataset for the control be active to 
access its Field definitions. GetEditText calls the GetFieldFromGridColumn 
method to get the TField instance that provides the textual representation of 
the value for the Field. GetEditText calls the CheckDisplayMemo method to 
determine if a Field with the ftMemo data type displays its content or the 
string literal in its Text property <var>'(Memo)'</var>.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetEditText.Result">
<short>Text value displayed for the specified cell.</short>
</element>
<element name="TCustomDBGrid.GetEditText.aCol">
<short>Column in the grid`</short>
</element>
<element name="TCustomDBGrid.GetEditText.aRow">
<short>Row in the grid.</short>
</element>

<element name="TCustomDBGrid.GetFieldFromGridColumn">
<short>
<var>GetFieldFromGridColumn</var> obtain the Field either from a Db column or 
directly from dataset Fields.
</short>
<descr>
<p>
<var>GetFieldFromGridColumn</var> obtain the Field either from a Db column or 
directly from dataset Fields.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetFieldFromGridColumn.Result">
<short>Field for the specified column.</short>
</element>
<element name="TCustomDBGrid.GetFieldFromGridColumn.Column">
<short>Column to locate in the method.</short>
</element>

<element name="TCustomDBGrid.GetGridColumnFromField">
<short>
<var>GetGridColumnFromField</var> - gets the corresponding grid column for 
the given Field.
</short>
<descr>
<p>
<var>GetGridColumnFromField</var> - gets the corresponding grid column for 
the given Field.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetGridColumnFromField.Result">
<short>Column for the specified field.</short>
</element>
<element name="TCustomDBGrid.GetGridColumnFromField.F">
<short>Field to locate in the grid columns.</short>
</element>

<element name="TCustomDBGrid.GetImageForCheckBox">
<short>
Gets the bitmap displayed for a check box at the specified location.
</short>
<descr>
<p>
<var>GetImageForCheckBox</var> is an overridden <var>TBitmap</var> function 
used to get the bitmap displayed for a check box at the specified location in 
the grid control. GetImageForCheckBox calls the inherited GetImageForCheckBox 
method using the passed arguments to get the return value. 
GetImageForCheckBox signals the OnUserCheckboxBitmap event handler when it 
has been assigned in the control to allow overriding the TBitmap used for the 
desired TCheckboxState.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GetImageForCheckBox.Result">
<short>Bitmap to display for the check box column.</short>
</element>
<element name="TCustomDBGrid.GetImageForCheckBox.aCol">
<short>Column number for the cell.</short>
</element>
<element name="TCustomDBGrid.GetImageForCheckBox.aRow">
<short>Row number for the cell.</short>
</element>
<element name="TCustomDBGrid.GetImageForCheckBox.CheckBoxView">
<short>Check box state for the column.</short>
</element>
<element name="TCustomDBGrid.GetImageForCheckBox.ImageList">
<short>Images for the check box states.</short>
</element>
<element name="TCustomDBGrid.GetImageForCheckBox.ImageIndex">
<short>Ordinal position for the image.</short>
</element>
<element name="TCustomDBGrid.GetImageForCheckBox.Bitmap">
<short>Bitmap for the check box.</short>
</element>

<element name="TCustomDBGrid.GetIsCellSelected">
<short>
Determines if the cell at the specified location is currently selected.
</short>
<descr>
<p>
<var>GetIsCellSelected</var> is an overridden <var>Boolean</var> function 
used to determine if the cell at the specified location is currently 
selected. GetIsCellSelected calls the inherited method to get the return 
value, and also examines the value in DrawingMultiSelRecord. The return value 
is <b>True</b> when the cell is either selected or multi-selected (when 
enabled).
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.GetIsCellSelected">TCustomGrid.GetIsCellSelected</link>
</seealso>
</element>
<element name="TCustomDBGrid.GetIsCellSelected.Result">
<short>
<b>True</b> when the specified cell is selected or multi-selected.
</short>
</element>
<element name="TCustomDBGrid.GetIsCellSelected.aCol">
<short>Column number to examine.</short>
</element>
<element name="TCustomDBGrid.GetIsCellSelected.aRow">
<short>Row number to examine.</short>
</element>

<element name="TCustomDBGrid.GetIsCellTitle">
<short>
Determines whether the specified cell is a fixed title cell for the grid 
control.
</short>
<descr>
<p>
<var>GetIsCellTitle</var> is an overridden method in 
<var>TCustomDBGrid</var>. It re-implements the method from the ancestor class 
to ensure that the Columns collection has been enabled for the control, and 
that the specified row number is in the fixed rows for the control. The 
return is <b>False</b> if Columns.Enabled is <b>False</b>, FixedRows contains 
0, or ARow has a value other than 0.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.GetIsCellTitle.Result">
<short>
<b>True</b> if the specified column and row numbers are for a fixed title 
cell in the grid.
</short>
</element>
<element name="TCustomDBGrid.GetIsCellTitle.ACol">
<short>Column number for the cell examine in the method.</short>
</element>
<element name="TCustomDBGrid.GetIsCellTitle.ARow">
<short>Row number for the cell examine in the method.</short>
</element>

<element name="TCustomDBGrid.GetSelectedState">
<short>
Determines if a selection is available using the Focus and Options properties 
for the control.
</short>
<descr>
<p>
<var>GetSelectedState</var> is an overridden method in 
<var>TCustomDBGrid</var>, and calls the inherited method on entry to get the 
value used in the IsSelected argument. It extends the inherited method to 
change IsSelected to <b>False</b> if the control is not Focused or 
dgAlwaysShowSelection has not been included in the Options for the grid 
control.
</p>
<p>
See TCustomGrid.GetSelectedState for the actions performed in the ancestor 
class.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Options"/>
<link id="#lcl.grids.TCustomGrid.GetSelectedState">TCustomGrid.GetSelectedState</link>
<link id="#lcl.grids.TCustomGrid.Focused">TCustomGrid.Focused</link>
<link id="TGridDrawState">TGridDrawState</link>
</seealso>
</element>
<element name="TCustomDBGrid.GetSelectedState.AState">
<short>TGridDrawState for the selection in the grid control.</short>
</element>
<element name="TCustomDBGrid.GetSelectedState.IsSelected">
<short>
Returns <b>True</b> if the grid as focus and active selection in the State 
property.
</short>
</element>

<element name="TCustomDBGrid.GetSmoothScroll">
<short>Gets the smooth scroll setting for the horizontal scroll bar.</short>
<descr>
<p>
<var>GetSmoothScroll</var> is an overridden method in 
<var>TCustomDBGrid</var>. It determines whether the smooth scroll setting 
(goSmoothScroll) has been included in the Options for the grid control.
</p>
<p>
The return value is always <b>False</b> when the Which argument refers to the 
vertical scroll bar (SB_Vert). If Which contains SB_Horz, the inherited 
method is called to check the Options for the control. The return value is 
<b>True</b> if goSmoothScroll has been included in the Options property.
</p>
</descr>
<seealso>
<link id="TCustomDbGrid.Options"/>
<link id="TDbGridOptions"/>
<link id="TDbGridOption"/>
</seealso>
</element>
<element name="TCustomDBGrid.GetSmoothScroll.Result">
<short>
<b>True</b> if the option has been enabled for the horizontal scroll bar.
</short>
</element>
<element name="TCustomDBGrid.GetSmoothScroll.Which">
<short>
Integer value which identifies the scroll bar checked for the control setting.
</short>
</element>

<element name="TCustomDBGrid.GetTruncCellHintText">
<short>
Gets the truncated hint text for the specified cell.
</short>
<descr>
<p>
<var>GetTruncCellHintText</var> is an overridden method in 
<var>TCustomDBGrid</var>. It re-implements the method from the ancestor 
class, and does <b>not</b> call the inherited method.
</p>
<p>
GetTruncCellHintText is used to get the truncated hint text (shortened with 
an Ellipsis appended) for the cell specified in the ACol and ARow arguments. 
No actions are performed in the method if ARow is one of the FixedRows for 
the grid control; the return value is an empty string ('') in this situation.
</p>
<p>
GetTruncCellHintText calls GetFieldFromGridColumn to get the TField instance 
which provides the data for the column in ACol. The DataType for the TField 
instance determines the content stored in the return value. For example:
</p>
<dl>
<dt>ftMemo</dt>
<dd>
Uses the field value in the cell hint text when dgDisplayMemoText has been 
included in the Options property.
</dd>
<dt>ftBlob</dt>
<dd>
Causes the value <b>'(blob)'</b> to be used in the cell hint text.
</dd>
</dl>
<p>
Other values in DataType cause the DisplayText for the field to be be used as 
the cell hint text.
</p>
<p>
The OnGetCellHint event handler is signalled (when assigned) if 
CellHintPriority is set to chpTruncOnly. This allows the TColumn instance for 
the cell to be used to override the value for the cell hint text or to 
truncate the value to a specific length.
</p>
<p>
GetTruncCellHintText is called from the ShowCellHintWindow method in the 
ancestor class.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.GetTruncCellHintText.Result">
<short>Contains the hint text for the cell derived in the method.</short>
</element>
<element name="TCustomDBGrid.GetTruncCellHintText.ACol">
<short>Column number for the cell hint text.</short>
</element>
<element name="TCustomDBGrid.GetTruncCellHintText.ARow">
<short>Row number for the cell hint text.</short>
</element>

<element name="TCustomDBGrid.GridCanModify">
<short>
Indicates if the DataLink is active and allows editing in the grid control.
</short>
<descr>
<p>
<var>GridCanModify</var> indicates if the DataLink is active, and allows 
editing. The return value is <b>True</b> when all of the following conditions 
are satisfied:
</p>
<ul>
<li>DataLink is Active.</li>
<li>The CanModify property for the Dataset in DataLink is <b>True</b>.</li>
<li>The ReadOnly property for the DataLink is <b>False</b>.</li>
<li>The ReadOnly property for the control is set to <b>False</b>.</li>
<li>dgEditing has been included in the Options for the control.</li>
</ul>
<p>
GridCanModify is called from the KeyDown method, and used in the 
implementation of private methods in the grid control.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.GridCanModify.Result">
<short><b>True</b> when the grid can be modified.</short>
</element>

<element name="TCustomDBGrid.GetSBVisibility">
<short>
Determines the visibility of the horizontal and vertical scroll bars for the 
control.
</short>
<descr>
<p>
<var>GetSBVisibility</var> is an overridden procedure used to determine the 
visibility of horizontal and vertical scroll bars for the control. 
GetSBVisibility calls the inherited method to use the logic implemented in 
the ancestor class. GetSBVisibility overrides the value used for the vertical 
scroll bar; it is set to <b>True</b> when ScrollBars contains ssVertical or 
ssBoth. ScrollBarAutomatic is called when the vertical scroll bar is not 
visible, and the GetScrollbarParams method is used to update the vertical 
scroll bar settings.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.GetSBVisibility">TCustomGrid.GetSBVisibility</link>
</seealso>
</element>
<element name="TCustomDBGrid.GetSBVisibility.HsbVisible">
<short>Returns the visibility for the horizontal scroll bar.</short>
</element>
<element name="TCustomDBGrid.GetSBVisibility.VsbVisible">
<short>Returns the visibility for the vertical scroll bar.</short>
</element>

<element name="TCustomDBGrid.GetSBRanges" link="#lcl.grids.TCustomGrid.GetSBRanges"/>
<element name="TCustomDBGrid.GetSBRanges.HsbVisible"/>
<element name="TCustomDBGrid.GetSBRanges.VsbVisible"/>
<element name="TCustomDBGrid.GetSBRanges.HsbRange"/>
<element name="TCustomDBGrid.GetSBRanges.VsbRange"/>
<element name="TCustomDBGrid.GetSBRanges.HsbPage"/>
<element name="TCustomDBGrid.GetSBRanges.VsbPage"/>

<element name="TCustomDBGrid.HeaderClick">
<short>
Performs actions needed when a column header is clicked or dragged for the 
grid control.
</short>
<descr>
<p>
<var>HeaderClick</var> is an overridden method in <var>TCustomDBGrid</var>. 
It reimplements the method introduced in TCustomGrid to call the private 
DoHeaderClick method when a column header is clicked (IsColumn is 
<b>True</b>). This causes the OnTitleClick event handler to be signalled 
(when assigned) if a column has been defined for the column number in Index.
</p>
<p>
HeaderClick does <b>not</b> call the inherited method.
</p>
<p>
HeaderClick is called from the inherited MouseUp and DialogChar methods.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.OnTitleClick"/>
<link id="#lcl.grids.TCustomGrid.HeaderClick">TCustomGrid.HeaderClick</link>
<link id="#lcl.grids.TCustomGrid.MouseUp">TCustomGrid.MouseUp</link>
<link id="#lcl.grids.TCustomGrid.DialogChar">TCustomGrid.DialogChar</link>
</seealso>
</element>
<element name="TCustomDBGrid.HeaderClick.IsColumn">
<short>
<b>True</b> if the click notification is for a column. <b>False</b> if the 
notification is for a row.
</short>
</element>
<element name="TCustomDBGrid.HeaderClick.Index">
<short>Ordinal position in Columns for the column click notification.</short>
</element>

<element name="TCustomDBGrid.HeaderSized">
<short>
Updates Columns in the control when a a header cell is resized.
</short>
<descr>
<p>
<var>HeaderSized</var> is an overridden procedure which updates the Columns 
for the control when a header cell is resized. If IsColumn contains 
<b>False</b> the resize operation was for the height of a header row and no 
action is performed in the method. When IsColumn contains <b>True</b> the 
request applies to the width of the column with the Field at the position 
specified in Index.
</p>
<p>
HeaderSized calls the ColumnIndexFromGridColumn method to determine the 
position in the Columns collection for the Field specified in Index. The 
width in Columns is updated with the corresponding value from ColWidths. 
HeaderSized sets the value in DefaultColWidths to <b>False</b> to indicate 
that custom column sizing has been applied to the control.
</p>
<p>
HeaderSized signals the OnColumnSized event handler when assigned for the 
control.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.HeaderSized">TCustomGrid.HeaderSized</link>
</seealso>
</element>
<element name="TCustomDBGrid.HeaderSized.IsColumn">
<short>Sizing applies to a column and not a row.</short>
</element>
<element name="TCustomDBGrid.HeaderSized.Index">
<short>Ordinal position for the column.</short>
</element>

<element name="TCustomDBGrid.IsColumnVisible">
<short>
Indicates if the specified column is visible using the column definition or 
its display width.
</short>
<descr>
<p>
<var>IsColumnVisible</var> is a <var>Boolean</var> function which indicates 
if the specified column number is a visible column for the grid control. 
IsColumnVisible uses the Columns collection (when Enabled) to get  the 
TColumn instance at the specified position. Its Visible property is used as 
the the return value for the method. When Columns is not used in the control, 
the ColWidths property is checked to ensure that the specified column number 
has a positive non-zero width.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Columns"/>
<link id="TColumn"/>
<link id="#lcl.grids.TGridColumn">TGridColumn</link>
<link id="#lcl.grids.TCustomGrid.ColWidths">TCustomGrid.ColWidths</link>
</seealso>
</element>
<element name="TCustomDBGrid.IsColumnVisible.Result">
<short>
<b>True</b> if the specified column number is a visible column for the grid 
control.
</short>
</element>
<element name="TCustomDBGrid.IsColumnVisible.ACol">
<short>Position for the column examined in the method.</short>
</element>

<element name="TCustomDBGrid.IsValidChar">
<short>
<var>IsValidChar</var> indicates if the specified Field contains the 
specified UTF-8 character.
</short>
<descr>
<p>
<var>IsValidChar</var> is a Boolean function that indicates if the Field 
specified in <var>AField</var> contains the UTF-8 encoded character in 
<var>AChar</var>. No action is required (or performed) when <var>AChar</var> 
contains a single byte character.
</p>
<p>
Please note that TField does not contain a method which verifies a Unicode 
character. This routine converts a multi-byte Unicode character using 
UTF8ToSys and calls the TField.IsValidChar method to validate.
</p>
<p>
IsValidChar returns <b>True</b> when TField.IsValidChar returns the same or 
when AChar contains the <var>BackSpace (Decimal 8)</var> character.
</p>
</descr>
</element>

<element name="TCustomDBGrid.KeyDown">
<short>
<var>KeyDown</var> handles special keys and signals the <var>OnKeyDown</var> 
event handler.
</short>
<descr>
<p>
<var>KeyDown</var> ensures that keys which affect navigation and editing 
operations are handled in the grid control. KeyDown handles the following 
keys:
</p>
<dl>
<dt>Tab</dt>
<dd>
Advances to the next column when dgTabs is included in Options. Otherwise 
exits the control.
</dd>
<dt>Shift + Tab</dt>
<dd>
Moves to the previous column when dgTabs is included in Options. Otherwise 
exits the control.
</dd>
<dt>Return</dt>
<dd>
Enables the editor for the cell when dgEditing is included in Options. 
Otherwise advances to the next column.
</dd>
<dt>Ctrl + Delete</dt>
<dd>
Deletes the selected row when dgDisableDelete has not been included in 
Options. A confirmation dialog is displayed when dgConfirmDelete is included 
in Options.
</dd>
<dt>Up</dt>
<dd>
Moves to the previous row in the dataset. The currently selected column 
remains the same.
</dd>
<dt>Down</dt>
<dd>
Moves to the next row in the dataset. The currently selected column remains 
the same. Appends a new row when positioned at the end of the dataset and 
dgDisableInsert has <b>not</b> been included in Options.
</dd>
<dt>Shift + Up</dt>
<dd>
When dgMultiSelect and dgPersistentMultiSelect have been included in the grid 
Options, SelectedRows is extended to include a bookmark to the preceding row 
in the grid control (when available). If multi-select has not been enabled in 
Options, the current selection in the control is cleared and the new row is 
selected.
</dd>
<dt>Shift + Down</dt>
<dd>
When dgMultiSelect and dgPersistentMultiSelect have been included in the grid 
Options, SelectedRows is extended to include a bookmark to the next row in 
the grid control (when available). If multi-select has not been enabled in 
Options, the current selection in the control is cleared and the new row is 
selected.
</dd>
<dt>Page Up</dt>
<dd>
Moves towards the beginning of the dataset by the number of rows specified in 
VisibleRows.
</dd>
<dt>Page Down</dt>
<dd>
Moves towards the end of the dataset by the number of rows specified in 
VisibleRows.
</dd>
<dt>Escape</dt>
<dd>
Cancels an active editor for the selected cell. Clears pending modifications 
to the Field for the column.
</dd>
<dt>Insert</dt>
<dd>
Inserts a new row at the current row position when dgDisableInsert has not 
been included in Options. The actual position for the new row can change if 
the dataset has sorting or ordering capabilities.
</dd>
<dt>Home</dt>
<dd>
Changes the selected cell to first non-fixed column in the control. An active 
editor is removed.
</dd>
<dt>Ctrl + Home</dt>
<dd>
Moves to the first row in the dataset. An active editor is removed.
</dd>
<dt>End</dt>
<dd>
Changes the selected cell to the last visible column in the control. An 
active editor is removed.
</dd>
<dt>Ctrl + End</dt>
<dd>
Moves to the last row in the dataset. An active editor is removed.
</dd>
<dt>Space</dt>
<dd>
Toggles the value in a column which uses a check box editor.
</dd>
<dt>Ctrl + Multiply (Num Pad *)</dt>
<dd>
Toggles the selected state for the current row when dgMultiSelect is included 
in Options.
</dd>
</dl>
<p>
<var>KeyDown</var> reads and writes values in GridFlags as needed while 
handling cell editors and performing dataset navigation.
</p>
<p>
<var>KeyDown</var> calls the inherited <var>KeyDown</var> method to process 
keys not explicitly handled by the data-aware control.
</p>
<p>
<var>KeyDown</var> signals the <var>OnKeyDown</var> event handler when it has 
been assigned for the control.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.KeyDown.Key">
<short>Key code examined in the method.</short>
</element>
<element name="TCustomDBGrid.KeyDown.Shift">
<short>Shift, Ctrl, or Alt modifier for the key.</short>
</element>

<element name="TCustomDBGrid.LinkActive">
<short>
<var>LinkActive</var> updates the control after a change to the state of its 
DataLink.
</short>
<descr>
<p>
<var>LinkActive</var> is a procedure which updates the control when the state 
of its DataLink is changing. Value contains <b>False</b> when the dataset for 
the DataLink will be closed. The state change causes updates to other control 
properties like SelectedRows which tracks the selected rows in the linked 
dataset. LinkActive calls RemoveAutomaticColumns to remove automatic columns 
added to the control when the DataLink became active. The LayoutChanged 
method is called to refresh the control after updates to the Columns property.
</p>
<p>
No actions are performed in the method when Value contains <b>True</b>.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.LinkActive.Value">
<short><b>True</b> when the dataset is open.</short>
</element>

<element name="TCustomDBGrid.LayoutChanged">
<short>
<var>LayoutChanged</var> links columns to Fields and inserts any required 
automatic columns.
</short>
<descr>
<p>
<var>LayoutChanged</var> is a virtual procedure used to link Columns to the 
Fields which read and write the values used in the control. LayoutChanged 
calls the TDBGridColumns.LinkFields method establish the column-to-field 
association. If Columns have not been explicitly defined the 
AddAutomaticColumns method is called to add a column for each Field in the 
linked dataset.
</p>
<p>
LayoutChanged calls the BeginLayout and EndLayout methods to minimize the 
number of times the OnLayoutChange event is signalled during updates to the 
control.
</p>
<p>
LayoutChanged performs no actions when ComponentState indicates the control 
is being destroyed (contains csDestroying).
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.Loaded">
<short>
Performs layout operations after the control is loaded at run-time.
</short>
<descr>
<p>
<var>Loaded</var> performs the notification that signals component streaming 
has been completed at run-time. Loaded calls the LayoutChanged method to 
update the visual appearance of the control. Loaded calls the inherited 
Loaded method
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>

<element name="TCustomDBGrid.LoadGridOptions">
<short>
Loads values for the Options property from the specified XML configuration 
file.
</short>
<descr>
<p>
<var>LoadGridOptions</var> is an overridden method in 
<var>TCustomDBGrid</var>. It re-implements the method introduced in 
TCustomGrid to read and capture the TDbGridOption values used the Options 
property for the class instance. It does <b>not</b> call the inherited method.
</p>
<p>
LoadGridOptions is called from the LoadContent method in the ancestor class.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Options"/>
<link id="TDBGridOptions"/>
<link id="TDBGridOption"/>
<link id="#lcl.grids.TCustomGrid.LoadContent">TCustomGrid.LoadContent</link>
</seealso>
</element>
<element name="TCustomDBGrid.LoadGridOptions.cfg">
<short>XML configuration file loaded in the method.</short>
</element>
<element name="TCustomDBGrid.LoadGridOptions.Version">
<short>Version number for the values in the specified file.</short>
</element>

<element name="TCustomDBGrid.MoveSelection">
<short>
<var>MoveSelection</var> changes the current selection in the control.
</short>
<descr>
<p>
<var>MoveSelection</var> causes the current selection in the control to be 
changed. MoveSelection calls the inherited MoveSelection method. If the 
selection change causes a different column to become active, the OnColEnter 
event handler is signalled (when assigned). MoveSelection calls the 
UpdateActive method to ensure that the correct row and/or column are drawn in 
the control.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.MoveSelection">TCustomGrid.MoveSelection</link>
</seealso>
</element>

<element name="TCustomDBGrid.MouseButtonAllowed">
<short>
Indicates whether the specified mouse button can be handled when mouse down 
messages are processed for for the grid control.
</short>
<descr>
<p>
<var>MouseButtonAllowed</var> is an overridden method in 
<var>TCustomDBGrid</var> used to determine whether the specified mouse button 
can be handled by the grid control. It re-implements the method from the 
ancestor class, and does not call the inherited method.
</p>
<p>
The return value is <b>True</b> when the DataLink is Active, and Button 
contains mbLeft or dgAnyButtonCanSelect has been included in the Options for 
the control.
</p>
<p>
MouseButtonAllowed is called when mouse button events are handled in the 
MouseDown method.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DataLink"/>
<link id="TCustomDBGrid.Options"/>
<link id="TCustomDBGrid.MouseDown"/>
<link id="TComponentDataLink"/>
<link id="TDbGridOptions"/>
<link id="TDbGridOption"/>
<link id="#fcl.db.TDataLink.Active">TDataLink.Active</link>
</seealso>
</element>
<element name="TCustomDBGrid.MouseButtonAllowed.Result">
<short>
<b>True</b> if the specified mouse button is handled in the class instance. 
<b>False</b> if the mouse button is processed by the ancestor class.
</short>
</element>
<element name="TCustomDBGrid.MouseButtonAllowed.Button">
<short>Mouse button checked in the method.</short>
</element>

<element name="TCustomDBGrid.MouseDown">
<short>
Handles mouse down messages in the control and signals the 
<var>OnMouseDown</var> event handler.
</short>
<descr>
<p>
<var>MouseDown</var> handles mouse button clicks (when allowed) in the 
control. MouseDown ensures that the specified Button and State are correctly 
applied to the control similar to the processing provided in KeyDown method. 
MouseDown translates screen coordinates into the row and column numbers used 
in the control and performs actions needed for focus selection, editing or 
navigation.
</p>
<p>
No actions are performed in the method at design-time, when GridStatus 
contains gsUpdatingData, or when the specified Button is not allowed by the 
grid Options or the linked dataset state.
</p>
<p>
If the control is not already focused, SetFocus is called. MouseDown signals 
the OnMouseDown event handler when assigned in the class instance.
</p>
<dl>
<dt>
Left Mouse Button (or any mouse button when dgAnyButtonCanSelect is in 
Options)
</dt>
<dd>Clears the row Selection if already selected in the grid. </dd>
<dt>Right Mouse Button</dt>
<dd>Toggles the selected row in the control, or opens the PopupMenu when 
assigned.</dd>
<dt>Ctrl + Left Mouse Button</dt>
<dd>Toggles the row in the current SelectedRows.</dd>
</dl>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.MouseDown.Button">
<short>Mouse button examined in the method.</short>
</element>
<element name="TCustomDBGrid.MouseDown.Shift">
<short>Shift / Ctrl / Alt modifier for the mouse button.</short>
</element>
<element name="TCustomDBGrid.MouseDown.X">
<short>Horizontal coordinate for the mouse button click.</short>
</element>
<element name="TCustomDBGrid.MouseDown.Y">
<short>Vertical coordinate for the mouse button click.</short>
</element>

<element name="TCustomDBGrid.MouseMove">
<short>
Signals the OnMouseMove event handler for the grid control.
</short>
<descr>
<p>
<var>MouseMove</var> is an overridden procedure used to signal the 
<var>OnMouseMove</var> event handler for the grid control. It signals the 
OnMouseMove event handler when <var>GridState</var> contains the value 
<var>gsSelecting</var>, and the Dragging flag has not been set. Otherwise, 
the inherited <var>MouseMove</var> method is called in the method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
</seealso>
</element>

<element name="TCustomDBGrid.PrepareCanvas">
<short>
Prepares the Canvas to render the specified cell with the drawing state in 
aState.
</short>
<descr>
<p>
<var>PrepareCanvas</var> is an overridden method in TCustomDBGrid. It ensures 
that the <var>Canvas</var> is configured to use the drawing state in 
<var>aState</var>. PrepareCanvas calls the inherited PrepareCanvas method, 
and sets the brush color in the Canvas to the value needed for fixed or 
focused / selected columns.
</p>
<p>
PrepareCanvas is called from the DrawCell method. It occurs before default 
drawing is performed, and before the OnDrawColumnCell or OnDrawColumnTitle 
event handlers are signalled.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DrawCell"/>
<link id="TCustomDBGrid.OnDrawColumnCell"/>
<link id="TCustomDBGrid.OnDrawColumnTitle"/>
<link id="TCustomDBGrid.OnDrawColumnTitle"/>
<link id="TCustomDBGrid.OnPrepareCanvas"/>
<link id="TCustomDBGrid.DoPrepareCanvas"/>
<link id="#lcl.grids.TCustomGrid.PrepareCanvas">TCustomGrid.PrepareCanvas</link>
<link id="#lcl.grids.TCustomGrid.DoPrepareCanvas">TCustomGrid.DoPrepareCanvas</link>
</seealso>
</element>
<element name="TCustomDBGrid.PrepareCanvas.aCol">
<short>Column number for the cell.</short>
</element>
<element name="TCustomDBGrid.PrepareCanvas.aRow">
<short>Row number for the cell.</short>
</element>
<element name="TCustomDBGrid.PrepareCanvas.aState">
<short>Grid draw state for the cell.</short>
</element>

<element name="TCustomDBGrid.PrepareCellHints">
<short>Sets the active record in the grid to the specified row.</short>
<descr>
<p>
PrepareCellHints is called from ShowCellHintWindow in the ancestor class, and 
occurs before the various cell hint formats are derived.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomDBGrid.PrepareCellHints.ACol">
<short>Column number for the cell.</short>
</element>
<element name="TCustomDBGrid.PrepareCellHints.ARow">
<short>Row number for the cell.</short>
</element>

<element name="TCustomDBGrid.RemoveAutomaticColumns">
<short>
Removes automatic columns added to the grid control.
</short>
<descr>
<p>
<var>RemoveAutomaticColumns</var> is a procedure used to remove automatic 
columns added to the grid control in the AddAutomaticColumns method. 
Automatic columns are generated at run-time when the value dgeAutoColumns is 
included in the OptionsExtra property. The feature cannot be enabled at 
design-time. No actions are performed in the method at design-time.
</p>
<p>
RemoveAutomaticColumns uses the Columns property to execute its 
RemoveAutoColumns method which removes the automatic columns in the 
collection.
</p>
<p>
RemoveAutomaticColumns is used in the implementation of the LinkActive and 
the SetExtraOptions methods.
</p>
<p>
Use the OptionsExtra property to control adding and removing automatic 
columns at run-time.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.SaveGridOptions">
<short>
Saves values in the Options property to the specified XML configuration file.
</short>
<descr>
<p>
<var>SaveGridOptions</var> is an overridden method in 
<var>TCustomDBGrid</var>. It re-implements the method from the ancestor class 
and does <b>not</b> call the inherited method.
</p>
<p>
SaveGridOptions is used to store the values for settings in the Options 
property to the XML configuration file in Cfg. SaveGridOptions is called from 
the SaveContent method in the ancestor class.
</p>
<p>
See LoadGridOptions and LoadContent for the actions performed to restore the 
saved Option values.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Options"/>
<link id="TCustomDBGrid.LoadGridOptions"/>
<link id="#lcl.grids.TCustomGrid.SaveContent">TCustomGrid.SaveContent</link>
<link id="#lcl.grids.TCustomGrid.LoadContent">TCustomGrid.LoadContent</link>
</seealso>
</element>
<element name="TCustomDBGrid.SaveGridOptions.Cfg">
<short>XML configuration file where the values are stored.</short>
</element>

<element name="TCustomDBGrid.SelectEditor">
<short>
Gets the editor used for the SelectedField in the control.
</short>
<descr>
<p>
<var>SelectEditor</var> is a procedure used to get the editor used for the 
SelectedField in the control. SelectEditor requires an active dataset in 
DataLink to access properties and methods in SelectedField. SelectEditor uses 
SelectedField to get the maximum length of the Field in the dataset and 
stores the value in the Editor for the control.
</p>
<p>
SelectEditor calls the Inherited SelectEditor method to initialize the class 
used in the Editor property. SelectEditor signals the OnSelectEditor event 
handler (when assigned) to get a custom value for the Editor property. Please 
note that Editor is set to <b>Nil</b> if the OnSelectEditor event handler is 
not assigned for the control.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.SelectEditor">TCustomGrid.SelectEditor</link>
</seealso>
</element>

<element name="TCustomDBGrid.SetEditText">
<short>
Sets the textual value for the editor in the specified cell.
</short>
<descr>
<p>
SetEditText sets the textual value for the editor in the specified cell.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.SetEditText">TCustomGrid.SetEditText</link>
</seealso>
</element>
<element name="TCustomDBGrid.SetEditText.ACol">
<short>Column number for the cell updated in the method.</short>
</element>
<element name="TCustomDBGrid.SetEditText.ARow">
<short>Row number for the cell updated in the method.</short>
</element>
<element name="TCustomDBGrid.SetEditText.Value">
<short>New value for the cell.</short>
</element>

<element name="TCustomDBGrid.SetFixedCols">
<short>Sets the value for the FixedCols property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomDBGrid.SetFixedCols.AValue">
<short>New value for the FixedCols property.</short>
</element>

<element name="TCustomDBGrid.UnprepareCellHints">
<short>
Restores the record that was active when PrepareCellHints was called.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomDBGrid.UpdateActive">
<short>
<var>UpdateActive</var> redraws the control when the active row in the 
dataset is changed.
</short>
<descr>
<p>
<var>UpdateActive</var> causes the control to be redrawn when the active row 
in the linked dataset is changed. UpdateActive requires an active dataset in 
DataLink with a selected record. No actions are performed in the method when 
the dataset is closed or contains no rows. UpdateActive calls InvalidateCell 
when the selected row in the control has changed. InvaidateRow is called to 
update the selected row in the control.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.UpdateAutoSizeColumns">
<short>
Calculates the width for auto-sized columns and refreshes the grid control.
</short>
<descr>
<p>
<var>UpdateAutoSizeColumns</var> is a method used to auto-size columns in the 
grid and redraw the control. No actions are performed in the method if 
gsAutoSized is already present in the GridStatus property. This occurs when 
UpdateAutoSizeColumns has already been called, and the columns have already 
been resized.
</p>
<p>
UpdateAutoSizeColumns visits each of the non-fixed Columns on the grid 
control. It uses both the TField and TGridColumn definitions for each column 
to determine its size. The TGridColumn instance in Columns provides the title 
and font used to measure the column header. The TField instance in the column 
definition provides the value for the field and its storage size when the 
data link is active for the control.
</p>
<p>
A temporary TCanvas instance is used to calculate the width for the text 
displayed in each of the columns.
</p>
<p>
UpdateAutoSizeColumns includes the value gsAutoSized in the GridStatus 
property when the resizing operation has been completed. The control is 
refreshed prior to exiting from the method.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.GridStatus"/>
<link id="TCustomDBGrid.Columns"/>
<link id="TCustomDBGrid.DataLink"/>
<link id="TGridColumn"/>
</seealso>
</element>

<element name="TCustomDBGrid.UpdateData">
<short>
<var>UpdateData</var> is used to perform pending updates for the selected 
cell.
</short>
<descr>
<p>
<var>UpdateData</var> is a virtual procedure used to perform pending updates 
for the selected cell to its Field in the grid DataSet. No action is 
performed if the selected cell has not been modified (or cannot be modified) 
or the DataSet is not in edit mode.
</p>
<p>
UpdateData ensures that the appropriate method is used to update Field data 
based on the TField.FieldKind for the modified column. Special handling is 
provided for lookup Fields to check the cached lookup list or to retrieve the 
lookup result using its key Fields.
</p>
<p>
UpdateData calls the EditingColumn method to disable the editing flag for the 
column prior to exit.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.UpdateGridCounts">
<short>
Gets the total number of visible columns or fields for the grid control.
</short>
<descr>
<p>
<var>UpdateGridCounts</var> is an Integer function which gets the total 
number of visible columns (or fields) in the grid control.
</p>
<p>
UpdateGridCounts calls GetColumnCount to get the number of entries in the 
Columns collection. When Columns have been defined, and DataLink is Active, 
the RecCount and RowCount variables are updated. If Columns is not used, the 
fields in the linked dataset or checked for the number of visible TField 
entries.
</p>
<p>
The UpdateGridColumnSizes method is used to adjust the sizes for the columns. 
If the linked dataset is Active, and a Row is Selected, the 
AdjustEditorBounds method is called.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.UpdateGridCounts.Result">
<short>
Number of visible columns or fields defined for the grid control.
</short>
</element>

<element name="TCustomDBGrid.WMVScroll">
<short>
Handles the LM_VScroll message for the control.
</short>
<descr>
<p>
<var>WMVScroll</var> is a method used to handle a LM_VScroll message for the 
control. It ensures that the dataset for control is repositioned for the 
window message. No actions are performed in the method if the DataLink for 
the control is not active.
</p>
<p>
WMVScroll checks the ScrollCode member in Message to determine the actions 
performed in the method. The following scroll code values are handled:
</p>
<dl>
<dt>SB_TOP</dt>
<dd>Moves the dataset in DataLink to the first row.</dd>
<dt>SB_BOTTOM</dt>
<dd>Moves the dataset in DataLink to the last row.</dd>
<dt>SB_PAGEUP</dt>
<dd>
Moves the dataset in DataLink towards the beginning of the file. 
VisibleRowCount contains the number of rows.
</dd>
<dt>SB_LINEUP</dt>
<dd>Moves the dataset in DataLink towards the beginning of the file by one 
row.</dd>
<dt>SB_LINEDOWN</dt>
<dd>Moves the dataset in DataLink towards the end of the file by one row.</dd>
<dt>SB_PAGEDOWN</dt>
<dd>
Moves the dataset in DataLink towards the end of the file. VisibleRowCount 
contains the number of rows.
</dd>
<dt>SB_THUMBPOSITION</dt>
<dd>
Repositions the dataset in DataLink when the thumb bar position for the 
control has been changed.
</dd>
<dt>SB_THUMBTRACK</dt>
<dd>
Repositions the dataset in DataLink when thumb bar tracking has been enabled 
in the Options for the control. No actions are performed if the dataset is 
not sequenced, the message has already been handled for the SB_THUMBPOSITION 
scroll message, or thumb bar tracking has not been enabled in options.
</dd>
</dl>
<p>
Other scroll code values in Message are ignored.
</p>
<p>
WMVScroll calls ScrollBarPosition to update the position for the vertical 
scroll bar on the control. If EditorMode is enabled, the private 
RestoreEditor method is called to toggle the value in EditorMode and 
redraw the editor control.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DataLink"/>
<link id="TCustomDBGrid.WndProc"/>
<link id="#lcl.grids.TCustomGrid.WMVScroll">TCustomGrid.WMVScroll</link>
<link id="#lcl.grids.TCustomGrid.ScrollBarPosition">TCustomGrid.ScrollBarPosition</link>
<link id="#lcl.grids.TCustomGrid.EditorMode">TCustomGrid.EditorMode</link>
<link id="#lcl.grids.TCustomGrid.WndProc">TCustomGrid.WndProc</link>
</seealso>
</element>
<element name="TCustomDBGrid.WMVScroll.Message">
<short>Window message examined and handled in the method.</short>
</element>

<element name="TCustomDBGrid.WndProc">
<short>
Extends the message processing loop for the database grid control.
</short>
<descr>
<p>
<var>WndProc</var> is an overridden method in <var>TCustomDBGrid</var>. It 
ensures that LM_SETFOCUS messages are handled properly when gsUpdatingData 
has been included in the GridStatus property. This includes using the LCL 
interface to give focus to the active Editor control, and selecting its 
content.
</p>
<p>
WndProc calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.GridStatus"/>
<link id="#lcl.grids.TCustomGrid.EditorMode">TCustomGrid.EditorMode</link>
<link id="#lcl.grids.TCustomGrid.Editor">TCustomGrid.Editor</link>
<link id="#lcl.grids.TCustomGrid.WndProc">TCustomGrid.WndProc</link>
</seealso>
</element>
<element name="TCustomDBGrid.WndProc.TheMessage">
<short>Window message examined and handled in the method.</short>
</element>

<element name="TCustomDBGrid.Columns">
<short>
Columns provides access to columns defined for the database grid control.
</short>
<descr>
<p>
<var>Columns</var> is a <var>TDBGridColumns</var> property that provides 
access to columns defined for the database grid control. Columns reimplements 
the property defined in the ancestor class. The items in the collection are 
represented as TColumn instances which are derived from TGridColumn. The 
TColumn instances include additional properties and methods which identify 
the field name, TField instance, and display format for the column. The 
properties defined in TGridColumn are also available.
</p>
<p>
TColumn instances in Columns can be explicitly created in the IDE at 
design-time, or automatically added when the OptionsExtra property includes 
the value dgeAutoColumns.
</p>
<p>
Use of the Columns property is not required. When left empty, the fields 
displayed on the grid and their attributes are retrieved directly from the 
linked dataset in DataLink. When columns are not used, properties like 
FirstColumn, LastColumn, and SelectColumn always contain <b>Nil</b>.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.OptionsExtra"/>
<link id="TCustomDBGrid.DataLink"/>
<link id="TCustomDBGrid.DataSource"/>
<link id="TDBGridColumns"/>
<link id="TColumn"/>
<link id="#lcl.grids.TGridColumn">TGridColumn</link>
<link id="#fcl.db.TField">TField</link>
</seealso>
</element>

<element name="TCustomDBGrid.FixedRowsExtra">
<short>
Reserves additional rows in the fixed header area for the control.
</short>
<descr>
<p>
<var>FixedRowsExtra</var> is an <var>Integer</var> property which indicates 
the number of additional rows reserved at the bottom of the fixed header rows 
in the database grid control. The default value for the property is <b>0</b>, 
and reserves <b>NO</b> additional rows.
</p>
<p>
Changing the value for the property causes the LayoutChanged method to be 
called. This may affect the linked data fields for the control and / or the 
automatic columns displayed on the grid control.
</p>
<p>
FixedRowsExtra is used in the UpdateGridCounts method when dgTitles has been 
included in the Options for the control, and causes the specified number of 
rows to be added after the column headers row and before the data cells in 
the grid.
</p>
</descr>
<seealso>
<link id="TCustomDbGrid.LayoutChanged"/>
<link id="TCustomDbGrid.UpdateGridCounts"/>
</seealso>
</element>

<element name="TCustomDBGrid.GridStatus">
<short>
Stores status information about operations active for the grid control.
</short>
<descr>
<p>
<var>GridStatus</var> is a TDBGridStatus property which stores status 
information for the grid control. GridStatus is a set type that can contain 0 
(zero) or more values from the TDbGridStatusItem enumeration, and indicate 
operations occurring in the control at run-time. Values in GridStatus are 
added and removed in several methods for the grid control to prevent 
duplicate calls the method while the operation is active.
</p>
<p>
See TDbGridStatusItem for more information about the values in the 
enumeration and their meanings.
</p>
</descr>
<seealso>
<link id="TDbGridStatus"/>
<link id="TDbGridStatusItem"/>
</seealso>
</element>

<element name="TCustomDBGrid.Datalink">
<short>
Datalink for the component with event handlers for the linked dataset.
</short>
<descr>
<p>
<var>Datalink</var> is a read-only <var>TComponentDataLink</var> property 
which provides access to the linked data source and dataset for the grid. It 
contains event handlers signalled when the actions occur for the data source 
or dataset. It allows access to the values for the DataSource and DataSet 
properties for the control, as well as the Columns defined for the control.
</p>
<p>
DataLink is created and configured in the Create constructor; event handlers 
for the grid control are assigned to the corresponding event handlers in 
DataLink.
</p>
</descr>
<seealso>
<link id="TComponentDataLink"/>
</seealso>
</element>

<element name="TCustomDBGrid.Options">
<short>
Contains the optional features or behaviors that are enabled for the grid 
control.
</short>
<descr>
<p>
<var>Options</var> is a <var>TDBGridOptions</var> property that specifies 
features or behaviors that can be enabled or disabled by values stored in the 
property. Please note that these options are different than the TGridOption 
values used in the ancestor class. Options can contain zero (0) or more 
values from the TDBGridOption enumeration.
</p>
<p>
Options contains the following default values when the control is created:
</p>
<ul>
<li>dgColumnResize</li>
<li>dgColumnMove</li>
<li>dgTitles</li>
<li>dgIndicator</li>
<li>dgRowLines</li>
<li>dgColLines</li>
<li>dgConfirmDelete</li>
<li>dgCancelOnExit </li>
<li>dgTabs</li>
<li>dgEditing</li>
<li>dgAlwaysShowSelection</li>
</ul>
<p>
One value commonly included in Options is dgDisplayMemoText. This allows memo 
fields (those using the ftMemo data type) to display their actual content 
instead of the '(Memo)' string literal.
</p>
<p>
See TDBGridOption for more information about values in the enumeration and 
their meanings.
</p>
<p>
Changing value(s) in Options may cause other values in the set to be removed. 
For instance: row selection. Enabling row selection forces the options for 
editing, always displaying the editor, and row highlighting to be removed from 
the Options property.
</p>
<p>
New values assigned to the property may cause other aspects of the grid 
control to be updated to reflect the change(s). For example, removing 
multi-selection from the Options property forces the SelectedRows property to 
be cleared.
</p>
<p>
The TDBGridOption values stored in Options are different than the TGridOption 
values used in the ancestor class. As a result, SetOptions (the write access 
specifier) must translate any TDBGridOption values to their TGridOption 
equivalents and store them in the inherited Options property.
</p>
</descr>
<seealso>
<link id="TDBGridOptions"/>
<link id="TDBGridOption"/>
<link id="#lcl.grids.TGridOptions">TGridOptions</link>
<link id="#lcl.grids.TGridOption">TGridOption</link>
<link id="#lcl.grids.TGridOptions2">TGridOptions2</link>
</seealso>
</element>

<element name="TCustomDBGrid.OptionsExtra">
<short>
Contains the extra options enabled for the database grid control.
</short>
<descr>
<p>
<var>OptionsExtra</var> is a TDBGridExtraOptions property used to store extra 
options enabled for the grid control. OptionsExtra is a set data type which 
can contain 0 (zero) or more values from the TDBGridExtraOption enumeration. 
The default values in the property include dgeAutoColumns and 
dgeCheckboxColumn. These values enable the use of automatic columns 
definitions from the linked dataset and displaying check boxes for Boolean 
columns.
</p>
<p>
SetExtraOptions is the write access specifier for the property, and ensures 
that the grid control is updated to reflect values added to or removed from 
the set.
</p>
</descr>
<seealso>
<link id="TDBGridExtraOptions"/>
<link id="TDBGridExtraOption"/>
</seealso>
</element>

<element name="TCustomDBGrid.ReadOnly">
<short>
Indicates if modifications are allowed in the grid control.
</short>
<descr>
<p>
<var>ReadOnly</var> is a <var>Boolean</var> property that indicates if 
modifications are allowed in the grid control. Please note that ReadOnly 
applies to the visual grid control only. It does not take into account 
whether Fields in Columns or the DataSet in DataSource allow modifications.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.SelectedRows">
<short>
<var>SelectedRows</var> are the recorded rows in a bookmark list.
</short>
<descr>
<p>
<var>SelectedRows</var> is a read-only <var>TBookmarkList</var> property used 
to store TBookmark instance for one or more rows selected in the grid 
control. SelectedRows will normally contain a single TBookmark entry in its 
Items property for a selected row. However, multiples entry can exist when 
multi-selection is enabled by including the value dgMultiSelect in the 
Options property.
</p>
<p>
SelectedRows is updated when methods which perform record navigation call the 
DrawRow, SelectRecord or ToggleSelectedRow methods.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.OnCellClick">
<short>
Event handler signalled for a mouse click in a grid column.
</short>
<descr>
<p>
<var>OnCellClick</var> is a <var>TDBGridClickEvent</var> property that 
contains the event handler signalled when a mouse button is clicked in a cell 
for the grid control. Assign a procedure to the OnCellClick property to 
respond to mouse click messages in a column for the grid control. The column 
number for the clicked cell is passed as an argument to the handler routine.
</p>
<p>
OnCellClick is signalled from the CellClick method, and occurs for Left mouse 
button clicks only.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.CellClick"/>
<link id="TDBGridClickEvent"/>
</seealso>
</element>

<element name="TCustomDBGrid.OnColEnter">
<short>
Event handler signalled when the mouse enters a column.
</short>
<descr>
<p>
<var>OnColEnter</var> is a <var>TNotifyEvent</var> property that implements 
the event handler signalled when the mouse enters a column for the grid 
control. OnColEnter is also signalled when the grid control gains focus. 
Assign a procedure to the property to allow responding to the notification 
event.
</p>
<p>
OnColEnter is triggered from the <var>MoveSelection</var> method.
</p>
</descr>
</element>

<element name="TCustomDBGrid.OnColExit">
<short>
Event handler signalled when the mouse exits a column.
</short>
<descr>
<p>
<var>OnColExit</var> is a <var>TNotifyEvent</var> property that implements 
the event handler signalled when the mouse exits a column in the grid 
control. OnColExit is also signalled when the grid control loses focus. 
Assign a procedure to the property to allow responding to the notification 
event.
</p>
<p>
OnColExit is triggered from the <var>BeforeMoveSelection</var> method.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.OnColumnMoved">
<short>
Event handler signalled when the order of a column is changed.
</short>
<descr>
<p>
<var>OnColumnMoved</var> is a <var>TMovedEvent</var> property that implements 
an event handler signalled when the order of a column in the grid control is 
changed. Assign a procedure to the event handler to respond to the event 
notification. OnColumnMoved is triggered from the <var>ColRowMoved</var> 
method after the new column ordering has been applied.
</p>
<p>
Use <var>OnRowMoved</var> to responding to row ordering notification events.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.OnColumnSized">
<short>
Event handler signalled when a grid column has been resized.
</short>
<descr>
<p>
<var>OnColumnSized</var> is a TNotifyEvent property that implements the event 
handler signalled when a column has been resized. OnColumnSized allows the 
application to perform actions required after the column has been resized. 
Assign a procedure to the event handler to respond to the event notification.
</p>
<p>
OnColumnSized is triggered from the HeaderSized method when a change to a 
column width was requested.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.OnDrawColumnCell">
<short>
Event handler signalled when a cell needs to be drawn.
</short>
<descr>
<p>
<var>OnDrawColumnCell</var> is a <var>TDrawColumnCellEvent</var> property 
that implements the event handler signalled when a cell in the control needs 
to be drawn. Assign a procedure to the event handler to perform drawing 
needed for the cell using the arguments to the routine.
</p>
<p>
OnDrawColumnCell is triggered from the <var>DrawCell</var> method after the 
Canvas is prepared and any fixed cell or DefaultDrawing is performed. Please 
note that OnDrawColumnCell is not performed at design-time, or for fixed rows 
in the grid control.
</p>
</descr>
<seealso>
<link id="TDrawColumnCellEvent">TDrawColumnCellEvent</link>
</seealso>
</element>

<element name="TCustomDBGrid.OnDrawColumnTitle">
<short>
Event handler signalled when a cell title needs to be drawn.
</short>
<descr>
<p>
<var>OnDrawColumnTitle</var> is a <var>TDrawColumnCellEvent</var> property 
that implements the event handler signalled when a cell title in the control 
needs to be drawn. Assign a procedure to the event handler to perform drawing 
needed for the cell title using the arguments to the routine.
</p>
</descr>
<seealso>
<link id="TDrawColumnCellEvent">TDrawColumnCellEvent</link>
</seealso>
</element>

<element name="TCustomDBGrid.OnFieldEditMask">
<short>
Event handler signalled to get the edit mask for a Field.
</short>
<descr>
<p>
<var>OnFieldEditMask</var> is a <var>TGetDbEditMaskEvent</var> property that 
implements the event handler signalled to get the edit mask used for a Field 
in the grid control. OnFieldEditMask allows overriding the edit mask assigned 
to a Field in the Columns property, or assigning an edit mask for Fields that 
do not already have one. Assign a procedure to the event handler to respond 
to the event notification.
</p>
<p>
OnFieldEditMask is triggered from the <var>GetEditMask</var> method when the 
DataSet in DataLink is active.
</p>
</descr>
</element>

<element name="TCustomDBGrid.OnGetCellHint">
<short>
Event handler signalled to get the hint text for a cell in the grid control.
</short>
<descr>
<p>
<var>OnGetCellHint</var> is a <var>TDbGridCellHintEvent</var> property with 
the event handler signalled to get the hint text displayed for a cell on the 
grid control. Arguments passed to the event handler identify the grid 
control, the TColumn instance which contains the data for the cell, and 
variable parameter with the hint text derived in the handler routine. An 
application must implement and assign a handler routine to the property to 
respond to the event notification.
</p>
<p>
OnGetCellHint is signalled from the GetCellHintText method. It allows a 
custom value to be provided as the hint text for a cell and can be based on 
the column definition or the field accessed in the linked dataset.
</p>
<remark>
OnGetCellHint is not signalled for cells which are located in the FixedRows 
for the grid control.
</remark>
</descr>
<seealso>
<link id="TDbGridCellHintEvent"/>
</seealso>
</element>

<element name="TCustomDBGrid.OnPrepareCanvas">
<short>
Event handler signalled to prepare the grid canvas for drawing a cell.
</short>
<descr>
<p>
<var>OnPrepareCanvas</var> is a <var>TPrepareDbGridCanvasEvent</var> property 
that implements the event handler signalled to prepare the Canvas for drawing 
a cell in the grid. OnPrepareCanvas allows the application to provide custom 
settings in the Canvas for the Grid control. The <var>Sender</var> argument 
is the grid control, and can be used to access the Canvas or other properties 
in the component. Assign a procedure to the event handler to respond to the 
event notification.
</p>
<p>
OnPrepareCanvas is signalled from the DoPrepareCanvas method, and occurs when 
the row is not one of the FixedRows for the grid control.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DoPrepareCanvas"/>
<link id="TPrepareDbGridCanvasEvent"/>
<link id="#lcl.grids.TCustomGrid.FixedRows">TCustomGrid.FixedRows</link>
</seealso>
</element>

<element name="TCustomDBGrid.OnSelectEditor">
<short>
Event handler signalled when the editor is selected for a Field in the grid.
</short>
<descr>
<p>
<var>OnSelectEditor</var> is a TDbGridSelEditorEvent property that implements 
the event handler signalled when an editor control is selected for the 
current Field in the grid. OnSelectEditor is used to modify or override the 
editor control for SelectedField in the grid control.
</p>
<p>
OnSelectEditor is signalled in the SelectEditor method after the default 
editor control has be chosen and its maximum length has been set. Assign a 
procedure to the event handler which modifies or assigns the control in the 
Editor argument.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.OnTitleClick">
<short>
Event handler for mouse clicks on a Title cell.
</short>
<descr>
<p>
<var>OnTitleClick</var> is a <var>TDBGridClickEvent</var> property that 
implements the event handler signalled when a mouse click occurs in the fixed 
title cell for a column. Use OnTitleClick to perform actions required when 
the title cell for a column is clicked. Assign a procedure to the event 
handler to respond to the event notification.
</p>
<p>
OnTitleClick is triggered from the <var>DoHeaderClick</var> method.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.OnUserCheckboxBitmap">
<short>
Event handler signalled to get the image used for a check box entry on the 
grid.
</short>
<descr>
<p>
<var>OnUserCheckboxBitmap</var> is a property that implements the 
<var>TDBGridCheckboxBitmapEvent</var> event handler signalled to get the 
image used for a check box entry on the grid. OnUserCheckboxBitmap allows the 
application to override the TBitmap provided by the GetImageForCheckBox 
method. Assign a procedure to the event handler that implements the 
TDBGridCheckboxBitmapEvent interface to enable the event handler.
</p>
<p>
The user is encouraged to provide bitmaps to represent the three states for
database grid check boxes: <var>gcbpUnChecked</var>, <var>gcbpChecked</var> 
and
<var>gcbpGrayed</var>.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.OnUserCheckboxState">
<short>
Event handler signalled to get a user-specified value for a check box editor 
on the grid control.
</short>
<descr>
<p>
<var>OnUserCheckboxState</var> is a <var>TDbGridCheckboxStateEvent</var> 
property with the event handler signalled to get the checked state for a 
check box cell on the grid control. Arguments to the handler include the grid 
control and the TCheckboxState value which can be updated in the routine. 
Implement and assign a handler routine to the property to respond to the 
event notification.
</p>
<p>
OnUserCheckboxState is signalled (when assigned) from the DrawCheckboxBitmaps 
method. It occurs after the initial value has been assigned for the AState 
argument. It occurs before DrawGridCheckboxBitmaps is called to draw the 
check box using the value in AState.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DrawCheckboxBitmaps"/>
<link id="TCustomDBGrid.DefaultDrawCell"/>
<link id="TDbGridCheckboxStateEvent"/>
<link id="#lcl.stdctrls.TCheckboxState">TCheckboxState</link>
</seealso>
</element>

<element name="TCustomDBGrid.OnRowMoved">
<short>
Event handler signalled when a row is moved on the grid control.
</short>
<descr>
<p>
<var>OnRowMoved</var> is a <var>TMovedEvent</var> property with the event 
handler signalled when a row is moved on the grid control. An application can 
implement and assign a handler routine to perform actions needed when a row 
is moved on the control. Arguments to the routine include the grid control, 
and the index positions for the relocated row and its new position when the 
move was completed.
</p>
<p>
When a routine is assigned to the property, the value goRowMoving is included 
in the Options property. If Nil is assigned to the property, goRowMoving is 
removed from the Options property.
</p>
<p>
OnRowMoved is signalled from the ColRowMoved method.
</p>
<p>
Use OnColumnMoved to perform actions needed when a column is moved on the 
grid control.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.Options"/>
<link id="TCustomDBGrid.ColRowMoved"/>
<link id="TCustomDBGrid.OnColumnMoved"/>
<link id="TDBGridOptions"/>
<link id="TDBGridOption"/>
<link id="TMovedEvent"/>
</seealso>
</element>

<element name="TCustomDBGrid.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for the <var>TCustomDBGrid</var> 
instance. Create calls the inherited <var>Create</var> method, and allocates 
resources for properties in the class instance. Create sets the default event 
handlers used in DataLink to the corresponding procedures in the class:
</p>
<ul>
<li>OnDataSetChanged</li>
<li>OnDataSetClose</li>
<li>OnDataSetOpen</li>
<li>OnDataSetScrolled</li>
<li>OnEditingChanged</li>
<li>OnFocusControl</li>
<li>OnInvalidDataset</li>
<li>OnInvalidDataSource</li>
<li>OnLayoutChanged</li>
<li>OnRecordChanged</li>
<li>OnUpdateData</li>
</ul>
<p>
Create calls RenewColWidths to set columns to their default widths and to 
disable column auto-sizing.
</p>
<p>
Create sets the values in the Options property to establish the baseline 
features and behavior enabled for the grid control, including:
</p>
<ul>
<li>dgColumnResize</li>
<li>dgColumnMove</li>
<li>dgTitles</li>
<li>dgIndicator</li>
<li>dgRowLines</li>
<li>dgColLines</li>
<li>dgConfirmDelete</li>
<li>dgCancelOnExit</li>
<li>dgTabs</li>
<li>dgEditing</li>
<li>dgAlwaysShowSelection</li>
</ul>
<p>
See the Options property and TDBGridOption type for more information on 
values in the enumeration.
</p>
<p>
Values in the Options property from the ancestor class are also updated. They 
use the set of enumeration values in TGridOption, and are updated to include 
values which correspond to the TDBGridOption values used in the database grid 
control.
</p>
<p>
Create sets the default values in the ExtraOptions property to the following:
</p>
<ul>
<li>dgeAutoColumns</li>
<li>dgeCheckboxColumn</li>
</ul>
<p>
The value of the AutoAdvance property is set to aaRightDown, indicating the 
cell navigation is from left-to-right and then top-to-bottom in the grid 
control.
</p>
<p>
Create sets the value in ScrollBars to ssBoth indicating that both horizontal 
and vertical scroll bars are needed, and sets AllowOutboundEvents to 
<b>False</b> to prevent forwarding of event notifications to the ancestor 
class.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.Create">TCustomGrid.Create</link>
</seealso>
</element>
<element name="TCustomDBGrid.Create.AOwner">
<short>Owner of the component.</short>
</element>

<element name="TCustomDBGrid.AutoAdjustColumns">
<short>
Updates the widths for automatically-sized columns in the grid control.
</short>
<descr>
<p>
Removes <var>gsAutoSized</var> from the <var>GridStatus</var> flags. Calls 
<var>UpdateAutoSizeColumns</var> to calculate the widths for automatically-
sized columns. AutoAdjustColumns does <b>NOT</b> call the inherited method.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.AutoAdjustColumns">TCustomGrid.AutoAdjustColumns</link>
</seealso>
</element>

<element name="TCustomDBGrid.InitiateAction">
<short>
Updates the ActionLink for the control and resets flag values in GridStatus.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.InitiateAction">TControl.InitiateAction</link>
</seealso>
</element>

<element name="TCustomDBGrid.DefaultDrawColumnCell">
<short>
Default method used to draw cells in a specified column for the grid control.
</short>
<descr>
<p>
<var>DefaultDrawColumnCell</var> is the default method used for drawing cells 
in a column. DefaultDrawColumnCell uses the specified column to get the Field 
and the editor style needed to render the cell.
</p>
<p>
Check box columns are drawn by calling the DrawCheckBoxBitmaps method. Other 
editor styles use the DisplayText for the TField as the value drawn using the 
DrawCellText method. Please note that Fields with a DataType property of 
ftBlob are always rendered as the string literal <var><b>'(blob)'</b></var>.
</p>
<p>
Use the OnDrawColumnCell event handler to render a cell when DefaultDrawing 
is not enabled for the grid control.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomDBGrid.DefaultDrawColumnCell.Rect">
<short>Canvas rectangle for the cell.</short>
</element>
<element name="TCustomDBGrid.DefaultDrawColumnCell.DataCol">
<short>Index of the Field for cell data.</short>
</element>
<element name="TCustomDBGrid.DefaultDrawColumnCell.Column">
<short>Column definition for the cell.</short>
</element>
<element name="TCustomDBGrid.DefaultDrawColumnCell.State">
<short>Grid drawing state for the cell.</short>
</element>

<element name="TCustomDBGrid.EditorByStyle">
<short>
Gets an editor control which uses the specified button style.
</short>
<descr>
<p>
<var>EditorByStyle</var> is an overridden TWinControl function used to a get 
an editor control with the specified button style. EditorByStyle calls the 
ColumnEditorStyle method to get the button style for the current column and 
SelectedField. This allows the grid to override the cbsAuto button style when 
the SelectedField contains a Boolean data type. EditorByStyle calls the 
inherited method using the derived TColumnButtonStyle value as an argument. 
The editor control in the return value is supplied by the inherited 
EditorByStyle method.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.EditorByStyle">TCustomGrid.EditorByStyle</link>
</seealso>
</element>
<element name="TCustomDBGrid.EditorByStyle.Result">
<short>Editor control for the specified button style.</short>
</element>
<element name="TCustomDBGrid.EditorByStyle.Style">
<short>Button style to use in the editor control.</short>
</element>

<element name="TCustomDBGrid.ResetColWidths">
<short>
Restores column widths to their default values.
</short>
<descr>
<p>
<var>ResetColWidths</var> is a procedure used to restore column widths in the 
grid to their default values. ResetColWidths uses the value in 
DefaultColWidths to determine if default column widths are already in use. 
When DefaultColWidths contains <b>True</b>, no actions are performed in the 
method.
</p>
<p>
ResetColWidths calls the RenewColWidths method to restore the column widths. 
The LayoutChanged method is called to refresh the grid control after the 
column layouts are altered.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.Destroy">
<short>
<var>Destroy</var> is the destructor for <var>TCustomDbGrid</var>
</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor in <var>TCustomDbGrid</var>. 
Destroy frees any bookmarks stored in the SelectedRows property. Destroys 
ensures that event handlers assigned to its DataLink property are removed 
prior to freeing resources allocated to the property.
</p>
<p>
Destroy calls the inherited <var>Destroy</var> method.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DataLink">TCustomDBGrid.DataLink</link>
<link id="TCustomDBGrid.SelectedRows">TCustomDBGrid.SelectedRows</link>
<link id="#lcl.grids.TCustomGrid.Destroy">TCustomGrid.Destroy</link>
</seealso>
</element>

<element name="TCustomDBGrid.MouseToRecordOffset">
<short>
Gets the grid zone and record offset for the cell at the specified mouse 
coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomDBGrid.MouseToRecordOffset.Result">
<short>TGridZone value for the area under the mouse cursor.</short>
</element>
<element name="TCustomDBGrid.MouseToRecordOffset.x">
<short>Horizontal coordinate for the mouse cursor.</short>
</element>
<element name="TCustomDBGrid.MouseToRecordOffset.y">
<short>Vertical coordinate for the mouse cursor.</short>
</element>
<element name="TCustomDBGrid.MouseToRecordOffset.Column">
<short>
TColumn instance for the cell under the mouse cursor, or <b>Nil</b> if the 
cell is a fixed title cell.
</short>
</element>
<element name="TCustomDBGrid.MouseToRecordOffset.RecordOffset">
<short>
Offset to the row under the mouse cursor relative to the value in Row.
</short>
</element>

<element name="TCustomDBGrid.ExecuteAction">
<short>
Executes the specified action in the DataLink for the grid control.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
</seealso>
</element>
<element name="TCustomDBGrid.ExecuteAction.Result">
<short><b>True</b> DataLink is assigned, and the action was executed.</short>
</element>
<element name="TCustomDBGrid.ExecuteAction.AAction">
<short>Action executed in the method.</short>
</element>

<element name="TCustomDBGrid.UpdateAction">
<short>
Updates the specified action using the DataLink for the grid control.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TComponent.UpdateAction">TComponent.UpdateAction</link>
</seealso>
</element>
<element name="TCustomDBGrid.UpdateAction.Result">
<short>
<b>True</b> if DataLink is assigned, and the action was updated in the method.
</short>
</element>
<element name="TCustomDBGrid.UpdateAction.AAction">
<short>Action updated in the method.</short>
</element>

<element name="TCustomDBGrid.SaveToFile">
<short>
Sets SaveOptions to write design-time settings for the grid, and stores the 
values to the specified file name.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomDBGrid.SaveToFile.FileName">
<short>
Qualified file name where the design-time values for the grid control are 
stored.
</short>
</element>

<element name="TCustomDBGrid.SaveToStream">
<short>
Sets SaveOptions to write design-time settings for the grid, and stores the 
values to the specified stream.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomDBGrid.SaveToStream.AStream">
<short>
Stream where the design-time settings for the grid control are stored.
</short>
</element>

<element name="TCustomDBGrid.LoadFromFile">
<short>
Loads design-time settings for the grid control from the specified file name.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomDBGrid.LoadFromFile.FileName">
<short>
Qualified file name with the design-time settings loaded in the method.
</short>
</element>

<element name="TCustomDBGrid.LoadFromStream">
<short>
Loads design-time setting for the grid control from the specified stream.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomDBGrid.LoadFromStream.AStream">
<short>Stream with the design-time settings loaded in the method.</short>
</element>

<element name="TCustomDBGrid.AllowOutboundEvents"  link="#lcl.grids.TCustomGrid.AllowOutboundEvents"/>

<element name="TCustomDBGrid.SelectedField">
<short>
Field that reads and writes data for the currently selected column.
</short>
<descr>
<p>
<var>SelectedField</var> is a TField property with the Field used to read and 
write data for the selected column in the grid control. SelectedField is 
updated when column navigation occurs in the control.
</p>
<p>
GetCurrentField is the read access specifier for the property, and returns 
the TField instance derived by GetFieldFromGridColumn for the selected 
column. SetCurrentField is the write access specifier for the property, and 
stores the new Field value as the selected column. No action is performed if 
the new Field value is the same as the current value for the property.
</p>
<p>
SelectedField is used in the implementation of various method in the control, 
such as: KeyDown, SelectEditor, UpdateData, and SwapCheckBox.
</p>
<p>
Use SelectedColumn to get the TColumn instance for the currently selected 
cell in the grid control.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.SelectedIndex">
<short>
Ordinal position of the selected column in the grid control.
</short>
<descr>
<p>
<var>SelectedIndex</var> is an Integer property that represents the ordinal 
position of the selected column in the grid control. The property value 
contains the result from ColumnIndexFromGridColumn when the Columns 
collection is enabled in the control. Otherwise, the value from 
FieldIndexFromGridColumn is used as the property value.
</p>
<p>
GetSelectedIndex is the read access specifier for the property value. 
SetSelectedIndex is the write access specifier for the property.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.SelectedColumn">
<short>
Represents the currently selected column in the grid control.
</short>
<descr>
<p>
<var>SelectedColumn</var> is a read-only TColumn property that represents the 
currently selected column in the grid control. SelectedColumn contains a 
value only when the Columns collection has been enabled (or contains visible 
columns) for the control. Otherwise, SelectedColumn returns the value 
<b>Nil</b>.
</p>
<p>
GetCurrentColumn is the read access specifier for the property value, and 
returns the TColumn instance in Columns at the position specified in 
SelectedIndex.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomDBGrid.SelectedFieldRect">
<short>Display rectangle for the selected cell in the grid control.</short>
<descr>
<p>
<var>SelectedFieldRect</var> is a read-only <var>TRect</var> property which 
contains the display rectangle for the cell at the position in the 
<var>Col</var> and <var>Row</var> properties. Calls <var>CellRect</var> to 
get the value for the property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomDbGrid.LastColumn">
<short>Contains the last visible column in the grid control.</short>
<descr>
<p>
<var>LastColumn</var> is a read-only <var>TColumn</var> property which 
contains the last visible column for the grid control. Calls 
<var>GetLastVisibleColumn</var> and <var>ColumnIndexFromGridColumn</var> to 
get the ordinal position for the column. The property value is <b>Nil</b> if 
the column number was not found.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomDbGrid.FirstColumn">
<short>Contains the first visible column for the grid control.</short>
<descr>
<p>
<var>FirstColumn</var> is a read-only <var>TColumn</var> property which 
contains the first visible column for the grid control. FirstColumn calls 
<var>GetFirstVisibleColumn</var> and <var>ColumnIndexFromGridColumn</var> to 
get the ordinal position for the first visible column. The property value is 
<b>Nil</b> if the column number was not found.
</p>
</descr>
<seealso>
<link id="TColumn"/>
<link id="#lcl.grids.TCustomGrid.GetFirstVisibleColumn">TCustomGrid.GetFirstVisibleColumn</link>
<link id="#lcl.grids.TCustomGrid.ColumnIndexFromGridColumn">TCustomGrid.ColumnIndexFromGridColumn</link>
</seealso>
</element>

<element name="TCustomDBGrid.DataSource">
<short>
Provides access to the dataset displayed in the grid.
</short>
<descr>
<p>
<var>DataSource</var> is a <var>TDataSource</var> property which provides 
access to the DataSet displayed in the database grid control. Read and write 
access to the property are redirected to the DataLink property.
</p>
<p>
Reading the value for DataSource returns the corresponding value stored in 
the <var>TComponentDataLink</var> instance.
</p>
<p>
Writing the value for DataSource sets the value in the TComponentDataLink 
instance (when they are not the same). Write access to DataSource also resets 
the width of columns in the grid by calling RenewColWidths. 
<var>UpdateActive</var> is called to redraw the grid control after changes to 
the DataSource and Columns properties.
</p>
</descr>
<seealso>
<link id="TCustomDBGrid.DataSource"/>
<link id="TCustomDBGrid.DataLink"/>
<link id="TComponentDataLink"/>
<link id="#fcl.db.TDataSource">TDataSource</link>
</seealso>
</element>

<element name="TDBGrid">
<short>
Data-aware grid control used to display and edit rows and columns in a 
dataset.
</short>
<descr>
<p>
<var>TDBGrid</var> is a data-aware version of <var>TStringGrid</var> used to
display and edit a Rows and Columns in a dataset.
</p>
<p>
TDBGrid inherits many of its properties from <link 
id="#lcl.grids.TCustomGrid">TCustomGrid</link> and its immediate ancestor 
<link id="TCustomDBGrid">TCustomDBGrid</link>.
</p>
</descr>
<seealso>
<link id="#lcl.dbctrls.HowToUseDataAwareControls">How To Use Data-Aware Controls</link>
<link id="#lcl.grids.HowToUseGrids">How To Use Grids</link>
</seealso>
</element>

<element name="TDBGrid.BorderColor" link="#lcl.grids.TCustomGrid.BorderColor"/>
<element name="TDBGrid.Canvas" link="#lcl.controls.TCustomControl.Canvas"/>
<element name="TDBGrid.DefaultTextStyle" link="#lcl.grids.TCustomGrid.DefaultTextStyle"/>
<element name="TDBGrid.EditorBorderStyle" link="#lcl.grids.TCustomGrid.EditorBorderStyle"/>
<element name="TDBGrid.EditorMode" link="#lcl.grids.TCustomGrid.EditorMode"/>
<element name="TDBGrid.ExtendedColSizing" link="#lcl.grids.TCustomGrid.ExtendedColSizing"/>
<element name="TDBGrid.FastEditing" link="#lcl.grids.TCustomGrid.FastEditing"/>
<element name="TDBGrid.FocusColor" link="#lcl.grids.TCustomGrid.FocusColor"/>
<element name="TDBGrid.FocusRectVisible" link="#lcl.grids.TCustomGrid.FocusRectVisible"/>
<element name="TDBGrid.GridLineColor" link="#lcl.grids.TCustomGrid.GridLineColor"/>
<element name="TDBGrid.GridLineStyle" link="#lcl.grids.TCustomGrid.GridLineStyle"/>
<element name="TDBGrid.InplaceEditor" link="#lcl.grids.TCustomGrid.InplaceEditor"/>
<element name="TDBGrid.SelectedColor" link="#lcl.grids.TCustomGrid.SelectedColor"/>
<element name="TDBGrid.SelectedRows" link="#lcl.dbgrids.TCustomDBGrid.SelectedRows"/>
<element name="TDBGrid.OnRowMoved" link="#lcl.dbgrids.TCustomDBGrid.OnRowMoved"/>
<element name="TDBGrid.Align" link="#lcl.controls.TControl.Align"/>
<element name="TDBGrid.AlternateColor" link="#lcl.grids.TCustomGrid.AlternateColor"/>
<element name="TDBGrid.Anchors" link="#lcl.controls.TControl.Anchors"/>

<element name="TDBGrid.AutoAdvance">
<short>Sets the auto advance option for the grid control.</short>
<descr>
<p>
<var>AutoAdvance</var> is a published property in <var>TDBGrid</var> which 
sets the option used in the grid control. The default value for the property 
is <var>aaRightDown</var>.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.AutoAdvance">TCustomGrid.AutoAdvance</link>
</seealso>
</element>

<element name="TDBGrid.AutoEdit" link="#lcl.grids.TCustomGrid.AutoEdit"/>
<element name="TDBGrid.AutoFillColumns" link="#lcl.grids.TCustomGrid.AutoFillColumns"/>
<element name="TDBGrid.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TDBGrid.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>

<element name="TDBGrid.BorderStyle">
<short>Border style drawn around the grid control.</short>
<descr>
<remark>
A restricted set of options are available for the grid control: 
<var>bsNone</var> or <var>bsSingle</var>.
</remark>
</descr>
<seealso>
<link id="#lcl.Controls.TWinControl.BorderStyle">TWinControl.BorderStyle</link>
</seealso>
</element>

<element name="TDBGrid.CellHintPriority" link="#lcl.grids.TCustomGrid.CellHintPriority"/>
<element name="TDBGrid.Color" link="#lcl.controls.TControl.Color"/>

<!-- published in 3.0 -->
<element name="TDBGrid.ColRowDraggingCursor" link="#lcl.grids.TCustomGrid.ColRowDraggingCursor"/>
<element name="TDBGrid.ColRowDragIndicatorColor" link="#lcl.grids.TCustomGrid.ColRowDragIndicatorColor"/>
<element name="TDBGrid.ColSizingCursor" link="#lcl.grids.TCustomGrid.ColSizingCursor"/>

<element name="TDBGrid.Columns">
<short>
Defines the dataset fields and their editing characteristics on the grid 
control.
</short>
<descr>
<p>
Refers to the physical columns of the grid displaying the contents of the 
relevant <var>Fields</var>.
</p>
<p>
The <var>Columns</var> property is configurable from the Object Inspector 
selecting the ellipsis (...) next to the property name in which case a pop-up 
memo box appears to allow editing. It deals with things like the size shape 
and format of the display and contains a link to the appropriate Field.
</p>
<p>
Do not confuse Grid columns (in the display) with the SQL usage of COLUMNS 
(Fields in our environment). The Fields consist of a series of cells arranged 
in Records which contain the actual data which are to be displayed and 
operated upon.
</p>
<p>
It is entirely possible that Fields in the dataset are not displayed, and the 
result is that Field order in a dataset may not correspond directly to the 
column order in a database grid; in fact the <var>Columns</var> property 
allows the user to configure which data Field is to be displayed in each 
column.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.Columns">TCustomGrid.Columns</link>
</seealso>
</element>

<element name="TDBGrid.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TDBGrid.DataSource" link="#lcl.dbgrids.TCustomDBGrid.DataSource"/>
<element name="TDBGrid.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>

<element name="TDBGrid.DefaultRowHeight">
<short>Default height for rows drawn in the grid control.</short>
<descr>
<p>
<var>DefaultRowHeight</var> is an <var>Integer</var> property that contains 
the default height used for rows drawn in the grid control. If new rows of 
the grid are created by changing the <var>RowCount</var> property, the height 
of these new rows will be set to the value of the <var>DefaultRowHeight</var> 
property.
</p>
<p>
When the <var>Options</var> property includes the appropriate value, the row 
height may be changed at run-time.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.DefaultRowHeight">TCustomGrid.DefaultRowHeight</link>
<link id="#lcl.grids.TCustomGrid.Options">TCustomGrid.Options</link>
</seealso>
</element>

<element name="TDBGrid.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TDBGrid.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TDBGrid.DragMode" link="#lcl.controls.TControl.DragMode"/>

<element name="TDBGrid.Enabled">
<short>
Determines if the grid control is enabled for navigation and editing.
</short>
<descr>
<p>
<var>Enabled</var> is a published property in TDBGrid that determines if the 
control is available for editing and navigation. When <var>Enabled</var> 
contains <var>False</var>, the control usually appears 'greyed-out' or 
unavailable.
</p>
<p>
Use the <var>Visible</var> property to determine whether the control is 
displayed or hidden.
</p>
</descr>
<seealso>
<link id="#lcl.Controls.TControl.Enabled">TControl.Enabled</link>
</seealso>
</element>

<element name="TDBGrid.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
<element name="TDBGrid.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
<element name="TDBGrid.FixedHotColor" link="#lcl.grids.TCustomGrid.FixedHotColor"/>
<element name="TDBGrid.Flat" link="#lcl.grids.TCustomGrid.Flat"/>
<element name="TDBGrid.Font" link="#lcl.controls.TControl.Font"/>
<element name="TDBGrid.HeaderHotZones" link="#lcl.grids.TCustomGrid.HeaderHotZones"/>
<element name="TDBGrid.HeaderPushZones" link="#lcl.grids.TCustomGrid.HeaderPushZones"/>
<element name="TDBGrid.Options" link="#lcl.dbgrids.TCustomDBGrid.Options"/>
<element name="TDBGrid.Options2" link="#lcl.grids.TCustomGrid.Options2"/>
<element name="TDBGrid.OptionsExtra" link="#lcl.dbgrids.TCustomDBGrid.OptionsExtra"/>
<element name="TDBGrid.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>

<element name="TDBGrid.ParentColor">
<short>
Uses the Color from the Parent control, when enabled.
</short>
<descr>
<p>
ParentColor determines if the control should use the Color from the Parent 
control, when enabled. The default value for the property is <b>False</b> in 
TDBGrid.
</p>
<p>
When this property is <b>True</b>, all changes to the Color of the parent 
will also be applied to the Color of the control, ensuring that they both 
contain same value. If the Color of the control is changed by the 
application, then ParentColor will be automatically set to <b>False</b>.
</p>
<p>
Using ParentColor when the Color value is clDefault can cause problems in 
resolving the actual color value. To obtain the Color property of a control 
while taking into account clDefault and ParentColor, use the 
GetColorResolvingParent method. This method might return a non-RGB color, but 
will never return clDefault. To obtain a purely RGB result use the 
GetRGBColorResolvingParent method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
<link id="#lcl.controls.TControl.Color">TControl.Color</link>
<link id="#lcl.controls.TControl.GetColorResolvingParent">TControl.GetColorResolvingParent</link>
<link id="#lcl.controls.TControl.GetRGBColorResolvingParent">TControl.GetRGBColorResolvingParentParent</link>
</seealso>
</element>

<element name="TDBGrid.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
<element name="TDBGrid.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TDBGrid.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TDBGrid.ReadOnly" link="#lcl.dbgrids.TCustomDBGrid.ReadOnly"/>

<element name="TDBGrid.Scrollbars">
<short>Scroll bars displayed for the grid control.</short>
<descr>
<p>
<var>ScrollBars</var> is a <var>TScrollStyle</var> property which indicates 
the scroll bars displayed for the grid control. The default value for the 
property is ssBoth in TDBGrid, and causes vertical and horizontal scroll bars 
to be displayed.
</p>
<p>
See TScrollStyle for more information about values in the enumeration and 
their meanings.
</p>
</descr>
<seealso>
<link id="#lcl.grids.TCustomGrid.ScrollBars">TCustomGrid.ScrollBars</link>
<link id="#lcl.stdctrls.TScrollStyle">TScrollStyle</link>
</seealso>
</element>

<element name="TDBGrid.ShowHint">
<short>
Controls whether the <var>Hint</var> is displayed for the control.
</short>
<descr>
<p>
Controls whether the value in the <var>Hint</var> property is shown when the 
mouse hovers over the control. If a value is stored for the property a 
storage flag is set.
</p>
<p>
Display of the actual hint is performed by the <var>OnShowHint</var> event 
handler.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.ShowHint">TControl.ShowHint</link>
</seealso>
</element>

<element name="TDBGrid.TabAdvance" link="#lcl.grids.TCustomGrid.TabAdvance"/>
<element name="TDBGrid.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TDBGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TDBGrid.TitleFont" link="#lcl.grids.TCustomGrid.TitleFont"/>
<element name="TDBGrid.TitleImageList" link="#lcl.grids.TCustomGrid.TitleImageList"/>
<element name="TDBGrid.TitleStyle" link="#lcl.grids.TCustomGrid.TitleStyle"/>
<element name="TDBGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>

<element name="TDBGrid.Visible">
<short>
<var>Visible</var> controls whether the grid control is visible.
</short>
<descr>
<p>
The <var>Visible</var> property controls the ability to see a visual control. 
If Visible is <b>True</b> the control is shown otherwise it is hidden. 
Calling Show sets among other properties Visible to <b>True</b>. Setting 
Visible to <b>False</b> is equivalent to calling Hide method.
</p>
<remark>
The Visible property does not depend on control's parent visibility. Use
IsVisible method to consider this and get real visibility.
</remark>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
</seealso>
</element>

<element name="TDBGrid.OnCellClick" link="#lcl.dbgrids.TCustomDBGrid.OnCellClick"/>
<element name="TDBGrid.OnColEnter" link="#lcl.dbgrids.TCustomDBGrid.OnColEnter"/>
<element name="TDBGrid.OnColExit" link="#lcl.dbgrids.TCustomDBGrid.OnColExit"/>
<element name="TDBGrid.OnColumnMoved" link="#lcl.dbgrids.TCustomDBGrid.OnColumnMoved"/>
<element name="TDBGrid.OnColumnSized" link="#lcl.dbgrids.TCustomDBGrid.OnColumnSized"/>
<element name="TDBGrid.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TDBGrid.OnDrawColumnCell" link="#lcl.dbgrids.TCustomDBGrid.OnDrawColumnCell"/>
<element name="TDBGrid.OnDrawColumnTitle" link="#lcl.dbgrids.TCustomDBGrid.OnDrawColumnTitle"/>
<element name="TDBGrid.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TDBGrid.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TDBGrid.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TDBGrid.OnEditButtonClick" link="#lcl.grids.TCustomGrid.OnEditButtonClick"/>
<element name="TDBGrid.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TDBGrid.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TDBGrid.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TDBGrid.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TDBGrid.OnFieldEditMask" link="#lcl.dbgrids.TCustomDBGrid.OnFieldEditMask"/>
<element name="TDBGrid.OnGetCellHint" link="#lcl.dbgrids.TCustomDBGrid.OnGetCellHint"/>

<element name="TDBGrid.OnKeyDown">
<short>
Event handler signalled when a key is down while the control has focus.
</short>
<descr>
<p>
<var>OnKeyDown</var> is a TKeyEvent event handler signalled when a key is 
down while the control has focus. OnKeyDown is called from the KeyDown method 
when processing keys specific to the data-aware grid.
</p>
<p>
<var>OnKeyDown</var> differs from <link 
id="#lcl.controls.TWinControl.OnKeyPress">OnKeyPress</link>. With 
<var>OnKeyDown</var> the key may have already been down when the control 
receives focus. With <var>OnKeyPress</var> the key needs to become pressed 
while the control has focus.
</p>
</descr>
<seealso>
<link id="TDBGrid.OnKeyPress">TDBGrid.OnKeyPress</link>
<link id="TDBGrid.OnKeyUp">TDBGrid.OnKeyUp</link>
<link id="#lcl.controls.TKeyEvent">TKeyEvent</link>
<link id="#lcl.controls.TWinControl.OnKeyDown">TWinControl.OnKeyDown</link>
</seealso>
</element>

<element name="TDBGrid.OnKeyPress">
<short>Event handler signalled for the key press event.</short>
<descr>
<p>
<var>OnKeyPress</var> is an event controller for a key being pressed while 
the control has focus.
</p>
<p>
<var>OnKeyPress</var> differs from <link 
id="#lcl.controls.TWinControl.OnKeyDown">OnKeyDown</link> in that the key 
needs to become pressed while the control has focus; with 
<var>OnKeyDown</var> the key may have already been down when the control 
received focus.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.OnKeyPress">TWinControl.OnKeyPress</link>
</seealso>
</element>

<element name="TDBGrid.OnKeyUp">
<short>Event handler signalled for a key up event.</short>
<descr>
<p>
<var>OnKeyUp</var> is an event handler for instance when a key is up (not 
pressed) while the control has focus.
</p>
<p>
The key may already have been up when the control received focus or a pressed 
key may become released during the time the control has focus.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.OnKeyUp">TWinControl.OnKeyUp</link>
</seealso>
</element>

<element name="TDBGrid.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TDBGrid.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TDBGrid.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TDBGrid.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TDBGrid.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TDBGrid.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TDBGrid.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TDBGrid.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TDBGrid.OnPrepareCanvas" link="#lcl.dbgrids.TCustomDBGrid.OnPrepareCanvas"/>
<element name="TDBGrid.OnSelectEditor" link="#lcl.dbgrids.TCustomDBGrid.OnSelectEditor"/>
<element name="TDBGrid.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TDBGrid.OnTitleClick" link="#lcl.dbgrids.TCustomDBGrid.OnTitleClick"/>
<element name="TDBGrid.OnUserCheckboxBitmap" link="#lcl.grids.TCustomGrid.OnUserCheckboxBitmap"/>
<element name="TDBGrid.OnUserCheckBoxImage" link="#lcl.grids.TCustomGrid.OnUserCheckBoxImage"/>
<element name="TDBGrid.OnUserCheckBoxState" link="#lcl.dbgrids.TCustomDBGrid.OnUserCheckBoxState"/>
<element name="TDBGrid.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="Register">
<short>Registers components in the unit for use in the Lazarus IDE.</short>
<descr>
<p>
Register calls RegisterComponents to add components in the unit to the 
component palette in the Lazarus IDE, including:
</p>
<p>
<b>Data Controls</b> Tab
</p>
<ul>
<li>TDBGrid</li>
</ul>
</descr>
</element>

</module>
<!-- DBGrids -->
</package>
</fpdoc-descriptions>
