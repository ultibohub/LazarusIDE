<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
      ====================================================================
        Clipbrd
      ====================================================================
    -->
    <module name="Clipbrd">
      <short>Definitions for the Clipboard to hold Cut or Copied data for Pasting.</short>
      <descr>
        <p>
          <file>clipbrd.pp</file> contains classes, types, and routines used to implement TClipboard. TClipboard encapsulates the system clipboard for supported platforms. This file is part of the Lazarus Component Library (<b>LCL</b>).
        </p>
      </descr>

      <!-- unresolved references -->
      <element name="UTF8BIDI"/>
      <element name="Windows"/>
      <element name="Classes"/>
      <element name="SysUtils"/>

      <!-- function Visibility: default -->
      <element name="CF_Text">
        <short>Gets the pre-defined clipboard format used for plain text.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CF_Text.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CF_Bitmap">
        <short>Gets the pre-defined clipboard format used for bitmap images.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CF_Bitmap.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CF_Picture">
        <short>Gets the pre-defined clipboard format used for the LCL Picture type.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CF_Picture.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CF_MetaFilePict">
        <short>
          Gets the pre-defined clipboard format used for the LCL Meta-File Picture type.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CF_MetaFilePict.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CF_Object">
        <short>Gets the pre-defined clipboard format used for the LCL Object type.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CF_Object.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CF_Component">
        <short>Gets the pre-defined clipboard format used for the LCL Component type.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CF_Component.Result">
        <short/>
      </element>

      <element name="CF_HTML">
        <short>Gets the pre-defined clipboard format used for HTML content.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="CF_HTML.Result">
        <short/>
      </element>

      <!-- record type Visibility: default -->
      <element name="TClipboardData">
        <short>
          Record type with the format identifier and data for cached clipboard content.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TClipboardData.FormatID">
        <short>Clipboard format identifier.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TClipboardData.Stream">
        <short>Stream with the content stored for the associated clipboard format.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TClipboard">
        <short>
          <var>TClipboard</var> - area for holding information that has been cut or copied, ready for pasting.
        </short>
        <descr>
          <p>
            <var>TClipboard</var> - area for holding information that has been cut or copied, ready for pasting.
          </p>
          <p>
            The clipboard object encapsulates the Windows clipboard and the three standard Gtk selections. For each of the three clipboards/selections there is an object:
              <link id="PrimarySelection">PrimarySelection</link>,
              <link id="SecondarySelection">SecondarySelection</link> and
              <link id="Clipboard">Clipboard</link>.
              There is no difference between the three objects except their type.
          </p>
          <p>
            A lot of information about Clipboard Formats, including predefined formats for Delphi/Kylix compatibility, is found in the LCLType unit, at
            <link id="#lcl.lcltype.TClipboardFormat">TClipboardFormat</link>,
            <link id="#lcl.lcltype.TClipboardType">TClipboardType</link>,
            <link id="#lcl.lcltype.ClipboardTypeName">ClipboardTypeName</link>,
            <link id="#lcl.lcltype.TPredefinedClipboardFormat">TPredefinedClipboardFormat</link>,
            <link id="#lcl.lcltype.PredefinedClipboardMimeTypes">PredefinedClipboardMimeTypes</link>
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.lcltype.TClipboardFormat">TClipboardFormat</link>,
          <link id="#lcl.lcltype.TClipboardType">TClipboardType</link>,
          <link id="#lcl.lcltype.ClipboardTypeName">ClipboardTypeName</link>,
          <link id="#lcl.lcltype.TPredefinedClipboardFormat">TPredefinedClipboardFormat</link>,
          <link id="#lcl.lcltype.PredefinedClipboardMimeTypes">PredefinedClipboardMimeTypes</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TClipboard.FAllocated">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TClipboard.FClipboardType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TClipboard.FCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TClipboard.FData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TClipboard.FSupportedFormatsChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TClipboard.FOnRequest">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TClipboard.FOpenRefCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TClipboard.AssignGraphic">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AssignGraphic.Source">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AssignGraphic.FormatID">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TClipboard.AssignPicture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AssignPicture.Source">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TClipboard.AssignToGraphic">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.AssignToGraphic.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AssignToGraphic.FormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AssignToGraphic.Dest">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TClipboard.AssignToPicture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AssignToPicture.Dest">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TClipboard.GetAsText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetAsText.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TClipboard.GetFormatCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetFormatCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TClipboard.GetFormats">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetFormats.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.GetFormats.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TClipboard.GetOwnerShip">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetOwnerShip.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TClipboard.IndexOfCachedFormatID">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.IndexOfCachedFormatID.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.IndexOfCachedFormatID.FormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.IndexOfCachedFormatID.CreateIfNotExists">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TClipboard.InternalOnRequest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.InternalOnRequest.RequestedFormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.InternalOnRequest.AStream">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TClipboard.SetAsText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetAsText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TClipboard.SetBuffer">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetBuffer.FormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetBuffer.Buffer">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetBuffer.Size">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TClipboard.SetOnRequest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetOnRequest.AnOnRequest">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.AddFormat">
        <short>Acquires ownership of the Clipboard and adds a format.</short>
        <descr>
          <p>
            If not already done, this function acquires ownership of the clipboard. Acquiring ownership clears the clipboard. If the format already exists, it replaces the old content. Otherwise, it is added. The format CF_TEXT is handled by AsText and SetTextBuf. Use those functions instead.
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.AddFormat.Result">
        <short>True if format added correctly.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AddFormat.FormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AddFormat.Stream">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AddFormat.Buffer">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AddFormat.Size">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.Assign">
        <short>
          Copies properties from the specified persistent object to the clipboard.
        </short>
        <descr>
          <p>
            <var>Assign</var> is an overridden method in <var>TClipboard</var> used to copy properties from the persistent object in <var>Source</var> to the clipboard instance. It provides support for using <var>TPicture</var> and <var>TGraphic</var> types in Source, and calls private methods used to copy the properties specific to the class types. If Source is not one of these class types, the inherited method is called.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.Assign.Source">
        <short>Persistent object with the property values copied in the method.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.AssignTo">
        <short>Copies property values into the specified persistent object.</short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.AssignTo.Dest">
        <short>Persistent object where the properties in the class instance are stored.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.Clear">
        <short><var>Clear</var> the clipboard.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.Close">
        <short><var>Close</var> down the clipboard.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TClipboard.Create">
        <short><var>Create</var> - Constructor: make a new instance of a clipboard.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.Create.AClipboardType">
        <short>
          <var>AClipboardType</var> - optional argument specifying type of clipboard to be created.</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TClipboard.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. It frees resources allocated in the class instance, and calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.FindPictureFormatID">
        <short>
          <var>FindPictureFormatID</var> - search for the first format ID that is a graphic.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.FindPictureFormatID.Result">
        <short>Returns a Clipboard format.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.FindFormatID">
        <short>
          <var>FindFormatID</var> - find a Format ID that has the specified name.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.FindFormatID.Result">
        <short>Returns a Clipboard format.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.FindFormatID.FormatName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.GetComponent">
        <short>
          <var>GetComponent</var> - reads a component from the clipboard.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetComponent.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.GetComponent.Owner">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.GetComponent.Parent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.GetFormat">
        <short>
          <var>GetFormat</var> - read information on format from the clipboard.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetFormat.Result">
        <short>True if Format found.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.GetFormat.FormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.GetFormat.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.SupportedFormats">
        <short>
          <var>SupportedFormats</var> - fills a stringlist with the names of the supported MIME types.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SupportedFormats.List">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SupportedFormats.AFormatCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SupportedFormats.FormatList">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.GetTextBuf">
        <short>
          <var>GetTextBuf</var> - reads text from the clipboard and returns the number of characters.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetTextBuf.Result">
        <short>Number of characters in text buffer.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.GetTextBuf.Buffer">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.GetTextBuf.BufSize">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.HasFormat">
        <short>
          <var>HasFormat</var> - look up the list to see if the format is supported. If a <var>TPicture</var> format is specified, all graphic formats are searched.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.HasFormat.Result">
        <short>True if format is supported.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.HasFormat.FormatID">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.HasFormatName">
        <short>
          <var>HasFormatName</var> - checks if data have format with specified name.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.HasFormatName.Result">
        <short>True if named format found.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.HasFormatName.FormatName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.HasPictureFormat">
        <short>
          <var>HasPictureFormat</var> - checks whether data are formatted as a picture.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.HasPictureFormat.Result">
        <short>True if formatted as picture.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.Open">
        <short>
          <var>Open</var> the clipboard to receive and transmit data.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.SetComponent">
        <short>Write specified component to the Clipboard.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetComponent.Component">
        <short>Component stored in the clipboard.</short>
      </element>

      <element name="TClipboard.SetComponentAsText">
        <short>Stores the specified Component in the clipboard.</short>
        <descr>
          <p>
            <var>SetComponentAsText</var> is a <var>Boolean</var> function used to store the specified <var>Component</var> to the <var>TClipboard</var> instance.
          </p>
          <p>
            SetComponentAsText calls the <var>WriteComponentAsTextToStream</var> routine in the <file>lresources.pp</file> unit to store Component to a <var>TMemoryStream</var>. The String value in the stream is assigned to the <var>AsText</var> property to store the value in the clipboard.
          </p>
          <p>
            SetComponentAsText calls <var>BeginUpdate</var> prior to storing the component to the clipboard, and <var>EndUpdate</var> when the operation has been completed. The return value for the method is the value returned from EndUpdate.
          </p>
        </descr>
        <seealso>
          <link id="TClipBoard.AsText"/>
          <link id="#lcl.lresources.WriteComponentAsTextToStream">.WriteComponentAsTextToStream</link>
          <link id="#rtl.classes.TMemoryStream">TMemoryStream</link>
        </seealso>
      </element>
      <element name="TClipboard.SetComponentAsText.Component">
        <short>Component instance stored to the clipboard in the method.</short>
      </element>
      <element name="TClipboard.SetComponentAsText.Result">
        <short>
          True when no other updates are pending for the clipboard, and its ownership has not changed.
        </short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TClipboard.SetFormat">
        <short>
          Sets the clipboard format to the specified identifier and copies the value in Stream.
        </short>
        <descr>
          <p>
            <var>SetFormat</var> is a <var>Boolean</var> function used to select the clipboard format for the format identifier in <var>FormatID</var>, and load the content in <var>Stream</var>. It calls <var>AddFormat</var> to select the supported format in FormatID, and to cache values in Stream to its <var>TClipboardData</var> record instance.
          </p>
          <p>
            SetFormat calls <var>BeginUpdate</var> prior to activating the format and loading its value. It calls <var>EndUpdate</var> when the operation has been completed. The value from EndUpdate is used as the return value for the method.
          </p>
          <p>
            SetFormat is called when <var>TGraphic</var> or <var>TPicture</var> class instances are loaded to the clipboard in the <var>Assign</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TClipBoard.AddFormat"/>
          <link id="TClipBoard.Assign"/>
          <link id="#lcl.lcltype.TClipboardFormat">TClipboardFormat</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetFormat.FormatID">
        <short>Format identifier needed for the specified stream.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetFormat.Stream">
        <short>Stream with the content loaded in the method.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.SetSupportedFormats">
        <short>
          <var>SetSupportedFormats</var> - set all supported formats at once.</short>
        <descr>
          <p>
            <var>SetSupportedFormats</var> sets all supported formats at once All data will be empty. This procedure is useful if setting the <var>OnRequest</var> event to put the data on the fly.
          </p>
          <p>Example: Using the PrimarySelection from synedit.pp.</p>
<code>procedure TCustomSynEdit.AcquirePrimarySelection;
  var
    FormatList: TClipboardFormat;
  begin
    if (not SelAvail)
      or (PrimarySelection.OnRequest=@PrimarySelectionRequest) then exit;
    FormatList:=CF_TEXT;
    PrimarySelection.SetSupportedFormats(1,@FormatList);
    PrimarySelection.OnRequest:=@PrimarySelectionRequest;
  end;
</code>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetSupportedFormats.AFormatCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetSupportedFormats.FormatList">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.SetTextBuf">
        <short>Loads the clipboard buffer using the text in the specified PChar value.</short>
        <descr>
          <p>
            <var>SetTextBuf</var> is a method used to load the text specified in <var>Buffer</var> into the clipboard. Buffer is a <var>PChar</var> type, and when not assigned (<b>Nil</b>), is set to <b>#0</b> in the method. Its value is loaded in the <var>TClipboardData</var> instances used for the text clipboard format.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.system.SetTextBuf">SetTextBuf</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetTextBuf.Buffer">
        <short>PChar value loaded into the clipboard.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TClipboard.AsText">
        <short>
          <var>AsText</var> - holds the textual data in the clipboard as a string.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TClipboard.SetAsHtml">
        <short>Puts a HTML string on the clipboard.</short>
        <descr>
          <p>
            Puts a HTML string on the clipboard. On Windows it will automatically insert a ClipBoard Header. The procedure can also (optionally) set a provided plaintext representation of HTML on the ClipBoard.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.SetAsHtml.HTML">
        <short>The HTML string that shall be put on the ClipBoard.</short>
      </element>
      <element name="TClipboard.SetAsHtml.PlainText">
        <short>Optional plain text (string) representation of the HTML.</short>
        <descr>The optional string parameter PlainText is meant to be a plain text representation
               of the HTML string. The user is responsible for the contents of this variable.
               The value of PlainText can later be retrieved via the
               <link id="#TClipBoard.AsText">AsText</link> property.
               If PlainText is an empty string, no plain text is added to the ClipBoard, nor is the
               current plain text content of the ClipBoard cleared.</descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TClipboard.GetAsHtml">
        <short>Retrieves the HTML content of the clipboard (if available).</short>
        <descr>Retrieves the HTML content of the clipboard (if available).
               On Windows it will automatically remove the clipboard header that Windows inserts.
               The resulting HTML string will be UTF-8 encoded.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TClipboard.GetAsHtml.Result">
        <short>The HTML content of the clipboard as a string. Empty string if the function fails.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TClipboard.ClipboardType">
        <short>
          <var>ClipboardType</var> - ctPrimarySelection, ctSecondarySelection, ctClipboard.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TClipboard.FormatCount">
        <short>
          <var>FormatCount</var> - the number of formats available.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TClipboard.Formats">
        <short>
          <var>Formats</var> - the formats being used in the current clipboard.</short>
        <descr>
          <p>
            <var>Formats</var> - the formats being used in the current clipboard</p>
          <p>You can read the formats with this property one by one. But this will result in many requests, which can be very slow (especially on terminals).</p>
          <p>Better use "SupportedFormats". </p>
        </descr>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TClipboard.Formats.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TClipboard.OnRequest">
        <short>
          <var>OnRequest</var> - event handler for a request for clipboard data.
        </short>
        <descr>
          <p>
            <var>OnRequest</var> - event handler for a request for clipboard data.
          </p>
          <p>
            If the clipboard has the ownership,  this event will be called each time data are requested from the clipboard by the application or another application.
          </p>
          <p>There is one special case: </p>
          <p>
            If the clipboard loses ownership the <var>OnRequest</var> event will be called with FormatID=0. This event will be erased on lost of ownership.
          </p>
          <p>
            If the <var>OnRequest</var> event was already set before, the prior method will be called with FormatID=0 to be notified of the loss.
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="PrimarySelection">
        <short>
          <var>PrimarySelection</var> - the first selection if multiple clipboards exist.
        </short>
        <descr>
          <p>
            The PrimarySelection is available on platforms like X. Normally when the user selects some text with the mouse the primary selection is set and when the user clicks the middle mouse button the text is copied to the mouse position. On platforms without multiple clipboards, the PrimarySelection still works in the LCL application, but does not communicate with other applications.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PrimarySelection.Result">
        <short>Returns a variable of type TClipboard.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="SecondarySelection">
        <short>
          <var>SecondarySelection</var> - the second selection if multiple clipboards exist.
        </short>
        <descr>
          <p>
            The SecondarySelection is available on platforms like X. See PrimarySelection for more details. There is no standard how to use the secondary selection, so it is free to use. X supports a dozen more selections, but they are not supported by the LCL.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SecondarySelection.Result">
        <short>Returns a variable of type TClipboard.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="Clipboard">
        <short>
          <var>Clipboard</var> the function called to access the clipboard with an optional type specifier.
        </short>
        <descr>
          <p>
            The Clipboard is available on most platforms and normally used by Copy/Paste.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Clipboard.Result">
        <short>Returns a variable of type TClipboard.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="Clipboard.ClipboardType">
        <short>
          <var>ClipboardType</var> - optional argument to specify type of clipboard.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetClipboard">
        <short>
          <var>SetClipboard</var> - sets up and returns a <var>NewClipboard</var>, with an optional type specifier.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetClipboard.Result">
        <short>Returns a variable of type TClipboard.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetClipboard.ClipboardType">
        <short>
          <var>ClipboardType</var> - optional argument to specify type of clipboard.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetClipboard.NewClipboard">
        <short>
          <var>NewClipboard</var> - the new clipboard to be set up.</short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="FreeAllClipboards">
        <short>
          <var>FreeAllClipboards</var> - frees all existing clipboards, releasing their resources.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="RegisterClipboardFormat">
        <short>
          <var>RegisterClipboardFormat</var> add the supplied format name to the register of clipboard formats.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="RegisterClipboardFormat.Result">
        <short>Returns the registered clipboard format.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="RegisterClipboardFormat.Format">
        <short>The name of the required format as a string.</short>
      </element>
      <element name="TClipboard.GetComponentAsText">
        <short>
          <var>GetComponentAsText</var> - read the component as text, if supported.</short>
      </element>
    </module>
    <!-- Clipbrd -->
  </package>
</fpdoc-descriptions>
