<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">

    <!--
    ====================================================================
      ValEdit
    ====================================================================
    -->

    <module name="ValEdit">
      <short>Implements the TValueListEditor grid control.</short>
      <descr>
        <p>
          <file>valedit.pas</file> contains classes and types needed for the TValueListEditor control. It is a specialized 2-column grid control used to display and edit key / value pairs.
        </p>
        <p>
          The following components are added to the Additional tab in the Lazarus IDE component palette:
        </p>
        <ul>
          <li>TValueListEditor</li>
        </ul>
      </descr>

      <!-- unresolved reference Visibility: default -->
      <element name="Contnrs"/>
      <element name="SysUtils"/>
      <element name="Classes"/>
      <element name="Variants"/>
      <element name="LazUtf8"/>
      <element name="Controls"/>
      <element name="StdCtrls"/>
      <element name="Grids"/>
      <element name="LResources"/>
      <element name="Dialogs"/>
      <element name="LCLType"/>
      <element name="Laz2_XMLCfg"/>
      <element name="LCLStrConsts"/>

      <element name="TEditStyle">
        <short>
          Indicates the editor style for items in TValueListEditor.
        </short>
        <descr>
          <p>
            <var>TEditStyle</var> is an enumeration type with values that indicate the editor style used for an item in <var>TValueListEditor</var>. TEditStyle is the type used for the <var>TItemProp.EditStyle</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TItemProp.EditStyle">TItemProp.EditStyle</link>
        </seealso>
      </element>
      <element name="TEditStyle.esSimple">
        <short>Displays an editor without decoration for the cell.</short>
      </element>
      <element name="TEditStyle.esEllipsis">
        <short>Displays an ellipsis button next to the cell editor.</short>
      </element>
      <element name="TEditStyle.esPickList">
        <short>Displays a pick list for the cell editor.</short>
      </element>

      <element name="TVleSortCol">
        <short>
          Indicates the sort order for items in TValueListEditor.
        </short>
        <descr>
            <p>
              <var>TVleSortCol</var> is an enumeration type with values that indicate the sort order for items in <var>TValueListEditor</var>. Values in TVleSortCol refer to the ordinal position of the column used in the <var>TValueListEditor.Sort</var> method.
            </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Sort">TValueListEditor.Sort</link>
        </seealso>
      </element>
      <element name="TVleSortCol.colKey">
        <short>The Key column is used to sort items.</short>
      </element>
      <element name="TVleSortCol.colValue">
        <short>The Value column is used to sort items.</short>
      </element>

      <element name="TItemProp">
        <short>
          Represents items in the TValueListEditor control.
        </short>
        <descr>
          <p>
            <var>TItemProp</var> is a <var>TPersistent</var> descendant that represents items in the <var>TValueListEditor</var> control. TItemProp provides properties and methods to define the editor used for a Key-Value pair. These include the editor style, editing mask, maximum length, pick list values, and read-only status for the item.
          </p>
          <p>
            TItemProp maintains a reference to the TValueListEditor for the item, and allows access to the properties, methods, and events for the grid control.
          </p>
          <p>
            TItemProp is the type used for items in the <var>TItemPropList</var> container, and
            stored in the <var>TValueListEditor.ItemProps</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList">TItemPropList</link>
          <link id="TValueListEditor.ItemProps">TValueListEditor.ItemProps</link>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
        </seealso>
      </element>

      <element name="TItemProp.FGrid"/>
      <element name="TItemProp.FEditMask"/>
      <element name="TItemProp.FEditStyle"/>
      <element name="TItemProp.FPickList"/>
      <element name="TItemProp.FMaxLength"/>
      <element name="TItemProp.FReadOnly"/>
      <element name="TItemProp.FKeyDesc"/>

      <element name="TItemProp.GetPickList">
        <short>Gets the value for the PickList property.</short>
        <descr/>
        <seealso>
          <link id="TItemProp.PickList"/>
        </seealso>
      </element>
      <element name="TItemProp.GetPickList.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TItemProp.PickListChange">
        <short>Implements the OnChange event handler for the PickList property.</short>
        <descr></descr>
        <seealso>
          <link id="TItemProp.PickList"/>
        </seealso>
      </element>
      <element name="TItemProp.PickListChange.Sender">
        <short>Object for the event notification.</short>
      </element>

      <element name="TItemProp.SetEditMask">
        <short>Sets the value for the EditMask property.</short>
        <seealso>
          <link id="TItemProp.EditMask"/>
        </seealso>
      </element>
      <element name="TItemProp.SetEditMask.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TItemProp.SetMaxLength">
        <short>Sets the value for the MaxLength property.</short>
        <seealso>
          <link id="TItemProp.MaxLength"/>
        </seealso>
      </element>
      <element name="TItemProp.SetMaxLength.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TItemProp.SetReadOnly">
        <short>Sets the value for the ReadOnly property.</short>
        <seealso>
          <link id="TItemProp.ReadOnly"/>
        </seealso>
      </element>
      <element name="TItemProp.SetReadOnly.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TItemProp.SetEditStyle">
        <short>Sets the value for the EditStyle property.</short>
        <seealso>
          <link id="TItemProp.EditStyle"/>
        </seealso>
      </element>
      <element name="TItemProp.SetEditStyle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TItemProp.SetPickList">
        <short>Sets the value for the PickList property.</short>
        <seealso>
          <link id="TItemProp.PickList"/>
        </seealso>
      </element>
      <element name="TItemProp.SetPickList.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TItemProp.SetKeyDesc">
        <short>Sets the value for the KeyDesc property.</short>
        <seealso>
          <link id="TItemProp.KeyDesc"/>
        </seealso>
      </element>
      <element name="TItemProp.SetKeyDesc.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TItemProp.AssignTo">
        <short>
          Stores property values to the specified persistent object.
        </short>
        <descr>
          <p>
            <var>AssignTo</var> is a procedure used to store property values in the class instance to the specified persistent object. AssignTo ensures that <var>Dest</var> is a <var>ItemProp</var> class instance prior to storing the following properties in the target:
          </p>
          <ul>
            <li>EditMask</li>
            <li>EditStyle</li>
            <li>KeyDesc</li>
            <li>PickList</li>
            <li>MaxLength</li>
            <li>ReadOnly</li>
          </ul>
          <p>
            If Dest is not a TItemProp class instance, the inherited AssignTo method is called.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TItemProp.AssignTo.Dest">
        <short>Persistent object to receive values from the class.</short>
      </element>

      <element name="TItemProp.Create">
        <short>
          Constructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited method. Create ensures that the <var>TValueListEditor</var> instance in <var>AOwner</var> is used as the owner of the item.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor"/>
        </seealso>
      </element>
      <element name="TItemProp.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TItemProp.Destroy">
        <short>
          Destructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for the class instance. Destroy frees resources allocated for the <var>PickList</var> property, and calls the inherited Destroy method.
          </p>
        </descr>
        <seealso>
          <link id="TItemProp.PickList"/>
        </seealso>
      </element>

      <element name="TItemProp.EditMask">
        <short>
          Specifies the edit mask used when editing the value for the item.
        </short>
        <descr>
          <p>
            <var>EditMask</var> is a <var>String</var> property which specifies the edit mask used when editing an item in <var>TValueListEditor</var>. EditMask can contain the edit mask notation used in <var>TMaskEdit</var>, such as:
          </p>
          <dl>
              <dt><b>\</b></dt>
              <dd>
                Quotes the following character; i. e. '\-' inserts the literal '-' character
              </dd>
              <dt><b>&lt;</b></dt>
              <dd>Converts following characters to upper case</dd>
              <dt><b>&gt;</b></dt>
              <dd>Converts following characters to lower case</dd>
              <dt><b>l</b></dt>
              <dd>Allows an optional letter value [A-Z][a-z]</dd>
              <dt><b>L</b></dt>
              <dd>Requires a letter value [A-Z][a-z]</dd>
              <dt><b>a</b></dt>
              <dd>Optional alphanumeric character [A-Z][a-z][0-9]</dd>
              <dt><b>A</b></dt>
              <dd>Required alphanumeric character [A-Z][a-z][0-9]</dd>
              <dt><b>c</b></dt>
              <dd>Optional UTF-8-encoded character [#32-#255]</dd>
              <dt><b>C</b></dt>
              <dd>Required UTF-8-encoded character [#32-#255]</dd>
              <dt><b>9</b></dt>
              <dd>Optional numeric value [0-9]</dd>
              <dt><b>0</b></dt>
              <dd>Required numeric value [0-9]</dd>
              <dt><b>#</b></dt>
              <dd>Optional sign or numeric value [+-][0-9]</dd>
              <dt><b>:</b></dt>
              <dd>Inserts the hour/minute time separator [:]</dd>
              <dt><b>/</b></dt>
              <dd>Inserts the date separator [/]</dd>
              <dt><b>h</b></dt>
              <dd>Optional hexadecimal character [0-9][A-F]</dd>
              <dt><b>H</b></dt>
              <dd>Required hexadecimal character [0-9][A-F]</dd>
              <dt><b>b</b></dt>
              <dd>Optional binary character</dd>
              <dt><b>B</b></dt>
              <dd>Required binary character</dd>
              <dt><b>!</b></dt>
              <dd>Trims leading space characters</dd>
          </dl>
          <p>
            Changing the value in EditMask causes the TValueListEditor (which owns the item) to be redrawn when its EditorMode property is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomStringGrid.EditorMode">TCustomStringGrid.EditorMode</link>
        </seealso>
      </element>

      <element name="TItemProp.EditStyle">
        <short>
          Identifies the type of editor used for the item value.
        </short>
        <descr>
          <p>
            <var>EditStyle</var> is a <var>TEditStyle</var> property which indicates the editor style to use for the item value. See <var>TEditStyle</var> for more information about the enumeration values and their meanings.
          </p>
          <p>
            Changing the value in EditStyle causes the <var>TValueListEditor</var> (which owns the item) to be redrawn when its EditorMode property is set to <b>True</b>.
          </p>
          <remark>
            At run-time, adding values to the <var>PickList</var> overrides use of <var>esSimple</var> in EditStyle; the value <var>esPickList</var> will automatically be used.
          </remark>
        </descr>
        <seealso>
          <link id="TEditStyle">TEditStyle</link>
          <link id="TItemProp.PickList">TItemProp.PickList</link>
          <link id="#lcl.grids.TCustomStringGrid.EditorMode">TCustomStringGrid.EditorMode</link>
        </seealso>
      </element>

      <element name="TItemProp.KeyDesc">
        <short>
          Describes the Key for the item in TValueListEditor.
        </short>
        <descr>
          <p>
            <var>KeyDesc</var> is a <var>String</var> property that describes the Key portion of the Key-Value pair in <var>TValueListEditor</var>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Keys"/>
          <link id="TValueListEditor.ItemProps"/>
        </seealso>
      </element>

      <element name="TItemProp.PickList">
        <short>
          Values that can be selected for the item in TValueListEditor.
        </short>
        <descr>
          <p>
            <var>PickList</var> is a <var>TStrings</var> property which contains values that can be selected for the item in <var>TValueListEditor</var>. Values in PickList are displayed using a combo-box-style drop down when editing the item.
          </p>
          <p>
            Reading the value in PickList ensures that a TStringList class instance is assigned for the property. Its OnChange event handler is set to the private PickListChange method which adjusts the EditStyle to match the intended usage for the item. In other words, an EditStyle of esSimple is changed to esPickList when it contains values.
          </p>
          <p>
            Assigning a new TStringList to PickList causes existing values to be overwritten. The TValueListEditor (which owns the item) is redrawn when its EditorMode property is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.ItemProps"/>
          <link id="TValueListEditor.Values"/>
          <link id="TItemProp.EditStyle">TItemProp.EditStyle</link>
          <link id="#lcl.grids.TCustomStringGrid.EditorMode">TCustomStringGrid.EditorMode</link>
        </seealso>
      </element>

      <element name="TItemProp.MaxLength">
        <short>
          Specifies the maximum length of the item value.
        </short>
        <descr>
          <p>
            <var>MaxLength</var> is an <var>Integer</var> property that specifies the maximum length of the item value in <var>TValueListEditor</var>. Changing the value in MaxLength causes the TValueListEditor (which owns the item) to be redrawn when its EditorMode property is set to <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.ItemProps"/>
          <link id="TValueListEditor.Values"/>
          <link id="#lcl.grids.TCustomStringGrid.EditorMode">TCustomStringGrid.EditorMode</link>
        </seealso>
      </element>

      <element name="TItemProp.ReadOnly">
        <short>Indicates if the value for the item can be changed.</short>
        <descr>
          <p>
            <var>ReadOnly</var> is a <var>Boolean</var> property which indicates if the value for the item can be changed in <var>TValueListEditor</var>. When ReadOnly is <b>True</b>, the value for the item cannot be changed. Changing the value in ReadOnly causes the TValueListEditor (which owns the item) to be redrawn when its <var>EditorMode</var> is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.ItemProps"/>
          <link id="TValueListEditor.Values"/>
          <link id="#lcl.grids.TCustomStringGrid.EditorMode">TCustomStringGrid.EditorMode</link>
        </seealso>
      </element>

      <element name="TItemPropList">
        <short>
          Implements a storage container for items added to TValueListEditor.
        </short>
        <descr>
          <p>
            <var>TItemPropList</var> is a class which implements a storage container for items added to <var>TValueListEditor</var>. TItemPropList uses a TFPObjectList member to store the TItemProp instances in the list. A TValueListStrings member is used for the owner of the list.
          </p>
          <p>
            Properties and Methods are provided to add or maintain the items in the list. Use <var>Items</var> (the default property for the container) to read or write the items defined in the list.
          </p>
        </descr>
        <seealso>
          <link id="TItemProp">TItemProp</link>
          <link id="TItemPropList.Items">TItemPropList.Items</link>
          <link id="TValueListStrings">TValueListStrings</link>
        </seealso>
      </element>

      <element name="TItemPropList.FList"/>
      <element name="TItemPropList.FStrings"/>

      <element name="TItemPropList.GetCount">
        <short>Gets the value for the Count property.</short>
        <seealso>
          <link id="TItemPropList.Count"/>
        </seealso>
      </element>
      <element name="TItemPropList.GetCount.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TItemPropList.GetItem">
        <short>Gets the value for the indexed Items property.</short>
        <seealso>
          <link id="TItemPropList.Items"/>
        </seealso>
      </element>
      <element name="TItemPropList.GetItem.Index">
        <short>Ordinal position in the container with the property value.</short>
      </element>
      <element name="TItemPropList.GetItem.Result">
        <short>Value for the indexed property.</short>
      </element>

      <element name="TItemPropList.SetItem">
        <short>Sets the value for the indexed Items property.</short>
        <seealso>
          <link id="TItemPropList.Items"/>
        </seealso>
      </element>
      <element name="TItemPropList.SetItem.Index">
        <short>Ordinal position in the container with the property value.</short>
      </element>
      <element name="TItemPropList.SetItem.AValue">
        <short>New value for the indexed property.</short>
      </element>

      <element name="TItemPropList.Add">
        <short>
          Appends the specified item to the list.
        </short>
        <descr>
          <p>
            <var>Add</var> is a procedure used to append the specified item to the list. Add appends the <var>TItemProp</var> value in <var>AValue</var> to the internal list for the container. Use <var>Items</var> to access the items in the list by their ordinal position.
          </p>
          <p>
            Use <var>Insert</var> to insert a new item at a specific ordinal position in the list. Use <var>Delete</var> to remove an item in the container. Use <var>Clear</var> to remove all items in the container.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Insert"/>
          <link id="TItemPropList.Delete"/>
          <link id="TItemPropList.Clear"/>
        </seealso>
      </element>
      <element name="TItemPropList.Add.AValue">
        <short>Item to add to the container.</short>
      </element>

      <element name="TItemPropList.Assign">
        <short>
          Sets the items in the container to the specified values.
        </short>
        <descr>
          <p>
            <var>Assign</var> is a procedure which sets the items in the container to the values specified in Source. Assign iterates over the TItemProp instances in Source, and creates new TItemProp instances and calls Assign to update the persistent objects. The newly created items are added to the internal list in the container.
          </p>
          <p>
            No actions are performed in the method when Source is unassigned (contains <var>Nil</var>).
          </p>
        </descr>
        <seealso>
          <link id="TItemProp"/>
        </seealso>
      </element>
      <element name="TItemPropList.Assign.Source">
        <short>New values to store in the list for the container.</short>
      </element>

      <element name="TItemPropList.Clear">
        <short>
          Removes all items in the container.
        </short>
        <descr>
          <p>
            <var>Clear</var> is a procedure used to remove all items in the container. Clear calls the TFPObjectList.Clear method to remove all TItemProp instances stored in the list.
          </p>
          <p>
            Use Delete or Insert to append or insert a new item for the list.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Delete"/>
          <link id="TItemPropList.Insert"/>
        </seealso>
      </element>

      <element name="TItemPropList.Delete">
        <short>
          Removes an item in the container at the specified position.
        </short>
        <descr>
          <p>
            <var>Delete</var> is a procedure used to remove an item in the container at the specified position. Index is the ordinal position for the item in the range <var>0..Count-1</var>.
          </p>
          <p>
            Use Clear to remove all items in the container.
          </p>
          <p>
            Use Add or Insert to store an item in the container.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Clear"/>
          <link id="TItemPropList.Add"/>
          <link id="TItemPropList.Insert"/>
        </seealso>
      </element>
      <element name="TItemPropList.Delete.Index">
        <short>Ordinal position for the item.</short>
      </element>

      <element name="TItemPropList.Exchange">
        <short>
          Swaps the items at the specified positions.
        </short>
        <descr>
          <p>
            <var>Exchange</var> is a procedure used to swap the items at the specified positions in the list. Exchange calls the corresponding method in TFPObjectList using Index1 and Index2 as arguments. Exchange is used in the implementation of the TValueListStrings.Exchange method.
          </p>
        </descr>
        <seealso>
          <link id="TFPObjectList.Exchange">TFPObjectList.Exchange</link>
          <link id="TValueListStrings.Exchange">TValueListStrings.Exchange</link>
        </seealso>
      </element>
      <element name="TItemPropList.Exchange.Index1">
        <short>Ordinal position for the item to be swapped.</short>
      </element>
      <element name="TItemPropList.Exchange.Index2">
        <short>Ordinal position for the item to be swapped.</short>
      </element>

      <element name="TItemPropList.Insert">
        <short>
          Inserts the new item at the specified position in the container.
        </short>
        <descr>
          <p>
            <var>Insert</var> is a procedure used to insert the new item in the container at the specified position. Index specifies the ordinal position in the range <var>0..Count-1</var> where the item will be stored. AValue is the TItemProp instance to store at the specified position. Insert calls the corresponding method in TFPObjectList using Index and AValue as arguments.
          </p>
          <p>
            Use Add to append a new item to the container.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Add"/>
        </seealso>
      </element>
      <element name="TItemPropList.Insert.Index">
        <short>Ordinal position for the new item.</short>
      </element>
      <element name="TItemPropList.Insert.AValue">
        <short>New item to insert into the list.</short>
      </element>

      <element name="TItemPropList.Create">
        <short>
          Constructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the container. Create stores the value in AOwner as the owner of the container. Create allocates the internal TFPObjectList instance used to store Items in the list; objects in the list are owner by the container.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Items"/>
          <link id="TItemPropList.Destroy"/>
        </seealso>
      </element>
      <element name="TItemPropList.Create.AOwner">
        <short>Owner for the container class instance.</short>
      </element>

      <element name="TItemPropList.Destroy">
        <short>
          Destructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for the class instance. Destroy ensures that resources allocated to the internal list are freed; the Items in the list are freed as well. Destroy calls the inherited destructor.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Items"/>
          <link id="TItemPropList.Create"/>
        </seealso>
      </element>

      <element name="TItemPropList.Count">
        <short>
          Number of items in the list for the container.
        </short>
        <descr>
          <p>
            <var>Count</var> is a read-only Integer property that indicates the number of Items in the internal list for the container. Count returns the value from the TFPObjectList.Count property.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Items"/>
        </seealso>
      </element>

      <element name="TItemPropList.Items">
        <short>
          Provides access to items in the container by their ordinal position.
        </short>
        <descr>
          <p>
            <var>Items</var> is an indexed <var>TItemProp</var> property that provides access to items in the container by their ordinal position. Index is the ordinal position in the container in the range <var>0..Count-1</var>.
          </p>
          <p>
            Items is the default property for the class.
          </p>
          <p>
            Use Add to append a new item in the container. Use Insert to insert an item in the list at a specific position.
          </p>
          <p>
            Use Delete to remove an item at a specific position in the container. Use Clear to remove all items in the container.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Add"/>
          <link id="TItemPropList.Insert"/>
          <link id="TItemPropList.Delete"/>
          <link id="TItemPropList.Clear"/>
          <link id="TItemPropList.Count"/>
        </seealso>
      </element>

      <element name="TValueListStrings">
        <short>
          Stores values and item definitions used in TValueListEditor.
        </short>
        <descr>
          <p>
            <var>TValueListStrings</var> is a <var>TStringList</var> descendant used to store keys, values, and item definitions used in TValueListEditor. TValueListStrings provides methods needed to add, maintain, and sort the content in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.Keys"/>
          <link id="TValueListEditor.Values"/>
          <link id="TValueListEditor.ItemProps"/>
          <link id="#rtl.classes.TStringList">TStringList</link>
        </seealso>
      </element>

      <element name="TValueListStrings.FGrid"/>
      <element name="TValueListStrings.FItemProps"/>

      <element name="TValueListStrings.GetItemProp">
        <short>Gets the item definition for the specified key name or index position.</short>
        <descr>
          <p>
            GetItemProp is a <var>TItemProp</var> function used to get an item definition for the specified key name or index position in the AKeyOrIndex argument. AKeyOrIndex is a variant type and contains the string with the name for a key, or the Integer row number for the item.
          </p>
          <p>
            When a String value is used, the IndexOfName method is called to get the ordinal position for the key name. An Exception is raised if the key name does not exist in the string list.
          </p>
          <p>
            The item definition in the associated grid control is retrieved using the ordinal position, and stored in the return value. An Exception is raised if the item definition in the list has not been assigned (contains <b>Nil</b>).
          </p>
          <p>
            No actions are performed in the method when Count is zero (0), or when UpdateCount contains a non-zero value. The return value is <b>Nil</b> for either case.
          </p>
        </descr>
        <errors>
          <p>
            Raises an Exception if a key with the specified name was not found in the item property list for the grid control.
          </p>
          <p>
            Raises an Exception if the item property for the key name in unassigned (contains <b>Nil</b>).
          </p>
        </errors>
      </element>
      <element name="TValueListStrings.GetItemProp.AKeyOrIndex">
        <short>Key name or index position for the item definition.</short>
      </element>
      <element name="TValueListStrings.GetItemProp.Result">
        <short>TItemProp instance with the definition for the requested key name or index.</short>
      </element>

      <element name="TValueListStrings.QuickSortStringsAndItemProps">
        <short>Performs a quick sort for the string and TItemProp instances in the list.</short>
        <descr>
          <p>
            Duplicates the functionality of TStringList.QuickSort, but also sorts the ItemProps.
          </p>
        </descr>
      </element>
      <element name="TValueListStrings.QuickSortStringsAndItemProps.L">
        <short>Index position for the first value in the sort.</short>
      </element>
      <element name="TValueListStrings.QuickSortStringsAndItemProps.R">
        <short>Index position for the second value in the sort.</short>
      </element>
      <element name="TValueListStrings.QuickSortStringsAndItemProps.CompareFn">
        <short>Compare function used to implement the sort routine.</short>
      </element>

      <element name="TValueListStrings.CanHideShowingEditorAtIndex">
        <short>Indicates if the cell editor for the control is visible but not focused.</short>
      </element>
      <element name="TValueListStrings.CanHideShowingEditorAtIndex.Index">
        <short>Index for the non-title row in the associated grid control.</short>
      </element>
      <element name="TValueListStrings.CanHideShowingEditorAtIndex.Result">
        <short><b>True</b> when the cell editor for the control is visible but not focused.</short>
      </element>

      <element name="TValueListStrings.InsertItem">
        <short>
          Inserts an item with the specified value at the position in Index.
        </short>
        <descr>
          <p>
            <var>InsertItem</var> is an overloaded procedure used to insert an item with the specified value(s) at the position in <var>Index</var>.
          </p>
          <p>
            InsertItem hides a visible cell editor in the control during the insert operation. InsertItem calls the <var>TItemPropList.Insert</var> method to insert a new item definition at the position in Index. A visible cell editor is restored after the item has been inserted.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList.Insert"/>
          <link id="#rtl.classes.TStringList">TStringList</link>
        </seealso>
      </element>
      <element name="TValueListStrings.InsertItem.Index">
        <short>Ordinal position for the new item and value.</short>
      </element>
      <element name="TValueListStrings.InsertItem.S">
        <short>Value for the new item.</short>
      </element>
      <element name="TValueListStrings.InsertItem.AObject">
        <short>Object with the definition for the new item.</short>
      </element>

      <element name="TValueListStrings.Put">
        <short>
          Sets the value for the indexed Strings property.
        </short>
        <descr>
          <p>
            <var>Put</var> is a procedure used to store a value at the specified ordinal position. Put ensures that the <var>TValueListEditor</var> which owns the class instance hides a visible cell editor at the specified ordinal position. Put calls the inherited method to store the value in <var>S</var> at the position in <var>Index</var>. A visible cell editor in TValueListEditor is restored when needed.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TStrings.Strings">TStrings.Strings</link>
          <link id="#rtl.classes.TStringList">TStringList</link>
        </seealso>
      </element>
      <element name="TValueListStrings.Put.Index">
        <short>Ordinal position for the value.</short>
      </element>
      <element name="TValueListStrings.Put.S">
        <short>Value to store at the specified position.</short>
      </element>

      <element name="TValueListStrings.Create">
        <short>
          Constructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance. Create calls the inherited constructor. Create uses the value in <var>AOwner</var> as the owner of the class instance. Create allocates resources need for the internal <var>TItemPropList</var> used for item definitions in the control.
          </p>
        </descr>
        <seealso>
          <link id="TItemPropList"/>
        </seealso>
      </element>
      <element name="TValueListStrings.Create.AOwner">
        <short>TValueListEditor that owns the class instance.</short>
      </element>

      <element name="TValueListStrings.Destroy">
        <short>
          Destructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for the class instance. Destroy ensures that resources allocated for the internal item definitions are freed. Destroy calls the inherited destructor.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TStringList.Destroy">TStringList.Destroy</link>
        </seealso>
      </element>

      <element name="TValueListStrings.Assign">
        <short>
          Stores properties from Source in the current class instance.
        </short>
        <descr>
          <p>
            <var>Assign</var> is an overridden procedure used to store properties from <var>Source</var> in the current class instance.
          </p>
          <p>
            Assign uses the <var>TValueListEditor</var> which own the class instance to invalidate cached rows in the control. Assign calls Clear to remove any existing values and to prevent an exception when sorting values. Assign calls the inherited method using <var>Source</var> as an argument. If Source is a <var>TValueListStrings</var> instance, its internal item definitions are stored in the current class instance.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor"/>
          <link id="TValueListStrings"/>
          <link id="#rtl.classes.TStrings.Assign">TStrings.Assign</link>
        </seealso>
      </element>
      <element name="TValueListStrings.Assign.Source">
        <short>Persistent object with properties copied into the current class instance.</short>
      </element>

      <element name="TValueListStrings.Clear">
        <short>
          Removes all item values and definitions in the class instance.
        </short>
        <descr>
          <p>
            <var>Clear</var> is an overridden procedure used to remove all item names, values, and item definitions in the class instance. Clear uses the <var>TValueListEditor</var> which owns the class instance to clear its cached rows, and to hide a visible editor in the control. Clear calls the inherited method, and clears the internal list of item definitions for the class. TValueListEditor restores a visible editor when needed.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor"/>
          <link id="#rtl.classes.TStringList.Clear">TStringList.Clear</link>
        </seealso>
      </element>

      <element name="TValueListStrings.CustomSort">
        <short>
          Provides access to the QuickSortStringsAndItemProps method.
        </short>
        <descr>
          <p>
            <var>CustomSort</var> is an overridden procedure re-implemented to provide access to the inherited QuickSortStringsAndItemProps method.
          </p>
        </descr>
        <seealso>
          <link id="TValueListStrings.CustomSort"/>
        </seealso>
      </element>
      <element name="TValueListStrings.CustomSort.Compare">
        <short>Comparison routine for the sorting operation.</short>
      </element>

      <element name="TValueListStrings.Delete">
        <short>
          Deletes the item value and definition at the specified position.
        </short>
        <descr>
          <p>
            <var>Delete</var> is a procedure used to delete the item value and definition at the specified ordinal position.
          </p>
          <p>
            Delete uses the <var>TValueListEditor</var> owner to invalidate any cached rows in the control. A visible editor in the control is also hidden. Delete calls the inherited method using <var>Index</var> as an argument. Deletes removes the internal item definition at the position specified in Index. A visible editor in TValueListEditor is restored when needed.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TValueListStrings.Delete.Index">
        <short>Ordinal position of the value and definition to delete.</short>
      </element>

      <element name="TValueListStrings.Exchange">
        <short>
          Swaps the values and item definitions at the specified positions.
        </short>
        <descr>
          <p>
            <var>Exchange</var> is a procedure used to swap the values and item definitions at the specified positions.
          </p>
          <p>
            Exchange uses the <var>TValueListEditor</var> that owns the class to invalidate any cached rows in the control. A visible editor in the control is also hidden. Exchange calls the inherited method using the values in <var>Index1</var> and <var>Index2</var> as arguments. Exchange swaps the item definitions at the specified positions as well. A visible editor in TValueListEditor is restored when needed.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TValueListStrings.Exchange.Index1">
        <short>Position of the item value and definition to swap.</short>
      </element>
      <element name="TValueListStrings.Exchange.Index2">
        <short>Position of the item value and definition to swap.</short>
      </element>

      <element name="TKeyValuePair">
        <short>Stores Key and Value information used for items in TValueListEditor.</short>
        <descr>
          <p>
            <var>TKeyValuePair</var> is a record type used to store Key and Value information for the rows in TValueListEditor. TKeyValuePair is used when an editor is activated for a row in <var>TValueListEditor</var>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor"/>
        </seealso>
      </element>
      <element name="TKeyValuePair.Key">
        <short>Key data a row.</short>
      </element>
      <element name="TKeyValuePair.Value">
        <short>Value data for a row.</short>
      </element>

      <element name="TDisplayOption">
        <short>
          Represents display capabilities in TValueListEditor.
        </short>
        <descr>
          <p>
            <var>TDisplayOption</var> is an enumeration type with values that define display capabilities available in TValueListEditor. TDisplayOption values are stored in the TDisplayOptions set type.
          </p>
        </descr>
        <seealso>
          <link id="TDisplayOptions">TDisplayOptions</link>
          <link id="TValueListEditor.DisplayOptions">TValueListEditor.DisplayOptions</link>
        </seealso>
      </element>
      <element name="TDisplayOption.doColumnTitles">
        <short>Displays column titles.</short>
      </element>
      <element name="TDisplayOption.doAutoColResize">
        <short>Automatically resizes columns to the width of its content.</short>
      </element>
      <element name="TDisplayOption.doKeyColFixed">
        <short>Displays the Key names column as a fixed caption column.</short>
      </element>

      <element name="TDisplayOptions">
        <short>
          Set type used to store TDisplayOption enumeration values.
        </short>
        <descr>
          <p>
            <var>TDisplayOptions</var> is a set type used to store values from the <var>TDisplayOption</var> enumeration. TDisplayOptions is the type used for the <var>TValueListEditor.DisplayOptions</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TDisplayOption">TDisplayOption</link>
          <link id="TValueListEditor.DisplayOptions">TValueListEditor.DisplayOptions</link>
        </seealso>
      </element>

      <element name="TKeyOption">
        <short>Represents Key actions used in TValueListEditor.</short>
        <descr>
          <p>
            <var>TKeyOption</var> is an enumeration type with values that control key actions allowed for Key-Value data in <var>TValueListEditor</var>. TKeyOption values are stored in the <var>TKeyOptions</var> set type.
          </p>
        </descr>
        <seealso>
          <link id="TKeyOptions">TKeyOptions</link>
          <link id="TValueListEditor.KeyOptions">TValueListEditor.KeyOptions</link>
        </seealso>
      </element>
      <element name="TKeyOption.keyEdit">
        <short>Allows editing of Key data.</short>
      </element>
      <element name="TKeyOption.keyAdd">
        <short>Allows adding new Key data.</short>
      </element>
      <element name="TKeyOption.keyDelete">
        <short>Allows deleting Key data.</short>
      </element>
      <element name="TKeyOption.keyUnique">
        <short>Key data must be unique.</short>
      </element>

      <element name="TKeyOptions">
        <short>
          Stores values from the TKeyOption enumeration.
        </short>
        <descr>
          <p>
            <var>TKeyOptions</var> is a set type used to store values from the <var>TKeyOption</var> enumeration. TKeyOptions is the type used to implement the <var>TValueListEditor.KeyOptions</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TKeyOptions">TKeyOptions</link>
          <link id="TValueListEditor.KeyOptions">TValueListEditor.KeyOptions</link>
        </seealso>
      </element>

      <element name="TGetPickListEvent">
        <short>
          Specifies an event handler signalled when loading the PickList for an item in TValueListEditor.
        </short>
        <descr>
          <p>
            <var>TGetPickListEvent</var> is an object procedure which specifies an event handler signalled when loading the PickList for an item in <var>TValueListEditor</var>. TGetPickListEvent allows the application to provide custom values in the PickList for an item using the esPickList editor style.
          </p>
          <p>
            TGetPickListEvent is the type used for the <var>TValueListEditor.OnGetPickList</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.OnGetPickList">TValueListEditor.OnGetPickList</link>
        </seealso>
      </element>
      <element name="TGetPickListEvent.Sender">
        <short>TValueListEditor for the event notification.</short>
      </element>
      <element name="TGetPickListEvent.KeyName">
        <short>Key name for the selected row.</short>
      </element>
      <element name="TGetPickListEvent.Values">
        <short>Pick list values for the selected row.</short>
      </element>

      <element name="TOnValidateEvent">
        <short>
          Specifies an event handler signalled to validate a changed row in TValueListEditor.
        </short>
        <descr>
          <p>
            <var>TOnValidateEvent</var> is an object procedure type that specifies an event handler signalled when changes to a row in <var>TValueListEditor</var> are validated. Arguments passed to the event handler identify the control, column and row numbers, and the Key name and value.
          </p>
          <p>
            TOnValidateEvent is the type used to implement the <var>TValueListEditor.OnValidate</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.OnValidate">TValueListEditor.OnValidate</link>
        </seealso>
      </element>
      <element name="TOnValidateEvent.Sender">
        <short>TValueListEditor instance for the event notification.</short>
      </element>
      <element name="TOnValidateEvent.ACol">
        <short>Column number in the control.</short>
      </element>
      <element name="TOnValidateEvent.ARow">
        <short>Row number on the control.</short>
      </element>
      <element name="TOnValidateEvent.KeyName">
        <short>Key name for the modified row.</short>
      </element>
      <element name="TOnValidateEvent.KeyValue">
        <short>Key data for the modified row.</short>
      </element>

      <element name="TValueListEditor">
        <short>
          A visual grid control for editing Key-Value pairs.
        </short>
        <descr>
          <p>
            <var>TValueListEditor</var> is a <var>TCustomStringGrid</var> descendant which implements a grid-style editor control for Key-Value pairs. TValueListEditor displays a two column grid where the first column is read-only, and lists the key names. The second column is for editing the associated values for the key names.
          </p>
          <p>
            TValueListEditor provides properties with the Keys and Values displayed in the rows and columns for the control. The Cells property allows access using the familiar column and row number mechanism used in grid controls. The Strings property allows access to the strings used for the Key and Value in a row.
          </p>
          <remark>
            Since version 2.2.0, Keys will no longer allow the name/value separator used in the Strings property to be entered as a value in the Key column. When entered, focus is moved to the Value column. If pasted into the Key column, the value is silently discarded.
          </remark>
          <p>
            The ItemProps property is used to configure the cell editors used for the Keys and Values. This includes setting the editor style, edit mask, maximum length for the value, a list of selectable pick list values, and a read-only flag. Descriptive text for the Key name can also be stored in the ItemProps.
          </p>
          <p>
            Features and behavior for the control can be specified using the Options, DisplayOptions, and KeyOptions properties.
          </p>
          <p>
            TValueListEditor implements methods used to perform editing actions in the control, including:
          </p>
          <ul>
            <li>Clear</li>
            <li>DeleteRow</li>
            <li>DeleteColRow</li>
            <li>FindRow</li>
            <li>InsertRow</li>
            <li>InsertRowWithValues</li>
            <li>Sort</li>
          </ul>
        </descr>
        <seealso>
          <link id="TItemPropList"/>
          <link id="TItemProp"/>
          <link id="#lcl.grids.tcustomstringgrid">TCustomStringGrid</link>
        </seealso>
      </element>

      <element name="TValueListEditor.FTitleCaptions"/>
      <element name="TValueListEditor.FStrings"/>
      <element name="TValueListEditor.FKeyOptions"/>
      <element name="TValueListEditor.FDisplayOptions"/>
      <element name="TValueListEditor.FDropDownRows"/>
      <element name="TValueListEditor.FOnGetPickList"/>
      <element name="TValueListEditor.FOnStringsChange"/>
      <element name="TValueListEditor.FOnStringsChanging"/>
      <element name="TValueListEditor.FOnValidate"/>
      <element name="TValueListEditor.FRowTextOnEnter"/>
      <element name="TValueListEditor.FLastEditedRow"/>
      <element name="TValueListEditor.FUpdatingKeyOptions"/>

      <element name="TValueListEditor.GetItemProp">
        <short>Gets the value for the indexed ItemProps property.</short>
        <descr></descr>
        <seealso>
          <link id="TValueListEditor.ItemProps"/>
        </seealso>
      </element>
      <element name="TValueListEditor.GetItemProp.AKeyOrIndex">
        <short>Key name or position for the item definition.</short>
      </element>
      <element name="TValueListEditor.GetItemProp.Result">
        <short>Item definition for the specified key name or position.</short>
      </element>

      <element name="TValueListEditor.SetItemProp">
        <short>Sets the value for the indexed ItemProps property.</short>
        <descr></descr>
        <seealso>
          <link id="TValueListEditor.ItemProps"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetItemProp.AKeyOrIndex">
        <short>Key name or position for the item definition.</short>
      </element>
      <element name="TValueListEditor.SetItemProp.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TValueListEditor.StringsChange">
        <short>Implements the OnChange event handler for the Strings property.</short>
        <descr></descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
        </seealso>
      </element>
      <element name="TValueListEditor.StringsChange.Sender">
        <short>Control triggering the event notification.</short>
      </element>

      <element name="TValueListEditor.StringsChanging">
        <short>Implements the OnChanging event handler in the Strings property.</short>
        <descr></descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
        </seealso>
      </element>
      <element name="TValueListEditor.StringsChanging.Sender">
        <short>Control triggering the event notification.</short>
      </element>

      <element name="TValueListEditor.GetOptions">
        <short>Gets the value for the Options property.</short>
        <descr></descr>
        <errors></errors>
        <seealso>
          <link id="TValueListEditor.Options"/>
        </seealso>
      </element>
      <element name="TValueListEditor.GetOptions.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TValueListEditor.GetKey">
        <short>Gets the value for the indexed Keys property.</short>
        <descr></descr>
        <seealso>
          <link id="TValueListEditor.Key"/>
        </seealso>
      </element>
      <element name="TValueListEditor.GetKey.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TValueListEditor.GetKey.Index">
        <short>Position for the Key name in Keys.</short>
      </element>

      <element name="TValueListEditor.GetValue">
        <short>Gets the value for the indexed Values property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.Values"/>
        </seealso>
      </element>
      <element name="TValueListEditor.GetValue.Result">
        <short>Value for the property.</short>
      </element>
      <element name="TValueListEditor.GetValue.Key">
        <short>Key name to find in the method.</short>
      </element>

      <element name="TValueListEditor.SetDisplayOptions">
        <short>Sets the values in the DisplayOptions property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.DisplayOptions"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetDisplayOptions.AValue">
        <short>New values for the property.</short>
      </element>

      <element name="TValueListEditor.SetDropDownRows">
        <short>Sets the value in the DropDownRows property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.DropDownRows"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetDropDownRows.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TValueListEditor.SetKeyOptions">
        <short>Sets the values in the KeyOptions property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.KeyOptions"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetKeyOptions.AValue">
        <short>New values for the property.</short>
      </element>

      <element name="TValueListEditor.SetKey">
        <short>Sets the value in the indexed Keys property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.Keys"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetKey.Index">
        <short>Position of the Key name in the item definitions.</short>
      </element>
      <element name="TValueListEditor.SetKey.Value">
        <short>New value for the Key name.</short>
      </element>

      <element name="TValueListEditor.SetValue">
        <short>Sets the value in the indexed Values property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.Values"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetValue.Key">
        <short>Key name for the specified value.</short>
      </element>
      <element name="TValueListEditor.SetValue.Value">
        <short>New value for the specified Key name.</short>
      </element>

      <element name="TValueListEditor.SetOptions">
        <short>Sets the values in the Options property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.Options"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetOptions.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TValueListEditor.SetStrings">
        <short>Sets the values in the Strings property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.Strings"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetStrings.AValue">
        <short>New values for the property.</short>
      </element>

      <element name="TValueListEditor.SetTitleCaptions">
        <short>Sets the values in the TitleCaptions property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.TitleCaptions"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetTitleCaptions.AValue">
        <short>New values for the property.</short>
      </element>

      <element name="TValueListEditor.UpdateTitleCaptions">
        <short>Updates TitleCaptions with the captions for the key and value columns.</short>
        <descr>
          <p>
            Clears existing values in TitleCaptions.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.TitleCaptions"/>
        </seealso>
      </element>
      <element name="TValueListEditor.UpdateTitleCaptions.KeyCap">
        <short>Caption used for the Key column.</short>
      </element>
      <element name="TValueListEditor.UpdateTitleCaptions.ValCap">
        <short>Caption used for the Value column.</short>
      </element>

      <element name="TValueListEditor.WSRegisterClass">
        <short>Registers the class type for the widget set.</short>
        <descr/>
        <seealso>
          <link id="#lcl.grids.TCustomGrid.WSRegisterClass">TCustomGrid.WSRegisterClass</link>
        </seealso>
      </element>

      <element name="TValueListEditor.SetFixedCols">
        <short>
          Sets the value for the FixedCols property.
        </short>
        <descr>
          <p>
            <var>SetFixedCols</var> is a procedure used to set the value for the <var>FixedCols</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.FixedCols"/>
        </seealso>
      </element>
      <element name="TValueListEditor.SetFixedCols.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TValueListEditor.ShowColumnTitles">
        <short>
          Assigns and displays the column titles for the Key and Value columns.
        </short>
        <descr>
          <p>
            <var>ShowColumnTitles</var> is a procedure used to assign and display the column titles for the Key and Value columns in the control. ShowColumnTitles requires column titles to be enabled by including the value <var>doColumnTitles</var> in the <var>DisplayOptions</var> property. No actions are performed in the method if column titles have not been enabled.
          </p>
          <p>
            The text used in column titles is derived from resource strings, or values in the <var>TitleCaptions</var> property (when assigned). The default column titles are:
          </p>
          <dl>
            <dt>rsVLEKey</dt>
            <dd>Resource string with the caption for the Key column</dd>
            <dt>rsVLEValue</dt>
            <dd>Resource string with the caption for the Value column</dd>
          </dl>
          <p>
            Values in TitleCaptions are used when the property contains a values at the following ordinal positions:
          </p>
          <dl>
            <dt>0</dt>
            <dd>Value used as the caption for the Key column</dd>
            <dt>1</dt>
            <dd>Value used as the caption for the Value column</dd>
          </dl>
          <p>
            ShowColumnTitles stores the column titles to the first row in the grid control using the <var>Cells</var> property.
          </p>
          <p>
            ShowColumnTitles is called automatically when the control is created, and when values in <var>DisplayOptions</var> or <var>TitleCaptions</var> are changed.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.DisplayOptions"/>
          <link id="TValueListEditor.TitleCaptions"/>
          <link id="TDisplayOption"/>
          <link id="#lcl.grids.TCustomStringGrid.Cells">TCustomStringGrid.Cells</link>
        </seealso>
      </element>

      <element name="TValueListEditor.AdjustRowCount">
        <short>
          Sets the number of visible rows for the control.
        </short>
        <descr>
          <p>
            <var>AdjustRowCount</var> is a procedure used to set the number of visible rows for the control. AdjustRowCount uses the <var>Strings</var> property to get the total number of rows needed for the control, including the fixed caption row (if needed). When the value differs from <var>RowCount</var>, the <var>Row</var> and RowCount properties are updated.
          </p>
          <p>
            AdjustRowCount is called from event handlers when values in Strings or <var>TitleCaptions</var> are changed, and when values are included in or excluded from <var>DisplayOptions</var>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.TitleCaptions"/>
          <link id="TValueListEditor.DisplayOptions"/>
          <link id="TValueListEditor.RowCount"/>
          <link id="#lcl.grids.TCustomDrawGrid.Row">TCustomDrawGrid.Row</link>
        </seealso>
      </element>

      <element name="TValueListEditor.ColRowExchanged">
        <short>
          Exchanges row values at the specified positions.
        </short>
        <descr>
          <p>
            <var>ColRowExchanged</var> is a procedure used to exchange row values at the specified positions. ColRowExchanged extends the inherited method by applying the changes to the <var>Strings</var> property after adjusting the index positions for the number of FixedRows in the control. ColRowExchanged calls the inherited method using <var>IsColumn</var>, <var>Index</var>, and <var>WithIndex</var> as arguments.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomDrawGrid.ColRowExchanged">TCustomDrawGrid.ColRowExchanged</link>
        </seealso>
      </element>
      <element name="TValueListEditor.ColRowExchanged.IsColumn">
        <short>
          Indicates if the exchange applies to the column only or the entire row.
        </short>
      </element>
      <element name="TValueListEditor.ColRowExchanged.Index">
        <short>First position to be swapped.</short>
      </element>
      <element name="TValueListEditor.ColRowExchanged.WithIndex">
        <short>Second position to be swapped.</short>
      </element>

      <element name="TValueListEditor.ColRowDeleted">
        <short>
          Performs actions needed when a row is deleted in the control.
        </short>
        <descr>
          <p>
            <var>ColRowDeleted</var> is an overridden procedure used to perform actions needed when a Key-Value row is deleted in the control. ColRowDeleted ensures that <var>EditorMode</var> is set to <b>False</b>, and deletes the active row in the <var>Strings</var> property. ColRowDeleted calls the inherited method using <var>IsColumn</var> and <var>Index</var> as arguments.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomDrawGrid.ColRowDeleted">TCustomDrawGrid.ColRowDeleted</link>
        </seealso>
      </element>
      <element name="TValueListEditor.ColRowDeleted.IsColumn">
        <short>Indicates the action is for a column (and not a row).</short>
      </element>
      <element name="TValueListEditor.ColRowDeleted.Index">
        <short>Ordinal position of the affected item.</short>
      </element>

      <element name="TValueListEditor.DefineCellsProperty">
        <short>
          Not used in the current implementation.
        </short>
        <descr>
          <remark>
            <var>DefineCellsProperty</var> has an empty implementation in <var>TValueListEditor</var> to prevent reading and writing the <var>Cells</var> property as defined in an ancestor class.
          </remark>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomStringGrid.DefineCellsProperty">TCustomStringGrid.DefineCellsProperty</link>
        </seealso>
      </element>
      <element name="TValueListEditor.DefineCellsProperty.Filer">
        <short>Component streamer for the class.</short>
      </element>

      <element name="TValueListEditor.InvalidateCachedRow">
        <short>
          Resets the last edited row number for the control.
        </short>
        <descr>
          <p>
            <var>InvalidateCachedRow</var> is a procedure used to invalidate the internal member variable used to track the last row edited in the control. When <var>Strings</var> contains data, the internal tracker is set to -1. When Strings has no data (length is 0), the internal tracker defaults to the first visible non-fixed row. The editing buffers for both the key and value are cleared.
          </p>
          <p>
            InvalidateCachedRow is called when the <var>TValueListStrings</var> instance in <var>Strings</var> performs <var>Add</var>, <var>Delete</var>, <var>Insert</var>, and <var>Sort</var> operations.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings">TValueListEditor.Strings</link>
          <link id="TValueListStrings">TValueListStrings</link>
        </seealso>
      </element>

      <element name="TValueListEditor.GetAutoFillColumnInfo">
        <short>
          Gets the display priority for an auto-fill column.
        </short>
        <descr>
          <p>
            <var>GetAutoFillColumnInfo</var> is used to get the minimum and maximum width, and relative display priority, for an automatically sized column in the grid. GetAutoFillColumnInfo overrides the behavior from the ancestor class to account for the two column limit for the grid.
          </p>
          <p>
            <var>Index</var> is the column number examined in the method. When Index is 1 (the Value column), the relative priority is set to 1. When Index is 0 (the Key column), <var>DisplayOptions</var> is used to determine if the Key column is fixed. The priority is set to 0 when fixed, or 1 when DisplayOptions does not include the value <var>doKeyColFixed</var>.
          </p>
          <remark>
            Values in the aMin and aMax arguments are not used; they were used in an ancestor class, but are not required in TValueListEditor.
          </remark>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomGrid.GetAutoFillColumnInfo">TCustomGrid.GetAutoFillColumnInfo</link>
        </seealso>
      </element>
      <element name="TValueListEditor.GetAutoFillColumnInfo.Index">
        <short>Column number examined in the method.</short>
      </element>
      <element name="TValueListEditor.GetAutoFillColumnInfo.aMin">
        <short>Not used in TValueListEditor.</short>
      </element>
      <element name="TValueListEditor.GetAutoFillColumnInfo.aMax">
        <short>Not used in TValueListEditor.</short>
      </element>
      <element name="TValueListEditor.GetAutoFillColumnInfo.aPriority">
        <short>Relative display priority for the column.</short>
      </element>

      <element name="TValueListEditor.GetEditText">
        <short>
          Gets the value used in the editor for the specified cell.
        </short>
        <descr>
          <p>
            <var>GetEditText</var> is a <var>String</var> function used to get the value used in the editor for the cell at the specified coordinates. The return value contains the content in <var>Cells</var> stored at the coordinates in <var>ACol</var> and <var>ARow</var>.
          </p>
          <p>
            GetEditText signals the <var>OnGetEditText</var> event handler (when assigned) to allow a custom value to be provided to the cell editor.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.GetEditText.Result">
        <short>Value for the cell editor.</short>
      </element>
      <element name="TValueListEditor.GetEditText.ACol">
        <short>Column number.</short>
      </element>
      <element name="TValueListEditor.GetEditText.ARow">
        <short>Row number.</short>
      </element>

      <element name="TValueListEditor.GetCells">
        <short>
          Gets the value in Cells at the specified row and column numbers.
        </short>
        <descr>
          <p>
            <var>GetCells</var> is a <var>String</var> function used to get the value in the Cells property at the specified row and column numbers. GetCells extends the behavior from the ancestor class by using the Strings property as the source of data in the control.
          </p>
          <p>
            When <var>ACol</var> contains 0 (the Key column), the <var>Names</var> property in <var>Strings</var> is used to get the value for the current row. When ACol contains 1 (the Value column), the <var>ValueFromIndex</var> method in Strings is used to get the value for the current row.
          </p>
          <p>
            The return value is an empty string (<b>''</b>) when ARow is 0 (zero) and column titles are enabled in <var>DisplayOptions</var>. Use the <var>TitleCaptions</var> property to set the values displayed when DisplayOptions includes the value <var>doColumnTitles</var>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.TitleCaptions"/>
          <link id="#rtl.classes.TStrings.Names">TStrings.Names</link>
          <link id="#rtl.classes.TStrings.ValueFromIndex">TStrings.ValueFromIndex</link>
        </seealso>
      </element>
      <element name="TValueListEditor.GetCells.Result">
        <short>Value for the cell at the specified row and column number.</short>
      </element>
      <element name="TValueListEditor.GetCells.ACol">
        <short>Column number to read in Cells.</short>
      </element>
      <element name="TValueListEditor.GetCells.ARow">
        <short>Row number to read in Cells.</short>
      </element>

      <element name="TValueListEditor.GetDefaultEditor">
        <short>Gets the editor control for the specified column number.</short>
        <descr>
          <p>
            <var>GetDefaultEditor</var> is a <var>TWinControl</var> function used to get the editor control for the specified column number. The return value is the TWinControl used as the editor for the cell in the specified column number.
          </p>
          <p>
            GetDefaultEditor saves the current contents in Cells for the selected Row number to allow use of RestoreCurrentRow. GetDefaultEditor calls the inherited method to enable the logic implemented in the ancestor class.
          </p>
          <p>
            KeyOptions is used to determine if the <var>VK_Delete</var> key needs to be be handled in the editor control. EditorOptions is updated to include or exclude the value <var>EO_HOOKKEYDOWN</var> based on the presence of KeyDelete in KeyOptions.
          </p>
          <p>
            When Column contains 1 (the Value column), the item definition in ItemProps is used to configure the default editor. Its EditStyle is applied by calling the EditorByStyle method. For a PickList-style editor, pick list values in the item definition are assigned to the combo-box editor control and its drop-down row count is set to the value in DropDownRows. The OnGetPickList event handler is signalled (when assigned) to get user-defined values in the editor control. The read-only status for the editor is updated to reflect the value in the item definition.
          </p>
          <p>
            When Column contains 0 (the Key column), the editor is marked as read-only when <var>KeyOptions</var> does <b>not</b> include the value <var>KeyEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.KeyOptions"/>
          <link id="TValueListEditor.ItemProps"/>
          <link id="TValueListEditor.OnGetPickList"/>
          <link id="TItemProp.EditStyle"/>
          <link id="TItemProp.ReadOnly"/>
          <link id="#lcl.grids.TCustomGrid.EditorOptions">TCustomGrid.EditorOptions</link>
        </seealso>
      </element>
      <element name="TValueListEditor.GetDefaultEditor.Column">
        <short>Column number for the editor control.</short>
      </element>
      <element name="TValueListEditor.GetDefaultEditor.Result">
        <short>Editor control for the specified column number.</short>
      </element>

      <element name="TValueListEditor.GetRowCount">
        <short>Gets the value for the RowCount property.</short>
        <descr/>
        <seealso>
          <link id="TValueListEditor.RowCount"/>
          <link id="#lcl.grids.TCustomGrid.RowCount">TCustomGrid.RowCount</link>
        </seealso>
      </element>
      <element name="TValueListEditor.GetRowCount.Result">
        <short>Row count for the grid control.</short>
      </element>

      <element name="TValueListEditor.KeyDown">
        <short>
          Provides support for special keys used in the control.
        </short>
        <descr>
          <p>
            <var>KeyDown</var> is a procedure used to provide support for special keys used in the control. KeyDown calls the inherited method. The <var>KeyOptions</var> property is used to determine if actions are performed for keystrokes, including:
          </p>
          <dl>
            <dt>KeyAdd (<var>VK_INSERT</var>)</dt>
            <dd>
              Inserts a row at the current position. by calling InsertRow. Key is set to #0.
            </dd>
            <dt>KeyDelete (<var>Ctrl + VK_DELETE</var>)</dt>
            <dd>
              Deletes the row at the current position by calling DeleteRow. Key is set to #0.
            </dd>
            <dt>(<var>VK_ESCAPE</var>)</dt>
            <dd>
              Restores the values for the current row by calling RestoreCurrentRow. Key is set to #0.
            </dd>
          </dl>
        </descr>
        <seealso>
          <link id="TValueListEditor.KeyOptions">TValueListEditor.KeyOptions</link>
        </seealso>
      </element>
      <element name="TValueListEditor.KeyDown.Key">
        <short>Key code for the key down event.</short>
      </element>
      <element name="TValueListEditor.KeyDown.Shift">
        <short>Shift / Ctrl / Alt modifier for the key down event.</short>
      </element>

      <element name="TValueListEditor.KeyPress">
        <short>Handles special key presses for the control.</short>
        <descr>
          <p>
            KeyPress is an overridden method in TValueListEditor which handles key press events for special characters used in the control.
          </p>
          <p>
            It calls the inherited method on entry to handle the character value in Key. If not handled in the ancestor class, it prevents the name/value separator used in Strings from being entered in the Name column for the control. If detected, Key is set to #0 and the focus is changed to the Value column and its editor is activated.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.Keys"/>
          <link id="TValueListEditor.Values"/>
        </seealso>
      </element>
      <element name="TValueListEditor.KeyPress.Key">
        <short>Key value examined in the method.</short>
      </element>

      <element name="TValueListEditor.LoadContent">
        <short>
          Loads configuration and content from the specified XML configuration file.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.LoadContent.Cfg">
        <short>XML configuration file with values loaded in the method.</short>
      </element>
      <element name="TValueListEditor.LoadContent.Version">
        <short>Control version for the stored content.</short>
      </element>

      <element name="TValueListEditor.ResetDefaultColWidths">
        <short>
          Resets grid columns to their default widths.
        </short>
        <descr>
          <p>
            <var>ResetDefaultColWidths</var> is a procedure used to reset grid columns to their default widths. ResetDefaultColWidths uses values in the <var>AutoFillColumns</var> and <var>DisplayOptions</var> properties to determine the actions needed in the method. When AutoFillColumns is <b>False</b>, the inherited <var>ResetDefaultColWidths</var> method is called to set the default column widths.
          </p>
          <p>
            Otherwise, DisplayOptions is used to determine if the Key column is displayed as a fixed column. When DisplayOptions contains the value <var>doKeyColFixed</var>, the Key column (column 0) is resized to fit the longest value in the <var>Keys</var> property and the control is redrawn.
          </p>
          <p>
            No actions are performed in the method when AutoFillColumns is <b>True</b> and <var>DisplayOptions</var> does not include the value <var>doKeyColFixed</var>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.DisplayOptions"/>
          <link id="#lcl.grids.TCustomDrawGrid.AutoFillColumns">TCustomDrawGrid.AutoFillColumns</link>
        </seealso>
      </element>

      <element name="TValueListEditor.SaveContent">
        <short>
          Saves configuration and content in the control to the specified XML configuration file.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.SaveContent.Cfg">
        <short>XML configuration file where values are stored in the method.</short>
      </element>

      <element name="TValueListEditor.SetCells">
        <short>
          Sets the value in the Cells property at the specified position.
        </short>
        <descr>
          <p>
            <var>SetCells</var> is an overridden procedure used to set the value in the Cells property at the specified row and column position. SetCells ensures that values written to the Cells property are also stored in the Strings property using the "Key=Value" convention used in the control. The new cell value in AValue is applied to either the Key or the Value based on the column number in ACol (0 is for Key, 1 is for Value).
          </p>
          <p>
            Cells with a row number of 0 (zero) are used for fixed title captions when they are enabled in the DisplayOptions for the control. When DisplayOptions contains the value <var>doColumnTitles</var>, the inherited SetCells method is called to display the new title caption entered at run-time. Use <var>TitleCaptions</var> to set the text for column title captions at design-time.
          </p>
          <p>
            Use <var>Cells</var> to read or write a value in the property.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings">TValueListEditor.Strings</link>
          <link id="TValueListEditor.DisplayOptions">TValueListEditor.DisplayOptions</link>
          <link id="#lcl.grids.TCustomStringGrid.Cells">TCustomStringGrid.Cells</link>
          <link id="#lcl.grids.TCustomStringGrid.SetCells">TCustomStringGrid.SetCells</link>
          <link id="#lcl.grids.TCustomGrid.KeyPress">TCustomGrid.KeyPress</link>
        </seealso>
      </element>
      <element name="TValueListEditor.SetCells.ACol">
        <short>Column number for the new cell value.</short>
      </element>
      <element name="TValueListEditor.SetCells.ARow">
        <short>Row number for the new cell value.</short>
      </element>
      <element name="TValueListEditor.SetCells.AValue">
        <short>New value for the cell.</short>
      </element>

      <element name="TValueListEditor.SetColCount">
        <short>Sets the value for the ColCount property.</short>
        <descr>
          <p>
            SetColCount is an overridden method in TValueListEditor used to set the value for the ColCount property. It raises an EGridException exception if the property is set to any value other than 2.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomGrid.ColCount">TCustomGrid.ColCount</link>
          <link id="#lcl.grids.TCustomGrid.SetColCount">TCustomGrid.SetColCount</link>
        </seealso>
      </element>
      <element name="TValueListEditor.SetColCount.AValue">
        <short>New value for the ColCount property.</short>
      </element>

      <element name="TValueListEditor.SetEditText">
        <short>
          Sets the cell value at the specified position.
        </short>
        <descr>
          <p>
            <var>SetEditText</var> is an overridden procedure used to set the value for the cell at the specified column and row position. SetEditText calls the inherited method, and stores the string in AValue in the <var>Cells</var> property.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomStringGrid.Cells">TCustomStringGrid.Cells</link>
          <link id="#lcl.grids.TCustomStringGrid.SetEditText">TCustomStringGrid.SetEditText</link>
        </seealso>
      </element>
      <element name="TValueListEditor.SetEditText.ACol">
        <short>Column number for the new value.</short>
      </element>
      <element name="TValueListEditor.SetEditText.ARow">
        <short>Row number for the new value.</short>
      </element>
      <element name="TValueListEditor.SetEditText.Value">
        <short>Value to store in the Cells for the control.</short>
      </element>

      <element name="TValueListEditor.SetFixedRows">
        <short>
          Sets the value in the FixedRows property.
        </short>
        <descr>
          <p>
            <var>SetFixedRows</var> is a procedure used to set the value in the FixedRows property. SetFixedRows is overridden in <var>TValueListEditor</var> to update the <var>DisplayOptions</var> for the control when the property value is changed.
          </p>
          <p>
            <var>AValue</var> is the number of fixed rows to use for title captions in the control. No actions are performed in the method when AValue contains a value other than 0 or 1.
          </p>
          <p>
            When <var>AValue</var> is 0, the value doColumnTitles is excluded from the DisplayOptions property. When AValue is 1, the value <var>doColumnTitles</var> is included in the DisplayOptions property.
          </p>
          <p>
            Use <var>TitleCaptions</var> to set the title captions for columns at design-time. Use DisplayOptions to enable or disable title captions for the control.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.DisplayOptions"/>
          <link id="TValueListEditor.TitleCaptions"/>
          <link id="#lcl.grids.TCustomDrawGrid.FixedRows">TCustomDrawGrid.FixedRows</link>
        </seealso>
      </element>
      <element name="TValueListEditor.SetFixedRows.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TValueListEditor.SetRowCount">
        <short>
          Sets the value in the RowCount property.
        </short>
        <descr>
          <p>
            <var>SetRowCount</var> is an overridden procedure used to set the value in the <var>RowCount</var> property. <var>AValue</var> contains the new value for the property.
          </p>
          <p>
            AValue cannot contain a value smaller than the number of <var>FixedRows</var> for the grid control. An <var>EGridException</var> exception is raised when AValue is less than the number of FixedRows for the control.
          </p>
          <p>
            SetRowCount uses the <var>RowCount</var> value inherited from the grid to determine if any actions are required in the method. No actions are performed in the method when the inherited RowCount contains the same value as AValue.
          </p>
          <p>
            SetRowCount ensures that the <var>Strings</var> property contains the number of entries needed for the new property value minus the FixedRows for the grid. Lines are added to or deleted from Strings until the number of entries matches the needed value.
          </p>
        </descr>
        <errors>
          Raises an EGridException exception with the message in rsFixedRowsTooBig when the number of FixedRows is larger than the new value for the property.
        </errors>
        <seealso>
          <link id="TValueListEditor.RowCount"/>
          <link id="TValueListEditor.Strings"/>
          <link id="#lcl.grids.TCustomDrawGrid.FixedRows">TCustomDrawGrid.FixedRows</link>
          <link id="#lcl.grids.TCustomDrawGrid.RowCount">TCustomDrawGrid.RowCount</link>
          <link id="#lcl.grids.EGridException">EGridException</link>
        </seealso>
      </element>
      <element name="TValueListEditor.SetRowCount.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TValueListEditor.Sort">
        <short>
          Sorts the values in Strings.
        </short>
        <descr>
          <p>
            <var>Sort</var> is a procedure used to sort the values in Strings. Sort disables an active editor in the control prior to sorting values when <var>Options</var> includes the value <var>goAlwaysShowEditor</var>. The active editor is restored when the sorting operation is completed.
          </p>
          <p>
            Sort calls the inherited method using the values in Index, IndxFrom, and IndxTo as arguments. Please note that the <var>ColSorting</var> argument is not actually used in the sort operation; <b>True</b> is always used for column sorting.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomGrid.Sort">TCustomGrid.Sort</link>
        </seealso>
      </element>
      <element name="TValueListEditor.Sort.ColSorting">
        <short>Not used n the current implementation.</short>
      </element>

      <element name="TValueListEditor.TitlesChanged">
        <short>
          Event handler signalled when TitleCaptions is changed.
        </short>
        <descr>
          <p>
            <var>TitlesChanged</var> is a procedure which provides a default implementation for the event handler signalled when values in <var>TitleCaptions</var> are changed. TitlesChanged calls <var>ShowColumnTitles</var> and <var>AdjustRowCount</var> methods, and calls <var>Invalidate</var> to force the control to be redrawn.
          </p>
          <p>
            TitlesChanged is assigned to the <var>OnChange</var> event handler in <var>TitleCaptions</var> when the control is created.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.TitlesChanged.Sender">
        <short>Control triggering the event notification.</short>
      </element>

      <element name="TValueListEditor.ValidateEntry">
        <short>
          Validates data entered in a cell in the control.
        </short>
        <descr>
          <p>
            <var>ValidateEntry</var> is an overridden <b>Boolean</b> function used to validate data entered in a cell in the control. The return value is <b>True</b> if NewValue is acceptable for use in the cell at the specified coordinates.
          </p>
          <p>
            ValidateEntry calls the inherited method, which signals the <var>OnValidateEntry</var> event handler (when assigned). ValidateEntry checks for duplicate names in the Key column when the value <var>KeyUnique</var> is included in the <var>KeyOptions</var> property.
          </p>
          <p>
            The return value is <b>False</b> if a duplicate Key name is found in <var>Strings</var>. A dialog message is displayed with the message in <var>rsVLEDuplicateKey</var>, and the Editor re-selects the content in the control.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.ValidateEntry.ACol">
        <short>Column number for the new value.</short>
      </element>
      <element name="TValueListEditor.ValidateEntry.ARow">
        <short>Row number for the new value.</short>
      </element>
      <element name="TValueListEditor.ValidateEntry.OldValue">
        <short>The old value for the cell.</short>
      </element>
      <element name="TValueListEditor.ValidateEntry.NewValue">
        <short>The new value for the cell.</short>
      </element>
      <element name="TValueListEditor.ValidateEntry.Result">
        <short><b>True</b> if the cell value is valid.</short>
      </element>

      <element name="TValueListEditor.Create">
        <short>
          Constructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance. Create allocates resources for the <var>Strings</var> and <var>TitleCaptions</var> properties, and calls the inherited constructor. Create sets the event handlers in Strings and TitleCaptions to methods in the class instance. Create sets the default values for the following properties:
          </p>
          <dl>
            <dt>ColCount</dt>
            <dd>2</dd>
            <dt>RowCount</dt>
            <dd>2</dd>
            <dt>FixedCols</dt>
            <dd>0</dd>
            <dt>Options</dt>
            <dd>[ goFixedVertLine, goFixedHorzLine, goVertLine, goHorzLine, goColSizing, goEditing, goAlwaysShowEditor, goThumbTracking ]</dd>
            <dt>Col</dt>
            <dd>1</dd>
            <dt>DropDownRows</dt>
            <dd>8</dd>
            <dt>AutoFillColumns</dt>
            <dd>True</dd>
          </dl>
          <p>
            Create initializes the value for internal member used to track the last row edited in the control.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Destroy"/>
        </seealso>
      </element>
      <element name="TValueListEditor.Create.AOwner">
        <short>Owner of the control instance.</short>
      </element>

      <element name="TValueListEditor.Destroy">
        <short>
          Destructor for the class instance.
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for the class instance. Destroy frees resources allocated to the <var>Strings</var> and <var>TitleCaptions</var> properties, and calls the inherited Destroy method.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Create"/>
        </seealso>
      </element>

      <element name="TValueListEditor.Clear">
        <short>
          Removes the content in the control.
        </short>
        <descr>
          <p>
            <var>Clear</var> is a procedure used to remove the content in the control. Clear calls the Clear method in <var>Strings</var> to remove all Key / Value information stored in the property. This action also frees the item definitions stored in an internal list in Strings.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TItemPropList.Clear"/>
          <link id="TItemProp"/>
        </seealso>
      </element>

      <element name="TValueListEditor.DeleteColRow">
        <short>
          Deletes the column or row at the specified position.
        </short>
        <descr>
          <p>
            <var>DeleteColRow</var> is a procedure used to delete the column or row at the specified position.
          </p>
          <p>
            <var>IsColumn</var> indicates whether the action is intended for a column or a row. <var>Index</var> is the ordinal position for the column or row removed in the method.
          </p>
          <p>
            When IsColumn is <b>True</b>, the <var>DeleteCol</var> method is called. This results in an exception being raised in DeleteCol; columns cannot be removed in TValueListEditor. Otherwise, the <var>DeleteRow</var> method is called to remove the specified row number.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.DeleteRow"/>
          <link id="TValueListEditor.DeleteCol"/>
        </seealso>
      </element>
      <element name="TValueListEditor.DeleteColRow.IsColumn">
        <short><b>True</b> when a column is affected in the method.</short>
      </element>
      <element name="TValueListEditor.DeleteColRow.Index">
        <short>Position of the row or column in the control.</short>
      </element>

      <element name="TValueListEditor.DeleteRow">
        <short>
          Deletes the row at the specified position.
        </short>
        <descr>
          <p>
            <var>DeleteRow</var> is an overridden procedure used to delete the row at the specified position in the control. DeleteRow ensures that the row in <var>Index</var> is not a fixed row with title captions, and that <var>Strings</var> contains data. No actions are performed in the method when these conditions are not met.
          </p>
          <p>
            DeleteRow calls the inherited method to remove the specified row number in the grid.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="#lcl.grids.TCustomDrawGrid.FixedRows">TCustomDrawGrid.FixedRows</link>
          <link id="#lcl.grids.TCustomDrawGrid.DeleteRow">TCustomDrawGrid.DeleteRow</link>
        </seealso>
      </element>
      <element name="TValueListEditor.DeleteRow.Index">
        <short>Position of the row to be deleted.</short>
      </element>

      <element name="TValueListEditor.DeleteCol">
        <short>
          Prevents column deletion in control.
        </short>
        <descr>
          <p>
            <var>DeleteCol</var> is an overridden procedure in <var>TValueListEditor</var>.
             Deleting a column is not a valid operation in TValueListEditor, and is overridden to block access to the inherited method.
          </p>
          <p>
            DeleteCol raises an <var>EGridException</var> exception with the message in <var>rsVLEInvalidRowColOperation</var>.
          </p>
        </descr>
        <errors>
          <p>
            Raises an EGridException exception with the message in rsVLEInvalidRowColOperation.
          </p>
        </errors>
        <seealso>
          <link id="EGridException"/>
          <link id="rsVLEInvalidRowColOperation"/>
        </seealso>
      </element>
      <element name="TValueListEditor.DeleteCol.Index">
        <short>Position of the column to be deleted.</short>
      </element>

      <element name="TValueListEditor.FindRow">
        <short>
          Locates the row with the specified Key name.
        </short>
        <descr>
          <p>
            <var>FindRow</var> is a <var>Boolean</var> function used to locate the row with the specified Key name.
          </p>
          <p>
            <var>aRow</var> contains the relative row number where <var>KeyName</var> was located. The row number is relative to the fixed title caption row (when visible).The value in aRow is not updated if <var>KeyName</var> is not found in <var>Strings</var>.
          </p>
          <p>
            The return value is <b>True</b> when KeyName exists in the Strings property.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="#lcl.grids.TCustomDrawGrid.FixedRows">TCustomDrawGrid.FixedRows</link>
          <link id="#rtl.classes.TStrings.IndexOfName">TStrings.IndexOfName</link>
        </seealso>
      </element>
      <element name="TValueListEditor.FindRow.KeyName">
        <short>Key name to locate in the method.</short>
      </element>
      <element name="TValueListEditor.FindRow.aRow">
        <short>Relative row number for the specified key name.</short>
      </element>
      <element name="TValueListEditor.FindRow.Result">
        <short><b>True</b> when the key name exists in the control.</short>
      </element>

      <element name="TValueListEditor.InsertColRow">
        <short>
          Inserts a column or a row at the specified position.
        </short>
        <descr>
          <p>
            <var>InsertColRow</var> is a procedure used to add a column or a row at the specified position in the control.
          </p>
          <p>
            <var>IsColumn</var> indicates if a column is being inserted in the method. When IsColumn contains <b>False</b>, a row is inserted at the specified position. <var>Index</var> contains the row number where a blank item is inserted in Strings. Index is relative the number of FixedRows in the control; ie. when FixedRows = 1 and Index = 1, the item is inserted at position 0 in Strings. When FixedRows = 0 and Index = 1, the item is inserted at position 1 in Strings.
          </p>
          <p>
            When IsColumn is <b>True</b>, an <var>EGridException</var> exception is raised with the message in rsVLEInvalidRowColOperation. Inserting a column is not a valid operation in <var>TValueListEditor</var>.
          </p>
        </descr>
        <errors>
          <p>
            Raises an EGridException exception with the message in rsVLEInvalidRowColOperation when adding a column in the control.
          </p>
        </errors>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListStrings.InsertItem"/>
          <link id="#lcl.grids.TCustomDrawGrid.FixedRows">TCustomDrawGrid.FixedRows</link>
        </seealso>
      </element>
      <element name="TValueListEditor.InsertColRow.IsColumn">
        <short><b>False</b> if the insert operation is for a row.</short>
      </element>
      <element name="TValueListEditor.InsertColRow.Index">
        <short>Relative position for the inserted column.</short>
      </element>

      <element name="TValueListEditor.InsertRow">
        <short>
          Inserts a row at the specified position.
        </short>
        <descr>
          <p>
            <var>InsertRow</var> is an <var>Integer</var> function used to insert a row with the specified <var>KeyName</var> and <var>Value</var> at the current <var>Row</var> in the control.
          </p>
          <p>
            <var>Append</var> indicates if the inserted row is added after the current Row in the control. When Append is <b>False</b>, the values in KeyName and Value are inserted at the current row. Row is updated to reflect the row number for the inserted values.
          </p>
          <p>
            The return value contains the row number relative to the fixed title captions where the KeyName and Value were inserted.
          </p>
          <p>
            Use <var>InsertRowWithValues</var> to insert a new row with the key and value passed in an array argument.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.InsertRowWithValues"/>
          <link id="TValueListStrings.InsertItem"/>
          <link id="#lcl.grids.TCustomDrawGrid.FixedRows">TCustomDrawGrid.FixedRows</link>
          <link id="#lcl.grids.TCustomDrawGrid.Row">TCustomDrawGrid.Row</link>
          <link id="#lcl.grids.TCustomStringGrid.Cells">TCustomStringGrid.Cells</link>
        </seealso>
      </element>
      <element name="TValueListEditor.InsertRow.KeyName">
        <short>Key name to use in the new row.</short>
      </element>
      <element name="TValueListEditor.InsertRow.Value">
        <short>Value to use in the new row.</short>
      </element>
      <element name="TValueListEditor.InsertRow.Append">
        <short><b>True</b> if a row is inserted after the current row.</short>
      </element>
      <element name="TValueListEditor.InsertRow.Result">
        <short>Relative row number for the inserted row.</short>
      </element>

      <element name="TValueListEditor.InsertRowWithValues">
        <short>
          Inserts a row with the specified values at the specified position.
        </short>
        <descr>
          <p>
            <var>InsertRowWithValues</var> is a procedure used to insert a row with the specified values at the specified row number in the control. <var>Index</var> contains the position in <var>Strings</var> where the new row is inserted.
          </p>
          <p>
            <var>Values</var> is an array of <var>Strings</var> with the Key name and value for the inserted row. Values should contain two elements in the array. The first is the key name. The second is the item value. The second array element can be omitted, and defaults to an empty string (<b>''</b>). Additional elements present in the array are <b>not</b> used in the method.
          </p>
          <p>
            InsertRowWithValues inserts the key name and value in Strings at the specified position using the "Key=Value" convention used in the control.
          </p>
          <p>
            Use <var>InsertRow</var> to insert a new row using separate key and item value parameters.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.InsertRow"/>
        </seealso>
      </element>
      <element name="TValueListEditor.InsertRowWithValues.Index">
        <short>Position for the inserted row.</short>
      </element>
      <element name="TValueListEditor.InsertRowWithValues.Values">
        <short>Array with the key name and value for the inserted row.</short>
      </element>

      <element name="TValueListEditor.ExchangeColRow">
        <short>
          Swaps the columns or rows at the specified positions.
        </short>
        <descr>
          <p>
            <var>ExchangeColRow</var> is an overridden procedure used to swap the columns or rows at the specified positions in the control.
          </p>
          <p>
            <var>IsColumn</var> indicates if the exchanged values are in a column or in a row in the control. The two-column layout in TValueListEditor prevents exchanging column values. When IsColumn is <b>True</b>, an <var>EGridException</var> exception is raised with the message in <var>rsVLEInvalidRowColOperation</var>.
          </p>
          <p>
            When IsColumn is <b>False</b>, the inherited ExchangeColRow method is called using <var>Index</var> and <var>WithIndex</var> as arguments.
          </p>
        </descr>
        <errors>
          <p>
            An EGridException exception is raised with the message in rsVLEInvalidRowColOperation when trying to exchange column values in the control.
          </p>
        </errors>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.ExchangeColRow.IsColumn">
        <short><b>False</b> when exchanging row values.</short>
      </element>
      <element name="TValueListEditor.ExchangeColRow.Index">
        <short>Position for one of the exchanged values.</short>
      </element>
      <element name="TValueListEditor.ExchangeColRow.WithIndex">
        <short>Position for one of the exchanged values.</short>
      </element>

      <element name="TValueListEditor.IsEmptyRow">
        <short>
          Indicates if the specified row is empty.
        </short>
        <descr>
          <p>
            <var>IsEmptyRow</var> is an overloaded <var>Boolean</var> function used to determine the Key name and Value for a row contain empty string values (<b>''</b>). One variant omits the row number parameter, and assumes the current <var>Row</var> is used for the comparison. The other variant includes the row number parameter and performs the check for empty values.
          </p>
          <p>
            The return value is <b>True</b> when <var>Strings</var> contains no entries, or when <var>Cells</var> for the specified row number have empty string values (<b>''</b>) in both columns.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="#lcl.grids.TCustomDrawGrid.Row">TCustomDrawGrid.Row</link>
          <link id="#lcl.grids.TCustomStringGrid.Cells">TCustomStringGrid.Cells</link>
        </seealso>
      </element>
      <element name="TValueListEditor.IsEmptyRow.aRow">
        <short>Row number to examine in the method.</short>
      </element>
      <element name="TValueListEditor.IsEmptyRow.Result">
        <short><b>True</b> if the specified row has empty key name and value cells.</short>
      </element>

      <element name="TValueListEditor.LoadFromCSVStream">
        <short>
          Loads the content for the control from the comma-separated values in the specified stream.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.LoadFromCSVStream.AStream">
        <short>TStream instance with the values loaded in the method.</short>
      </element>
      <element name="TValueListEditor.LoadFromCSVStream.ADelimiter">
        <short>Delimiter between cell values; default is Comma (',').</short>
      </element>
      <element name="TValueListEditor.LoadFromCSVStream.UseTitles">
        <short>
          Indicates whether title captions included as the first row in the CSV data.
        </short>
      </element>
      <element name="TValueListEditor.LoadFromCSVStream.FromLine">
        <short>
          Initial line number in the stream loaded in the method.
        </short>
      </element>
      <element name="TValueListEditor.LoadFromCSVStream.SkipEmptyLines">
        <short>
          Indicates whether empty lines are ignored when loading the content for the control.
        </short>
      </element>

      <element name="TValueListEditor.MoveColRow">
        <short>
          Moves the specified column or row to the new position.
        </short>
        <descr>
          <p>
            <var>MoveColRow</var> is a procedure used to move the specified column or row to the new position. <var>IsColumn</var> indicates if the positions are in a column or in a row in the control. The two-column layout in TValueListEditor prevents moving column values. When IsColumn is <b>True</b>, an <var>EGridException</var> exception is raised with the message in <var>rsVLEInvalidRowColOperation</var>.
          </p>
          <p>
            When IsColumn is <b>False</b>, the values in <var>Strings</var> stored at the relative position in <var>FromIndex</var> are deleted. The values are re-inserted in Strings at the relative position in <var>ToIndex</var>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="EGridException"/>
        </seealso>
      </element>
      <element name="TValueListEditor.MoveColRow.IsColumn">
        <short><b>True</b> if the operation affects a column.</short>
      </element>
      <element name="TValueListEditor.MoveColRow.FromIndex">
        <short>Original position of the row or column.</short>
      </element>
      <element name="TValueListEditor.MoveColRow.ToIndex">
        <short>Target position for the row or column.</short>
      </element>

      <element name="TValueListEditor.RestoreCurrentRow">
        <short>
          Restores pre-editing values in the current row.
        </short>
        <descr>
          <p>
            <var>RestoreCurrentRow</var> is a Boolean function used to restore the values for the current row to their state prior to editing in the control. If an editor has been assigned and has focus, it is hidden by calling EditorHide.
          </p>
          <p>
            Values in the internal TKeyValuePair for the last row edited are restored in the Cells for the current Row. The EditorShow method is called to show the active editor after the row values are restored.
          </p>
          <p>
            The return value is <b>True</b> if the pre-editing values were successfully restored in the current Row. The return is <b>False</b> if values were not edited, or an editor was not assigned and focused in the control.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TValueListEditor.RestoreCurrentRow.Result">
        <short><b>True</b> if the values were successfully restored in the current row.</short>
      </element>

      <element name="TValueListEditor.Sort">
        <short>
          Sorts column values in the control.
        </short>
        <descr>
          <p>
            <var>Sort</var> is an overloaded procedure used to sort column values in the grid control. The overloaded variants provide different parameters for the sort operation.
          </p>
          <p>
            <var>ACol</var> is a <var>TVleSortCol</var> value that indicates whether key names or values are sorted in the method. When the variant with aACol is used, the <var>SortColRow</var> method is called to perform the sort.
          </p>
          <p>
            Index contain the position for the column sorted in the method.
          </p>
          <p>
            IndxFrom and IndxTo specify the starting and ending row numbers affected by the sort operation. When the variant with column and row indexes is used, the inherited <var>Sort</var> method is called to perform the sort.
          </p>
          <p>
            Sort hides a visible cell editor during the sort operation. The cell editor is restored (when needed) prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TVleSortCol"/>
          <link id="#lcl.grids.TCustomGrid.Sort">TCustomGrid.Sort</link>
          <link id="#lcl.grids.TCustomDrawGrid.SortColRow">TCustomDrawGrid.SortColRow</link>
        </seealso>
      </element>
      <element name="TValueListEditor.Sort.Index">
        <short>Ordinal position of the column sorted in the method.</short>
      </element>
      <element name="TValueListEditor.Sort.IndxFrom">
        <short>Row with the initial value included in the sort.</short>
      </element>
      <element name="TValueListEditor.Sort.IndxTo">
        <short>Row with the final value included in the sort.</short>
      </element>
      <element name="TValueListEditor.Sort.ACol">
        <short>Column used for the sort operation.</short>
      </element>

      <element name="TValueListEditor.Modified">
        <short>
          Indicates if changes have been made to items in the control.
        </short>
        <descr>
          <p>
            <var>Modified</var> is a <var>Boolean</var> property which indicates if items in the control have been modified. The value in Modified is updated when the <var>OnChange</var> event handler for the <var>Strings</var> property is signalled.
          </p>
          <p>
            Use the <var>OnStringsChange</var> event handler to perform actions needed when the property value has been changed. This event occurs after updating Modified and RowCount, and redrawing the control.
          </p>
          <p>
            Use the <var>OnStringsChanging</var> event handler to perform actions needed prior to storing changes in the Strings property.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.RowCount"/>
          <link id="TValueListEditor.OnStringsChanging"/>
          <link id="TValueListEditor.OnStringsChange"/>
          <link id="#lcl.grids.TCustomStringGrid.Modified">TCustomStringGrid.Modified</link>
        </seealso>
      </element>

      <element name="TValueListEditor.Keys">
        <short>
          Provides indexed access to Key names in the control.
        </short>
        <descr>
          <p>
            <var>Keys</var> is an indexed <var>String</var> property which provides access to key names in the control.
          </p>
          <p>
            <var>Index</var> specifies the ordinal row number in <var>Cells</var> used to read or write the value for the property. The column number in Cells is always 0 (the Key column).
          </p>
          <p>
            Use <var>Values</var> to access the value for a specific Key name in the control.
          </p>
          <remark>
            Since version 2.2.0, Keys will no longer allow the name/value separator used in the Strings property to be used as a value in the property.
          </remark>
        </descr>
        <seealso>
          <link id="TValueListEditor.Values"/>
          <link id="TValueListEditor.Strings"/>
          <link id="#lcl.grids.TCustomStringGrid.Cells">TCustomStringGrid.Cells</link>
        </seealso>
      </element>
      <element name="TValueListEditor.Keys.Index">
        <short>Row number for the Key name in the control.</short>
      </element>

      <element name="TValueListEditor.Values">
        <short>
          Provides indexed access to Values stored in the control.
        </short>
        <descr>
          <p>
            <var>Values</var> is an indexed <var>String</var> property which provides access to values for Key names in the control.
          </p>
          <p>
            <var>Key</var> is a <var>String</var> value with the key name to locate in the <var>Strings</var> for the control. The property value is read from and written to the <var>Cells</var> property in the Value column (1). If Key does not already exist during write access, a new Key/Value pair is added to Strings.
          </p>
          <p>
            Use <var>Keys</var> to read or write key name values used for the items in the control.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Keys"/>
          <link id="TValueListEditor.Strings"/>
          <link id="#lcl.grids.TCustomStringGrid.Cells">TCustomStringGrid.Cells</link>
        </seealso>
      </element>
      <element name="TValueListEditor.Values.Key">
        <short>Key name for the specified value.</short>
      </element>

      <element name="TValueListEditor.ItemProps">
        <short>
          Provides indexed access to item definitions in the control.
        </short>
        <descr>
          <p>
            <var>ItemProps</var> is an indexed <var>TItemProp</var> property which provides access to item definitions used in the control. ItemProps provides access to the properties and methods used to define the editor for a Key-Value pair. These include the editor style, editing mask, maximum length, pick list values, and read-only status for the item.
          </p>
          <p>
            <var>AKeyOrIndex</var> is a <var>Variant</var> value that specifies the key name (String) or the ordinal position (Integer) for the TItemProp instance in the property. Read and write access to instances in ItemProps is redirected to the <var>TItemPropList</var> member in the <var>Strings</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TItemProp"/>
          <link id="TItemPropList"/>
        </seealso>
      </element>
      <element name="TValueListEditor.ItemProps.AKeyOrIndex">
        <short>Key name or position for the item definition.</short>
      </element>

      <element name="TValueListEditor.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TValueListEditor.AlternateColor" link="#lcl.grids.TCustomGrid.AlternateColor"/>
      <element name="TValueListEditor.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TValueListEditor.AutoAdvance" link="#lcl.grids.TCustomGrid.AutoAdvance"/>
      <element name="TValueListEditor.AutoEdit" link="#lcl.grids.TCustomGrid.AutoEdit"/>
      <element name="TValueListEditor.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TValueListEditor.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TValueListEditor.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TValueListEditor.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TValueListEditor.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TValueListEditor.DefaultColWidth" link="#lcl.grids.TCustomGrid.DefaultColWidth"/>
      <element name="TValueListEditor.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>
      <element name="TValueListEditor.DefaultRowHeight" link="#lcl.grids.TCustomGrid.DefaultRowHeight"/>
      <element name="TValueListEditor.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TValueListEditor.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TValueListEditor.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TValueListEditor.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TValueListEditor.ExtendedSelect" link="#lcl.grids.TCustomGrid.ExtendedSelect"/>
      <element name="TValueListEditor.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
      <element name="TValueListEditor.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
      <element name="TValueListEditor.Flat" link="#lcl.grids.TCustomGrid.Flat"/>
      <element name="TValueListEditor.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TValueListEditor.GridLineWidth" link="#lcl.grids.TCustomGrid.GridLineWidth"/>
      <element name="TValueListEditor.HeaderHotZones" link="#lcl.grids.TCustomGrid.HeaderHotZones"/>
      <element name="TValueListEditor.HeaderPushZones" link="#lcl.grids.TCustomGrid.HeaderPushZones"/>
      <element name="TValueListEditor.MouseWheelOption" link="#lcl.grids.TCustomGrid.MouseWheelOption"/>
      <element name="TValueListEditor.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>

      <element name="TValueListEditor.ParentColor">
        <short>
          Uses the Color from the Parent control, when enabled.
        </short>
        <descr>
          <p>
            ParentColor determines if the control should use the Color from the Parent control, when enabled. The default value for the property is <b>False</b> in TValueListEditor.
          </p>
          <p>
            When this property is <b>True</b>, all changes to the Color of the parent will also be applied to the Color of the control, ensuring that they both contain same value. If the Color of the control is changed by the application, then ParentColor will be automatically set to <b>False</b>.
          </p>
          <p>
            Using ParentColor when the Color value is clDefault can cause problems in resolving the actual color value. To obtain the Color property of a control while taking into account clDefault and ParentColor, use the GetColorResolvingParent method. This method might return a non-RGB color, but will never return clDefault. To obtain a purely RGB result use the GetRGBColorResolvingParent method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
          <link id="#lcl.controls.TControl.GetColorResolvingParent">TControl.GetColorResolvingParent</link>
          <link id="#lcl.controls.TControl.GetRGBColorResolvingParent">TControl.GetRGBColorResolvingParent</link>
        </seealso>
      </element>

      <element name="TValueListEditor.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TValueListEditor.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TValueListEditor.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

      <element name="TValueListEditor.RowCount">
        <short>Gets the number of rows for the control.</short>
        <descr>
          <p>
            Read and write access specifiers for the <var>RowCount</var> property are re-implemented in <var>TValueListEditor</var>. They are redirected to the inherited property value, and additional validation is performed when setting a new value for the property. See <link id="TValueListEditor.SetRowCount">SetRowCount</link>.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.GetRowCount"/>
          <link id="TValueListEditor.SetRowCount"/>
          <link id="#lcl.grids.TCustomDrawGrid.RowCount">TCustomDrawGrid.RowCount</link>
        </seealso>
      </element>

      <element name="TValueListEditor.ScrollBars" link="#lcl.grids.TCustomGrid.ScrollBars"/>
      <element name="TValueListEditor.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TValueListEditor.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TValueListEditor.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TValueListEditor.TitleFont" link="#lcl.grids.TCustomGrid.TitleFont"/>
      <element name="TValueListEditor.TitleImageList" link="#lcl.grids.TCustomGrid.TitleImageList"/>
      <element name="TValueListEditor.TitleStyle" link="#lcl.grids.TCustomGrid.TitleStyle"/>
      <element name="TValueListEditor.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TValueListEditor.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TValueListEditor.VisibleColCount" link="#lcl.grids.TCustomGrid.VisibleColCount"/>
      <element name="TValueListEditor.VisibleRowCount" link="#lcl.grids.TCustomGrid.VisibleRowCount"/>
      <element name="TValueListEditor.OnBeforeSelection" link="#lcl.grids.TCustomGrid.OnBeforeSelection"/>
      <element name="TValueListEditor.OnButtonClick" link="#lcl.grids.TCustomGrid.OnButtonClick"/>
      <element name="TValueListEditor.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
      <element name="TValueListEditor.OnCheckboxToggled" link="#lcl.grids.TCustomGrid.OnCheckboxToggled"/>
      <element name="TValueListEditor.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TValueListEditor.OnColRowDeleted" link="#lcl.grids.TCustomDrawGrid.OnColRowDeleted"/>
      <element name="TValueListEditor.OnColRowExchanged" link="#lcl.grids.TCustomDrawGrid.OnColRowExchanged"/>
      <element name="TValueListEditor.OnColRowInserted" link="#lcl.grids.TCustomDrawGrid.OnColRowInserted"/>
      <element name="TValueListEditor.OnColRowMoved" link="#lcl.grids.TCustomDrawGrid.OnColRowMoved"/>
      <element name="TValueListEditor.OnCompareCells" link="#lcl.grids.TCustomDrawGrid.OnCompareCells"/>
      <element name="TValueListEditor.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TValueListEditor.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TValueListEditor.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TValueListEditor.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TValueListEditor.OnDrawCell" link="#lcl.grids.TCustomGrid.OnDrawCell"/>

      <element name="TValueListEditor.OnEditButtonClick">
        <short>Deprecated.</short>
        <descr>
          Use OnButtonClick instead.
        </descr>
        <seealso>
          <link id="TValueListEditor.OnButtonClick"/>
        </seealso>
      </element>

      <element name="TValueListEditor.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
      <element name="TValueListEditor.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TValueListEditor.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TValueListEditor.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TValueListEditor.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TValueListEditor.OnGetEditMask" link="#lcl.grids.TCustomDrawGrid.OnGetEditMask"/>
      <element name="TValueListEditor.OnGetEditText" link="#lcl.grids.TCustomDrawGrid.OnGetEditText"/>
      <element name="TValueListEditor.OnHeaderClick" link="#lcl.grids.TCustomDrawGrid.OnHeaderClick"/>
      <element name="TValueListEditor.OnHeaderSized" link="#lcl.grids.TCustomDrawGrid.OnHeaderSized"/>
      <element name="TValueListEditor.OnHeaderSizing" link="#lcl.grids.TCustomDrawGrid.OnHeaderSizing"/>
      <element name="TValueListEditor.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TValueListEditor.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TValueListEditor.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TValueListEditor.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TValueListEditor.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TValueListEditor.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TValueListEditor.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TValueListEditor.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TValueListEditor.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TValueListEditor.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TValueListEditor.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TValueListEditor.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TValueListEditor.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TValueListEditor.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TValueListEditor.OnPickListSelect" link="#lcl.grids.TCustomGrid.OnPickListSelect"/>
      <element name="TValueListEditor.OnPrepareCanvas" link="#lcl.grids.TCustomGrid.OnPrepareCanvas"/>
      <element name="TValueListEditor.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TValueListEditor.OnSelectEditor" link="#lcl.grids.TCustomGrid.OnSelectEditor"/>
      <element name="TValueListEditor.OnSelection" link="#lcl.grids.TCustomGrid.OnSelection"/>
      <element name="TValueListEditor.OnSelectCell" link="#lcl.grids.TCustomDrawGrid.OnSelectCell"/>
      <element name="TValueListEditor.OnSetEditText" link="#lcl.grids.TCustomDrawGrid.OnSetEditText"/>
      <element name="TValueListEditor.OnShowHint" link="#lcl.controls.TControl.OnShowHint"/>
      <element name="TValueListEditor.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TValueListEditor.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TValueListEditor.OnTopLeftChanged" link="#lcl.grids.TCustomGrid.OnTopLeftChanged"/>
      <element name="TValueListEditor.OnUserCheckboxBitmap" link="#lcl.grids.TCustomGrid.OnUserCheckboxBitmap"/>
      <element name="TValueListEditor.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TValueListEditor.OnValidateEntry" link="#lcl.grids.TCustomGrid.OnValidateEntry"/>

      <element name="TValueListEditor.DisplayOptions">
        <short>
          Enables or disables display features and behaviors in the control.
        </short>
        <descr>
          <p>
            <var>DisplayOptions</var> is a <var>TDisplayOptions</var> property which enables or disables display features and behaviors in the control. DisplayOptions is a set type, and can store 0 (zero) or more <var>TDisplayOption</var> values. The default value for the property includes the following enumeration values:
          </p>
          <dl>
            <dt>doColumnTitles</dt>
            <dd>Displays column titles</dd>
            <dt>doAutoColResize</dt>
            <dd>Automatically resizes column widths</dd>
            <dt>doKeyColFixed</dt>
            <dd>Displays the Key as a fixed caption column</dd>
          </dl>
          <p>
            Changing the value in DisplayOptions may cause updates to the <var>RowCount</var> and <var>FixedRows</var> properties; they are adjusted to reflect use of <var>doColumnTitles</var> in the property. In addition, the <var>AutoFillColumns</var> property is updated to reflect use of <var>doAutoColResize</var> in the property.
          </p>
          <p>
            The value in DisplayOptions is updated when the value in FixedRows is changed.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.RowCount"/>
          <link id="TDisplayOptions"/>
          <link id="TDisplayOption"/>
          <link id="#lcl.grids.TCustomDrawGrid.FixedRows">TCustomDrawGrid.FixedRows</link>
          <link id="#lcl.grids.TCustomDrawGrid.AutoFillColumns">TCustomDrawGrid.AutoFillColumns</link>
        </seealso>
      </element>

      <element name="TValueListEditor.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>

      <element name="TValueListEditor.DropDownRows">
        <short>
          Number of rows displayed for an item with a PickList editor style.
        </short>
        <descr>
          <p>
            <var>DropDownRows</var> is an <var>Integer</var> property with the number of rows displayed for an item with a PickList editor style. The default value for the property is 8.
          </p>
          <p>
            DropDownRows is used in the <var>GetDefaultEditor</var> method to configure the TComboBox control used for the editor style.
          </p>
          <p>
            Use the indexed ItemProps property to maintain an item definition used in the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.GetDefaultEditor"/>
          <link id="TValueListEditor.ItemProps"/>
          <link id="TItemProp.EditStyle"/>
          <link id="TItemProp.PickList"/>
        </seealso>
      </element>

      <element name="TValueListEditor.KeyOptions">
        <short>
          Controls actions that can be performed for Keys in the control.
        </short>
        <descr>
          <p>
            <var>KeyOptions</var> is a <var>TKeyOptions</var> property used to control actions that can be performed for keys in the control. KeyOptions is a set type, and can contain 0 (zero) or more values from the TKeyOption enumeration. The default value for the property is an empty set (<b>[]</b>).
          </p>
          <p>
            Settings the values in KeyOptions causes the internal UpdatingKeyOptions flag to be set. Including the value <var>KeyAdd</var> in KeyOptions requires <var>KeyEdit</var> to be added as well. The <var>Options</var> property may also be updated to include or exclude the value <var>goAutoAddRows</var> based on use of KeyAdd in the property. The internal <var>UpdatingKeyOptions</var> flag is cleared prior to exiting from the method.
          </p>
          <p>
            Values in KeyOptions are used in the <var>GetDefaultEditor</var> method to configure the cell editor for an item.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Options"/>
          <link id="TValueListEditor.GetDefaultEditor"/>
          <link id="TKeyOptions"/>
        </seealso>
      </element>

      <element name="TValueListEditor.Options">
        <short>
          Specifies the options enabled for the Key-Value grid.
        </short>
        <descr>
          <p>
            <var>Options</var> is a <var>TGridOptions</var> property used to specify the options enabled for the two-column grid displayed in the control. Options is a set type that can contain 0 (zero) or more <var>TGridOption</var> values. By default, the property includes the following enumeration values:
          </p>
          <ul>
            <li>goFixedVertLine</li>
            <li>goFixedHorzLine</li>
            <li>goVertLine</li>
            <li>goHorzLine</li>
            <li>goColSizing</li>
            <li>goEditing</li>
            <li>goAlwaysShowEditor</li>
            <li>goThumbTracking</li>
          </ul>
          <p>
            See <link id="#lcl.grids.TGridOption">TGridOption</link> for more information about values and meanings in the enumeration.
          </p>
          <p>
            Changing the value in Options causes additional validation to be performed:
          </p>
          <ul>
            <li>
              <var>goColMoving</var> is always excluded from the property value; column moving is not a valid operation in TValueListEditor.
            </li>
            <li>
              <var>goAutoAddRowsSkipContentCheck</var> is also excluded from the property.
            </li>
            <li>
              If the internal UpdatingKeyOptions flag has not been set, and component streaming has completed, the <var>KeyOptions</var> property is updated to include <var>goAutoAddRows</var>.
            </li>
          </ul>
        </descr>
        <seealso>
          <link id="TValueListEditor.KeyOptions"/>
          <link id="#lcl.grids.TGridOption">TGridOption</link>
          <link id="#lcl.grids.TGridOptions">TGridOptions</link>
        </seealso>
      </element>

      <element name="TValueListEditor.Strings">
        <short>
          Stores the keys, values, and item definitions in the control.
        </short>
        <descr>
          <p>
            <var>Strings</var> is a <var>TValueListStrings</var> property which provides storage for the <var>Keys</var>, <var>Values</var>, and item definitions in the control. Strings uses the "Key=Value" convention to store the string data needed for the Keys and Values properties.
            </p>
            <p>
              Use the Keys property to read and write key names by their ordinal position in the control. Use Values to read or write the data stored for a specific Key name.
            </p>
            <p>
              Strings also contains an internal <var>TItemPropList</var> member used to store the item definitions for the control. Use <var>ItemProps</var> to maintain the item definitions in the control.
            </p>
            <p>
            </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.ItemProps"/>
          <link id="TValueListEditor.Keys"/>
          <link id="TValueListEditor.Values"/>
          <link id="TValueListStrings"/>
          <link id="TItemPropList"/>
          <link id="TItemProp"/>
        </seealso>
      </element>

      <element name="TValueListEditor.TitleCaptions">
        <short>
          Title captions used for columns in the control.
        </short>
        <descr>
          <p>
            <var>TitleCaptions</var> is a <var>TStrings</var> property with the title captions used for columns in the control. TitleCaptions should have 2 lines with the titles used for the Key and Value columns in the grid.
          </p>
          <p>
            When TitleCaptions is empty (0 lines), the values in <var>rsVLEKey</var> and <var>rsVLEValue</var> are used as the captions for the respective columns. If a line is omitted in TitleCaptions, the corresponding resource string is used as the default value for the caption.
          </p>
          <p>
            TitleCaptions is used in the <var>ShowColumnTitles</var> method to assign and display the column titles. Values in TitleCaptions are updated when <var>LoadContent</var> or <var>LoadFromCSVStream</var> is called. Changing values in TitleCaptions causes the control to be redrawn.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.ShowColumnTitles"/>
          <link id="TValueListEditor.LoadContent"/>
          <link id="TValueListEditor.LoadFromCSVStream"/>
          <link id="rsVLEKey"/>
          <link id="rsVLEValue"/>
        </seealso>
      </element>

      <element name="TValueListEditor.OnGetPickList">
        <short>Event handler signalled to load values for the PickList in an item.</short>
        <descr>
          <p>
            <var>OnGetPickList</var> is a <var>TGetPickListEvent</var> property with the event handler signalled to load the PickList for the item with a specific key name.
             OnGetPickList allows the application to provide custom selectable values for an item which uses the <var>esPickList</var> editor style.
           </p>
           <p>
             OnGetPickList is signalled from the <var>GetDefaultEditor</var> method when an item definition in <var>ItemProps</var> uses <var>esPickList</var> in its <var>EditStyle</var> property.
           </p>
           <p>
             An application must implement and assign a routine to the event handler to respond to the notification. The arguments for the event handler include the control instance, the key name for the item, and a TStrings instance where the values for the pick list can be stored. Existing values in the pick list can be modified or replaced entirely.
           </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.GetDefaultEditor"/>
          <link id="TValueListEditor.ItemProps"/>
          <link id="TGetPickListEvent"/>
          <link id="TItemProp.EditStyle"/>
          <link id="TItemProp.PickList"/>
          <link id="TEditStyle"/>
        </seealso>
      </element>

      <element name="TValueListEditor.OnStringsChange">
        <short>Event handler signalled when values in the Strings property are changed.</short>
        <descr>
          <p>
            <var>OnStringsChange</var> is a <var>TNotifyEvent</var> property with the event handler signalled when values in the <var>Strings</var> property are changed. Applications can assign a procedure to the event handler to perform actions needed in the control.
          </p>
          <p>
            OnStringsChange is triggered in the <var>StringsChange</var> method after updating the row count and redrawing the control.
          </p>
          <p>
            Use <var>OnStringsChanging</var> to perform actions needed prior to setting values in Strings.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.OnStringsChanging"/>
        </seealso>
      </element>

      <element name="TValueListEditor.OnStringsChanging">
        <short>Event handler signalled prior to updating the Strings property.</short>
        <descr>
          <p>
            <var>OnStringsChanging</var> is a <var>TNotifyEvent</var> property with the event handler signalled prior to updating values in the <var>Strings</var> property. Applications can assign a procedure to the event handler to respond to the event notification.
          </p>
          <p>
            OnStringsChanging is triggered in the <var>StringsChanging</var> method.
          </p>
          <p>
            Use <var>OnStringsChange</var> to perform actions needed after values are updated in Strings.
          </p>
        </descr>
        <seealso>
          <link id="TValueListEditor.Strings"/>
          <link id="TValueListEditor.OnStringsChange"/>
        </seealso>
      </element>

      <element name="TValueListEditor.OnValidate">
        <short>Not used in the current implementation.</short>
        <descr>
          <p>
            <var>OnValidate</var> is a <var>TOnValidateEvent</var> property that implements the event handler signalled to validate a modified value in the grid. Not used in the current implementation.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.grids.TCustomGrid.OnValidateEntry">TCustomGrid.OnValidateEntry</link>
          <link id="#lcl.grids.TCustomGrid.ValidateEntry">TCustomGrid.ValidateEntry</link>
        </seealso>
      </element>

      <element name="rsVLEDuplicateKey">
        <short>
          Message displayed when a duplicate Key name is found.
        </short>
      </element>

      <element name="rsVLEKey">
        <short>
          Default caption for the Key column; value is 'Key'
        </short>
      </element>

      <element name="rsVLEValue">
        <short>
          Default caption for the Value column; value is 'Value'
        </short>
      </element>

      <element name="rsVLEInvalidRowColOperation">
        <short>
          Exception message for an invalid row or column operation.
        </short>
      </element>

      <element name="rsVLENoRowCountFound">
        <short>
          Error message displayed when a row count is not found when loading content in TValueListEditor.
        </short>
      </element>

      <element name="rsVLERowIndexOutOfBounds">
        <short>
          Error message displayed when an invalid row number is found when loading content in TValueListEditor.
        </short>
      </element>

      <element name="rsVLEColIndexOutOfBounds">
        <short>
          Error message displayed when an invalid column number is found when loading content in TValueListEditor.
        </short>
      </element>

      <element name="rsVLEIllegalColCount">
        <short>
          Error message displayed when an invalid column count is found when loading content in TValueListEditor; column count is always 2 in TValueListEditor.
        </short>
      </element>

      <element name="Register">
        <short>Register components for use in the Lazarus IDE.</short>
        <descr>
          <p>
            <var>Register</var> is the procedure used to register components for use in the Lazarus IDE. Register adds the following components to the Lazarus IDE component palette:
          </p>
          <p>
            <b>Additional</b> Tab
          </p>
          <ul>
            <li>TValueListEditor</li>
          </ul>
        </descr>
      </element>

    </module>
    <!-- ValEdit -->
  </package>
</fpdoc-descriptions>
