<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lazutils">
    <!--
    ====================================================================
      laz2_DOM
    ====================================================================
    -->
    <module name="laz2_DOM">
      <short>Provides an implementation of DOM interfaces.</short>
      <descr>
        <p>
          <var>laz2_dom.pas</var> provides an Implementation of DOM (Document Object Model) interfaces. It is a modified copy of the FCL dom.pp unit (revision 15251) adapted to use UTF-8 instead of WideString by Mattias Gaertner.
        </p>
        <p>
          Copyright (c) 1999-2000 by Sebastian Guenther, sg@freepascal.org<br/>
          Modified in 2006 by Sergei Gorelkin, sergei_gorelkin@mail.ru
        </p>
        <p>
          This unit provides classes which implement the interfaces defined in the
          DOM (Document Object Model) specification. The current state is:
        </p>
        <ul>
          <li>DOM Levels 1 and 2 -  Completely implemented</li>
          <li>DOM Level 3  -  Partially implemented</li>
        </ul>
        <p>
          Specification used for this implementation:<br/>
          <url href="https://www.w3.org/TR/DOM-Level-2-Core/">
          Document Object Model (DOM) Level 2 Specification
          </url>
        </p>
      </descr>

      <!-- unresolved external references -->
      <element name="SysUtils"/>
      <element name="Classes"/>
      <element name="laz2_xmlutils"/>

      <!-- constant Visibility: default -->
      <element name="INDEX_SIZE_ERR">
        <short>Represents DOM exception code 1.</short>
        <descr>
          Index or size is negative, or greater than the allowed value.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOMSTRING_SIZE_ERR">
        <short>Represents DOM exception code 2.</short>
        <descr>
          Specified range of text does not fit into a DOMString.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="HIERARCHY_REQUEST_ERR">
        <short>Represents DOM exception code 3.</short>
        <descr>
          Node is inserted somewhere it does not belong.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="WRONG_DOCUMENT_ERR">
        <short>Represents DOM exception code 4.</short>
        <descr>
          Node is used in a different document than the one that created it (that does not support it).
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_CHARACTER_ERR">
        <short>Represents DOM exception code 5.</short>
        <descr>
          An invalid or illegal character is specified, such as in a name.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NO_DATA_ALLOWED_ERR">
        <short>Represents DOM exception code 6.</short>
        <descr>
          <p>
            Data is specified for a node which does not support data.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NO_MODIFICATION_ALLOWED_ERR">
        <short>Represents DOM exception code 7.</short>
        <descr>
          An attempt was made to modify an object where modifications are not allowed.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NOT_FOUND_ERR">
        <short>Represents DOM exception code 8.</short>
        <descr>
          <p>
            An attempt was made to reference a node in a context where it does not exist.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NOT_SUPPORTED_ERR">
        <short>Represents DOM exception code 9.</short>
        <descr>
          <p>
            Implementation does not support the type of object requested.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INUSE_ATTRIBUTE_ERR">
        <short>Represents DOM exception code 10.</short>
        <descr>
          <p>
            An attempt was made to add an attribute that is already in use elsewhere.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_STATE_ERR">
        <short>Represents DOM exception code 11.</short>
        <descr>
          <p>
            An attempt was made to use an object that is no longer usable.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="SYNTAX_ERR">
        <short>Represents DOM exception code 12.</short>
        <descr>
          <p>
            An invalid or illegal string was specified.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_MODIFICATION_ERR">
        <short>Represents DOM exception code 13.</short>
        <descr>
          <p>
            An attempt was made to modify the type of the underlying object.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NAMESPACE_ERR">
        <short>Represents DOM exception code 14.</short>
        <descr>
          <p>
            An attempt was made to create or change an object in a way which is incorrect for the defined namespaces.
          </p>
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_ACCESS_ERR">
        <short>Represents DOM exception code 15.</short>
        <descr>
          Parameter or operation is not supported by the underlying object.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ELEMENT_NODE">
        <short>Represents the node type for DOM Elements.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ATTRIBUTE_NODE">
        <short>Represents the node type for DOM Attributes.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="TEXT_NODE">
        <short>Represents the node type for DOM Text nodes.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="CDATA_SECTION_NODE">
        <short>Represents the node type for DOM CDATA nodes.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ENTITY_REFERENCE_NODE">
        <short>Represents the node type for DOM Entity References.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ENTITY_NODE">
        <short>Represents the node type for DOM Entities.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="PROCESSING_INSTRUCTION_NODE">
        <short>Represents the node type for DOM Processing Instructions.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="COMMENT_NODE">
        <short>Represents the node type for DOM Comments.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOCUMENT_NODE">
        <short>Represents the node type for DOM Document Elements.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOCUMENT_TYPE_NODE">
        <short>Represents the node type for DOM Document Type Declarations (DTD).</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOCUMENT_FRAGMENT_NODE">
        <short>Represents the node type for DOM Document Fragments.</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NOTATION_NODE">
        <short>Represents the node type for DOM Notation Declarations.</short>
        <descr></descr>
      </element>

      <!-- set type Visibility: default -->
      <element name="TSetOfChar">
        <short>Defines a set with values using the Char type.</short>
        <descr></descr>
      </element>

      <!-- alias type Visibility: default -->
      <element name="DOMString">
        <short>Type used for String values in DOM interfaces.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- alias type Visibility: default -->
      <element name="DOMPChar">
        <short>Type used for Pointers to Char values in DOM interfaces.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- alias type Visibility: default -->
      <element name="DOMChar">
        <short>Type used for Char values in DOM interfaces.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- pointer type Visibility: default -->
      <element name="PDOMString">
        <short>Type used for Pointers to DOMString values.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMError">
        <short>Base class for exceptions raised in DOM interface classes.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: public -->
      <element name="EDOMError.Code">
        <short>Error code constant for the exception.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMError.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is an overloaded variant of the constructor for the class instance. It allows an additional <var>ASituation</var> argument which describes the circumstance (or the class and method) where the Exception is raised. It calls the inherited constructor using the values in the <var>ClassName</var> property and the ASituation parameter as arguments.
          </p>
          <p>
            This variant of the constructor is used in the implementation of methods of DOM classes like: TXMLDocument, TDOMDocument, TDOMImplementation, TDOMNamedNodeMap, TDOMNode, TDOMNode_NS, and TDOMElement.
            </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMError.Create.ACode">
        <short>Error code for the DOM exception.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMError.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMIndexSize">
        <short>Exception raised for an invalid index size.</short>
        <descr>
          <p>
            <var>EDOMIndexSize</var> is an <var>EDOMError</var> descendant which implements an exception raised when an invalid character position or offset is specified in <var>TDOMCharacterData</var> or <var>TDOMText</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData.SubstringData"/>
          <link id="TDOMCharacterData.InsertData"/>
          <link id="TDOMCharacterData.DeleteData"/>
          <link id="TDOMText.SplitText"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMIndexSize.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance. It calls the inherited method using the <var>INDEX_SIZE_ERR</var> constant and the <var>ASituation</var> parameter as arguments.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMIndexSize.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMHierarchyRequest">
        <short>
          Exception raised when an inserted node is not valid for the Document Object Model (DOM).
        </short>
        <descr>
          <p>
            Used to ensure the pre-insert integrity of the hierarchical structure for the DOM node tree. Prevents violation of constraints for the Document Object Model (DOM).
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.InsertBefore"/>
          <link id="TDOMNode.ReplaceChild"/>
          <link id="TDOMNode_WithChildren.InsertBefore"/>
          <link id="TDOMDocument.InsertBefore"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMHierarchyRequest.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance. It calls the inherited method using the <var>HIERARCHY_REQUEST_ERR</var> constant and the <var>ASituation</var> parameter as arguments.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.sysutils.Exception.Create">Exception.Create</link>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMHierarchyRequest.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMWrongDocument">
        <short>
          Exception raised when a node is used in a document other than the one that created it.
        </short>
        <descr>
          <p>
            Raised in methods like <var>TDOMNode_WithChildren.InsertBefore</var> and <var>TDOMImplementation.CreateDocument</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.InsertBefore"/>
          <link id="TDOMImplementation.CreateDocument"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMWrongDocument.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance. It calls the inherited method using the <var>WRONG_DOCUMENT_ERR</var> constant and the <var>ASituation</var> parameter as arguments.
          </p>
        </descr>
        <seealso/>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMWrongDocument.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMNotFound">
        <short>
          Exception raised when a node is accessed in a context where it does not exist.
        </short>
        <descr>
          <p>
            Raised in methods like:
          </p>
          <ul>
            <li>TDOMNode.DetachChild</li>
            <li>TDOMNode_WithChildren.InsertBefore</li>
            <li>TDOMNode_WithChildren.DetachChild</li>
            <li>TDOMNamedNodeMap.RemoveNamedItem</li>
            <li>TDOMNamedNodeMap.RemoveNamedItemNS</li>
            <li>TDOMElement.RemoveAttributeNode</li>
          </ul>
        </descr>
        <seealso>
          <link id="TDOMNode.DetachChild"/>
          <link id="TDOMNode_WithChildren.InsertBefore"/>
          <link id="TDOMNode_WithChildren.DetachChild"/>
          <link id="TDOMNamedNodeMap.RemoveNamedItem"/>
          <link id="TDOMNamedNodeMap.RemoveNamedItemNS"/>
          <link id="TDOMElement.RemoveAttributeNode"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMNotFound.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMNotFound.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMNotSupported">
        <short>
          Exception raised when the DOM implementation does not support the requested object type or operation.
        </short>
        <descr>
          <p>
            Raised in methods like:
          </p>
          <ul>
            <li>TDOMNode.CloneNode</li>
            <li>TDOMDocument.CreateCDATASection</li>
            <li>TDOMDocument.CreateProcessingInstruction</li>
            <li>TDOMDocument.CreateEntityReference</li>
          </ul>
        </descr>
        <seealso>
          <link id="TDOMNode.CloneNode"/>
          <link id="TDOMDocument.CreateCDATASection"/>
          <link id="TDOMDocument.CreateProcessingInstruction"/>
          <link id="TDOMDocument.CreateEntityReference"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMNotSupported.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            Calls the inherited method using the <var>NOT_SUPPORTED_ERR</var> error constant and the value in <var>ASituation</var> as arguments.
          </p>
        </descr>
        <seealso/>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMNotSupported.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInUseAttribute">
        <short>
          Exception raised when adding an attribute that is already in use.
        </short>
        <descr>
          <remark>
            Not used in the current LazUtils implementation.
          </remark>
        </descr>
        <seealso>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInUseAttribute.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInUseAttribute.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInvalidState">
        <short>
          Exception raised when accessing an object that is no longer usable.
        </short>
        <descr>
          <remark>
            Not used in the current LazUtils implementation.
          </remark>
        </descr>
        <seealso>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInvalidState.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInvalidState.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMSyntax">
        <short>
          Exception raised when an invalid or illegal value is specified for a DOM object.
        </short>
        <descr>
          <remark>
            Not used in the current LazUtils implementation.
          </remark>
        </descr>
        <seealso>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMSyntax.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMSyntax.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInvalidModification">
        <short>
          Exception raised when an attempt was made to modify the type for an object.
        </short>
        <descr>
          <remark>
            Not used in the current LazUtils implementation.
          </remark>
        </descr>
        <seealso>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInvalidModification.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInvalidModification.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMNamespace">
        <short>
          Exception raised when an object is changed in a way that is invalid for its  Namespaces.
        </short>
        <descr>
          <p>
            Raised in the TDOMNode_NS.SetPrefix method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_NS.SetPrefix"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMNamespace.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMNamespace.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInvalidAccess">
        <short>
          Exception raised when a parameter or operation is not supported by the object.
        </short>
        <descr>
          <remark>
            Not used in the current implementation.
          </remark>
        </descr>
        <seealso>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInvalidAccess.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInvalidAccess.Create.ASituation">
        <short>Provides context information for the exception.</short>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TNodeFlagEnum">
        <short>Enumeration with flag values for DOM Nodes.</short>
        <descr></descr>
        <seealso>
          <link id="TNodeFlags"/>
          <link id="TDOMNode.Flags"/>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfReadonly">
        <short>Node is read-only.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfRecycled">
        <short>Node is recycled.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfLevel2">
        <short>Node is a DOM Level 2-specific type.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfIgnorableWS">
        <short>Node contains ignorable whitespace only.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfSpecified">
        <short>Node value was specified rather than implied.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfDestroying">
        <short>Node is being destroyed.</short>
      </element>

      <!-- set type Visibility: default -->
      <element name="TNodeFlags">
        <short>Set type used to store TNodeFlagEnum values.</short>
        <descr>
          <p>
            <var>TNodeFlags</var> is the type used to implement the <var>Flags</var> property in <var>TDOMNode</var> and descendants.
          </p>
        </descr>
        <seealso>
          <link id="TNodeFlagEnum"/>
          <link id="TDOMNode.Flags"/>
        </seealso>
      </element>

      <element name="TDOMNodeEnumerator">
        <short>Implements an enumerator for DOM Nodes.</short>
        <descr>
          <p>
            <var>TDOMNodeEnumerator</var> is a class used to implement an enumerator for DOM Nodes. The enumerator is created for a specified DOM node, and provides access to the top-level children for the DOM node. It does not descend any lower than the first child node and its sibling nodes in the DOM sub-tree.
          </p>
          <p>
            Use the <var>MoveNext</var> method to select the next child node in the enumerator. Use the <var>Current</var> property to access the current DOM node for the enumerator.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.NextSibling"/>
        </seealso>
      </element>

      <element name="TDOMNodeEnumerator.FNode"/>
      <element name="TDOMNodeEnumerator.FCurrent"/>

      <element name="TDOMNodeEnumerator.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeEnumerator.Create.Node">
        <short>DOM node examined in the enumerator.</short>
      </element>

      <element name="TDOMNodeEnumerator.MoveNext">
        <short>
          Gets the First child or the next Sibling as the Current value for the enumerator.
        </short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.NextSibling"/>
        </seealso>
      </element>
      <element name="TDOMNodeEnumerator.MoveNext.Result">
        <short>DOM node to use as the Current value for the enumerator.</short>
      </element>

      <element name="TDOMNodeEnumerator.Current">
        <short>Current DOM node for the enumerator.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <element name="TDOMNodeAllChildEnumerator">
        <short>
          Implements an enumerator that visits all Children in the sub-tree for a DOM node.
        </short>
        <descr>
          <p>
            <var>TDOMNodeAllChildEnumerator</var> is a class used to implement an enumerator for a specified DOM node that visits all child nodes in its sub-tree. The enumerator  uses the GetNextNode method in TDOMNode to get the value in the <var>Current</var> property. This means it will recursively descend into <var>ChildNodes</var>, and is halted when the next sibling for the specified DOM node is reached.
          </p>
          <p>
            Use the <var>MoveNext</var> method to get the next DOM node for the enumerator. Use the <var>Current</var> property to access the currently selected DOM node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.GetNextNode"/>
        </seealso>
      </element>

      <element name="TDOMNodeAllChildEnumerator.FNode"/>
      <element name="TDOMNodeAllChildEnumerator.FCurrent"/>
      <element name="TDOMNodeAllChildEnumerator.FEnd"/>

      <element name="TDOMNodeAllChildEnumerator.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeAllChildEnumerator.Create.Node">
        <short>DOM node examined in the enumerator.</short>
      </element>

      <element name="TDOMNodeAllChildEnumerator.MoveNext">
        <short>Gets the next DOM node for the enumerator.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeAllChildEnumerator.MoveNext.Result">
        <short>DOM node used as the Current value for the enumerator.</short>
      </element>

      <element name="TDOMNodeAllChildEnumerator.Current">
        <short>Current DOM node selected in the enumerator.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDOMNodeAllChildEnumerator.GetEnumerator">
        <short>Gets the enumerator class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeAllChildEnumerator.GetEnumerator.Result">
        <short>Enumerator class instance.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNode">
        <short>Implements the DOM Node interface.</short>
        <descr>
          <p>
            <var>TDOMNode</var> is a class which implements the Node interface in the Document Object Model (DOM).
          </p>
          <p>
            TDOMNode represents a single node in a DOM document. It includes NodeName, NodeValue, NodeType, and Attributes properties with information common to all nodes in a document tree. The ParentNode, ChildNodes, and OwnerDocument properties provide access to the tree structure for a DOM document.
          </p>
          <p>
            TDOMNode implements the full DOM Level 2 specification, and provides partial support for the DOM Level 3 specification. It also provides extensions to the DOM Node interface that allow locating or cloning a node, perform name comparisons, or access its node flags.
          </p>
          <p>
            TDOMNode is used as the ancestor for other specialized Node types, as specified in the DOM specification. These descendent classes may alter the base value and/or behavior as required for the specialized node type.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNode.FPool"/>
      <element name="TDOMNode.FFlags"/>
      <element name="TDOMNode.FParentNode"/>
      <element name="TDOMNode.FPreviousSibling"/>
      <element name="TDOMNode.FNextSibling"/>
      <element name="TDOMNode.FOwnerDocument"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr>
          <p>
            <var>GetNodeName</var> is an abstract virtual method <var>DOMString</var> function. It is used to get the value for the <var>NodeName</var> property. It is overridden in descendent classes to provide the name needed for the DOM node specialization.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
          <link id="DOMString"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNodeValue">
        <short>Gets the value for the NodeValue property.</short>
        <descr>
          <p>
            <var>GetNodeValue</var> is a <var>DOMString</var> function used to get the value for the <var>NodeValue</var> property. It is overridden in descendent classes to provide the value needed for the DOM node specialization. In <var>TDOMNode</var>, the method always returns an empty string ('').
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
          <link id="DOMString"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNodeValue.Result">
        <short>Value for the NodeValue property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetNodeValue">
        <short>Sets the value for the NodeValue property.</short>
        <descr>
          <p>
            <var>SetNodeValue</var> is a method used to set the <var>NodeValue</var> property to the value specified in <var>AValue</var>. It has an empty implementation in <var>TDOMNode</var>, and must be re-implemented in a descendent class to use the correct content for the DOM node specialization.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
          <link id="TDOMNode.GetNodeValue"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetNodeValue.AValue">
        <short>New value for the NodeValue property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetFirstChild">
        <short>Gets the value for the FirstChild property.</short>
        <descr>
          <p>
            <var>GetFirstChild</var> always returns <b>Nil</b> for the property value. <var>TDOMNode</var> does not allocate storage for child nodes. The method must be re-implemented in a descendent class to which implements a DOM node specialization with child nodes.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.FirstChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetFirstChild.Result">
        <short>Value for the FirstChild property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetLastChild">
        <short>Gets the value for the LastChild property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.LastChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetLastChild.Result">
        <short>Value for the LastChild property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetAttributes">
        <short>Gets the value for the Attributes property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.Attributes"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetAttributes.Result">
        <short>Value for the Attributes property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetRevision">
        <short>Gets the revision number for the node.</short>
        <descr>
          <p>
            The value for the property is retrieved from the revision number in the <var>OwnerDocument</var> for the node instance.
          </p>
          <p>
            <var>GetRevision</var> is called from methods in <var>TDOMNodeList</var> which compare the revision numbers for a given node and the node list where it is stored. When the revision numbers differ, the node list is refreshed by calling the <var>BuildList</var> method in the TDOMNodeList instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.OwnerDocument"/>
          <link id="TDOMNodeList.BuildList"/>
          <link id="TDOMNodeList.Count"/>
          <link id="TDOMNodeList.Create"/>
          <link id="TDOMNodeList.Item"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetRevision.Result">
        <short>Revision number for the node.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetTextContent">
        <short>Gets the value for the TextContent property.</short>
        <descr>
          <p>
            Returns the value from the <var>NodeValue</var> property in <var>TDOMNode</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.TextContent"/>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetTextContent.Result">
        <short>Value for the TextContent property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetTextContent">
        <short>Sets the value in the TextContent property.</short>
        <descr>
          <p>
            Updates the value in <var>NodeValue</var> property in <var>TDOMNode</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.TextContent"/>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetTextContent.AValue">
        <short>Value for the TextContent property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetLocalName">
        <short>Gets the value for the LocalName property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.LocalName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetLocalName.Result">
        <short>Value for the LocalName property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNamespaceURI">
        <short>Gets the value for the NamespaceURI property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NamespaceURI"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNamespaceURI.Result">
        <short>Value for the NamespaceURI property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetPrefix">
        <short>Gets the value for the Prefix property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.Prefix"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetPrefix.Result">
        <short>Value for the Prefix property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetPrefix">
        <short>Sets the value for the Prefix property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.Prefix"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetPrefix.Value">
        <short>New value for the Prefix property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetOwnerDocument">
        <short>Gets the value for the OwnerDocument property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.OwnerDocument"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetOwnerDocument.Result">
        <short>Value for the OwnerDocument property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetBaseURI">
        <short>Gets the value for the BaseURI property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.BaseURI"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetBaseURI.Result">
        <short>Value for the BaseURI property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetReadOnly">
        <short>Updates the read-only Node flag for the DOM Node and its children.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetReadOnly.Value">
        <short>New value for the node flag.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.Changing">
        <short>Determines if the Node and its owner document can be modified.</short>
        <descr>
          <p>
            <var>Changing</var> is a procedure used to determine if the DOM node and its Owner document can be modified. Changing uses the Node Flags in the DOM node and its OwnerDocument to determine if the Node is marked as read-only and the document is not being freed.
          </p>
        </descr>
        <errors>
          <p>
            Raises an <var>EDOMError</var> with the DOM exception code <var>NO_MODIFICATION_ALLOWED_ERR</var> when the Node is marked as read-only.
          </p>
        </errors>
        <seealso>
          <link id="TDOMNode.OwnerDocument"/>
          <link id="TDOMNode.Flags"/>
          <link id="TNodeFlags"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMNode.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance. Creates stores the <var>TDOMDocument</var> instance in <var>AOwner</var> as the <var>OwnerDocument</var> for the DOM node. Create calls the inherited constructor.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.OwnerDocument"/>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.Create.AOwner">
        <short>Document that is the Owner of the class instance.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNode.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for the class instance. Destroy ensures that the <var>ParentNode</var> is notified that the node will be removed from the tree structure. When ParentNode is assigned, its <var>DetachChild</var> method is called to remove the class instance from the <var>ChildNodes</var> hierarchy.
          </p>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ParentNode"/>
          <link id="TDOMNode.DetachChild"/>
          <link id="TDOMNode.ChildNodes"/>
        </seealso>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode.FreeInstance">
        <short>Performs actions needed to free the class instance.</short>
        <descr>
          <p>
            <var>FreeInstance</var> is an overridden procedure used to perform actions needed when the class instance is freed. FreeInstance ensures that information in the internal <var>TNodePool</var> custom memory manager is updated, and the node is freed from its node pool. If the internal node pool has not been assigned, the inherited FreeInstance method is called.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.system.TObject.FreeInstance">TObject.FreeInstance</link>
          <link id="TNodePool.FreeNode"/>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.GetChildNodes">
        <short>Gets the value for the ChildNodes property.</short>
        <descr>
          <p>
            Calls the <var>GetChildNodeList</var> method in <var>OwnerDocument</var> to get the list of child nodes for the current class instance. The property value is an empty node list if there are no child nodes in the current node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMDocument.GetChildNodeList"/>
          <link id="TDOMNodeList"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetChildNodes.Result">
        <short>Value for the ChildNodes property.</short>
      </element>

      <element name="TDOMNode.GetChildCount">
        <short>Gets the number of Child nodes for the DOM node.</short>
        <descr>
          <p>
            Always returns <b>0</b> (<b>zero</b>) in <var>TDOMNode</var>. Overridden in descendent classes (like <var>TDOMNode_WithChildren</var>).
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.GetChildCount"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetChildCount.Result">
        <short>Number of Child nodes for the DOM node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NodeName">
        <short>Name for the DOM node.</short>
        <descr>
          <p>
            <var>NodeName</var> is a read-only <var>DOMString</var> property that contains the name for the DOM node. The read access specifier for the property is an abstract method in TDOMNode, and must be implemented in descendent classes to return the correct value for the DOM node specializations.
          </p>
          <p>
            The values for NodeName, NodeValue, and Attributes vary according to the node type as follows:
          </p>
          <table>
            <tr>
              <td><b>DOM Interface</b></td>
              <td><b>NodeName</b></td>
              <td><b>NodeValue</b></td>
              <td><b>Attributes</b></td>
            </tr>
            <tr>
              <td>TDOMAttr</td>
              <td>Name of the attribute</td>
              <td>Value of the attribute</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMCDATASection</td>
              <td><var>#cdata-section</var></td>
              <td>Content of the CDATA Section</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMComment</td>
              <td><var>#comment</var></td>
              <td>Content of the comment</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocument</td>
              <td><var>#document</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentFragment</td>
              <td><var>#document-fragment</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentType</td>
              <td>Document type name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMElement</td>
              <td>Tag name</td>
              <td>None</td>
              <td>TDOMNamedNodeMap</td>
            </tr>
            <tr>
              <td>TDOMEntity</td>
              <td>Entity name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMEntityReference</td>
              <td>Name of the entity referenced</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMNotation</td>
              <td>Notation name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMProcessingInstruction</td>
              <td>Target</td>
              <td>Entire content excluding the target</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMText</td>
              <td><var>#text</var></td>
              <td>Content of the text node</td>
              <td>N/A</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NodeValue">
        <short>Value for the DOM node.</short>
        <descr>
          <p>
            <var>NodeValue</var> is a <var>DOMString</var> property that contains the value for the DOM node. Reading the value in NodeValue always results in an empty string (<b>''</b>) in TDOMNode, and writing the value for the property is not implemented. The access specifiers must be re-implemented in descendent classes to perform the actions required for the DOM node specializations.
          </p>
          <p>
            The values for NodeName, NodeValue, and Attributes vary according to the node type as follows:
          </p>
          <table>
            <tr>
              <td><b>DOM Interface</b></td>
              <td><b>NodeName</b></td>
              <td><b>NodeValue</b></td>
              <td><b>Attributes</b></td>
            </tr>
            <tr>
              <td>TDOMAttr</td>
              <td>Name of the attribute</td>
              <td>Value of the attribute</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMCDATASection</td>
              <td><var>#cdata-section</var></td>
              <td>Content of the CDATA Section</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMComment</td>
              <td><var>#comment</var></td>
              <td>Content of the comment</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocument</td>
              <td><var>#document</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentFragment</td>
              <td><var>#document-fragment</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentType</td>
              <td>Document type name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMElement</td>
              <td>Tag name</td>
              <td>None</td>
              <td>TDOMNamedNodeMap</td>
            </tr>
            <tr>
              <td>TDOMEntity</td>
              <td>Entity name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMEntityReference</td>
              <td>Name of the entity referenced</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMNotation</td>
              <td>Notation name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMProcessingInstruction</td>
              <td>Target</td>
              <td>Entire content excluding the target</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMText</td>
              <td><var>#text</var></td>
              <td>Content of the text node</td>
              <td>N/A</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NodeType">
        <short>Node type for the DOM Node.</short>
        <descr>
          <p>
            <var>NodeType</var> is a read-only <var>Integer</var> property that represents the DOM node type as defined in the DOM specification. The read access specifier in TDOMNode is an abstract method, and must be implemented in a descendent class to return the correct value for the DOM node specializations.
          </p>
          <p>
            DOM node specializations use the following values in the NodeType property:
          </p>
          <table>
            <tr>
              <td><b>DOM Interface</b></td>
              <td><b>NodeType Constant</b></td>
              <td><b>NodeType Value</b></td>
            </tr>
            <tr>
              <td>TDOMElement</td>
              <td>ELEMENT_NODE</td>
              <td>1</td>
            </tr>
            <tr>
              <td>TDOMAttr</td>
              <td>ATTRIBUTE_NODE</td>
              <td>2</td>
            </tr>
            <tr>
              <td>TDOMText</td>
              <td>TEXT_NODE</td>
              <td>3</td>
            </tr>
            <tr>
              <td>TDOMCDATASection</td>
              <td>CDATA_SECTION_NODE</td>
              <td>4</td>
            </tr>
            <tr>
              <td>TDOMEntityReference</td>
              <td>ENTITY_REFERENCE_NODE</td>
              <td>5</td>
            </tr>
            <tr>
              <td>TDOMEntity</td>
              <td>ENTITY_NODE</td>
              <td>6</td>
            </tr>
            <tr>
              <td>TDOMProcessingInstruction</td>
              <td>PROCESSING_INSTRUCTION_NODE</td>
              <td>7</td>
            </tr>
            <tr>
              <td>TDOMComment</td>
              <td>COMMENT_NODE name</td>
              <td>8</td>
            </tr>
            <tr>
              <td>TDOMDocument</td>
              <td>DOCUMENT_NODE</td>
              <td>9</td>
            </tr>
            <tr>
              <td>TDOMDocumentType</td>
              <td>DOCUMENT_TYPE_NODE</td>
              <td>10</td>
            </tr>
            <tr>
              <td>TDOMDocumentFragment</td>
              <td>DOCUMENT_FRAGMENT_NODE</td>
              <td>11</td>
            </tr>
            <tr>
              <td>TDOMNotation</td>
              <td>NOTATION_NODE</td>
              <td>12</td>
            </tr>
          </table>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.ParentNode">
        <short>DOM node that is the immediate ancestor of this node.</short>
        <descr>
          <p>
            <var>ParentNode</var> is a read-only <var>TDOMNode</var> property that represents the DOM node that is the immediate ancestor of this node. All nodes, except TDOMAttr, TDOMDocument, TDOMDocumentFragment, TDOMEntity, and TDOMNotation may have a parent.
          </p>
          <p>
            The value in ParentNode is assigned when TDOMNode methods like InsertBefore, InternalAppend, and AppendChild are called. The value in ParentNode is cleared when the DetachChild method is called, or when ChildNodes are freed.
          </p>
          <p>
            Use ChildNodes to access the DOM nodes that are the immediate descendants of this node. Use PreviousSibling and NextSibling to access the respective DOM nodes that exist at the same Level in the DOM tree.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.InsertBefore"/>
          <link id="TDOMNode.AppendChild"/>
          <link id="TDOMNode.DetachChild"/>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode.PreviousSibling"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode_WithChildren"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.FirstChild">
        <short>Gets the first child node for the current node.</short>
        <descr>
          <p>
            <var>FirstChild</var> is a read-only <var>TDOMNode</var> property that represents the first child node for this DOM node. In TDOMNode, the value for the property is always <b>Nil</b> (not assigned). The read access specifier is re-implemented in a descendent class (TDOMNode_WithChildren) to  provide direct support for child node access.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.LastChild">
        <short>Gets the last child node for the current node.</short>
        <descr>
          <p>
            <var>LastChild</var> is a read-only <var>TDOMNode</var> property that represents the last child node for this DOM node. In TDOMNode, the value for the property is always <b>Nil</b> (not assigned). The read access specifier is re-implemented in a descendent class (TDOMNode_WithChildren) to  provide direct support for child node access.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.ChildNodes">
        <short>Provides access to the list of Child nodes for the current node.</short>
        <descr>
          <p>
            <var>ChildNodes</var> is a read-only <var>TDOMNodeList</var> property used to provide access to the child nodes for the current DOM node. Reading the value in ChildNodes causes a TDOMNodeList to be created using the DOM tree in OwnerDocument. The list contains any DOM nodes found in OwnerDocument immediately below the current DOM node. If there are no child nodes for the current node, the list has a Length (or Count - they contain the same data) of <var>0</var> (zero). Use HasChildNodes to determine if the ChildNodes property contains any DOM nodes.
          </p>
          <remark>
            While ChildNodes is specified in TDOMNode, actually support for the list of child nodes is implemented in the TDOMNode_WithChildren descendant.
          </remark>
        </descr>
        <seealso>
          <link id="TDOMNode.OwnerDocument"/>
          <link id="TDOMNode.HasChildNodes"/>
          <link id="TDOMNodeList"/>
          <link id="TDOMNode_WithChildren"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.PreviousSibling">
        <short>Previous DOM Node at the same level in the DOM tree.</short>
        <descr>
          <p>
            <var>PreviousSibling</var> is a read-only <var>TDOMNode</var> property that represents the previous DOM node at the same level in the DOM tree. If no previous node was found at the same level, the property is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            Use NextSibling to access the next node at the same level in the DOM tree.
          </p>
        </descr>
        <seealso>
          <link  id="TDOMNode.NextSibling"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NextSibling">
        <short>Next DOM Node at the same level in the DOM tree.</short>
        <descr>
          <p>
            <var>NextSibling</var> is a read-only <var>TDOMNode</var> property that represents the next DOM node at the same level in the DOM tree. If no successor node was found at the same level, the property is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            Use PreviousSibling to access the previous node at the same level in the DOM tree.
          </p>
        </descr>
        <seealso>
          <link  id="TDOMNode.PreviousSibling"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.Attributes">
        <short>Contains Attribute for the DOM Node.</short>
        <descr>
          <p>
            <var>Attributes</var> is a read-only <var>TDOMNamedNodeMap</var> property that contains attributes for the DOM node. Use the properties and methods in Attributes to access the DOM nodes by their name or ordinal position. Attributes also includes properties and methods that provide support for Namespace URIs and QualifiedNames as defined in the DOM specification.
          </p>
          <p>
            While specified in TDOMNode, Attributes are valid only in the  TDOMElement node type. For all other DOM node types the Attributes property is unassigned (contains <b>Nil</b>).
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap"/>
          <link id="TDOMElement"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.OwnerDocument">
        <short>DOM Document that created the DOM node.</short>
        <descr>
          <p>
            <var>OwnerDocument</var> is a read-only <var>TDOMDocument</var> property that represents the DOM document that created the node. OwnerDocument can be used to get access to the complete DOM tree for a document, or to access child nodes for any DOM node owned by the OwnerDocument.
          </p>
          <p>
            In the TDOMDocument node specialization, the value in OwnerDocument is always unassigned (contains <b>Nil</b>).
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <element name="TDOMNode.GetEnumerator">
        <short>
          Gets an enumerator for DOM Nodes that are top-level children in the node.
        </short>
        <descr>
          <p>
            <var>GetEnumerator</var> is a <var>TDOMNodeEnumerator</var> function used to get an enumerator for all top-level child nodes for the DOM node. It does not include any grandchildren (recursive access to child nodes).
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode.GetChildCount"/>
          <link id="TDOMNode.GetChildNodes"/>
          <link id="TDOMNode.HasChildNodes"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetEnumerator.Result">
        <short>Enumerator for immediate child nodes in the DOM node.</short>
      </element>

      <element name="TDOMNode.GetEnumeratorAllChildren">
        <short>
          Gets an enumerator for DOM Nodes that are children or grand children for the node.
        </short>
        <descr>
          <p>
            <var>GetEnumeratorAllChildren</var> is a <var>TDOMNodeAllChildEnumerator</var> function used to get an enumerator for all nodes which are children or grandchildren for the node. Allows recursion into descendent nodes found in a child node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.GetEnumerator"/>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode.HasChildNodes"/>
          <link id="TDOMNode.GetChildNodes"/>
          <link id="TDOMNode.GetChildCount"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetEnumeratorAllChildren.Result">
        <short>Enumerator for all child nodes in the sub-tree for the DOM node.</short>
      </element>

      <element name="TDOMNode.GetNextNode">
        <short>Gets the next Child or Sibling node for the DOM node.</short>
        <descr>
          <p>
            <var>GetNextNode</var> is a <var>TDOMNode</var> function used to get the next child or sibling node in the DOM node hierarchy. GetNextNode visits nodes starting at the <var>FirstChild</var> node for the class instance. If FirstChild is not assigned, the <var>GetNextNodeSkipChildren</var> method is called to get the <var>NextSibling</var> node, or the NextSibling node in the <var>ParentNode</var>.
          </p>
          <p>
            The return value is the TDOMNode which represents the next child or sibling node in the document hierarchy.
          </p>
          <p>
            GetNextNode is called from the <var>TDOMNodeAllChildEnumerator.MoveNext</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeAllChildEnumerator.MoveNext"/>
          <link id="TDOMNode.GetPreviousNode"/>
          <link id="TDOMNode.GetNextNodeSkipChildren"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetNextNode.Result">
        <short>Next child or sibling node in the DOM hierarchy.</short>
      </element>

      <element name="TDOMNode.GetNextNodeSkipChildren">
        <short>Gets the next sibling for the node in the DOM hierarchy.</short>
        <descr>
          <p>
            <var>GetNextNodeSkipChildren</var> is a <var>TDOMNode</var> function used to get the next sibling node, ignoring all child nodes, for the current node.
          </p>
          <p>
            The return value contains the TDOMNode that is the <var>NextSibling</var> for the current node, and can actually contain a previous sibling if NextSibling is unassigned. The return value is <b>Nil</b> when NextSibling is unassigned for both the current node and <var>ParentNode</var>.
          </p>
          <p>
            GetNextNodeSkipChildren is used in the implementation of the <var>TDOMNodeAllChildEnumerator.Create</var> method, and called from the  <var>TDOMNode.GetNextNode</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.ParentNode"/>
          <link id="TDOMNodeAllChildEnumerator.Create"/>
          <link id="TDOMNode.GetNextNode"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetNextNodeSkipChildren.Result">
        <short>Next sibling node in the DOM hierarchy, or Nil.</short>
      </element>

      <element name="TDOMNode.GetPreviousNode">
        <short>Gets the previous node in the DOM node hierarchy.</short>
        <descr>
          <p>
            <var>GetPreviousNode</var> is a <var>TDOMNode</var> function used to get the previous node in the DOM node hierarchy.
          </p>
          <p>
            The return value contains the last node (or leaf) in the node hierarchy for the <var>PreviousSibling</var> node as return from the <var>GetLastLeaf</var> method for the node. The return value is the <var>ParentNode</var> when PreviousSibling is unassigned.
          </p>
          <p>
            GetPreviousNode is the converse of the <var>GetNextNode</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.PreviousSibling"/>
          <link id="TDOMNode.GetLastLeaf"/>
          <link id="TDOMNode.ParentNode"/>
          <link id="TDOMNode.GetNextNode"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetPreviousNode.Result">
        <short>Previous node in the DOM node hierarchy.</short>
      </element>

      <element name="TDOMNode.GetLastLeaf">
        <short>Gets the last node in the DOM sub-tree for the current node.</short>
        <descr>
          <p>
            <var>GetLastLeaf</var> is a <var>TDOMNode</var> function used to the last node in the DOM node hierarchy for the current node.
          </p>
          <p>
            The return value is <b>Nil</b> when <var>LastChild</var> has not been assigned for the current node. Otherwise, LastChild is called recursively until the given descendent node has no child nodes.
          </p>
          <p>
            GetLastLeaf is used to implement the <var>GetPreviousNode</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.LastChild"/>
          <link id="TDOMNode.GetPreviousNode"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetLastLeaf.Result">
        <short>Last node in the DOM sub-tree for the current node.</short>
      </element>

      <element name="TDOMNode.GetLevel">
        <short>Gets the level in the DOM tree for the DOM node.</short>
        <descr>
          <p>
            <var>GetLevel</var> is a <var>SizeInt</var> function used to get the level for the current node in the DOM node hierarchy. The return value is determined by counting the number of <var>ParentNode</var> assignments starting with the current DOM node. A root-level node in a DOM document is at level <b>0</b> (<b>zero</b>).
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ParentNode"/>
        </seealso>
      </element>
      <element name="TDOMNode.GetLevel.Result">
        <short>Number of parent nodes found in the DOM node hierarchy.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.InsertBefore">
        <short>Inserts a new child node immediately before the reference child node.</short>
        <descr>
          <p>
            <var>InsertBefore</var> is a <var>TDOMNode</var> function used to insert a new child node immediately before the referenced child node. In TDOMNode, InsertBefore always raises an <var>EDOMHierarchyRequest</var> exception. The method must be re-implemented in descendent classes which support child nodes in the DOM Node specialization.
          </p>
        </descr>
        <errors>
          Raises an <var>EDOMHierarchyRequest</var> exception; must be re-implemented in descendent classes.
        </errors>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.InsertBefore.Result">
        <short>DOM node inserted in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.InsertBefore.NewChild">
        <short>New DOM node to insert into the child nodes.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.InsertBefore.RefChild">
        <short>Reference node where the new node is inserted.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.ReplaceChild">
        <short>Replaces a child node with the specified DOM node.</short>
        <descr>
          <p>
            <var>ReplaceChild</var> is a <var>TDOMNode</var> function which specifies the method used to replace a child node in the DOM sub-tree with the specified DOM node. <var>NewChild</var> is the DOM node to store in the DOM sub-tree. <var>OldChild</var> is the existing DOM node replaced with the new node value.
          </p>
          <p>
            While TDOMNode specifies the method, it does not provide physical storage for child nodes. As a result, ReplaceChild always raises an <var>EDOMHierarchyRequest</var> exception and the return value is always <b>Nil</b>. ReplaceChild must be re-implemented in a descendent class to provide the functionality required for other DOM node specializations.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode"/>
          <link id="TDOMNode_WithChildren"/>
          <link id="TDOMDocument"/>
          <link id="EDOMHierarchyRequest"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.ReplaceChild.Result">
        <short>Old child node replaced in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.ReplaceChild.NewChild">
        <short>New node to store in child nodes.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.ReplaceChild.OldChild">
        <short>Old node to remove from the child nodes.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.DetachChild">
        <short>Detaches the specified child node from the DOM sub-tree for the node.</short>
        <descr>
          <p>
            <var>DetachChild</var> is a <var>TDOMNode</var> function used to detach a specified child node from the DOM sub-tree for the current node. OldChild is the DOM node to remove from the DOM sub-tree. The return value contains the detached DOM node.
          </p>
          <p>
            TDOMNode specifies the DetachChild method, but does not provide physical storage for child nodes. As a result, it always raises an <var>EDOMNotFound</var> exception in the method. DetachChild must be re-implemented in a descendent class as required for other DOM Node specializations.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.DetachChild"/>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.DetachChild.Result">
        <short>The DOM Node detached in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.DetachChild.OldChild">
        <short>DOM Node to locate in the DOM sub-tree.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.RemoveChild">
        <short>Removes the specified child from the DOM sub-tree for this node.</short>
        <descr>
          <p>
            <var>RemoveChild</var> is a <var>TDOMNode</var> function used to remove the node specified in <var>OldChild</var> from the <var>ChildNodes</var> sub-tree. RemoveChild calls the <var>DetachChild</var> method to detach the specified node from the <var>OwnerDocument</var>. The return value is the node in OldChild after it has been detached from the OwnerDocument and its internal node references have been updated.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode.DetachChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.RemoveChild.Result">
        <short>Child Node removed in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.RemoveChild.OldChild">
        <short>DOM Node to locate in the DOM sub-tree.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.AppendChild">
        <short>Appends the specified node as a child in the current node.</short>
        <descr>
          <p>
            <var>AppendChild</var> is a <var>TDOMNode</var> function  used to append the node specified in <var>NewChild</var> as a child node in the hierarchy for the current class instance. AppendChild calls the <var>InsertBefore</var> method to make the specified node the first child node in the DOM hierarchy.
          </p>
          <p>
            The return value contains the TDOMNode instance in NewChild after the node relationship in <var>ParentNode</var>, <var>FirstChild</var>, <var>PreviousSibling</var>, and <var>NextSibling</var> have been updated.
          </p>
          <remark>
            lnsertBefore always raises an <var>EDOMHierarchyRequest</var> exception in TDOMNode. It is overridden in descendent classes to perform actions needed for a DOM node specialization when the AppendChild method is called.
          </remark>
        </descr>
        <seealso>
          <link id="TDOMNode.InsertBefore"/>
          <link id="TDOMNode.ParentNode"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.PreviousSibling"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="EDOMHierarchyRequest"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.AppendChild.Result">
        <short>New DOM Node appended as a child node.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.AppendChild.NewChild">
        <short>DOM Node to append in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.HasChildNodes">
        <short>Indicates if the DOM node has child nodes.</short>
        <descr>
          <p>
            <var>HasChildNodes</var> is a <var>Boolean</var> function which indicates if the DOM node has child nodes. In general, the return value is <b>True</b> when a DOM node has been assigned to the <var>FirstChild</var> property.
          </p>
          <p>
            HasChildNodes always returns <b>False</b> in <var>TDOMNode</var>. TDOMNode does not allocate storage for child nodes. The method must be overridden in a descendent class which allocates storage for child nodes in the DOM node specialization.
          </p>
        </descr>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.HasChildNodes.Result">
        <short>True when the size of the ChildNodes list is not zero.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.CloneNode">
        <short>Makes a copy of the DOM node.</short>
        <descr>
          <p>
            <var>CloneNode</var> is an overloaded <var>TDOMNode</var> function used to make a new copy of the current node. <var>Deep</var> indicates that child nodes are included in the new TDOMNode instance when set to <b>True</b>. An overloaded variant allows the DOM Document which owns the new node to be specified.
          </p>
          <p>
            CloneNode always raises an <var>EDOMNotSupported</var> exception in TDOMNode, and the return value is always <b>Nil</b>. It must be overridden in a descendent class to perform any actions needed for the DOM node specialization.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.OwnerDocument"/>
          <link id="TDOMDocument"/>
          <link id="EDOMNotSupported"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.CloneNode.Result">
        <short>DOM node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.CloneNode.deep">
        <short>Indicates if child nodes are included in the cloned node.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.CloneNode.ACloneOwner">
        <short>DOM Document used to created the new DOM Node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.IsSupported">
        <short>
          Indicates if the DOM implementation supports a specific feature at a given conformance level.
        </short>
        <descr>
          <p>
            <var>IsSupported</var> is a <var>Boolean</var> function which indicates whether the DOM implementation implements a specific feature and that feature is supported in this node. IsSupported implements the DOM Node method defined in the DOM Level 2 Specification.
          </p>
          <p>
            <var>Feature</var> contains the name for the feature or module to check in the method.
          </p>
          <p>
            <var>Version</var> contains the conformance level for the specified Feature. Both values are used as arguments to the <var>TDOMImplementation.HasFeature</var> method.
          </p>
          <p>
            Returns <b>True</b> if the specified feature at the given conformance level is supported for the node, or false when not implemented.
          </p>
        </descr>
        <seealso>
          <link id="TDOMImplementation.HasFeature"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.IsSupported.Result">
        <short>
          True when the feature and version number are supported in the DOM implementation.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.IsSupported.Feature">
        <short>Name of the feature or module to check in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.IsSupported.Version">
        <short>Version number or conformance level required for the feature.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.HasAttributes">
        <short>Indicates if the DOM node has attribute names and values.</short>
        <descr>
          <p>
            <var>HasAttributes</var> is a <var>Boolean</var> function which indicates if the DOM node attribute names and/or values. HasAttributes implements the method defined for the DOM Node interface in the DOM Level 2 Specification.
          </p>
          <p>
            The return value is <b>True</b> when a <var>TDOMNamedNodeMap</var> has been assigned for the node, and it has a non-zero value in its <var>Length</var> (or <var>Count</var>) property.
          </p>
          <remark>
            HasAttributes always returns <b>False</b> in <var>TDOMNode</var>, and is overridden in descendent classes which implement a DOM node specialization.
          </remark>
        </descr>
        <seealso>
          <link id="TDOMElement.HasAttributes"/>
          <link id="TDOMElement.AttribStrings"/>
          <link id="TDOMElement.GetAttribute"/>
          <link id="TDOMElement.SetAttribute"/>
          <link id="TDOMNamedNodeMap"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.HasAttributes.Result">
        <short>True when the Attribute list is not empty.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode.Normalize">
        <short>Normalizes text nodes and attributes in the Node sub-tree.</short>
        <descr>
          <p>
            <var>Normalize</var> is a method used to convert child text nodes in the sub-tree to their normal form where only structure nodes separate the text nodes. Adjacent text nodes are combined into a single text node. Adjacent text nodes which contain only ignorable whitespace are consolidated into a single whitespace value.
          </p>
          <p>
            Normalize implements the method defined for the DOM Node interface in the DOM Level 2 Specification.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.Flags"/>
          <link id="TDOMCharacterData.Data"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NamespaceURI">
        <short>URI for the NameSpace assigned to the DOM Node.</short>
        <descr>
          <p>
            <var>NamespaceURI</var> is a read-only <var>DOMString</var> property with the Namespace URI (<b>Universal Resource Identifier</b>) for the DOM node, or an empty string when it has not been specified. NamespaceURI is determined using a namespace lookup for the value declared when the node is created.
          </p>
          <p>
            For nodes other than node type ELEMENT_NODE (TDOMElement) and ATTRIBUTE_NODE (TDOMAttr), and nodes created with a DOM Level 1 method, such as createElement from the Document interface, this is always an empty DOMString.
          </p>
          <p>
            The property value is always an empty string ('') in <var>TDOMNode</var>. In a descendent class (like <var>TDOMNode_NS</var>), it will contain one of the Namespace URLs registered in the OwnerDocument for the node.
          </p>
          <p>
            NamespaceURI implements the attribute from the Node interface in the DOM Level 2 Specification.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.LookupNamespaceURI"/>
          <link id="TDOMNode.LookupPrefix"/>
          <link id="TDOMNode.Prefix"/>
          <link id="TDOMNode.IsDefaultNamespace"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.LocalName">
        <short>Name without the NameSpace prefix assigned to the DOM Node.</short>
        <descr>
          <p>
            <var>LocalName</var> is a read-only <var>DOMString</var> property with the local part of the qualified name for the node. A qualified name consists of a delimited namespace <var>Prefix</var> and the name for the element or attribute in the node.  Local name contains only the element or attribute name, without the Prefix for the namespace.
          </p>
          <p>
            For the following Qualified Names:
          </p>
          <ul>
            <li>XML:ID</li>
            <li>XLink:href</li>
          </ul>
          <p>
            The Prefix values are:
          </p>
          <ul>
            <li>XML</li>
            <li>XLink</li>
          </ul>
          <p>
            The LocalName values are:
          </p>
          <ul>
            <li>ID</li>
            <li>href</li>
          </ul>
          <p>
            For nodes other than ELEMENT_NODE (TDOMELement) and ATTRIBUTE_NODE (TDOMAttr), and nodes created with a DOM Level 1 method, such as createElement from the Document interface, the property value is is always an empty DOMString.
          </p>
          <p>
            The property value is always an empty DOMString value in TDOMNode. In a descendent class (like TDOMNode_NS), it will contain the actual NodeName for an element or attribute.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.Prefix">
        <short>Prefix used for the assigned NameSpace in the DOM Node.</short>
        <descr>
          <p>
            <var>Prefix</var> is a <var>DOMString</var> property which contains the prefix part of a qualified name used for the node. Prefix is the identifier used for the namespace URI, and is included in the value for the <var>NodeName</var> property which includes the qualified name. When a qualified name is not used in NodeName, Prefix contains an empty DOMString value (''). Use <var>LocalName</var> for the value in NodeName without the value in Prefix.
          </p>
          <p>
            Prefix applies to the DOM Element and Attribute node types. For nodes of any type other than ELEMENT_NODE (<var>TDOMElement</var>) and ATTRIBUTE_NODE (<var>TDOMAttr</var>) and nodes created with a DOM Level 1 method, such as createElement from the Document interface, this is always an empty DOMString value.
          </p>
          <p>
            Prefix implements the Prefix attribute for the DOM Node interface in the DOM Level 2 Specification.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.LocalName"/>
          <link id="TDOMNode.NamespaceURI"/>
          <link id="TDOMNode_NS"/>
          <link id="TDOMElement"/>
          <link id="TDOMAttr"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.TextContent">
        <short>Textual representation for the DOM Node.</short>
        <descr>
          <p>
            <var>TextContent</var> is a <var>DOMString</var> property the textual content for a DOM node (and its specialized descendants), as specified in the DOM Level 3 specification.
          </p>
          <p>
            In <var>TDOMNode</var>, the value in TextContent is redirected to the <var>NodeValue</var> property. The read and write access specifiers may be overridden in descendent classes to perform actions needed for a particular DOM Node specialization, including:
          </p>
          <ul>
            <li>TDOMProcessingInstruction</li>
            <li>TDOMCharacterData</li>
            <li>TDOMText</li>
            <li>TDOMAttr</li>
          </ul>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
          <link id="TDOMProcessingInstruction.GetNodeValue"/>
          <link id="TDOMProcessingInstruction.SetNodeValue"/>
          <link id="TDOMCharacterData.GetNodeValue"/>
          <link id="TDOMCharacterData.SetNodeValue"/>
          <link id="TDOMText.SetNodeValue"/>
          <link id="TDOMAttr.GetNodeValue"/>
          <link id="TDOMAttr.SetNodeValue"/>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.LookupPrefix">
        <short>Locates the Prefix for the specified NameSpace URI.</short>
        <descr>
          <p>
            <var>LookupPrefix</var> is a <var>DOMString</var> function used to locate the <var>Prefix</var> associated with the NameSpace URI specified in the nsURI argument. LookupPrefix implements the DOM Node interface specified in the DOM Level 3 specification.
          </p>
          <p>
            In <var>TDOMNode</var>, the return value is always an empty DOMString (''). Descendent classes which implement a specific DOM Node specialization (like <var>TDOMElement</var>) will provide an <var>InternalLookupPrefix</var> method used to get the return value. The internal <var>GetAncestorElement</var> routine is used to find Prefix / Namespace associations in ancestor nodes.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NamespaceURI"/>
          <link id="TDOMNode.Prefix"/>
          <link id="TDOMNode.NodeName"/>
          <link id="TDOMNode.LocalName"/>
          <link id="TDOMElement.InternalLookupPrefix"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.LookupPrefix.Result">
        <short>Prefix for the Namespace URI, or an empty string.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.LookupPrefix.nsURI">
        <short>Namespace URI to locate in the Namespace information.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.LookupNamespaceURI">
        <short>Locates the NameSpace URI for the specified Prefix.</short>
        <descr>
          <p>
            <var>LookupNamespaceURI</var> is a <var>DOMString</var> function used to get the <var>NamespaceURI</var> associated with the <var>Prefix</var> specified in the <var>APrefix</var> argument. LookupNamespaceURI implements the method for the DOM Node interface as specified in the DOM Level 3 specification.
          </p>
          <p>
            LookupNamespaceURI ensures that the DOM node uses the <var>ELEMENT_NODE</var> node type required for namespace support. If the node is not a DOM Element (<var>TDOMElement</var>), the ancestor nodes are checked for a <var>TDOMDocument</var> or <var>TDOMAttrib</var> node which can supply the namespace information.
          </p>
          <p>
            LookupNamespaceURI compares the value in the <var>Prefix</var> property to the argument in <var>APrefix</var>. When a match is found, the <var>NamespaceURI</var> for the node is used as the return value. When a namespace is not found for the prefix, the return value is an empty DOMString ('').
          </p>
          <remark>
            This method is not fully compatible with the DOM Level 3 specification which  allows the APrefix argument to contain a Null value. Lazarus cannot represent the DOMString type in that manner, so it uses an empty DOMString ('').
          </remark>
        </descr>
        <seealso>
          <link id="TDOMNode_NS"/>
          <link id="TDOMElement"/>
          <link id="TDOMAttr"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.LookupNamespaceURI.Result">
        <short>The Namespace URI for the specified Prefix, or an empty string.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.LookupNamespaceURI.APrefix">
        <short>Prefix to locate in the Namespace Information for the DOM Node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.IsDefaultNamespace">
        <short>
          Indicates if the specified NameSpace URI is the default namespace for the DOM node.
        </short>
        <descr>
          <p>
            <var>IsDefaultNamespace</var> is a <var>Boolean</var> function which indicates if the Namespace URI in the nsURI argument is the default value for the DOM node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.LookupNamespaceURI"/>
          <link id="TDOMNode.LookupPrefix"/>
          <link id="TDOMNode.Prefix"/>
          <link id="TDOMNode.LocalName"/>
          <link id="TDOMNode.NodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.IsDefaultNamespace.Result">
        <short>True when the default Namespace is the specified Namespace URI.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.IsDefaultNamespace.nsURI">
        <short>
          Namespace URI to examine in the Namespace Information for the DOM Node.
        </short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.baseURI">
        <short>Provides the BaseURI for the node relative to its Owner document.</short>
        <descr>
          <p>
            <var>BaseURI</var> is a read-only <var>DOMString</var> property with the Base Universal Resource Identifier (URI) for the node relative to its context.
          </p>
          <p>
            BaseURI is specified in the DOM Level 3 Specification. It is not defined in the DOM Level 2 APIs. The implementation in TDOMNode is incomplete as per the DOM Level 3 specification.
          </p>
          <p>
            In the DOM specification, BaseURI is a dynamically computed value starting with the <b>xml:base</b> attribute for a given document. It includes the DocumentURI for the owner document, and should also include the node path to the current node.
          </p>
          <p>
            In TDOMNode, BaseURI is resolved to the DocumentURI in the OwnerDocument when the node type is a document node or a processing instruction. It does not include the xml:base attribute that may (or may not ) be present in the owner document.
          </p>
          <p>
            For all other node types, the property value is an empty string ('').
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode.ParentNode"/>
          <link id="TDOMDocument.DocumentURI"/>
          <link id="TDOMProcessingInstruction"/>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.FindNode">
        <short>Finds the Child Node with the specified name.</short>
        <descr>
          <p>
            <var>FindNode</var> is a <var>TDOMNode</var> function used to locate a child node in the class instance with the value in <var>ANodeName</var> in its <var>NodeName</var> property. The return value contains the TDOMNode instance with the specified name, or <b>Nil</b> if a node is not found with the  specified name.
          </p>
          <p>
            FindNode always returns <b>Nil</b> in TDOMNode since physical storage is not  allocated in TDOMNode for child node instances. It must be overridden in a descendent class to performs actions needed for the DOM node specialization.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode.GetChildNodes"/>
          <link id="TDOMNode.NodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.FindNode.Result">
        <short>DOM Node located with the specified name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.FindNode.ANodeName">
        <short>Node Name to locate in the Child Nodes for the DOM Node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.CompareName">
        <short>Compares the NodeName in the DOM Node to the specified value.</short>
        <descr>
          <p>
            <var>CompareName</var> is an <var>Integer</var> function used to compare the value in <var>NodeName</var> to the value specified in the <var>name</var> argument. NodeName and name are converted to DOMPChar types and passed as arguments an implementation routine used to compare the values.
          </p>
          <p>
            The return value contains the difference between the ordinal character values for the first non-matching characters in the compared names. When the return value is <b>0</b> (<b>zero</b>), the compared values have the same content.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
          <link id="DOMPChar"/>
          <link id="DOMString"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.CompareName.Result">
        <short>
          Difference between the ordinal character values for the first non-matching character in the compared names.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.CompareName.name">
        <short>Value compared to the NodeName for the DOM node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.Flags">
        <short>Provides access to the Node Flags for the DOM Node.</short>
        <descr>
          <p>
            <var>Flags</var> is a <var>TNodeFlags</var> property which contains zero or more values from the <var>TNodeFlagEnum</var> enumeration that indicate the conformance level or state for the node. See TNodeFlagEnum for more information about the values in the enumeration and their meanings.
          </p>
          <p>
            Values in Flags are used and updated in various methods like <var>Normalize</var> and <var>GetTextContent</var>. It is also updated when the <var>SetReadOnly</var> method is called.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.SetReadOnly"/>
          <link id="TDOMNode.Normalize"/>
          <link id="TDOMNode.TextContent"/>
          <link id="TDOMNode.GetTextContent"/>
          <link id="TNodeFlags"/>
          <link id="TNodeFlagEnum"/>
        </seealso>
      </element>

      <!-- "class of" type Visibility: default -->
      <element name="TDOMNodeClass">
        <short>Class type used to create TDOMNode instances.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNode_WithChildren">
        <short>Extends TDOMNode to allocate storage for child nodes.</short>
        <descr>
          <p>
            <var>TDOMNode_WithChildren</var> is a <var>TDOMNode</var> descendant which allocates storage for child nodes in the class instance. TDOMNode_WithChildren is an extension to the Node interface in the DOM specification, and is designed to save memory in a large DOM tree.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNode_WithChildren.FFirstChild"/>
      <element name="TDOMNode_WithChildren.FLastChild"/>
      <element name="TDOMNode_WithChildren.FChildNodes"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_WithChildren.GetFirstChild">
        <short>Gets the value for the FirstChild property.</short>
        <descr>
          <p>
            <var>GetFirstChild</var> is an overridden method in <var>TDOMNode_WithChildren</var> used to get the value for the <var>FirstChild</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.GetFirstChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.GetFirstChild.Result">
        <short>DOM Node that is the first child node in the DOM sub-tree.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_WithChildren.GetLastChild">
        <short>Gets the value for the LastChild property.</short>
        <descr>
          <p>
            <var>GetLastChild</var> is an overridden method in <var>TDOMNode_WithChildren</var> used to get the value for the <var>LastChild</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.LastChild"/>
          <link id="TDOMNode.GetLastChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.GetLastChild.Result">
        <short>Value for the LastChild property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_WithChildren.CloneChildren">
        <short>Makes a copy of child nodes in the specified DOM node.</short>
        <descr>
          <p>
            <var>CloneChildren</var> is a method used to clone child nodes from the current class instance to DOM node specified in <var>ACopy</var>.
          </p>
          <p>
            CloneChildren visits each of the child nodes, starting at <var>FirstChild</var> and continuing to the value in the <var>NextSibling</var> property for the child node. The <var>CloneNode</var> method for each child node is called make a new copy (including its children) that is owned by the document in <var>ACloneOwner</var>. The cloned node is added to ACopy using the <var>InternalAppend</var> method.
          </p>
          <p>
            No actions are performed in the method when the FirstChild property has not been assigned in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.InternalAppend"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.LastChild"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.CloneNode"/>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.CloneChildren.ACopy">
        <short>DOM Node which receives the cloned child nodes.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.CloneChildren.ACloneOwner">
        <short>DOM Document used to create the cloned child nodes.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_WithChildren.FreeChildren">
        <short>Frees all Child nodes for the DOM node.</short>
        <descr>
          <p>
            <var>FreeChildren</var> is a method used to free all child nodes in the current class instance.
          </p>
          <p>
            FreeChildren visits each of the child nodes, starting at FirstChild and continuing to the NextSibling for the child node. The TDOMNode instance that is the child is freed before continuing to the next sibling node.
          </p>
          <p>
            FreeChildren sets the value in the FirstChild and LastChild properties to Nil prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.DetachChild"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.LastChild"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.ParentNode"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_WithChildren.GetTextContent">
        <short>Gets the value for the TextContent property.</short>
        <descr>
          <p>
            <var>GetTextContent</var> is an overridden method in <var>TDOMNode_WithChildren</var> used to get the value for the <var>TextContent</var> property. It re-implements the method to ensure that child nodes are represented in the value for the property.
          </p>
          <p>
            Child nodes are processed, start at <var>FirstChild</var> and continuing to the
            <var>NextSibling</var> for the child node. The <var>NodeType</var> property for each child node is used to determine the actions needed for the node type. For example:
          </p>
          <dl>
            <dt>TEXT_NODE</dt>
            <dd>
              Casts the child node to TDOMText and appends its Data to the value for the property (when it is not ignorable whitespace).
            </dd>
            <dt>COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</dt>
            <dd>
              These child node types are omitted from the property value.
            </dd>
            <dt>Other NodeTypes</dt>
            <dd>
              The TextContent property for the child node is appended to the property value.
            </dd>
          </dl>
        </descr>
        <seealso>
          <link id="TDOMNode.TextContent"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.GetTextContent.Result">
        <short>Value for the TextContent property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_WithChildren.SetTextContent">
        <short>Sets the value for the TextContent property.</short>
        <descr>
          <p>
            <var>SetTextContent</var> is a overridden method used to set the <var>TextContent</var> property to the value specified in AValue. TextContent is the textual representation of the content for the node as a single <var>TDOMText</var> child node.
          </p>
          <p>
            SetTextContent calls the <var>Changing</var> method to ensure that the node does not have the value <var>nfReadonly</var> in its <var>Flags</var> property. An <var>EDOMError</var> exception is raised with the <var>NO_MODIFICATION_ALLOWED_ERR</var> constant if the node is marked as read-only.
          </p>
          <p>
            SetTextContent removes existing <var>ChildNodes</var> by calling <var>DetachChild</var> until <var>FirstChild</var> is no longer assigned.
          </p>
          <p>
            If <var>AValue</var> is not an empty string (''), the <var>OwnerDocument</var> is used to create a TDOMText node with the specified value. The new text node is added to ChildNodes using the <var>AppendChild</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.TextContent"/>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.DetachChild"/>
          <link id="TDOMNode.Changing"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.SetTextContent.AValue">
        <short>New value for the TextContent property.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNode_WithChildren.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. It calls <var>FreeChildren</var> to free all of the <var>ChildNodes</var> for the class instance, and frees the node list as well. Destroy calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode_WithChildren.FreeChildren"/>
          <link id="TDOMNodeList"/>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.InsertBefore">
        <short>Inserts a new child node immediately before the reference child node.</short>
        <descr>
          <p>
            <var>InsertBefore</var> is a <var>TDOMNode</var> function used to insert a new child node immediately before the reference child node. InsertBefore is an overridden function that re-implements the method defined in the ancestor class.
          </p>
          <p>
            <var>NewChild</var> contains the Node inserted into the DOM sub-tree for the current DOM Node. <var>RefChild</var> contains the Node that establishes the position where the NewChild Node is inserted in the DOM sub-tree. When RefChild is not assigned (contains <b>Nil</b>), the new child node is appended as a sibling in the DOM sub-tree. No actions are performed in the method when NewChild and RefChild contains the same DOM node.
          </p>
          <p>
            InsertBefore uses the value in the <var>NodeType</var> property for the NewChild node to determine the actions needed to add the node to the DOM sub-tree.  NodeType determines if NewChild requires additional processing before it is added to the DOM sub-tree. Some DOM Node types cannot be added directly to the sub-tree. Only their child nodes are added. No actions are performed for these DOM Node specialization when they do not contain child nodes. InsertBefore raises an EDOMHierarchyRequest exception if ChildNode is not a valid child node type for the current DOM node.
          </p>
          <p>
            InsertBefore updates the parent, sibling, and child relationships in DOM nodes as they are inserted (or appended) to the DOM sub-tree. The return value contains the NewChild argument with updated values in its ParentNode, PreviousSibling and NextSibling properties.
          </p>
          <p>
            InsertBefore checks the <var>ParentNode</var> for the RefChild argument to ensure that it resides in the DOM sub-tree for the current DOM Node. An EDOMNotFound exception is raised when it has an assigned value other than the current DOM Node.
          </p>
          <p>
            InsertBefore calls the Changing method to ensure that neither the current DOM Node nor its ancestor have their read-only Flags set. An exception is raised in Changing if Flags contains the value nfReadonly in either DOM Node.
          </p>
          <p>
            When the NodeType is DOCUMENT_TYPE_NODE, the OwnerDocument property is examined. An  EDOMWrongDocument exception is raised when the NewChild has an assigned value in the OwnerDocument property.
          </p>
        </descr>
        <errors>
          <dl>
            <dt>EDOMWrongDocument</dt>
            <dd>
              Raised when the OwnerDocument for the current node is not the same as the value in NewChild
            </dd>
            <dt>EDOMNotFound</dt>
            <dd>
              Raised when the assigned ParentNode in RefChild is not the same as the current DOM node
            </dd>
            <dt>EDOMHierarchyRequest</dt>
            <dd>
              Raised when NewChild is not a valid child node type for the current DOM node
            </dd>
          </dl>
        </errors>
        <seealso>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode.ParentNode"/>
          <link id="TDOMNode.PreviousSibling"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.LastChild"/>
          <link id="TDOMNode.OwnerDocument"/>
          <link id="TDOMNode.InsertBefore"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.InsertBefore.Result">
        <short>DOM Node inserted into the DOM sub-tree.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.InsertBefore.NewChild">
        <short>Child node inserted in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.InsertBefore.RefChild">
        <short>Reference child node where the new DOM node is inserted as a Sibling.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.ReplaceChild">
        <short>Replaces a child DOM node with another DOM node.</short>
        <descr/>
        <seealso>
          <link id="TDOMNode_WithChildren.DetachChild"/>
          <link id="TDOMNode_WithChildren.InsertBefore"/>
          <link id="TDOMNode.RemoveChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.ReplaceChild.Result">
        <short>DOM node in OldChild after it has been detached from the node sub-tree.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.ReplaceChild.NewChild">
        <short>New DOM node to store in the sub-tree.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.ReplaceChild.OldChild">
        <short>Old DOM node replaced in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.DetachChild">
        <short>Detached the specified DOM node from the sub-tree.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.DetachChild"/>
          <link id="TDOMNode.ParentNode"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.DetachChild.Result">
        <short>
         Returns OldChild after updating the Parent, children, and siblings for the node.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.DetachChild.OldChild">
        <short>DOM node detached in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.HasChildNodes">
        <short>Indicates if the current DOM node has child nodes.</short>
        <descr/>
        <seealso>
          <link id="TDOMNode.HasChildNodes"/>
          <link id="TDOMNode.FirstChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.HasChildNodes.Result">
        <short>True if FirstChild has been assigned for the node.</short>
      </element>


      <element name="TDOMNode_WithChildren.GetChildCount">
        <short>
          Gets the number of child nodes for the DOM node instance.
        </short>
        <descr>
          <p>
            <var>GetChildCount</var> is an overridden <var>SizeInt</var> function in <var>TDOMNode_WithChildren</var>. It is used to get the number of child nodes for the class instance. No actions are performed in the method if <var>FirstChild</var> has not been assigned, and the return value is set to 0.
          </p>
          <p>
            If a <var>DOMNodeList</var> has been assigned to ChildNodes, its <var>Count</var> property is used as the return value. If ChildNodes has not been assigned, the child nodes are visited (starting at FirstChild and proceeding to its NextSibling) to count the number of child nodes.
          </p>
        </descr>
        <seealso>
          <link id="TDomNode.ChildNodes"/>
          <link id="TDomNode.FirstChild"/>
        </seealso>
      </element>
      <element name="TDOMNode_WithChildren.GetChildCount.Result">
        <short>Number of child nodes in the DOM node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.FindNode">
        <short>Finds a DOM node with the specified value in its NodeName property.</short>
        <descr>
          <p>
            <var>FindNode</var> is a method used to search the child nodes in class instance for the node with the name specified in <var>ANodeName</var>. The search is started using the node in <var>FirstChild</var>, and calls the <var>CompareName</var> method to compare the value in ANodeNode to the <var>NodeName</var> property for each child node.
          </p>
          <p>
            The return value contains the first <var>TDOMNode</var> with a node name that matches the requested value. The return value is <b>Nil</b> if a node is not found that matches the requested value, or when the class instance does not have any child nodes.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.FindNode"/>
          <link id="TDOMNode.CompareName"/>
          <link id="TDOMNode.NextSibling"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.FindNode.Result">
        <short>DOM node with a name matching the requested value, or Nil.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.FindNode.ANodeName">
        <short>Name for the DOM node to locate in the method.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode_WithChildren.InternalAppend">
        <short>
          Performs actions needed to append the specified node to the ChildNodes.
        </short>
        <descr>
          <p>
            <var>InternalAppend</var> is a method used to perform actions needed to append the DOM node specified in <var>NewChild</var> to the child nodes for the class instance.
          </p>
          <p>
            If the node has child nodes, as indicated by a value in <var>FirstChild</var>, <var>PreviousSibling</var> and <var>NextSibling</var> properties for the nodes are updated to reflect the new relationship in the node hierarchy.
          </p>
          <p>
            If the node does not have any existing child nodes, the value in NewChild is assigned to the FirstChild property.
          </p>
          <p>
            In both cases, NewChild is used as the <var>LastChild</var> for the class instance.
          </p>
          <p>
            InternalAppend ensures that the <var>ParentNode</var> in NewChild is set to the current class instance.
          </p>
          <p>
            InternalAppend is used in the implementation of the CloneChildren method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.LastChild"/>
          <link id="TDOMNode.PreviousSibling"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.FParentNode"/>
          <link id="TDOMNode_WithChildren.CloneChildren"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.InternalAppend.NewChild">
        <short>New DOM Node appended to the DOM sub-tree.</short>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TFilterResult">
        <short>Determines the Node types included in a DOM node list.</short>
        <descr>
          <p>
            <var>TFilterResult</var> is an enumerated type with values that determine the nodes selected in a <var>TDOMNodeList</var> instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList.NodeFilter"/>
        </seealso>
      </element>
      <element name="TFilterResult.frFalse">
        <short>Do not accept any nodes </short>
      </element>
      <element name="TFilterResult.frNorecurseFalse">
        <short>Accept all nodes and allow recursion.</short>
      </element>
      <element name="TFilterResult.frTrue">
        <short>Accept all nodes.</short>
      </element>
      <element name="TFilterResult.frNorecurseTrue">
        <short>Accept all nodes but don't allow recursion.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNodeList">
        <short>Implements an ordered list of DOM Nodes.</short>
        <descr>
          <p>
            <var>TDOMNodeList</var> is a class used to Implement an ordered list of DOM nodes, as required in the DOM specification. TDOMNodeList provides internal storage for  <var>TDOMNode</var> instances that are children of a specified DOM node. DOM nodes stored in TDOMNodeList are "live"; changes made to a DOM node in the list are automatically propagated to the DOM Document tree.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ParentNode"/>
          <link id="TDOMNode.ChildNodes"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNodeList.FNode"/>
      <element name="TDOMNodeList.FRevision"/>
      <element name="TDOMNodeList.FList"/>

      <!-- function result Visibility: default -->
      <element name="TDOMNodeList.GetCount">
        <short>Gets the value for the Count and Length properties.</short>
        <descr>
          <p>
            <var>GetCount</var> is a <var>LongWord</var> function used to the get value for the <var>Count</var> and <var>Length</var> properties. Calls the <var>BuildList</var> method to refresh the nodes in the list when the revision number for the list does not match the revision number for the node which owns the list.
          </p>
          <p>
            The property value contains the Count for the internal <var>TFPList</var> instance used to store the <var>TDOMNode</var> instances.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList.Length"/>
          <link id="TDOMNodeList.Count"/>
          <link id="TDOMNodeList.Item"/>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNodeList.GetItem">
        <short>Gets the value for the Item property.</short>
        <descr>
          <p>
            <var>GetItem</var> is a <var>TDOMNode</var> function used to get the value for the indexed <var>Item</var> property. Index contains the ordinal position in the list for the property value.
          </p>
          <p>
            GetItem ensures that items in the internal <var>TFPList</var> instance are up-to-date. When the revision number for the list differs from the revision number for  the node that owns the list, the <var>BuildList</var> method is called to refresh its contents and apply the node filtering mechanism for the container.
          </p>
          <p>
            The return value contains the TDOMNode instance at the specified position in the list. The return value is <b>Nil</b> when Index contains a value not present in the internal list.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList.Item"/>
          <link id="TDOMNodeList.BuildList"/>
          <link id="TDOMNodeList.NodeFilter"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNodeList.GetItem.Result">
        <short>Value for the Item property.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.GetItem.index">
        <short>Ordinal position for the DOM node in the property value.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNodeList.NodeFilter">
        <short>Determines if the node can be used in the DOM node list.</short>
        <descr>
          <p>
            <var>NodeFilter</var> is a <var>TFilterResult</var> function used to determine if the DOM node specified in <var>ANode</var> can be included in the DOM Node list. The return value indicates whether the node is allowed, and also whether its child nodes can be examined as well.
          </p>
          <p>
            NodeFilter always returns <var>frNoRecurseTrue</var> in <var>TDOMNodeList</var>, and allows the node but does <b>not</b> allow recursion into its child nodes. The method is overridden in descendent classes to perform the actions needed for the DOM node specialization.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList.BuildList"/>
          <link id="TDOMElementList.NodeFilter"/>
          <link id="TDOMNode"/>
          <link id="TFilterResult"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNodeList.NodeFilter.Result">
        <short>Indicates if the node is included in the node list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.NodeFilter.aNode">
        <short>DOM Node to examine in the method.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNodeList.BuildList">
        <short>Fills the node list using the node filter.</short>
        <descr>
          <p>
            <var>BuildList</var> is a virtual method used to get the <var>TDOMNode</var> instances in the node list. BuildList is called when the revision numbers for the node list and the node which owns the node list have different values. This ensures that the node list always reflects the current content in the DOM node hierarchy.
          </p>
          <p>
            BuildList clears the internal TFPList instance where the DOM nodes are stored, and updates the internal revision number for the node list to match the value in the owner node. Child nodes for the owner node are visited, and the <var>NodeFilter</var> method is called to determine if the child node should be included in the node list. If the return value from NodeFilter indicates that recursion is allowed, the child nodes for each child node are also visited and examined.
          </p>
          <remark>
            BuildList is marked as deprecated in TDOMNode. Use NodeFilter instead.
          </remark>
        </descr>
        <seealso>
          <link id="TDOMNodeList.NodeFilter"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.ParentNode"/>
          <link id="TFilterResult"/>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMNodeList.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited method on entry.
          </p>
          <p>
            Create stores the DOM node in <var>ANode</var> as the owner for the node list, and "touches"  the internal revision number for the list so that it is refreshed on its next access. Create also allocates the internal <var>TFPList</var> instance used to store the nodes in the node list.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.Create.ANode">
        <short>DOM Node which provides the child nodes for the list.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNodeList.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. It ensures that the internal list storage is set to <b>Nil</b> before the class instance is freed. Destroy calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso/>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNodeList.Item">
        <short>Provides indexed access to DOM nodes in the list.</short>
        <descr>
          <p>
            <var>Item</var> is a read-only indexed <var>TDOMNode</var> property used to provide access to DOM nodes in the list by their ordinal position. Item is the default property for the class instance.
          </p>
          <p>
            Index contains the ordinal position for the requested TDOMNode instance, and should be in the range <b>0..<var>Count</var>-1</b>. The property value is <b>Nil</b> if Index contains a value which is not a valid position in the list.
          </p>
          <p>
            Use Count (or <var>Length</var>) to get the number of DOM nodes available in the list.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList.Count"/>
          <link id="TDOMNodeList.Length"/>
          <link id="TDOMNodeList.GetItem"/>
          <link id="TDOMNodeList.Length"/>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.Item.index">
        <short>Ordinal position for the requested DOM Node in the list.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNodeList.Count">
        <short>Number of DOM nodes stored in the list.</short>
        <descr>
          <p>
            <var>Count</var> is a read-only <var>LongWord</var> property with the number of <var>TDOMNode</var> instances available in the <var>Item</var> property. Reading the value for the property causes the <var>BuildList</var> method to be called when the internal revision number for the list differs from the value in the DOM node that owns the list. The property value is re-directed to the Count property for the internal <var>TFPList</var> instance in the class.
          </p>
          <p>
            <var>Count</var> and <var>Length</var> are synonymous. Count is the property name used in FPC / Lazarus classes. Length is the term used in the specification for the DOM interface. Both are provided for completeness.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList.GetCount"/>
          <link id="TDOMNodeList.Length"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNodeList.Length">
        <short>Number of DOM Nodes stored in the list.</short>
        <descr>
          <p>
            <var>Count</var> and <var>Length</var> are synonymous. Count is the property name used in FPC / Lazarus classes. Length is the term used in the specification for the DOM interface. Both are provided for completeness.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList.Count"/>
          <link id="TDOMNodeList.GetCount"/>
        </seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMElementList">
        <short>Provides a recursive list of DOM Elements.</short>
        <descr>
          <p>
            TDOMElementList is a TDOMNodeList descendant that provides an extension to the DOM interface used to build recursive lists of elements. TDOMElementList provides optional filtering used to select the DOM Elements that appear in the list.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNodeList"/>
          <link id="TDOMElementList.NodeFilter"/>
          <link id="TDOMElementList.UseFilter"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.filter">
        <short>Member with the value for the filter applied to the list.</short>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.FNSIndexFilter">
        <short>Member with the index of the NameSpace for the filter.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.localNameFilter">
        <short>Member with the local name used to filter nodes in the list.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.FMatchNS"/>
      <element name="TDOMElementList.FMatchAnyNS"/>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.UseFilter">
        <short>
          Indicates if filtering is used when selecting DOM Elements in the list.
        </short>
        <descr>
          <p>
            <var>UseFilter</var> is a <var>Boolean</var> member used to indicate whether filtering is enabled to select the elements in the list. The value is set in the <var>Create</var> method, and contains <b>True</b> when the filter or local name argument has a value other than '*' (All elements). UseFilter is used in <var>NodeFilter</var> to determine the <var>TFilterResult</var> return value from the method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElementList.Create"/>
          <link id="TDOMElementList.NodeFilter"/>
          <link id="TDOMElementList.NodeFilter"/>
          <link id="TDOMElementList.Filter"/>
          <link id="TDOMElementList.LocalNameFilter"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMElementList.NodeFilter">
        <short>Determines if the node can be used in the DOM element  list.</short>
        <descr>
          <p>
            <var>NodeFilter</var> is an overridden <var>TFilterResult</var> function used to determine if the DOM node specified in <var>ANode</var> can be included in the DOM Element list. The return value indicates whether the node is allowed in the element list.
          </p>
          <p>
            NodeFilter re-implements the method defined in the ancestor class to check whether  the DOM Node in ANode has <var>ELEMENT_NODE</var> in its <var>NodeType</var> property.
          </p>
          <p>
            If the Element list was created with a Namespace URI argument, the Namespace Information for the list is used to get the return value. It is set to <b>True</b> when the <var>LocalName</var> for the node matches the qualified name in the Namespace Information.
          </p>
          <p>
            If the Element list was created using a tag name as a filter, the return value is <b>True</b> when the <var>TagName</var> property in the node contains the same value. It is also <b>True</b> when the filter value was set to '*' for any element.
          </p>
          <p>
            The return value is always <var>False</var> if the specified node is not a DOM Element.
          </p>
          <p>
            NodeFilter is called from the inherited <var>BuildList</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElementList.Create"/>
          <link id="TDOMNodeList.BuildList"/>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode.NamespaceURI"/>
          <link id="TDOMNode.Prefix"/>
          <link id="TDOMNode.LocalName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElementList.NodeFilter.Result">
        <short>True if the specified node matches the tag name filter for the list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.NodeFilter.aNode">
        <short>DOM Node to include or exclude using the Filter value.</short>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMElementList.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overloaded constructor for the class instance. The overloaded variants allow either a filter value, or a namespace URI and and a local name to be used to filter the nodes in the class instance.
          </p>
          <p>
            Create updates the values in the Filter, LocalNameFilter, and UseFilter members based on the overloaded variant called to create the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElementList.Filter"/>
          <link id="TDOMElementList.LocalNameFilter"/>
          <link id="TDOMElementList.UseFilter"/>
          <link id="TDOMNodeList.Create"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.ANode">
        <short>DOM Node with children for the list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.AFilter">
        <short>Filter to apply to values in the list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.nsURI">
        <short>NamedSpace URI for values in the list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.localName">
        <short>LocalName for values in the list.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNamedNodeMap">
        <short>Implements the NamedNodeMap interface in the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMNamedNodeMap</var> is a class used to implement the NamedNodeMap interface in the DOM specification.TDOMNamedNodeMap is used as a collection of DOM Nodes that are accessed by their name or their ordinal position. TDOMNamedNodeMap provides support for the Namespace URIs and QualifiedNames in the collection, as required for DOM Level 2 conformance.
          </p>
          <p>
            The DOM specification mandates unordered access to nodes in the collection. The sorting options available in TDOMNamedNodeMap are an extension to the DOM specification. To achieve this, the class uses two separate internal lists to represent the nodes in their sorted and unsorted orders. This most certainly requires additional memory and processing, but the overhead is minimal in comparison to the derived benefit.
          </p>
          <p>
            TDOMNamedNodeMap is the type used to represent Attributes, Entities, and Notations in the DOM API. The TAttributeMap implementation class is used for namespace-enabled node maps.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Attributes"/>
          <link id="TDOMDocumentType.Entities"/>
          <link id="TDOMDocumentType.Notations"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNamedNodeMap.FOwner"/>
      <element name="TDOMNamedNodeMap.FNodeType"/>
      <element name="TDOMNamedNodeMap.FSortedList"/>
      <element name="TDOMNamedNodeMap.FPosList"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.GetPosItem">
        <short>Gets the value for the Item property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNamedNodeMap.Item"/>
        </seealso>
      </element>
      <element name="TDOMNamedNodeMap.GetPosItem.Result">
        <short>Value for the Item property.</short>
      </element>
      <element name="TDOMNamedNodeMap.GetPosItem.index">
        <short>Ordinal position for the Item.</short>
      </element>

      <element name="TDOMNamedNodeMap.GetSortedItem">
        <short>Gets the value for the indexed SortedItem property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNamedNodeMap.SortedItem"/>
        </seealso>
      </element>
      <element name="TDOMNamedNodeMap.GetSortedItem.Result">
        <short>Value for the SortedItem property.</short>
      </element>
      <element name="TDOMNamedNodeMap.GetSortedItem.index">
        <short>Ordinal position for the node in the sorted item list.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.GetLength">
        <short>Gets the value for the Length property.</short>
        <descr>
          <p>
            Ensures that the internal TFPList instance has been allocated for the positional list. The return value is <b>0</b> (<b>zero</b>) when the list has not been allocated.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.Length"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.GetLength.Result">
        <short>Value for the Length property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.FindSorted">
        <short>
          Finds a DOM Node with the specified name in the sorted container.
        </short>
        <descr>
          <p>
            <var>Name</var> is a <var>DOMString</var> value with the name for the DOM node to locate in the <var>SortedItem</var> container.
          </p>
          <p>
            <var>Index</var> is an output parameter where the ordinal position in the sorted list is stored. The value is 0 (zero) if a DOM node with the specified name is not found in the sorted container.
          </p>
          <p>
            The return value is <b>True</b> when a <var>TDOMNode</var> instance is located with the specified name. The return value is False if a DOM node with the specified name is not found in the sorted container.
          </p>
          <p>
            Calls the <var>CompareName</var> method for each TDOMNode instance to compare the value in name to the <var>NodeName</var> property for the node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.SortedItem"/>
          <link id="TDOMNode.NodeName"/>
          <link id="TDOMNode.CompareName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.FindSorted.Result">
        <short>True if a node with the specified name is found in the sorted list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.FindSorted.name">
        <short>Name to locate in the sorted list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.FindSorted.Index">
        <short>Ordinal position for the node in the sorted list.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.DeleteSorted">
        <short>
          Deletes the DOM node at the specified position in the sorted list of nodes.
        </short>
        <descr>
          <p>
            <var>DeleteSorted</var> is a <var>TDOMNode</var> function used to delete the node at the position specified in Index from the sorted list of nodes.
          </p>
          <p>
            The return value contains the TDOMNode instance deleted in the method. The node is also removed from the positional list used for the <var>Item</var> property.
          </p>
          <p>
            When node type indicates that the node is an Attribute node, the <var>OwnerElement</var> in the return value is set to <b>Nil</b>.
          </p>
          <p>
            DeleteSorted is called from the <var>InternalRemove</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.Item"/>
          <link id="TDOMNamedNodeMap.InternalRemove"/>
          <link id="TDOMAttr.OwnerElement"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.DeleteSorted.Result">
        <short>DOM node instance deleted in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.DeleteSorted.index">
        <short>Ordinal position for the node removed from the sorted node list.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNamedNodeMap.RestoreDefault">
        <short>Restores the default value for the attribute node with the specified name.</short>
        <descr>
          <p>
            <var>RestoreDefault</var> is a method used to restore the default value for the attribute with the name specified in the name argument.
          </p>
          <p>
            RestoreDefault ensures the Node type for the map is set to <var>ATTRIBUTE_NODE</var>. No actions performed in the method if the Node type for the map is not set to Attribute nodes. In addition, no actions are performed when the owner node does not have namespace information with the default value for the specified attribute name.
          </p>
          <p>
            RestoreDefault calls the <var>GetAttributeNode</var> method in the owner Element  to retrieve the attribute with the specified name. When assigned, and the attribute default value is "fixed" or "specified", it is re-applied to the attribute.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement.GetAttributeNode"/>
          <link id="TDOMAttr.Value"/>
          <link id="TDOMAttr.Specified"/>
          <link id="TDOMAttrDef.Default"/>
          <link id="TDOMNode_NS.NSI"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.RestoreDefault.name">
        <short>Name of the item updated in the method.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.InternalRemove">
        <short>Performs actions need to remove an attribute node with the specified name.</short>
        <descr>
          <p>
            Calls the FindSorted method to locate the DOM node with the specified name. The return value is the TDOMNode instance removed in the method after the OwnerElement for the attribute has be cleared. The return value is Nil if node with the specified name is not found in the node map.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.FindSorted"/>
          <link id="TDOMNamedNodeMap.DeleteSorted"/>
          <link id="TDOMNamedNodeMap.RestoreDefault"/>
          <link id="TDOMAttr.OwnerElement"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.InternalRemove.Result">
        <short>DOM node for the attribute removed in the method, or Nil when not found.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.InternalRemove.name">
        <short>Name of the attribute node affected in the method.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.ValidateInsert">
        <short>
          Performs actions to determine if an inserted attribute node is valid for its context.
        </short>
        <descr>
          <p>
            <var>ValidateInsert</var> is an <var>Integer</var> function used to determine if the DOM node in <var>arg</var> is valid for the context where it is used. The return value represents a specific error condition when set to a non-zero value.
          </p>
          <p>
            For example:
          </p>
          <dl>
            <dt>NO_MODIFICATION_ALLOWED_ERR</dt>
            <dd>
              nfReadOnly is included in the Flags for the owner node.
            </dd>
            <dt>WRONG_DOCUMENT_ERR</dt>
            <dd>
              The node in arg has a different owner document than the node which owns the map.
            </dd>
            <dt>HIERARCHY_REQUEST_ERR</dt>
            <dd>
              The node in arg has a different node type than the node type for the map.
            </dd>
            <dt>INUSE_ATTRIBUTE_ERR</dt>
            <dd>
              The map is for Attribute nodes and the owner Element in arg does not match the owner Element for the map.
            </dd>
          </dl>
          <p>
            ValidateInsert is called from the <var>TDOMNamedNodeMap.SetNamedItem</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.SetNamedItem"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.ValidateInsert.Result">
        <short>Numeric value reflecting an error condition, or 0 when valid.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.ValidateInsert.arg">
        <short>DOM node examined in the method.</short>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMNamedNodeMap.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited method on entry. Create stores values passed in the <var>AOwner</var> and <var>ANodeType</var> arguments to members in the class instance.
          </p>
          <p>
            AOwner is the DOM node which owns the entities, notations, or attributes maintained in the node map.
          </p>
          <p>
            NodeType is the Integer value that indicates the value for the TDOMNode instances stored in the node map. NodeType should contain one of the values: ENTITY_NODE, NOTATION_NODE, or ATTRIBUTE_NODE. It is not validated in the constructor.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode"/>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.Create.ANodeType">
        <short>DOM Node type for the entries in the map.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNamedNodeMap.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. It ensures that DOM nodes in internal TFPList instances in the class are  freed. It also frees the TFPList class instances. Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Destroy"/>
          <link id="#rtl.classes.TFPList">TFPList</link>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.GetNamedItem">
        <short>Gets the item with the specified name.</short>
        <descr>
          <p>
            Calls <var>FindSorted</var> to locate the node with the specified <var>name</var>. The return value is <b>Nil</b> if a node with the specified name is not found in the <var>SortedItem</var> property for the map.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.FindSorted"/>
          <link id="TDOMNamedNodeMap.SortedItem"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.GetNamedItem.Result">
        <short>Item with the specified name, or Nil when not found.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.GetNamedItem.name">
        <short>Name to locate in the Items for the map.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.SetNamedItem">
        <short>Sets the value for a named item to the specified node.</short>
        <descr>
          <p>
            <var>SetNamedItem</var> is a <var>TDOMNode</var> function used to store the named node in <var>arg</var> in the node map. This may require inserting a new entry or updating an existing one.
          </p>
          <p>
            SetNamedItem calls <var>ValidateInsert</var> to determine whether the node is valid, and the  parent for the node map is updatable. If the response code contains a non-zero value, an <var>EDOMError</var> exception is raised with the response code as the error constant.
          </p>
          <p>
            SetNamedItem calls the <var>FindSorted</var> method to get the ordinal position for the node in arg. If a node with the same name already exists, it is replaced. Otherwise, the node is inserted at the position needed in the sorted node list.
          </p>
          <p>
            The node type, passed as an argument to the constructor, is used to determine whether additional actions are needed to update the node / node map. For attribute nodes (<var>TDomAttr</var>), the OwnerElement is cleared in the old node (when needed). The OwnerElement in the new node is set to the DOM element which owns the attribute.
          </p>
          <p>
            The return value is set to <b>Nil</b> if the node in arg was added to the map. Otherwise, the return value contains the node which was replaced.
          </p>
          <p>
            SetNamedItem is called from methods like <var>SetAttributeNode</var> and <var>SetAttributeNodeNS</var>  in <var>TDOMElement</var>.
          </p>
          <p>
            Use <var>GetNamedItem</var> to retrieve a node from the map with a specified name.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.ValidateInsert"/>
          <link id="TDOMNamedNodeMap.FindSorted"/>
          <link id="TDOMElement"/>
          <link id="TDOMAttr.Name"/>
          <link id="TDOMAttr.OwnerElement"/>
          <link id="TDOMNode.NodeName"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.SetNamedItem.Result">
        <short>Node replaced in the named node map, or Nil when the node was added.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.SetNamedItem.arg">
        <short>Node with the name and value added/updated in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.RemoveNamedItem">
        <short>Removes the node with the specified name.</short>
        <descr>
          <p>
            <var>RemoveNamedItem</var> is a <var>TDOMNode</var> function used to remove the node with the name specified in the <var>name</var> argument. RemoveNamedItem calls the <var>InternalRemove</var> method to locate and remove the node from the map, and possibly restore the default value for a DOM Attribute node.
          </p>
          <p>
            The return value contains the DOM node removed from the <var>SortedItem</var> property.
          </p>
        </descr>
        <errors>
          <dl>
            <dt>EDOMError</dt>
            <dd>
              Raised with the error constant NO_MODIFICATION_ALLOWED_ERR when the Owner is marked as read-only.
            </dd>
            <dt>EDOMNotFound</dt>
            <dd>
              Raised if a node with the specified name is not found in the node map.
            </dd>
          </dl>
        </errors>
        <seealso>
          <link id="TDOMNamedNodeMap.InternalRemove"/>
          <link id="TDOMNamedNodeMap.SortedItem"/>
          <link id="EDOMError"/>
          <link id="EDOMNotFound"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.RemoveNamedItem.Result">
        <short>The DOM node removed in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.RemoveNamedItem.name">
        <short>Name for the DOM node removed in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.getNamedItemNS">
        <short>Gets the Item with the specified Namespace URI and local name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.getNamedItemNS.Result">
        <short>Namespaced node located in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.getNamedItemNS.namespaceURI">
        <short>Namespace URI for the namespaced node.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.getNamedItemNS.localName">
        <short>Local name for the namespaced node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.setNamedItemNS" link="TDOMNamedNodeMap.setNamedItem">
        <short>Sets a namespaced node to the specified value.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.setNamedItemNS.Result">
        <short>Namespaced node replaced in the node map, or Nil when the node was added.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.setNamedItemNS.arg">
        <short>
          Node with the namespace URI, local name, and value added/updated in the method.
        </short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS">
        <short>Remove a DOM Node with the specified Namespace URI and local name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS.Result">
        <short>Always Nil in TDOMNamedNodeMap.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS.namespaceURI">
        <short>Namespace URI for the item removed in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS.localName">
        <short>Local name for the item removed in the method.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNamedNodeMap.Item">
        <short>Provides indexed access to the unsorted DOM Nodes in the container.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.Item.index">
        <short>Ordinal position for the DOM Node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNamedNodeMap.SortedItem">
        <short>Provides indexed access to the sorted DOM Nodes in the container.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.SortedItem.index">
        <short>Ordinal position for the DOM Node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNamedNodeMap.Length">
        <short>Indicates the Length of the container.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMCharacterData">
        <short>Implements the CharacterData interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMCharacterData</var> is a <var>TDOMNode</var> descendant that implements the CharacterData interface from the DOM specification. TDOMCharacterData provides properties and methods used to access and manipulate character data in the DOM APIs.
          </p>
          <remark>
            Methods which alter character data use 0-based offsets; the offset values are converted internally to the 1-based offsets used in FPC / Lazarus.
          </remark>
          <p>
            TDOMCharacterData is the ancestor class for other DOM Node specializations like TDOMText and TDOMComment. TDOMCharacterData is not used directly. Use one of the descendent classes.
          </p>
          <p>
            Use <var>TDOMCDATASection</var> for the CDATA interface defined in the DOM specification.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode"/>
          <link id="TDOMText"/>
          <link id="TDOMComment"/>
          <link id="TDOMCDATASection"/>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TDOMCharacterData.FNodeValue" link="#lazutils.laz2_dom.TDOMCharacterData.NodeValue"/>

      <!-- function Visibility: protected -->
      <element name="TDOMCharacterData.GetLength">
        <short>Gets the value for the Length property.</short>
        <descr>
          <p>
            The property value is the length of the content in the <var>NodeValue</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData.Length"/>
          <link id="TDOMCharacterData.GetNodeValue"/>
          <link id="TDOMCharacterData.SetNodeValue"/>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCharacterData.GetLength.Result">
        <short>Value for the Length property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMCharacterData.GetNodeValue">
        <short>Gets the value for the NodeValue property.</short>
        <descr/>
        <seealso>
          <link id="TDOMCharacterData.SetNodeValue"/>
          <link id="TDOMNode.GetNodeValue"/>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCharacterData.GetNodeValue.Result">
        <short>Value for the NodeValue property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMCharacterData.SetNodeValue">
        <short>Sets the value for the NodeValue property.</short>
        <descr>
          <p>
            <var>SetNodeValue</var> is an overridden method in <var>TDOMCharacterData</var> used to set the value for the NodeValue property.
          </p>
          <p>
            SetNodeValue calls the <var>Changing</var> method to ensure that the node does not have the read-only attribute in its <var>Flags</var> property, or the <var>OwnerDocument</var> is not being freed. Either situation causes an <var>EDOMError</var> exception to raised.
          </p>
          <p>
            SetNodeValue sets the internal member for the property to the specified value.
          </p>
        </descr>
        <errors>
          Raises an EDOMError exception if the node is marked as read-only, or the OwnerDocument for the node is being destroyed.
        </errors>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
          <link id="TDOMNode.Changing"/>
          <link id="EDOMError"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.SetNodeValue.AValue">
        <short>Value for the NodeValue property.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMCharacterData.Data">
        <short>Provides access to the character data in the NodeValue property.</short>
        <descr>
          <p>
            <var>Data</var> is a <var>DOMString</var> property with the character data for the class instance. Setting a new value for the property causes the <var>SetNodeValue</var> method to be called.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData.SetNodeValue"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMCharacterData.Length">
        <short>Length of the character data for the class instance.</short>
        <descr>
          <p>
            <var>Length</var> is a read-only <var>LongWord</var> property with the length of the character data in the class instance. The property value contains the length for the content in the <var>NodeValue</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData.GetLength"/>
          <link id="TDOMCharacterData.Data"/>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMCharacterData.SubstringData">
        <short>
          Copies character data at the specified offset for the number of bytes requested.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCharacterData.SubstringData.Result">
        <short>Byte values copied from the NodeValue.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.SubstringData.offset">
        <short>Offset to start copying character data.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.SubstringData.count">
        <short>Number of bytes to copy from the character data.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.AppendData">
        <short>Appends the specified value to the end of the character data.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.AppendData.arg">
        <short>Value to append to the character data.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.InsertData">
        <short>Inserts the specified value at the given offset in the character data.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.InsertData.offset">
        <short>Offset in the character data where the value is inserted.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.InsertData.arg">
        <short>Value inserted into the character data.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.DeleteData">
        <short>
          Deletes a given number of characters at the specified offset in the character data.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.DeleteData.offset">
        <short>Offset in the character data where values are deleted.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.DeleteData.count">
        <short>Number of characters to delete from the character data.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.ReplaceData">
        <short>Replaces the characters at the specified offset in the character data.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.ReplaceData.offset">
        <short>Offset where characters are replace in the character data.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.ReplaceData.count">
        <short>Number of characters to remove from the character data.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.ReplaceData.arg">
        <short>Characters to insert into the character data at the specified offset.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMImplementation">
        <short>Implements the DOMImplementation interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMImplementation</var> is a class which implements the DOMImplementation interface from the DOM specification. TDOMImplementation provides methods which perform operations that do not require an existing TDOMDocument class instance, such as creating new TDOMDocumentType or TDOMDocument instances. TDOMImplementation implements the HasFeature method which determines if the DOM implementation supports specific features required to conform to a specific DOM level.
          </p>
        </descr>
        <seealso>
          <link id="TDOMImplementation.HasFeature"/>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMImplementation.HasFeature">
        <short>
          Indicates if a feature or module is supported in the DOM implementation.
        </short>
        <descr>
          <p>
            <var>HasFeature</var> is a <var>Boolean</var> function which implements the method from the DOMImplementation interface in the DOM Level 2 specification. HasFeature indicates if a feature or module is supported at the specified conformance level for the DOM implementation.
          </p>
          <p>
            <var>feature</var> contains the name for the feature or module examined in the method.
          </p>
          <p>
            <var>version</var> is the version number or conformance level needed for the feature.
          </p>
          <p>
            HasFeature recognizes the following feature names and version numbers in TDOMImplementation:
          </p>
          <dl>
            <dt>'CORE'</dt>
            <dd>Version numbers '2.0' or '' (empty string)</dd>
            <dt>'XML'</dt>
            <dd>Version numbers '1.0', '2.0', or '' (empty string)</dd>
          </dl>
          <p>
            The return value is True if the specified feature is supported at the requested version number.
          </p>
        </descr>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMImplementation.HasFeature.Result">
        <short>True when the requested feature is supported at the required version.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.HasFeature.feature">
        <short>Feature or module name to examine in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.HasFeature.version">
        <short>Version number or support level required for the feature.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMImplementation.CreateDocumentType">
        <short>Creates a DOM Document Type using the specified arguments.</short>
        <descr>
          <p>
            <var>CreateDocumentType</var> is a method used to create an instance of a DOM Document Type. CreateDocumentType implements the method specified for the DOMImplementation interface in the DOM Level 2 specification.
          </p>
          <p>
            Create ensures that the value in the QualifiedName argument is a valid XML Name, including its use of 'xml' or 'xmlns' prefixes in the name token. If QualifiedName is not valid, an EDOMError exception is raised.
          </p>
          <p>
            CreateDocumentType returns a TDOMDocumentType instance with the values from the QualifiedName, PublicID, and SystemID parameters assigned to its Name, PublicID, and SystemID properties.
          </p>
          <p>
            Use CreateDocumentType to create the optional DTD instance passed as an argument to the CreateDocument method, and assigned  as the DocType property in the new Document.
          </p>
        </descr>
        <errors>
          Raises an EDOMError exception if an invalid value is specified in the QualifiedName argument.
        </errors>
        <seealso>
          <link id="TDOMImplementation.CreateDocument"/>
          <link id="TDOMDocumentType"/>
          <link id="TDOMDocument.DocType"/>
          <link id="#lazutils.laz2_xmlutils.IsXmlName">IsXmlName</link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.Result">
        <short>TDOMDocumentType created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.QualifiedName">
        <short>Qualified name used in the DOM Document type.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.PublicID">
        <short>Public ID for the DOM Document type.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.SystemID">
        <short>System ID for the DOM Document type.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMImplementation.CreateDocument">
        <short>Creates a new DOM Document instance.</short>
        <descr>
          <p>
            <var>CreateDocument</var> is a <var>TDOMDocument</var> function used to create a new DOM Document instance.
          </p>
          <p>
            CreateDocument implements the method defined for the DOMImplementation interface in the DOM Level 2 specification. It creates a <var>TXMLDocument</var> instance that is used as the return value for the method.
          </p>
          <p>
            The <var>NamespaceURI</var> and <var>QualifiedName</var> arguments provide the  namespace, prefix, and tag name used for the root Element in the document instance.
          </p>
          <p>
            <var>doctype</var> contains the optional <var>TDOMDocumentType</var> instance (or DTD) for the new document. When doctype is assigned, its <var>OwnerDocument</var> property is set to the new document instance created in the method.
          </p>
          <p>
            CreateDocument raises <var>EDOMError</var> exceptions for the following:
          </p>
          <dl>
            <dt>INVALID_CHARACTER_ERR</dt>
            <dd>
              Raised if QualifiedName contains an illegal character for an XML Name token.
            </dd>
            <dt>NAMESPACE_ERR</dt>
            <dd>
              Raised if QualifiedName is malformed, has a prefix and the namespaceURI is missing, or when the prefix that is "xml" does not match the value in stduri_xml.
            </dd>
            <dt>WRONG_DOCUMENT_ERR</dt>
            <dd>Raised if doctype has already been used with a different document or was created from a different implementation.
            </dd>
          </dl>
        </descr>
        <seealso/>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.Result">
        <short>XML document created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.NamespaceURI">
        <short>NameSpace URI for the root element in the XML document.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.QualifiedName">
        <short>QualifiedName for the root element in the XML document.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.doctype">
        <short>Document type appended to the XML document when assigned.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMDocumentFragment">
        <short>Implements the  DocumentFragment interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMDocumentFragment</var> is a <var>TDOMNode_WithChildren</var> descendant that implements the  DocumentFragment interface from the DOM Level 2 specification. TDOMDocumentFragment is a "lightweight" or "minimal" Document object. It is often used as a temporary work area before applying changes to a TDOMDocument instance. Its content does not have to represent a well-formed XML document, but does require its child nodes to be well-formed XML parsed entities.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren"/>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentFragment.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr>
          <p>
            Returns <var>DOCUMENT_FRAGMENT_NODE</var> in <var>TDOMDocumentFragment</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.GetNodeType"/>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentFragment.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentFragment.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr>
          <p>
            Returns a <var>String</var> with the value <b>'#document-fragment'</b> in <var>TDOMDocumentFragment</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.GetNodeName"/>
          <link id="TDOMNode.NodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentFragment.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocumentFragment.CloneNode">
        <short>
          Creates a copy of the document fragment with optional recursion into child nodes.
        </short>
        <descr>
          <p>
            <var>CloneNode</var> is a method used to create a document fragment with the content specified in <var>ACloneOwner</var>, the <var>OwnerDocument</var> for the clone. CloneNode implements the method defined for the Node interface in the DOM Level 2 specification.
          </p>
          <p>
            CloneNode creates a new <var>TDOMNode</var> instance that is a duplicate of the document fragment node by calling the <var>CreateDocumentFragment</var> method in ACloneOwner. This causes ACloneOwner to be assigned as the OwnerDocument for the new node. The new node does not have a ParentNode.
          </p>
          <p>
            The <var>deep</var> argument indicates if the child nodes in ACloneOwner are also duplicated in the method. When deep is <b>True</b>, the <var>CloneChildren</var> method is called to duplicate the child nodes (recursively). Cloning a DOM Element node using deep recursion also copies its attribute names and values. Set deep to <b>False</b> to limit the copy to the immediate node and its Attributes.
          </p>
          <p>
            The return value contains a TDOMNode instance with the duplicated content for the node in ACloneOwner.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.CreateDocumentFragment"/>
          <link id="TDOMNode_WithChildren.CloneChildren"/>
          <link id="TDOMNode.CloneNode"/>
          <link id="TDOMNode.OwnerDocument"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentFragment.CloneNode.Result">
        <short>The new copy of the document fragment.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocumentFragment.CloneNode.deep">
        <short>Indicates if child nodes are included in the cloned document fragment.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocumentFragment.CloneNode.ACloneOwner">
        <short>Document used as the owner of the cloned document fragment.</short>
      </element>

      <!-- array type Visibility: default -->
      <element name="TNamespaces">
        <short>Type used for namespaces in a DOM Document.</short>
        <descr>
          <p>
            <var>TNamespaces</var> is an array of <var>DOMString</var> type used to represent namespace values in a DOM Document. TNamespaces is the type used to implement the internal Namespaces member in <var>TDOMDocument</var>.
          </p>
        </descr>
        <seealso>
          <link id="DOMString"/>
          <link id="TDOMDocument"/>
          <link id="TDOMDocument.IndexOfNS"/>
        </seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMDocument">
        <short>Implements the DOM Document interface.</short>
        <descr>
          <p>
            <var>TDOMDocument</var> is a <var>TDOMNode_WithChildren</var> descendant that implements the DOM Document interface from the DOM specification. TDOMDocument is the container that represents the content for the entire HTML or XML document. It acts as the root of the DOM tree.
          </p>
          <p>
            TDOMDocument provides factory methods needed to create elements, attributes, text nodes, comments, processing instructions, etc.  These items cannot exist without an owner document. It also provides methods used to import nodes created in another document or document fragment.
          </p>
          <p>
            TDOMDocument provides support for XML Namespaces introduced in DOM Level 2. The following namespace prefixes and URIs are always assigned in TDOMDocument:
          </p>
          <table>
            <tr>
              <td><b>Prefix</b></td>
              <td><b>Namespace URI</b></td>
            </tr>
            <tr>
              <td>xml</td>
              <td>http://www.w3.org/XML/1998/namespace</td>
            </tr>
            <tr>
              <td>xmlns</td>
              <td>http://www.w3.org/2000/xmlns/</td>
            </tr>
          </table>
          <p>
            TDOMDocument includes the DocumentURI property introduced in DOM Level 3.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren"/>
          <link id="TXMLDocument"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMDocument.FIDList"/>
      <element name="TDOMDocument.FRevision"/>
      <element name="TDOMDocument.FXML11"/>
      <element name="TDOMDocument.FImplementation"/>
      <element name="TDOMDocument.FNamespaces"/>
      <element name="TDOMDocument.FNames"/>
      <element name="TDOMDocument.FEmptyNode"/>
      <element name="TDOMDocument.FNodeLists"/>
      <element name="TDOMDocument.FMaxPoolSize"/>
      <element name="TDOMDocument.FPools"/>
      <element name="TDOMDocument.FDocumentURI"/>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetDocumentElement">
        <short>Gets the value for the DocumentElement property.</short>
        <descr>
          <p>
            The return value is the first child node in the document which is a DOM Element node (<var>NodeType</var> is <var>ELEMENT_NODE</var>). Starts at <var>FirstChild</var> and continues to <var>NextSibling</var> until a match is found. The node is cast to the <var>TDOMElement</var> type used for the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.DocumentElement"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMElement"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetDocumentElement.Result">
        <short>Value for the DocumentElement property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetDocType">
        <short>Gets the value for the DocType property.</short>
        <descr>
          <p>
            The return value is the first child node in the document which has <var>DOCUMENT_TYPE_NODE</var> in its <var>NodeType</var> property. Starts at <var>FirstChild</var> and continues to <var>NextSibling</var> until a match is found. The node is cast to the <var>TDOMDocumentType</var> type used for the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.DocType"/>
          <link id="TDOMNode.FirstChild"/>
          <link id="TDOMNode.NextSibling"/>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMElement"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetDocType.Result">
        <short>Value for the DocType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr>
          <p>
            <var>GetNodeType</var> is an overridden method in <var>TDOMDocument</var> used to get the value for the <var>NodeType</var> property. It ensures that the property value is <var>DOCUMENT_NODE</var> for the TDOMDocument instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr>
          <p>
            <var>GetNodeName</var> is an overridden method in <var>TDOMDocument</var> used to get the value for the <var>NodeName</var> property. It ensures that the property value is <b>'#document'</b> in the TDOMDocument instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetTextContent">
        <short>Gets the value for the TextContent property.</short>
        <descr>
          <p>
            <var>GetTextContent</var> is an overridden method in <var>TDOMDocument</var> used to the value for the <var>TextContent</var> property. GetTextContent always returns an empty string (<b>''</b>) in TDOMDocument.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.GetTextContent"/>
          <link id="TDOMNode.TextContent"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetTextContent.Result">
        <short>Value for the TextContent property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetOwnerDocument">
        <short>Gets the value for the OwnerDocument property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.OwnerDocument"/>
          <link id="TDOMNode.GetOwnerDocument"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetOwnerDocument.Result">
        <short>Value for the OwnerDocument property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMDocument.SetTextContent">
        <short>Sets the value for the TextContent property.</short>
        <descr>
          <p>
            <var>SetTextContent</var> is ignored in <var>TDOMDocument</var>; the implementation is empty.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.TextContent"/>
          <link id="TDOMNode_WithChildren.SetTextContent"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.SetTextContent.value">
        <short>New value for the TextContent property; ignored in TDOMDocument.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMDocument.RemoveID">
        <short>Removes a DOM element from the hash table used for IDs in the document.</short>
        <descr>
          <p>
            <var>RemoveID</var> is a method used to remove the DOM Element specified in <var>Elem</var> from the internal has table used for identifiers in the document. Calls the <var>RemoveData</var> method for the <var>THashTable</var> member in the class instance.
          </p>
          <p>
            RemoveID is called when a <var>TDOMElement</var> instance is freed.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement.Destroy"/>
          <link id="#lazutils.laz2_xmlutils.THashTable.RemoveData">THashTable.RemoveData</link>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.RemoveID.Elem">
        <short>DOM Element to remove from the hash list for the document.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetChildNodeList">
        <short>Gets a DOM Node List with the children for the specified DOM Node.</short>
        <descr>
          <p>
            <var>GetChildNodeList</var> is a <var>TDOMNodeList</var> function used to get a list with the child nodes in <var>ANode</var>.
          </p>
          <p>
            If ANode is not a <var>TDOMNode_WithChildren</var> descendant, the return value is an empty <var>TDOMNodeList</var> instance with ANode as its parent. Otherwise, the value in the <var>ChildNodes</var> property in ANode is used as the return value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode_WithChildren.HasChildNodes"/>
          <link id="TDOMNodeList"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetChildNodeList.Result">
        <short>TDOMNodeList instance for the specified DOM node.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetChildNodeList.aNode">
        <short>DOM Node examined for child nodes in the method.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetElementList">
        <short>Gets a DOM Element List with elements found in the specified DOM Node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementList.Result">
        <short>Element list generated in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.aNode">
        <short>DOM Node examined in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.nsURI">
        <short>Namespace URI for elements included in the list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.aLocalName">
        <short>LocalName for elements included in the list.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.UseNS">
        <short>Indicates if Namespaces are used when selecting elements in the list.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMDocument.NodeListDestroyed">
        <short>
          Signals that the specified list can be removed from the internal hash table.
        </short>
        <descr>
          <p>
            <var>NodeListDestroyed</var> is a method called when the <var>TDOMNodeList</var> instance in <var>AList</var> is freed.
          </p>
          <p>
            Values in the <var>Flags</var> property are checked to determine whether the <var>TDocument</var> instance is being freed, or just the specified list. The RemoveData method in the internal <var>THashTable</var> member is called for the list in AList. No actions are performed in the method when the TDocument instance and its node lists are freed.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.Destroy"/>
          <link id="TDOMNodeList.Destroy"/>
          <link id="TDOMNode.Flags"/>
          <link id="TNodeFlagEnum"/>
          <link id="#lazutils.laz2_xmlutils.THashTable.RemoveData">THashTable.RemoveData</link>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.NodeListDestroyed.aList">
        <short>Node list generating the notification.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.Alloc">
        <short>
          Ensures the DOM node class type is allocated using the Node pool for the document.
        </short>
        <descr>
          <p>
            <var>Alloc</var> is called when new DOM node specializations are created and added to the DOM node hierarchy. It is called from methods like:
          </p>
          <dl>
            <dt>In TDOMElement:</dt>
            <dd>CloneNode, SetAttributeNS</dd>
            <dt>In TDOMNotation:</dt>
            <dd>CloneNode</dd>
            <dt>In TDOMEntity:</dt>
            <dd>CloneNode</dd>
            <dt>In TDOMDocument:</dt>
            <dd>
              CreateElement, CreateElementBuf, CreateDocumentFragment, CreateTextNode, CreateTextNodeBuf, CreateComment, CreateCommentBuf, CreateAttribute, CreateAttributeBuf, CreateAttributeNS, CreateElementNS, CreateCDATASection
            </dd>
            <dt>In TXMLDocument:</dt>
            <dd>CreateProcessingInstruction, CreateEntityReference</dd>
          </dl>
        </descr>
        <seealso>
          <link id="TDOMElement.CloneNode"/>
          <link id="TDOMElement.SetAttributeNS"/>
          <link id="TDOMNotation.CloneNode"/>
          <link id="TDOMEntity.CloneNode"/>
          <link id="TDOMDocument.CreateElement"/>
          <link id="TDOMDocument.CreateElementBuf"/>
          <link id="TDOMDocument.CreateDocumentFragment"/>
          <link id="TDOMDocument.CreateTextNode"/>
          <link id="TDOMDocument.CreateTextNodeBuf"/>
          <link id="TDOMDocument.CreateComment"/>
          <link id="TDOMDocument.CreateCommentBuf"/>
          <link id="TDOMDocument.CreateAttribute"/>
          <link id="TDOMDocument.CreateAttributeBuf"/>
          <link id="TDOMDocument.CreateAttributeNS"/>
          <link id="TDOMDocument.CreateElementNS"/>
          <link id="TDOMDocument.CreateCDATASection"/>
          <link id="TXMLDocument.CreateProcessingInstruction"/>
          <link id="TXMLDocument.CreateEntityReference"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.Alloc.Result">
        <short>DOM Node created using the class reference.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.Alloc.AClass">
        <short>DOM Node class to instantiate in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.IndexOfNS">
        <short>
          Gets the ordinal position for the specified namespace URI in the document namespaces.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TDOMNode_NS.SetNSI"/>
          <link id="TDOMElement.SetAttributeNS"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.IndexOfNS.Result">
        <short>Ordinal position for the Namespace URI, or -1 when not found.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.IndexOfNS.nsURI">
        <short>Namespace URI to locate in the document.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.IndexOfNS.AddIfAbsent">
        <short>Indicates if the Namespace URI is added if it does not already exist.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.InsertBefore">
        <short>Inserts a DOM Node prior to the reference DOM node.</short>
        <descr>
          <p>
            <var>InsertBefore</var> is an overridden method in <var>TDOMDocument</var> used to insert the DOM node specified in <var>NewChild</var> immediately before the node specified in <var>RefChild</var>.
          </p>
          <p>
            InsertBefore checks the <var>NodeType</var> property in NewChild to ensure that the operation is valid for the node type. An <var>EDOMHierarchyRequest</var> exception is raised for either of the following conditions:
          </p>
          <ul>
            <li>
              NewChild is a DOM Element node and the <var>DocumentElement</var> has already been assigned.
            </li>
            <li>
              NewChild is a DOM DocumentType node and the <var>DocType</var> property has already been assigned.
            </li>
          </ul>
          <p>
            InsertBefore calls the inherited method using NewChild and RefChild as arguments.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.InsertBefore"/>
          <link id="TDOMNode.NodeType"/>
          <link id="EDOMHierarchyRequest"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.InsertBefore.Result">
        <short>DOM Node inserted in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.InsertBefore.NewChild">
        <short>New DOM Node to include in the document.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.InsertBefore.RefChild">
        <short>Reference DOM Node that determines the location for the new DOM node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.ReplaceChild">
        <short>Replaces a child node with another DOM node.</short>
        <descr>
          <p>
            <var>ReplaceChild</var> is an overridden <var>TDOMNode</var> function used to replace the DOM node in <var>OldChild</var> with the DOM node in <var>NewChild</var>.
          </p>
          <p>
            ReplaceChild ensures that the <var>DocumentElement</var> can be replaced with the specified element node or DTD node in NewChild. When NewNode is not an element or DTD node, the inherited ReplaceChild method is called.
          </p>
          <p>
            The return value is the TDOMNode instance in OldChild after it has been detached from the document.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.DocumentElement"/>
          <link id="TDOMDocument.DocType"/>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode_WithChildren.ReplaceChild"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.ReplaceChild.Result">
        <short>TDOMNode instance detached from the document.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ReplaceChild.NewChild">
        <short>New DOM node to include in the document.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ReplaceChild.OldChild">
        <short>DOM Node replaced with the new DOM node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.DocType">
        <short>Document Type declaration used in the document.</short>
        <descr>
          <p>
            <var>DocType</var> is a read-only <var>TDOMDocumentType</var> property that represents the Document Type declaration found in the child nodes for the document. DocType examines the top-level child nodes to find the first node with the value <var>DOCUMENT_TYPE_NODE</var> in its NodeType property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentType"/>
          <link id="DOCUMENT_TYPE_NODE"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.Impl">
        <short>Provides access to the DOM Implementation for the document.</short>
        <descr>
          <p>
            <var>Impl</var> is a read-only <var>TDOMImplementation</var> property that provides access to the DOM Implementation for the document.
          </p>
        </descr>
        <seealso>
          <link id="TDOMImplementation"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.DocumentElement">
        <short>Gets the root element for the document.</short>
        <descr>
          <p>
            <var>DocumentElement</var> is a read-only <var>TDOMElement</var> property that represents the root  element for the document. DocumentElement is derived using the top-level child nodes found in the document. The return value contains the first DOM Node located that contains the value <var>ELEMENT_NODE</var> in its NodeType property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement"/>
          <link id="TDOMNode.NodeType"/>
          <link id="ELEMENT_NODE"/>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateElement">
        <short>Creates an element in the document with the specified tag name.</short>
        <descr>
          <p>
            <var>CreateElement</var> is a <var>TDOMElement</var> function used to create a new DOM Element with the tag name specified in tagName.
          </p>
          <p>
            CreateElement calls <var>Alloc</var> to create the DOM Element in the internal node pool for the document. The value in tagName is checked for a QualifiedName matching a Namespace registered in the document, and added to the Namespace index if it does not already exist. CreateElement calls the AttachDefaultAttrs method in TDOMElement to add default attribute values required for the DOM Element.
          </p>
        </descr>
        <errors>
          <p>
            Raises an EDOMError exception with the exception code <var>INVALID_CHARACTER_ERR</var> if tagName does not contain a valid XML name.
          </p>
        </errors>
        <seealso>
          <link id="TDOMElement"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateElement.Result">
        <short>DOM Element created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElement.tagName">
        <short>Tag name used in the new DOM Element.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateElementBuf">
        <short>Creates an element in the document with the specified tag name.</short>
        <descr>
          <p>
            <var>CreateElementBuf</var> is a <var>TDOMElement</var> function used to create a new DOM Element with the tag name specified in the <var>Buf</var> argument. Buf is a <var>DOMPChar</var> type that contains a pointer the character data for the tagName.
          </p>
          <p>
            CreateElementBuf calls <var>Alloc</var> to create the DOM Element in the internal node pool for the document. The value in Buf is checked for a qualified name matching a Namespace registered in the document, and added to the Namespace index if it does not already exist.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateElementBuf.Result">
        <short>DOM Element created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementBuf.Buf">
        <short>Pointer to character data used as the tag name for the Element.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementBuf.Length">
        <short>Length of the values in Buf.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateDocumentFragment">
        <short>Creates a new DOM Document Fragment.</short>
        <descr>
          <p>
            <var>CreateDocumentFragment</var> is a <var>TDOMDocumentFragment</var> function used to create an empty DOM Document Fragment. CreateDocumentFragment calls the Alloc method to enable memory management for the TDOMDocumentFragment class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentFragment"/>
          <link id="TDOMDocument.Alloc"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateDocumentFragment.Result">
        <short>DOM Document Fragment created in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateTextNode">
        <short>Creates a new DOM Text node with the specified value.</short>
        <descr>
          <p>
            <var>CreateTextNode</var> is a <var>TDOMText</var> function used to create a DOM Text node with the specified value. <var>Data</var> contains the value assigned to the <var>NodeValue</var> property in the TDOMText class instance. CreateTextNode calls the <var>Alloc</var> method to enable memory management for the new TDOMText class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.Alloc"/>
          <link id="TDOMText"/>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateTextNode.Result">
        <short>DOM Text node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNode.data">
        <short>Value assigned to the new DOM Text node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateTextNodeBuf">
        <short>Creates a new DOM Text node with the specified value.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.Result">
        <short>DOM Text node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.Buf">
        <short>Pointer to the character data assigned to the new DOM Text node.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.Length">
        <short>Length of the buffer.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.IgnWS">
        <short>Indicates if whitespace in the buffer is ignored.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateComment">
        <short>Creates a new DOM Comment with the specified content.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateComment.Result">
        <short>DOM Comment created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateComment.data">
        <short>Values used as the content for the DOM Comment.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateCommentBuf">
        <short>Created a new DOM Comment using the specified content.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateCommentBuf.Result">
        <short>DOM Comment created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateCommentBuf.Buf">
        <short>Pointer to character data used as the content for the comment.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateCommentBuf.Length">
        <short>Length of the buffer.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateCDATASection">
        <short>Creates a new DOM CDATA section with the specified content.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateCDATASection.Result">
        <short>DOM CDATA Section created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateCDATASection.data">
        <short>Values used as the content for the CDATA section.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateProcessingInstruction">
        <short>Creates a new DOM Processing Instruction.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateProcessingInstruction.Result">
        <short>DOM Processing Instruction created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateProcessingInstruction.target">
        <short>Target for the Processing Instruction.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateProcessingInstruction.data">
        <short>Content for the Processing Instruction.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttribute">
        <short>Creates a new DOM Attribute with the specified name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttribute.Result">
        <short>DOM Attribute node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttribute.name">
        <short>Name assigned to the DOM Attribute node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttributeBuf">
        <short>Creates a new DOM Attribute with the specified name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttributeBuf.Result">
        <short>DOM Attribute node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeBuf.Buf">
        <short>Pointer to character data with the name for the Attribute.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeBuf.Length">
        <short>Length of the buffer.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttributeDef">
        <short>Creates a new Attribute with a default value.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttributeDef.Result">
        <short>DOM Attribute created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeDef.Buf">
        <short>Pointer to character data using as the Attribute name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeDef.Length">
        <short>Length of the buffer.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateEntityReference">
        <short>Creates a new DOM Entity Reference for the specified name.</short>
        <descr>
          <remark>
            CreateEntityReference always raises an EDOMNotSupported exception. DOM Entity References are not supported in this DOM Implementation. Entity References in an existing document should have been converted to DOM Entities when the document was de-serialized.
          </remark>
        </descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateEntityReference.Result">
        <short>DOM Entity Reference created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateEntityReference.name">
        <short>Name for the DOM Entity Reference.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.GetElementsByTagName">
        <short>Gets a list of nodes with the specified tag name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagName.Result">
        <short>Node list created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagName.tagname">
        <short>Tag name to locate in the DOM nodes for the document.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.ImportNode">
        <short>Imports a copy of the DOM node into the current document.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.ImportNode.Result">
        <short>DOM node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ImportNode.ImportedNode">
        <short>Node with values to import in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ImportNode.Deep">
        <short>Indicates if the entire DOM sub-tree is included in the process.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateElementNS">
        <short>Creates a new DOM Element with the specified Namespace URI.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateElementNS.Result">
        <short>DOM Element created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementNS.nsURI">
        <short>Namespace URI for the qualified name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementNS.QualifiedName">
        <short>Namespace Prefix and Local Name used as the tag name for the Element.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttributeNS">
        <short>
          Creates a new Attribute with the specified Namespace URI and qualified name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttributeNS.Result">
        <short>DOM Attribute node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeNS.nsURI">
        <short>Namespace URI for the qualified name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeNS.QualifiedName">
        <short>Namespace Prefix and Local Name used as the name for the Attribute.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.GetElementsByTagNameNS">
        <short>Gets a list of nodes with the specified Namespace URI and local name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagNameNS.Result">
        <short>Node list created for nodes with the specified tag name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagNameNS.nsURI">
        <short>Namespace URI for the specified tag name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagNameNS.alocalName">
        <short>Local name (QualifiedName sans Prefix) for nodes included in the list.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.GetElementById">
        <short>Gets the DOM Element with the specified ID attribute value.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementById.Result">
        <short>DOM Element with the specified ID value.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementById.ElementID">
        <short>ID attribute value for the Element to locate in the method.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.documentURI">
        <short>Represents the DOM Level 3 Document URI.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMDocument.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMDocument.Destroy">
        <short>Destructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.AddID">
        <short>Adds an ID Attribute value to a hash list used in the Document.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.AddID.Result">
        <short>True if the ID value was added, False if it already exists.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.AddID.Attr">
        <short>DOM Attribute node with the ID value to add to the hash list.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.Names">
        <short>Hash table representing qualified names used in the document.</short>
        <descr>
          <p>
            <var>Names</var> is a read-only <var>THashTable</var> property used to store QualifiedName values used in the DOM Document. Names is updated when DOM Elements or Attributes with Namespace URIs and qualified names are created in the document. It is also updated (re-hashed) when the Prefix property in the DOM Element or Attribute is changed.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement"/>
          <link id="TDOMAttr"/>
          <link id="TDOMNode_NS"/>
          <link id="TDOMNode.Prefix"/>
          <link id="#lazutils.laz2_xmlutils.THashTable">THashTable</link>
        </seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TXMLDocument">
        <short>Implements an XML Document.</short>
        <descr>
          <p>
            <var>TXMLDocument</var> is a <var>TDOMDocument</var> descendant that implements an XML Document. TXMLDocument provides extensions to the DOM Document interface needed when working with an XML Document. This includes the XMLVersion property as well as the Encoding, StylesheetType, and StylesheetHRef members. Overridden methods are also provided to handle creation of CDATA sections and Processing Instructions using valid XML names for the XMLVersion used in the document.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TXMLDocument.FXMLVersion"/>

      <!-- procedure Visibility: private -->
      <element name="TXMLDocument.SetXMLVersion">
        <short>Sets the value for the XMLVersion property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.SetXMLVersion.aValue">
        <short>New value for the XMLVersion property.</short>
      </element>

      <!-- variable Visibility: public -->
      <element name="TXMLDocument.Encoding">
        <short>Encoding used for the XML Document.</short>
        <descr>
          <p>
            This member is an extension to the DOM interface.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: public -->
      <element name="TXMLDocument.StylesheetType">
        <short>Type of Stylesheet represented by the StylesheetHRef property.</short>
        <descr>
          <p>
            This member is an extension to the DOM interface.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: public -->
      <element name="TXMLDocument.StylesheetHRef">
        <short>URL for the Stylesheet to use for the Document.</short>
        <descr>
          <p>
            This member is an extension to the DOM interface.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TXMLDocument.CreateCDATASection">
        <short>Creates a new CDATA section in the document.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TXMLDocument.CreateCDATASection.Result">
        <short>DOM CDATA section created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateCDATASection.data">
        <short>Character data to include in the CDATA section.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TXMLDocument.CreateProcessingInstruction">
        <short>Creates a new Processing Instruction in the document.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TXMLDocument.CreateProcessingInstruction.Result">
        <short>DOM Processing Instruction created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateProcessingInstruction.target">
        <short>Target for the Processing Instruction.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateProcessingInstruction.data">
        <short>Data for the Processing Instruction.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TXMLDocument.CreateEntityReference">
        <short>Creates a new Entity Reference in the document.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TXMLDocument.CreateEntityReference.Result">
        <short>DOM Entity Reference created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateEntityReference.name">
        <short>Name for the Entity Reference.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TXMLDocument.XMLVersion">
        <short>XML Version number supported in the document.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- record type Visibility: default -->
      <element name="TNamespaceInfo">
        <short>Represents Namespace Information used in DOM Node specializations.</short>
        <descr>
          <p>
            <var>TNamespaceInfo</var> is a <var>packed record</var> type used to represent Namespace Information used in DOM Node specializations. Members in the record are used to record the Index Position, PrefixLength, and a hash value for a Qualified Name assigned to namespaced DOM Elements and Attributes. TNamespaceInfo is the type used for the NSI property in TDOMNode_NS.
          </p>
          <p>
            Please note that the NSIndex and PrefixLength members are declared as Word values. This limits the number of namespaces per document and the prefix length to 65535 (each). It is believed that higher values are only found in deliberately malformed documents.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_NS.NSI"/>
          <link id="TDOMDocument"/>
          <link id="TDOMElement"/>
        </seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TNamespaceInfo.NSIndex">
        <short>Index position for the Namespace.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TNamespaceInfo.PrefixLen">
        <short>Length of the Namespace Prefix.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TNamespaceInfo.QName">
        <short>Qualified Name for the Namespace.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TAttrDataType">
        <short>Enumeration with values for attribute types used in DOM Nodes.</short>
        <descr>
          <remark>
            This will eventually be altered or replaced when DOM Level 3 TypeInfo Interface support is introduced.
          </remark>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TAttrDataType.dtCdata">
        <short>Attribute contains a CDATA value.</short>
      </element>
      <element name="TAttrDataType.dtId">
        <short>Attribute contains an ID value.</short>
      </element>
      <element name="TAttrDataType.dtIdRef">
        <short>Attribute contains an ID reference.</short>
      </element>
      <element name="TAttrDataType.dtIdRefs">
        <short>Attribute contains multiple ID references.</short>
      </element>
      <element name="TAttrDataType.dtEntity">
        <short>Attribute contains an Entity.</short>
      </element>
      <element name="TAttrDataType.dtEntities">
        <short>Attribute contains several Entities.</short>
      </element>
      <element name="TAttrDataType.dtNmToken">
        <short>Attribute contains a Name token.</short>
      </element>
      <element name="TAttrDataType.dtNmTokens">
        <short>Attribute contains several Name tokens.</short>
      </element>
      <element name="TAttrDataType.dtNotation">
        <short>Attribute contains a Notation.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNode_NS">
        <short>Implements a DOM Node with Namespace support.</short>
        <descr>
          <p>
            <var>TDOMNode_NS</var> is a <var>TDOMNode_WithChildren</var> descendant which provides support for Namespaces in DOM Nodes.
          </p>
          <p>
            TDOMNode_NS extends the ancestor class to implement the use of XML Namespace as required in DOM Level 2. Overridden methods are provided for read and write accessors in the class which access the NodeName, LocalName, NamespaceURI and Prefix properties. It also implements the NSI property which is used to provide information about the Namespaces used in DOM Node specializations.
          </p>
          <p>
            TDOMNode_NS is the ancestor class for the <var>TDOMAttr</var> and <var>TDOMElement</var> node types.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren"/>
          <link id="TDOMElement"/>
          <link id="TDOMAttr"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNode_NS.FNSI" link="#lazutils.laz2_dom.TDOMNode_NS.NSI"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
          <link id="TDOMNode.GetNodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetLocalName">
        <short>Gets the value for the LocalName property.</short>
        <descr></descr>
        <seealso>
          <seealso>
            <link id="TDOMNode.LocalName"/>
            <link id="TDOMNode.GetLocalName"/>
          </seealso>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetLocalName.Result">
        <short>Value for the LocalName property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetNamespaceURI">
        <short>Gets the value for the NamespaceURI property.</short>
        <descr></descr>
        <seealso>
          <seealso>
            <link id="TDOMNode.NamespaceURI"/>
            <link id="TDOMNode.GetNamespaceURI"/>
          </seealso>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetNamespaceURI.Result">
        <short>Value for the NamespaceURI property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetPrefix">
        <short>Gets the value for the Prefix property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.Prefix"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetPrefix.Result">
        <short>Value for the Prefix property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_NS.SetPrefix">
        <short>Sets the value for the Prefix property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.Prefix"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.SetPrefix.Value">
        <short>New value for the Prefix property.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode_NS.SetNSI">
        <short>
          Stores the specified Namespace URI and Prefix length in the Namespace Information for the DOM Document.
        </short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NamespaceURI"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.SetNSI.nsUri">
        <short>Namespace URI added or updated in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.SetNSI.ColonPos">
        <short>
          Length of the prefix used in qualified names for the namespace.
        </short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_NS.CompareName">
        <short>Compares the specified value to the NodeName for the DOM node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.CompareName.Result">
        <short>
          Difference between the ordinal character values for the first non-matching character in the compared names.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.CompareName.AName">
        <short>Value compared to the NodeName for the DOM node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode_NS.NSI">
        <short>Provides access to Namespace information for the DOM node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMAttr">
        <short>Implements a DOM Node for attributes with Namespace support.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMAttr.FOwnerElement"/>
      <element name="TDOMAttr.FDataType"/>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetNodeValue">
        <short>Gets the value for the NodeValue property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetNodeValue.Result">
        <short>Value for the NodeValue property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetSpecified">
        <short>Gets the value for the Specified property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMAttr.Specified"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetSpecified.Result">
        <short>Value for the Specified property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetIsID">
        <short>Gets the value for the IsID property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMAttr.IsID"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetIsID.Result">
        <short>Value for the IsID property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMAttr.SetNodeValue">
        <short>Sets the value for the NodeValue property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttr.SetNodeValue.AValue">
        <short>New value for the NodeValue property.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMAttr.Destroy">
        <short>Destructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMAttr.CloneNode">
        <short>Creates a copy of the DOM Attribute.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.CloneNode"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.CloneNode.Result">
        <short>DOM Attribute created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttr.CloneNode.deep">
        <short>
          Provided to remain compatible with the interface defined in DOM Node; not used in DOM Attributes.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttr.CloneNode.ACloneOwner">
        <short>Document that owns the new DOM Attribute node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.Name">
        <short>Represents the name for the DOM Attribute.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.Specified">
        <short>Indicates if the value for DOM Attribute was explicitly assigned.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.Value">
        <short>Value for the DOM Attribute.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.OwnerElement">
        <short>DOM Element that owns the DOM Attribute node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.IsID">
        <short>Indicates if the DOM Attribute node represents an ID Data type.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.DataType">
        <short>Data type for value in the DOM Attribute node.</short>
        <descr>
          <remark>
            DataType is an extension to the DOM specification. It is likely to be altered or removed when support is added for the DOM Level 3 TypeInformation Interface.
          </remark>
        </descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMElement">
        <short>Implements the DOM Element interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMElement</var> is a <var>TDOMNode_NS</var> descendant that implements the DOM Element interface from the DOM specification. TDOMElement represents an element in an HTML or XML document. It inherits the capabilities defined in ancestor classes, and provides additional methods and properties need for the DOM Element interface.
          </p>
          <p>
            Methods are provided to access Attributes using the Node interface defined in TDOMNode, or as a simple string value. Namespaces are supported for both the element and its attributes. The Normalize method is overridden to include  normalization for values  in the Attributes property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_NS"/>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElement.FAttributes" link="#lazutils.laz2_dom.TDOMElement.Attributes"/>

      <!-- function Visibility: protected -->
      <element name="TDOMElement.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr>
          <p>
            <var>GetNodeType</var> is an overridden <var>Integer</var> function in <var>TDOMElement</var> used to get the value for the <var>NodeType</var> property. It returns the value from the <var>ELEMENT_NODE</var> constant as the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode.GetNodeType"/>
          <link id="ELEMENT_NODE"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMElement.GetAttributes">
        <short>Gets the value for the Attributes property.</short>
        <descr>
          <p>
            <var>GetAttributes</var> is an overridden <var>TDOMNamedNodeMap</var> function in <var>TDOMElement</var> used to get the value for the <var>Attributes</var> property. It ensures that a <var>TAttributeMap</var> instance has been allocated for the Attributes member. TAttributeMap is an implementation class which provides namespace support in the TDOMNamedNodeMap descendant.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Attributes"/>
          <link id="TDOMNamedNodeMap"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributes.Result">
        <short>Value for the Attributes property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMElement.AttachDefaultAttrs">
        <short>
          Creates attribute nodes with the default attribute values in a namespaced DOM Element.
        </short>
        <descr>
          <p>
            No actions are performed in the method if namespace information with the qualified name and default attribute values for the Element has not been provided in the <var>NSI</var> property.
          </p>
          <p>
            <var>AttachDefaultAttrs</var> calls RestoreDefaultAttr to creates and store a <var>TDOMAttr</var> instance in Attributes for each of the default attribute names and values found in the namespace information.
          </p>
          <p>
            AttachDefaultAttrs is called from the CreateElement and CreateElementNS methods in
            TDOMDocument.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement.RestoreDefaultAttr"/>
          <link id="TDOMNode.Attributes"/>
          <link id="TDOMNode_NS.NSI"/>
          <link id="TDOMAttr"/>
          <link id="TDOMAttrDef"/>
          <link id="TDOMDocument.CreateElement"/>
          <link id="TDOMDocument.CreateElementNS"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMElement.InternalLookupPrefix">
        <short>Gets the Namespace Prefix used for the specified Namespace URI.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.InternalLookupPrefix.Result">
        <short>Prefix used for the Namespace in the current or ancestor DOM Element.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.InternalLookupPrefix.nsURI">
        <short>Namespace URI to locate in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.InternalLookupPrefix.Original">
        <short>Original DOM Element to use for the Lookup.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMElement.RestoreDefaultAttr">
        <short>
          Restores the specified default attribute name and value in the DOM Element.
        </short>
        <descr>
          <p>
            <var>RestoreDefaultAttr</var> is a method used to restore the default attribute name and value specified in <var>AttrDef</var> to the <var>Attributes</var> for the DOM Element.
          </p>
          <p>
            RestoreDefaultAttr checks for a namespace prefix in the name for the attribute, and applies the default namespace information for names starting with <b>'xmlns'</b> or <b>'xml'</b>. It calls <var>LookupNamespaceURI</var> to get and set the namespace URI for a name which starts with another prefix. It calls <var>SetAttributeNode</var> to add or update the node in the Attributes property.
          </p>
          <p>
            RestoreDefaultAttr is called from the <var>AttachDefaultAttrs</var> method in <var>TDOMElement</var>. It is also called from the <var>RestoreDefault</var> method in <var>TDOMNamedNodeMap</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement.SetAttributeNode"/>
          <link id="TDOMElement.AttachDefaultAttrs"/>
          <link id="TDOMNamedNodeMap.RestoreDefault"/>
          <link id="TDOMNode.LookupNamespaceURI"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RestoreDefaultAttr.AttrDef">
        <short>DOM Attribute used as the baseline.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMElement.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. It ensures that the <var>Flags</var> for the node are updated to include the value <var>nfDestroying</var>. If the <var>OwnerDocument</var> for the node has a hash table for node IDs, its <var>RemoveID</var> method is called to remove the current class instance. Destroy frees resources allocated for the <var>Attributes</var> property, and calls the inherited destructor prior to exit.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.CloneNode">
        <short>Creates a DOM node that is a copy of the DOM Element.</short>
        <descr>
          <p>
            <var>CloneNode</var> is an overridden <var>TDOMNode</var> function in <var>TDOMElement</var>. It re-implements the method from the ancestor class to create a cloned copy of the DOM Element and its Attributes in the DOM Document specified in the <var>ACloneOwner</var> argument.
          </p>
          <p>
            The cloning mechanism differs depending on whether ACloneOwner and <var>OwnerDocument</var> are the same <var>TDOMDocument</var> instance. Essentially, namespace information in the <var>NSI</var> property is reused when the document instances are the same, and only default attributes are cloned when the documents differ.
          </p>
          <p>
            When <var>deep</var> is set to <b>True</b>, the <var>CloneChildren</var> method is called to recursively copy the <var>ChildNodes</var> for the Element.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.CloneChildren"/>
          <link id="TDOMDocument.CreateElement"/>
          <link id="TDOMDocument.CreateElementNS"/>
          <link id="TDOMNode.Attributes"/>
          <link id="TDOMNode_NS.NSI"/>
          <link id="TDOMNode.CloneNode"/>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMNode.OwnerDocument"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.CloneNode.Result">
        <short>DOM Node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.CloneNode.deep">
        <short>Indicates if the entire DOM sub-tree is copied for the DOM Element.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.CloneNode.ACloneOwner">
        <short>DOM Document that owns the new Node(s) created in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.IsEmpty">
        <short>Indicates if the DOM Element does not have any content.</short>
        <descr>
          <p>
            <var>IsEmpty</var> is a <var>Boolean</var> function used to determine if the DOM element does not have any content. The return value is <b>True</b> when <var>Attributes</var> has not been assigned (contains <b>Nil</b>) or has a <var>Length</var> / <var>Count</var> of <b>0</b>.
          </p>
          <remark>
            Technically, this implementation is incorrect. An empty element is one which has no child Text or Element nodes. And, an empty element can have attributes values (default or specified). Use <var>HasChildNodes</var> instead.
          </remark>
        </descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.IsEmpty.Result">
        <short>True when the DOM Element is empty.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.Normalize">
        <short>
          Performs normalization for Text nodes and Attributes in the DOM Element.
        </short>
        <descr>
          <p>
            <var>Normalize</var> is an overridden method in <var>TDOMElement</var> used to perform normalization for Text and Attribute nodes in the DOM element.
          </p>
          <p>
            Normalize convert child text nodes in the sub-tree to their normal form where only structure nodes separate the text nodes. Adjacent text nodes are combined into a single text node. Adjacent text nodes which contain only ignorable whitespace are consolidated into a single whitespace value. The same actions are performed for nodes in the Attributes property.
          </p>
          <p>
            Normalize implements the method defined for the DOM Node interface in the DOM Level 2 Specification.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Normalize"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMElement.TagName">
        <short>The qualified name used as the Tag name for the DOM Element.</short>
        <descr>
          <p>
            <var>TagName</var> is a read-only <var>DOMString</var> property which contains the tag name for the DOM Element. TagName can contain a qualified name which includes a Prefix for a Namespace used in the Element or its owner Document.
          </p>
          <p>
            The property value is set when the Element is created using the argument passed to the CreateElement method in TDOMDocument. The value for the property is read from NodeName.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttribute">
        <short>Gets the value for the AttribStrings property.</short>
        <descr>
          <p>
            <var>GetAttribute</var> is a <var>DOMString</var> function used to the value for the indexed <var>AttribStrings</var> property. The name argument contains the name for the attribute node to locate in the <var>Attributes</var> property.
          </p>
          <p>
            No actions are performed in the method if the Attributes property has not been assigned in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement.AttribStrings"/>
          <link id="TDOMNode.Attributes"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttribute.Result">
        <short>Value for the AttribStrings property.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttribute.name">
        <short>Name for the DOM Attribute requested in the method.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.SetAttribute">
        <short>Sets the value in the AttribStrings property.</short>
        <descr>
          <p>
            <var>SetAttribute</var> is a method used to set the value for an attribute in the indexed <var>AttribStrings</var> property. It calls <var>Changing</var> to ensure that the DOM Element is not marked as read-only. An <var>EDOMError</var> exception is raised if the element cannot be modified.
          </p>
          <p>
            SetAttribute locates the <var>TDOMAttr</var> in the <var>Attributes</var> property with the name specified in the <var>name</var> argument. If it is not found, a new TDomAttr instance is created with the required name and added to Attributes. SetAttribute stores the <var>value</var> argument as the <var>NodeValue</var> for the attribute instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement.AttribStrings"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttribute.name">
        <short>Name of the DOM Attribute updated in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttribute.value">
        <short>New value for the attribute in the AttribStrings property.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.RemoveAttribute">
        <short>Removes the DOM Attribute with the specified name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttribute.name">
        <short>Name of the DOM Attribute removed in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttributeNode">
        <short>Gets the DOM Attribute node with the specified name.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributeNode.Result">
        <short>DOM Attribute node with the specified name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNode.name">
        <short>Name for the DOM Attribute in the return value.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.SetAttributeNode">
        <short>
          Stores the new DOM Attribute node to an existing Attribute with the same name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.SetAttributeNode.Result">
        <short>DOM Attribute node updated in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNode.NewAttr">
        <short>DOM Attribute node with the new value stored in Attributes.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.RemoveAttributeNode">
        <short>
          Removes the specified DOM Attribute node from the Attributes for the Element.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNode.Result">
        <short>DOM Attribute node removed in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNode.OldAttr">
        <short>DOM Attribute node to remove from the Attributes for the Element.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetElementsByTagName">
        <short>
          Gets a list of DOM nodes with the specified name in the sub-tree for the Element.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetElementsByTagName.Result">
        <short>DOM Node list with the specified tag name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetElementsByTagName.name">
        <short>Tag name to locate in the DOM sub-tree.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttributeNS">
        <short>
          Gets the value for an Attribute with the specified Namespace URI and local name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributeNS.Result">
        <short>Value for the DOM Attribute requested in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNS.nsURI">
        <short>Namespace URI for the Attribute requested in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNS.aLocalName">
        <short>Local name for the Attribute requested in the method.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.SetAttributeNS">
        <short>
          Sets the value for the DOM Attribute with the specified Namespace URI and qualified name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNS.nsURI">
        <short>Namespace URI for the DOM Attribute updated in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNS.qualifiedName">
        <short>QualifiedName for the DOM Attribute updated in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNS.value">
        <short>
          New value for the DOM Attribute with the specified Namespace URI and Qualified Name.
        </short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.RemoveAttributeNS">
        <short>
          Removes the DOM Attribute with the specified Namespace URI and local name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNS.nsURI">
        <short>Namespace URI for the DOM Attribute.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNS.aLocalName">
        <short>Local name for the DOM Attribute.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttributeNodeNS">
        <short>
          Gets the DOM Attribute node with the specified Namespace URI and local name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributeNodeNS.Result">
        <short>DOM Attribute node with the requested Namespace URI and local name.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNodeNS.nsURI">
        <short>Namespace URI for the DOM Attribute.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNodeNS.aLocalName">
        <short>Local name for the DOM Attribute.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.SetAttributeNodeNS">
        <short>
          Stores the new DOM Attribute node in an existing Namespaced Attribute node.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.SetAttributeNodeNS.Result">
        <short>Existing DOM Attribute node updated in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNodeNS.newAttr">
        <short>
          DOM Attribute node with the Namespace URI, Local name, and value stored in the method.
        </short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetElementsByTagNameNS">
        <short>
          Gets a Node list with Elements having the specified Namespace URI and local name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetElementsByTagNameNS.Result">
        <short>DOM Node list created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetElementsByTagNameNS.nsURI">
        <short>Namespace URI for the requested nodes.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetElementsByTagNameNS.aLocalName">
        <short>Local name for the requested nodes.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.hasAttribute">
        <short>
          Indicates if the Attributes property contains an item with the specified name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.hasAttribute.Result">
        <short>
          True when an Attribute with the specified name exists in the Attributes property.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.hasAttribute.name">
        <short>Name of the Attribute to locate in the method.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.hasAttributeNS">
        <short>
          Indicates if Attributes contains an attribute with the specified Namespace URI and local name.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.hasAttributeNS.Result">
        <short>
          True Attributes contains an entry with the specified Namespace URI and local name.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.hasAttributeNS.nsURI">
        <short>Namespace URI for the DOM Attribute.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.hasAttributeNS.aLocalName">
        <short>Local name for the DOM Attribute.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.HasAttributes">
        <short>Indicates if the Attributes property contains DOM Attribute nodes.</short>
        <descr>
          <p>
            The return value is True when Attributes has been assigned and its Length is not 0.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Attributes"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.HasAttributes.Result">
        <short>
          False when Attributes has not been assigned, or has a Length of 0 (zero).
        </short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMElement.AttribStrings">
        <short>Provides indexed access to Attributes and their value as a String.</short>
        <descr>
          <p>
            <var>AttribStrings</var> is an indexed <var>DOMString</var> property that provides access to the value for a DOM Attribute by its Name. AttribStrings is an extension to the DOM specification. It provides a simpler mechanism for reading and writing Attribute values than the methods provided in the DOM Node interface. It is especially useful for DOM documents where Attributes are known to contain simple DOMString data types (like <b>HTML</b>).
          </p>
          <p>
            Read and write access to AttribStrings is redirected to the Attributes property. When reading a DOM Attribute, the value is an empty string (<b>''</b>) if the Attributes property does not contain an Attribute node with the requested Name. When writing a DOM Attribute, the Attribute node is created if it does not exist already.
          </p>
          <p>
            AttribStrings does not take Qualified names or Namespaces into consideration when accessing values in the Attributes property. Use the GetAttributeNS, SetAttributeNS, or RemoveAttributeNS methods when Namespace support is required for DOM Attributes.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Attributes"/>
          <link id="TDOMElement.GetAttribute"/>
          <link id="TDOMElement.SetAttribute"/>
          <link id="TDOMElement.GetAttributeNS"/>
          <link id="TDOMElement.SetAttributeNS"/>
          <link id="TDOMElement.RemoveAttributeNS"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.AttribStrings.Name">
        <short>Name of the DOM Attribute accessed in the indexed property.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMText">
        <short>Implements the DOM Text interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMText</var> is a <var>TDOMCharacterData</var> descendant that implements the DOM Text interface from the DOM specification. TDOMText represents the textual content (called  character data in XML) for a DOM Element or Attribute. It provides overridden methods which implement the NodeName and NodeValue properties as required for the DOM Node specialization.
          </p>
          <p>
            Adjacent TDOMText nodes may be combined when the Normalize method is called for the ParentNode, and Text nodes with only whitespace in their content may be removed. This is the case when the DOM node has the value <var>nfIgnorableWS</var> in its Flags property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData"/>
          <link id="TDOMNode.Normalize"/>
          <link id="TDOMNode.Flags"/>
          <link id="TNodeFlags"/>
          <link id="TNodeFlagEnum"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMText.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMText.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMText.SetNodeValue">
        <short>Sets the value for the NodeValue property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.SetNodeValue.aValue">
        <short>New value for the NodeValue property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMText.CloneNode">
        <short>Makes a copy of the DOM Node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.CloneNode.Result">
        <short>New DOM Node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.CloneNode.deep">
        <short>
          Indicates if child nodes in the sub-tree are included in the cloned DOM node.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.CloneNode.ACloneOwner">
        <short>DOM Document used to create the cloned DOM node.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMText.SplitText">
        <short>
          Splits the textual content at the specified offset into a new DOM Text node.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.SplitText.Result">
        <short>New DOM node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.SplitText.offset">
        <short>Offset in the textual content where the Text node is split.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMText.IsElementContentWhitespace">
        <short>
          Indicates if the textual content for the node is whitespace characters.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.IsElementContentWhitespace.Result">
        <short>True when nfIgnorableWS  is included in the Flags for the DOM node.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMComment">
        <short>Implements the DOM Comment interface from the DOM specification.</short>
        <descr>
          <p>
            TDOMComment is a TDOMCharacterData descendant that implements the DOM Comment interface from the DOM specification. TDOMComment provides overridden methods needed to implement the NodeType and NodeName properties as required for the DOM Node specialization.
          </p>
          <p>
            TDOMComment represents the textual content for a comment that appears between the '&lt;!--' and '--&gt;' delimiters. This is the definition for a comment as defined in the XML 1.0 specification and in HTML. The NodeValue can contain any values except the start and end delimiters for a comment.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMComment.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMComment.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMComment.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMComment.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMComment.CloneNode">
        <short>Makes copy of the DOM Comment node.</short>
        <descr>
          <p>
            <var>CloneNode</var> is a <var>TDOMNode</var> function used to create a copy or clone of the current DOM Comment node using the specified DOM Document as the owner of the new node. CloneNode calls the <var>CreateComment</var> method in the <var>ACloneOwner</var> argument to allocate and create the new <var>TDOMComment</var> instance, and store the character data in its Data property.
          </p>
          <p>
            The value for the <var>deep</var> argument is not significant in the method; it is not used to clone a comment node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.CreateComment"/>
          <link id="TDOMCharacterData.Data"/>
          <link id="TDOMNode.CloneNode"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMComment.CloneNode.Result">
        <short>DOM node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMComment.CloneNode.deep">
        <short>True if child nodes are recursively copied in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMComment.CloneNode.ACloneOwner">
        <short>DOM Document used to created the new DOM Comment node.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMCDATASection">
        <short>Implements the DOM CDataSection  interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMCDATASection</var> is a <var>TDOMText</var> descendant that implements the DOM CDATASection interface from the DOM specification. TDOMCDATASection provides overridden methods needed to implement the NodeType and NodeName properties as required for the DOM Node specialization.
          </p>
          <p>
            TDOMCDATASection is used to escape text that contains characters that would otherwise be regarded as markup in a DOM document. TDOMCDATASection contains the textual content as it appears between the '&lt;![CDATA[' and ']]&gt;' delimiters. Its primary purpose is to include material such as XML fragments, without needing to escape all of the markup.
          </p>
          <p>
            Please note that Markup (other than the ending delimiter) is ignored in a CDATA section. This means that the ending delimiter cannot be included in a CDATA section. Character numeric entity references cannot be used to escape content in a CDATA section.
          </p>
        </descr>
        <seealso>
          <link id="TDOMText"/>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMCDATASection.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr>
          <p>
            GetNodeType is an overridden Integer function in <var>TDOMCDATASection</var>. It returns the value from the <var>CDATA_SECTION_NODE</var> constant as the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode.GetNodeType"/>
          <link id="CDATA_SECTION_NODE"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCDATASection.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMCDATASection.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr>
          <p>
            <var>GetNodeName</var> is an overridden <var>DOMString</var> function in <var>TDOMCDATASection</var>. It returns <b>'#cdata-section'</b> as the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
          <link id="TDOMNode.GetNodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCDATASection.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMCDATASection.CloneNode">
        <short>Makes a copy of the DOM CDATA Section.</short>
        <descr>
          <p>
            <var>CloneNode</var> is a <var>TDOMNode</var> function used to create a copy or clone of the current DOM CDATA section using the specified DOM Document as the owner of the new node. CloneNode calls the <var>CreateCDATASection</var> method in the <var>ACloneOwner</var> argument to allocate and create the new <var>TDOMCDATASection</var> instance with NodeValue from the current class instance.
          </p>
          <p>
            The value for the <var>deep</var> argument is not significant in the method; it is not used to clone a CDATA node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.CloneNode"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCDATASection.CloneNode.Result">
        <short>DOM Node created with the value for the CDATA Section.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCDATASection.CloneNode.deep">
        <short>Not used in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCDATASection.CloneNode.ACloneOwner">
        <short>DOM Document used to created the new DOM CDATA section node.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMDocumentType">
        <short>Implements the DOM DocumentType interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMDocumentType</var> is a <var>TDOMNode</var> descendant that implements the DOM DocumentType Interface from the DOM specification.
          </p>
          <p>
            Each DOM Document has a <var>DocType</var> property whose value is either Nil or a TDOMDocumentType instance. It provides an interface to the list of entities and notations that are defined for the document, as well as the PublicID and SystemID for the external subset.
          </p>
          <p>
            It is often referred to as a DTD (Document Type Definition).
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentType.Entities"/>
          <link id="TDOMDocumentType.Notations"/>
          <link id="TDOMDocumentType.PublicID"/>
          <link id="TDOMDocumentType.SystemID"/>
          <link id="TDOMDocument.DocType"/>
          <link id="TDOMNamedNodeMap"/>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMDocumentType.FName"/>
      <element name="TDOMDocumentType.FPublicID"/>
      <element name="TDOMDocumentType.FSystemID"/>
      <element name="TDOMDocumentType.FInternalSubset"/>
      <element name="TDOMDocumentType.FEntities"/>
      <element name="TDOMDocumentType.FNotations"/>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetEntities">
        <short>Gets the value for the Entities property.</short>
        <descr>
          <p>
            Ensures that a <var>TDOMNamedNodeMap</var> instance using the <var>ENTITY_NODE</var> node type has been allocated for the <var>Entities</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentType.Entities"/>
          <link id="TDOMNamedNodeMap"/>
          <link id="ENTITY_NODE"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetEntities.Result">
        <short>Value for the Entities property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetNotations">
        <short>Gets the value for the Notations property.</short>
        <descr>
          <p>
            Ensures that a <var>TDOMNamedNodeMap</var> instance using the <var>NOTATION_NODE</var> node type has been allocated for the <var>Notations</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentType.Notations"/>
          <link id="TDOMNamedNodeMap"/>
          <link id="NOTATION_NODE"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetNotations.Result">
        <short>Value for the Notations property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr>
          <p>
            <var>GetNodeType</var> is an overridden Integer function in <var>TDOMDocumentType</var> used to get the value for the <var>NodeType</var> property. It returns the value in the <var>DOCUMENT_TYPE_NODE</var> constant as the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode.GetNodeType"/>
          <link id="DOCUMENT_TYPE_NODE"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr>
          <p>
            <var>GetNodeName</var> is an overridden <var>DOMString</var> function in <var>TDOMDocumentType</var> used to get the value for the <var>NodeName</var> property. It returns the value in <var>Name</var> as the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentType.Name"/>
          <link id="TDOMNode.NodeName"/>
          <link id="TDOMNode.GetNodeName"/>
          <link id="TDOMImplementation.CreateDocumentType"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMDocumentType.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. It ensures that resources allocated for the <var>Entities</var> and <var>Notations</var> properties are freed. It calls the inherited destructor prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentType.Entities"/>
          <link id="TDOMDocumentType.Notations"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.Name">
        <short>Name for the Document Type declaration (used as the root element).</short>
        <descr>
          <p>
            <var>Name</var> is a read-only <var>DOMString</var> property which contains the name for the document type declaration. This is the value used as the root element in a document instance created using the DTD. Name is set to the qualified name provided when the class instance is created using the <var>CreateDocumentType</var> method in <var>TDOMImplementation</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMImplementation.CreateDocumentType"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.Entities">
        <short>Entities declared in the Document Type declaration.</short>
        <descr>
          <p>
            <var>Entities</var> is a read-only <var>TDOMNamedNodeMap</var> property which contains the internal and external general entities declared in the DTD. It does not contain parameter entities.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap"/>
          <link id="TXMLDocument.CreateEntityReference"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.Notations">
        <short>Notations declared in the Document Type declaration.</short>
        <descr>
          <p>
            <var>Notations</var> is a read-only <var>TDOMNamedNodeMap</var> property which contains the Notation declarations for the DTD. From the XML 1.0 Specification:
          </p>
          <p>
            <i>"Notations identify by name the format of unparsed entities, the format of elements which bear a notation attribute, or the application to which a processing instruction is addressed."</i>
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.PublicID">
        <short>Public Identifier for the Document Type declaration.</short>
        <descr>
          <p>
            <var>PublicID</var> is a read-only <var>DOMString</var> property which contains the public identifier for the external subset in the document type declaration. It contains the value passed as an argument to the CreateDocumentType method in TDOMImplementation, and stored in the new class instance.
          </p>
          <p>
            PublicID was introduced in the SGML specifications (the predecessor of XML), and had an elaborate Formal Public Identifier format. For DOM and XML, the content has generally been simplified to an organization identifier  and URL where the DTD is located. For example:
          </p>
<code>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

   or

  &lt;!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
    "http://www.oasis-open.org/docbook/xml/5.0/docbookx.dtd"&gt;
</code>
          <p>
            Use <var>SystemID</var> for the location on the local file system where the DTD is stored.
          </p>
          <remark>
            PublicID and SystemID are not validated in the DOM implementation (unlike XML). Both (or neither) of the values can be specified. URLs or local file paths are not verified.
          </remark>
        </descr>
        <seealso>
          <link id="TDOMImplementation.CreateDocumentType"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.SystemID">
        <short>System Identifier for the Document Type declaration.</short>
        <descr>
          <p>
            <var>SystemID</var> is a read-only <var>DOMString</var> property which contains the path to the document type declaration on the local file system. Its value is assigned using the argument passed to the <var>CreateDocumentType</var> method in <var>TDOMImplementation</var>.
          </p>
          <p>
            Use PublicID for the URL where the DTD is located.
          </p>
          <remark>
            PublicID and SystemID are not validated in the DOM implementation (unlike XML). Both (or neither) of the values can be specified. URLs or local file paths are not verified.
          </remark>
        </descr>
        <seealso>
          <link id="TDOMImplementation.CreateDocumentType"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.InternalSubset">
        <short>The internal subset for the Document Type declaration.</short>
        <descr>
          <p>
            <var>InternalSubset</var> is a read-only DOMString property which contains the portion of the document type declaration declared inline instead of externally. For example:
          </p>
<code>
&lt;!DOCTYPE person SYSTEM "name.dtd" [
&lt;!ELEMENT profession (#PCDATA)&gt;
&lt;!ELEMENT person (name, profession*)&gt;
]&gt;
</code>
          <p>
            This document type declaration declares the profession and person elements as an internal subset, but relies on the file name.dtd to contain the declaration of the name element. The part of the DTD between the '[' and ']' brackets is the internal subset.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNotation">
        <short>Implements the DOM Notation interface from the DOM specification.</short>
        <descr>
          <p>
            <var>TDOMNotation</var> is a <var>TDOMNode</var> descendant which implements the Notation interface from the DOM specification. It declares the name and format for an unparsed entity declared in a Document Type Declaration (DTD). It can also be used to set the target for a processing instruction that handles the notation. Notations are a vestige of the older SGML standard, and  provided for migration purposes. They are seldom used (if at all) in modern XML processing implementations.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNotation.FName"/>
      <element name="TDOMNotation.FPublicID"/>
      <element name="TDOMNotation.FSystemID"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNotation.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNotation.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNotation.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNotation.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNotation.CloneNode">
        <short>Makes a copy of the DOM Node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNotation.CloneNode.Result">
        <short>DOM Node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNotation.CloneNode.deep">
        <short>True if child nodes are recursively copied in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNotation.CloneNode.ACloneOwner">
        <short>Document which owns the cloned notation node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNotation.PublicID">
        <short>Public Identifier for the Document Type declaration.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNotation.SystemID">
        <short>System Identifier for the Document Type declaration.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMEntity">
        <short>Implements the DOM Entity interface from the DOM specification.</short>
        <descr>
          <p>
            TDOMEntity is a TDOMNode_WithChildren descendant which implements the Entity interface from the DOM specifications. An Entity is declared as part of a Document Type Declaration (DTD), and can be either parsed or unparsed in the content model. The following is an example of internal and external Entity declarations:
          </p>
          <code>
          &lt;!ENTITY copyrightholder "ACME Corporation"&gt;
          &lt;!ENTITY copyrightholder PUBLIC "https://www.w3c.org/entities.dtd"&gt;
          &lt;!ENTITY copyrightholder SYSTEM  "/path/to/entities.dtd"&gt;
          &lt;!-- Usage: --&gt;
          &lt;COPYRIGHT&gt;
            1999-2021, &amp;copyrightholder;. All rights reserved.
          &lt;/COPYRIGHT&gt;
          </code>
          <p>
            TDOMEntity provides the Name (NodeName), PublicID or SystemID, and NotationName (when used) properties used to represent the entity declaration.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMEntity.FName"/>
      <element name="TDOMEntity.FPublicID"/>
      <element name="TDOMEntity.FSystemID"/>
      <element name="TDOMEntity.FNotationName"/>

      <!-- function Visibility: protected -->
      <element name="TDOMEntity.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr>
          <p>
            Returns <var>ENTITY_NODE</var> as the property value.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
          <link id="TDOMNode.GetNodeType"/>
          <link id="ENTITY_NODE"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntity.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMEntity.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
          <link id="TDOMNode.GetNodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntity.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMEntity.CloneNode">
        <short>Makes a copy of the DOM node with the specified owner document.</short>
        <descr>
          <p>
            <var>CloneNode</var> is an overridden <var>TDOMNode</var> function in <var>TDOMEntity</var> used to make a copy of the node with <var>ACloneOwner</var> as the owner document for the new node. It re-implements the method from the ancestor class.
          </p>
          <p>
            CloneNode allocates a new TDOMEntity instance in the node pool for ACloneOwner, and creates the DOM Entity node in the return value. Values from the <var>PublicID</var>, <var>SystemID</var>, and <var>NotationName</var> properties are copied to the new node. The internal name for the Entity (set when the owner document was de-serialized) is also copied to the new node. When deep is <b>True</b>, the <var>CloneChildren</var> method is called to copy the <var>ChildNodes</var> (when assigned) to the  new node.
          </p>
          <p>
            CloneNode calls <var>SetReadOnly</var> to ensure that the new node cannot be modified. The cloned node does not have a parent node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMEntity.PublicID"/>
          <link id="TDOMEntity.SystemID"/>
          <link id="TDOMEntity.NotationName"/>
          <link id="TDOMNode.SetReadOnly"/>
          <link id="TDOMNode_WithChildren.CloneChildren"/>
          <link id="TDOMNode.ChildNodes"/>
          <link id="TDOMDocument.Alloc"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntity.CloneNode.Result">
        <short>DOM node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntity.CloneNode.deep">
        <short>True if child nodes are recursively copied in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntity.CloneNode.aCloneOwner">
        <short>Document which owns the clones Entity node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMEntity.PublicID">
        <short>Public Identifier for the Entity.</short>
        <descr>
          <p>
            Can contain a URL where the DTD with the entity declaration is located on the internet. It can contain the Formal Public Identifier notation used in SGML/XML.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMEntity.SystemID">
        <short>System Identifier for the Entity.</short>
        <descr>
          <p>
            Can contain a path to the DTD with the entity declaration on the local file system.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMEntity.NotationName">
        <short>Notation name for the Entity.</short>
        <descr>
          <p>
            Can contain the DOM Notation name used for the Entity. This is seldom used in modern XML processors.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMEntityReference">
        <short>
          Implements the DOM EntityReference interface from the DOM specification.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMEntityReference.FName"/>

      <!-- function Visibility: protected -->
      <element name="TDOMEntityReference.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntityReference.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMEntityReference.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntityReference.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMEntityReference.CloneNode">
        <short>Makes a copy of the DOM Entity Reference node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntityReference.CloneNode.Result">
        <short>New DOM node created in the owner document.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntityReference.CloneNode.deep">
        <short>True if child nodes are recursively copied in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntityReference.CloneNode.ACloneOwner">
        <short>Document which owns the cloned entity reference node.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMProcessingInstruction">
        <short>
          Implements the DOM ProcessingInstruction interface from the DOM specification.
        </short>
        <descr>
          <p>
            <var>TDOMProcessingInstruction</var> is a <var>TDOMNode</var> descendant that implements the DOM ProcessingInstruction Interface from the DOM specification. TDOMProcessingInstruction provides access to an XML Processor-specific instruction that occurs in a DOM Document.
          </p>
          <p>
            TDOMProcessingInstruction provides overridden methods used as the read and write access specifiers for the DOM Node specialization. It also contains properties needed to represent the Target and Data for the DOM ProcessingInstruction.
          </p>
        </descr>
        <seealso>
          <link id="TDOMProcessingInstruction.Target"/>
          <link id="TDOMProcessingInstruction.Data"/>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TDOMProcessingInstruction.FTarget" link="#lazutils.laz2_dom.TDOMProcessingInstruction.Target"/>
      <element name="TDOMProcessingInstruction.FNodeValue" link="#lazutils.laz2_dom.TDOMProcessingInstruction.Data"/>

      <!-- function Visibility: protected -->
      <element name="TDOMProcessingInstruction.GetNodeType">
        <short>Gets the value for the NodeType property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeType"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.GetNodeType.Result">
        <short>Value for the NodeType property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMProcessingInstruction.GetNodeName">
        <short>Gets the value for the NodeName property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeName"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.GetNodeName.Result">
        <short>Value for the NodeName property.</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMProcessingInstruction.GetNodeValue">
        <short>Gets the value for the NodeValue property.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.GetNodeValue.Result">
        <short>Value for the NodeValue property.</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMProcessingInstruction.SetNodeValue">
        <short>Sets the value for the NodeValue property.</short>
        <descr></descr>
        <seealso>
         <link id="TDOMNode.NodeValue"/>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMProcessingInstruction.SetNodeValue.AValue">
        <short>New value for the NodeValue property.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMProcessingInstruction.CloneNode">
        <short>Makes a copy of the DOM Node.</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.CloneNode"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.CloneNode.Result">
        <short>DOM Node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMProcessingInstruction.CloneNode.deep">
        <short>True if child nodes are recursively copied in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMProcessingInstruction.CloneNode.ACloneOwner">
        <short>Document which owns the cloned processing instruction node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMProcessingInstruction.Target">
        <short>Represent the Target for the DOM ProcessingInstruction node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMProcessingInstruction.Data">
        <short>Contains the Data for the DOM ProcessingInstruction node.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TAttrDefault">
        <short>Enumerated type with methods for getting the attribute node value.</short>
        <descr>
          <p>
            <var>TAttrDefault</var> is an enumerated type with values which indicates how the value for a default attribute node was specified. TAttrDefault is the type used to implement the <var>Default</var>property in <var>TDOMAttrDef</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMAttr"/>
          <link id="TDOMDocument.CreateAttributeDef"/>
          <link id="TDOMNamedNodeMap.RestoreDefault"/>
          <link id="TDOMElement.AttachDefaultAttrs"/>
        </seealso>
      </element>
      <element name="TAttrDefault.adImplied">
       <short>Attribute value is implied.</short>
      </element>
      <element name="TAttrDefault.adDefault">
       <short>Attribute value is the default.</short>
      </element>
      <element name="TAttrDefault.adRequired">
       <short>Attribute value is required.</short>
      </element>
      <element name="TAttrDefault.adFixed">
       <short>Attribute value is fixed.</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMAttrDef">
        <short>Implements the default attribute node introduced in DOM Level 2.</short>
        <descr>
          <p>
            <var>TDOMAttrDef</var> is a <var>TDOMAttr</var> descendant which implements the  default attribute node as specified in the DOM Level 2 specification. A default attribute is associated with an Element of a given type in a Document Type Declaration (whether internal or external). It can have a value which is either explicitly specified, implied from the DTD, or fixed to given value. Its value can also be limited to only those values specified in the attribute definition.
          </p>
          <p>
            TDOMAttrDef is the type returned from the <var>TDOMDocument.CreateAttributeDef</var> method. It is also used to update attribute value for an Element in methods like: <var>TDOMNamedNodeMap.RestoreDefault</var> and <var>TDOMElement.AttachDefaultAttrs</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument.CreateAttributeDef"/>
          <link id="TDOMNamedNodeMap.RestoreDefault"/>
          <link id="TDOMElement.AttachDefaultAttrs"/>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMAttrDef.FExternallyDeclared"/>
      <element name="TDOMAttrDef.FDefault"/>
      <element name="TDOMAttrDef.FTag"/>
      <element name="TDOMAttrDef.FEnumeration"/>

      <!-- function Visibility: public -->
      <element name="TDOMAttrDef.AddEnumToken">
        <short>Adds the specified value to the allowed values for the attribute node.</short>
        <descr>
          <p>
            Checks existing values in the enumeration to prevent duplicates. The return value is <b>False</b> if <var>Buf</var> already exists in the enumeration.
          </p>
        </descr>
        <seealso/>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttrDef.AddEnumToken.Result">
        <short>True if the value was successfully added in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.AddEnumToken.Buf">
        <short>DOMPChar value added to the enumeration.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.AddEnumToken.Len">
        <short>Length of the value in Buf.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMAttrDef.HasEnumToken">
        <short>
          Checks whether the specified value is one of the allowed values for the attribute.
        </short>
        <descr/>
        <seealso/>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttrDef.HasEnumToken.Result">
        <short>True if the specified value exists the enumeration values.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.HasEnumToken.aValue">
        <short>Value to locate in the enumeration.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMAttrDef.CloneNode">
        <short>
          Makes a copy of the attribute node with the specified owner document.
        </short>
        <descr>
          <p>
            <var>CloneNode</var> is an overloaded, overridden method in <var>TDOMAttrDef</var> used to make a copy of the default attribute node using the specified owner document. CloneNode calls the inherited method on entry, and ensures that the node <var>Flags</var> include the value <var>nfSpecified</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMAttr.CloneNode"/>
          <link id="TDOMAttr.Specified"/>
          <link id="TDOMNode.Flags"/>
          <link id="TNodeFlagEnum"/>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttrDef.CloneNode.Result">
        <short>DOM node created in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.CloneNode.deep">
        <short>True if child nodes are recursively copied in the method.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.CloneNode.ACloneOwner">
        <short>Document which owns the cloned DOM node.</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttrDef.Default">
        <short>Indicates the origin of the value in the attribute node.</short>
        <descr>
          <p>
            Default is a TAttrDefault property which indicates how the NodeValue for the attribute node was derived. It contains a value from the TAttrDefault enumeration, and allows values like:
          </p>
          <dl>
            <dt>adImplied</dt>
            <dd>Attribute value is implied in a DTD.</dd>
            <dt>adDefault</dt>
            <dd>Attribute value is the default value from the DTD.</dd>
            <dt>adRequired</dt>
            <dd>An Attribute value is required.</dd>
            <dt>adFixed</dt>
            <dd>Attribute has a fixed value provided in the DTD.</dd>
          </dl>
          <p>
            The property value is used in methods like <var>TDOMNamedNodeMap.RestoreDefault</var> and <var>TDOMElement.AttachDefaultAttrs</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap.RestoreDefault"/>
          <link id="TDOMElement.AttachDefaultAttrs"/>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttrDef.ExternallyDeclared">
        <short>Indicates if the attribute was declared in an external subset of the DTD.</short>
        <descr>
          <p>
            <var>ExternallyDeclared</var> is a <var>Boolean</var> property which indicates if the attribute is declared in an external subset of the DTD in the owner document.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttrDef.Tag">
        <short/>
        <descr>
          <p>
            <var>Tag</var> is a <var>Cardinal</var> property.
          </p>
        </descr>
        <notes><note>?</note></notes>
        <seealso/>
      </element>

      <!-- pointer type Visibility: default -->
      <element name="PExtent">
        <short>Pointer to a TExtent type.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- record type Visibility: default -->
      <element name="TExtent">
        <short>
          Record type with a pointer to its extent, followed by an array TDOMNode instances.
        </short>
        <descr></descr>
        <seealso>
          <link id="PExtent"/>
          <link id="TNodePool.Create"/>
          <link id="TNodePool.Destroy"/>
          <link id="TNodePool.AllocNode"/>
        </seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TExtent.Next">
        <short>Pointer to the next extent in a Node pool.</short>
        <descr></descr>
        <seealso>
          <link id="TNodePool.Destroy"/>
          <link id="PExtent"/>
          <link id="TExtent"/>
        </seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TNodePool">
        <short>Provides custom memory management when DOM Nodes are created.</short>
        <descr>
          <p>
            <var>TNodePool</var> is a class used to provide custom memory management when DOM nodes are created in a DOM document. Each TNodePool instance manages objects with the same instance size (and may be a different class types). TDOMDocument provides an internal array of TNodePool instances that are maintained when DOM nodes are created in its Alloc method.
          </p>
        </descr>
        <seealso>
          <link id="TNodePoolArray"/>
          <link id="TDOMDocument.Alloc"/>
          <link id="TDOMNode"/>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TNodePool.FCurrExtent"/>
      <element name="TNodePool.FCurrExtentSize"/>
      <element name="TNodePool.FElementSize"/>
      <element name="TNodePool.FCurrBlock"/>
      <element name="TNodePool.FFirstFree"/>

      <!-- procedure Visibility: private -->
      <element name="TNodePool.AddExtent">
        <short>Allocates a new extent with the specified number of storage slots.</short>
        <descr>
          <errors>
            <p>
              Raises an <var>EAssertionFailed</var> exception for the following conditions:
            </p>
            <ul>
              <li>The current extent does not have any allocated storage.</li>
              <li>
                The array of node instances exceeds the available size for the current extent.
              </li>
              <li>The element count argument is zero (<b>0</b>).</li>
            </ul>
            <p>
              Calls <var>GetMem</var> to reserve the amount storage indicated by the <var>AElemCount</var> argument and the element size specified in the constructor. AddExtent switches the node pool to the newly allocated extent prior to exiting from the method.
            </p>
          </errors>
        </descr>
        <seealso>
          <link id="TNodePool.Create"/>
          <link id="#rtl.system.GetMem">GetMem</link>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.AddExtent.AElemCount">
        <short>Number of storage slots to reserve in the new extent.</short>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TNodePool.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            Allocates an extent with the specified number of entries when the node pool is created.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.Create.AElementSize">
        <short>Size for the class instances stored in the node pool.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.Create.AElementCount">
        <short>Number of storage slots for nodes in the node pool.</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TNodePool.Destroy">
        <short>Destructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TNodePool.AllocNode">
        <short>Creates a new DOM node instance and stores it in the node pool.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TNodePool.AllocNode.Result">
        <short>DOM node instance created and stored in the node pool.</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.AllocNode.AClass">
        <short>Class reference used to create the DOM node instance.</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TNodePool.FreeNode">
        <short>Frees the specified DOM node and removes it from the node pool.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.FreeNode.ANode">
        <short>DOM node freed and de-allocated from the node pool.</short>
      </element>

      <!-- pointer type Visibility: default -->
      <element name="PNodePoolArray">
        <short>Pointer to a TNodePoolArray instance.</short>
        <descr>
          <p>
            <var>PNodePoolArray</var> is a <var>Pointer</var> to the <var>TNodePoolArray</var> type. It is used to implement the internal node pools in <var>TDOMDocument</var>.
          </p>
        </descr>
        <seealso>
          <link id="TNodePoolArray"/>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <!-- array type Visibility: default -->
      <element name="TNodePoolArray">
        <short>Implements an array of TNodePool instances.</short>
         <short>Specifies an array of TNodePool instances.</short>
         <descr>
           <p>
             <var>TNodePoolArray</var> is an array type which contains <var>TNodePool</var> instances in its elements. The number of elements in the array is defined using:
           </p>
<code>
MaxInt div SizeOf(Pointer)-1
</code>
           <p>
             A <var>Pointer</var> to <var>TNodePoolArray</var> is the type used to implement the internal node pools in <var>TDOMDocument</var>.
           </p>
         </descr>
         <seealso>
           <link id="TNodePool"/>
           <link id="PNodePoolArray"/>
           <link id="TDOMDocument"/>
         </seealso>
      </element>

      <!-- constant Visibility: default -->
      <element name="stduri_xml">
        <short>Namespace URI for the xml prefix.</short>
        <descr>
          <p>
            <var>stduri_xml</var> is a <var>DOMString</var> constant that contains the Namespace URI bound to the <b>xml</b> Namespace prefix. stduri_xml and stduri_xmlns are used to set the default Namespaces prefixes and URIs in TDOMDocument:
          </p>
          <table>
            <tr>
              <td><b>Prefix</b></td>
              <td><b>Namespace URI</b></td>
            </tr>
            <tr>
              <td>xml</td>
              <td>http://www.w3.org/XML/1998/namespace</td>
            </tr>
            <tr>
              <td>xmlns</td>
              <td>http://www.w3.org/2000/xmlns/</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="stduri_xmlns"/>
          <link id="TNamespaces"/>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <!-- constant Visibility: default -->
      <element name="stduri_xmlns">
        <short>Namespace URI for the xmlns prefix.</short>
        <descr>
          <p>
            <var>stduri_xmlns</var> is a <var>DOMString</var> constant that contains the Namespace URI bound to the <b>xmlns</b> Namespace prefix. stduri_xml and stduri_xmlns are used to set the default Namespaces prefixes and URIs in TDOMDocument:
          </p>
          <table>
            <tr>
              <td><b>Prefix</b></td>
              <td><b>Namespace URI</b></td>
            </tr>
            <tr>
              <td>xml</td>
              <td>http://www.w3.org/XML/1998/namespace</td>
            </tr>
            <tr>
              <td>xmlns</td>
              <td>http://www.w3.org/2000/xmlns/</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="stduri_xml"/>
          <link id="TNamespaces"/>
          <link id="TDOMDocument"/>
        </seealso>
      </element>

      <element name="StrToXMLValue">
        <short>Converts a string to it representation as XML character data.</short>
        <descr>
          <p>
            <var>StrToXMLValue</var> is a <var>String</var> function used to convert the value in s to its representation as valid XML character data. The XML specification has five "predefined entities" that represent special characters. StrToXMLValue ensures that any of these characters in s are converted to their representation as a Character Entity, including:
          </p>
          <table>
            <tr>
              <td><b>Character</b></td>
              <td><b>Entity Name</b></td>
              <td><b>Unicode Codepoint</b></td>
              <td><b>Description</b></td>
            </tr>
            <tr>
              <td>&amp;quot;</td>
              <td>&quot;</td>
              <td>U+0022 (Decimal 34)</td>
              <td>Double quotation Mark</td>
            </tr>
            <tr>
              <td>&amp;amp;</td>
              <td>&amp;</td>
              <td>U+0026 (Decimal 38)</td>
              <td>Ampersand</td>
            </tr>
            <tr>
              <td>&amp;apos;</td>
              <td>&apos;</td>
              <td>U+0027 (Decimal 39)</td>
              <td>Apostrophe (Apostrophe-Quote)</td>
            </tr>
            <tr>
              <td>&amp;lt;</td>
              <td>&lt;</td>
              <td>U+003C (Decimal 60)</td>
              <td>Less-than</td>
            </tr>
            <tr>
              <td>&amp;gt;</td>
              <td>&gt;</td>
              <td>U+003E (Decimal 62)</td>
              <td>Greater-than</td>
            </tr>
          </table>
          <p>
            StrToXMLValue also ensures that any NULL character values (Decimal 0) in s are removed.
          </p>
          <p>
            No actions are performed in the method when s is an empty string (<b>''</b>).
          </p>
          <p>
            Use XMLValueToStr to convert XML character data to its representation as a String data type.
          </p>
        </descr>
        <seealso>
          <link id="XMLValueToStr">XMLValueToStr</link>
        </seealso>
      </element>
      <element name="StrToXMLValue.Result">
        <short>XML character data for the specified value.</short>
      </element>
      <element name="StrToXMLValue.s">
        <short>Values to convert to XML character data.</short>
      </element>

      <element name="XMLValueToStr">
        <short>Converts XML character data to its representation as a string value.</short>
        <descr>
          <p>
            <var>XMLValueToStr</var> is a <var>String</var> function used to convert the XML character data in s to its representation as a string data type. The XML specification has five "predefined entities" that represent special characters. XMLValueToStr ensures that any of these character entities in s are converted to their plain string representation, including:
          </p>
          <table>
            <tr>
              <td><b>Character</b></td>
              <td><b>Entity Name</b></td>
              <td><b>Unicode Codepoint</b></td>
              <td><b>Description</b></td>
            </tr>
            <tr>
              <td>&amp;quot;</td>
              <td>&quot;</td>
              <td>U+0022 (Decimal 34)</td>
              <td>Double quotation Mark</td>
            </tr>
            <tr>
              <td>&amp;amp;</td>
              <td>&amp;</td>
              <td>U+0026 (Decimal 38)</td>
              <td>Ampersand</td>
            </tr>
            <tr>
              <td>&amp;apos;</td>
              <td>&apos;</td>
              <td>U+0027 (Decimal 39)</td>
              <td>Apostrophe (Apostrophe-Quote)</td>
            </tr>
            <tr>
              <td>&amp;lt;</td>
              <td>&lt;</td>
              <td>U+003C (Decimal 60)</td>
              <td>Less-than</td>
            </tr>
            <tr>
              <td>&amp;gt;</td>
              <td>&gt;</td>
              <td>U+003E (Decimal 62)</td>
              <td>Greater-than</td>
            </tr>
          </table>
          <p>
            XMLValueToStr also ensures that any NULL character values (Decimal 0) in s are removed.
          </p>
          <p>
            No actions are performed in the method when s is an empty string (<b>''</b>).
          </p>
          <p>
            Use StrToXMLValue to convert a string data type to its representation as XML character data.
          </p>
        </descr>
        <seealso>
          <link id="StrToXMLValue">StrToXMLValue</link>
        </seealso>
      </element>
      <element name="XMLValueToStr.Result">
        <short>Plain string representation for the XML character data.</short>
      </element>
      <element name="XMLValueToStr.s">
        <short>XML character data to convert in the method.</short>
      </element>

      <element name="EncodeLesserAndGreaterThan">
        <short>Converts instance of the reserved characters.</short>
        <descr>
          <p>
            <var>EncodeLesserAndGreaterThan</var> is a <var>String</var> function used to convert instances of the reserved characters in s. EncodeLesserAndGreaterThan is similar to StrToXMLValue, but handles only the '&lt;' and '&gt;' characters, or <b>NULL</b> (<b>Decimal 0</b>) byte values in the string. No actions are performed in the routine when s is an empty string (<b>''</b>). The return value reflects the string value after conversion.
          </p>
        </descr>
        <seealso>
          <link id="StrToXMLValue">StrToXMLValue</link>
        </seealso>
      </element>
      <element name="EncodeLesserAndGreaterThan.Result">
        <short>Converted values from the function.</short>
      </element>
      <element name="EncodeLesserAndGreaterThan.s">
        <short>Values to convert in the routine.</short>
      </element>

      <element name="TFPList">
        <short>Alias for the TList type.</short>
        <descr>
          <p>
            Implemented when the symbol <b>fpc</b> has not been defined.
          </p>
        </descr>
      </element>

    </module>
    <!-- laz2_DOM -->
  </package>
</fpdoc-descriptions>
