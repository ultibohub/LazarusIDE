<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
<package name="lazutils">

<!--
  ====================================================================
    LazLoggerProfiling
  ====================================================================
-->

<module name="LazLoggerProfiling">
<short>Contains classes and routines used for profiling in the Lazarus debugger.</short>
<descr>
  <p>
    This file is part of the <file>LazUtils</file> package.
  </p>
</descr>

<!-- class Visibility: default -->
<element name="TLazLoggerBlockTimer">
<short>
  Provides profiler instrumentation for execution times in a logger class.
</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- variable Visibility: private -->
<element name="TLazLoggerBlockTimer.FMaxDepth"/>
<element name="TLazLoggerBlockTimer.FTimes"/>
<element name="TLazLoggerBlockTimer.FNested"/>
<element name="TLazLoggerBlockTimer.GetNested"/>
<element name="TLazLoggerBlockTimer.GetNested.Result"/>
<element name="TLazLoggerBlockTimer.GetNested.ALevel"/>
<element name="TLazLoggerBlockTimer.GetTimeDiff"/>
<element name="TLazLoggerBlockTimer.GetTimeDiff.Result"/>
<element name="TLazLoggerBlockTimer.GetTimeDiff.ALevel"/>
<element name="TLazLoggerBlockTimer.SetMaxDepth"/>
<element name="TLazLoggerBlockTimer.SetMaxDepth.AValue"/>

<!-- constructor Visibility: public -->
<element name="TLazLoggerBlockTimer.Create">
  <short>Constructor for the class instance.</short>
  <descr>
    <p>
      Create sets the default value for the MaxDepth property (100), and initializes the first time value in the execution time profiler. The initial nesting level is also set (0).
    </p>
  </descr>
  <seealso/>
</element>

<!-- procedure Visibility: public -->
<element name="TLazLoggerBlockTimer.EnterBlock">
<short>
  Captures the execution start time and nesting level when a new block is entered.
</short>
<descr>
</descr>
<seealso/>
</element>
<element name="TLazLoggerBlockTimer.EnterBlock.Sender">
<short>Logger class instance for the block handler.</short>
</element>
<element name="TLazLoggerBlockTimer.EnterBlock.Level">
<short>Current nesting level for the block handler.</short>
</element>

<!-- procedure Visibility: public -->
<element name="TLazLoggerBlockTimer.ExitBlock">
<short>
  Updates the cumulative execution time when a block is exited.
</short>
<descr/>
<seealso/>
</element>
<element name="TLazLoggerBlockTimer.ExitBlock.Sender">
<short>Logger class instance for the block handler.</short>
</element>
<element name="TLazLoggerBlockTimer.ExitBlock.Level">
  <short>Nesting level before the block handler is exited.</short>
</element>

<!-- property Visibility: public -->
<element name="TLazLoggerBlockTimer.MaxDepth">
<short>
  Maximum depth for execution time data in the nested levels for the block handler.
</short>
<descr/>
<seealso/>
</element>

<!-- property Visibility: public -->
<element name="TLazLoggerBlockTimer.TimeDiff">
<short>
  Calculates the cumulative execution time for the block at the specified nesting level.
</short>
<descr>
  <p>
    TimeDiff is a read-only QWord property which provides indexed access to the cumulative execution time for the block at the specified nesting level. The value represents a number of "ticks" or milliseconds as returned from the GetTickCount64 routine in the RTL.
  </p>
  <p>
    The property value is calculated as the difference between the current "tick" value and the execution start time from the parent block. A timer overflow condition is handled in the calculation. The property value is 0 (zero) when ALevel is not in the range 0..MaxDepth.
  </p>
</descr>
<seealso>
</seealso>
</element>
<element name="TLazLoggerBlockTimer.TimeDiff.ALevel">
<short>Nesting level for the block execution time calculated in the method.</short>
</element>

<element name="TLazLoggerBlockTimer.Nested">
<short>Execution time data for the block at the specified nesting level.</short>
<descr/>
<seealso/>
</element>
<element name="TLazLoggerBlockTimer.Nested.ALevel">
  <short>Nesting level for the calculated execution time.</short>
</element>

<!-- class Visibility: default -->
<element name="TLazLoggerBlockMemWatch">
<short>
  Provides profiler instrumentation for memory allocation (heap) in a logger class.
</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: private -->
<element name="TLazLoggerBlockMemWatch.FMaxDepth"/>
<element name="TLazLoggerBlockMemWatch.FMem"/>
<element name="TLazLoggerBlockMemWatch.FNested"/>
<element name="TLazLoggerBlockMemWatch.GetMemDiff"/>
<element name="TLazLoggerBlockMemWatch.GetMemDiff.Result"/>
<element name="TLazLoggerBlockMemWatch.GetMemDiff.ALevel"/>
<element name="TLazLoggerBlockMemWatch.GetNested"/>
<element name="TLazLoggerBlockMemWatch.GetNested.Result"/>
<element name="TLazLoggerBlockMemWatch.GetNested.ALevel"/>
<element name="TLazLoggerBlockMemWatch.SetMaxDepth"/>
<element name="TLazLoggerBlockMemWatch.SetMaxDepth.AValue"/>

<!-- constructor Visibility: public -->
<element name="TLazLoggerBlockMemWatch.Create">
<short>Constructor for the class instance.</short>
<descr>
  <p>
    Create sets the default value for the MaxDepth property (100), and initializes the first values for the memory allocation profiler. The initial nesting level is also set (0).
  </p></descr>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TLazLoggerBlockMemWatch.EnterBlock">
<short>Captures memory allocation and nesting level when a block is entered.</short>
<descr/>
<seealso/>
</element>
<element name="TLazLoggerBlockMemWatch.EnterBlock.Sender">
<short>Logger class instrumented in the profiler tool.</short>
</element>
<element name="TLazLoggerBlockMemWatch.EnterBlock.Level">
<short>Current nesting level for the block.</short>
</element>

<!-- procedure Visibility: public -->
<element name="TLazLoggerBlockMemWatch.ExitBlock">
<short>
  Updates the cumulative memory allocation for the parent block when a block is exited.
</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>
<element name="TLazLoggerBlockMemWatch.ExitBlock.Sender">
<short>Logger class for the block handler.</short>
</element>
<element name="TLazLoggerBlockMemWatch.ExitBlock.Level">
<short></short>
</element>

<!-- property Visibility: public -->
<element name="TLazLoggerBlockMemWatch.MaxDepth">
  <short>
    Maximum depth the nested levels in the block handler.
  </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TLazLoggerBlockMemWatch.MemDiff">
<short>Indicates heap memory allocation for the block at the specified nesting level.</short>
<descr>
  <p>
    MemDiff is a read-only Int64 property which provides indexed access to the cumulative memory usage for a block at a specified nesting level. The value is calculated as the difference between the current memory allocation in the block and the initial memory allocation in the parent block. The property value reflects heap memory allocation.
  </p>
  <p>
    The property value is 0 (zero) if ALevel is not in the range 0..MaxDepth.
  </p>
</descr>
<seealso>
</seealso>
</element>
<element name="TLazLoggerBlockMemWatch.MemDiff.ALevel">
  <short>Nesting level for the block reflected in the property value.</short>
</element>

<!-- property Visibility: public -->
<element name="TLazLoggerBlockMemWatch.Nested">
  <short>Memory allocation data for the block at the specified nesting level.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>
<element name="TLazLoggerBlockMemWatch.Nested.ALevel">
  <short>Nesting level for the block reflected in the property value.</short>
</element>

<!-- function Visibility: default -->
<element name="DbgsMemUsed">
<short>
  Generates a formatted message with memory usage for the parent, current, or child block(s).
</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>
<element name="DbgsMemUsed.Result">
<short></short>
</element>
<element name="DbgsMemUsed.AName">
<short></short>
</element>
<element name="DbgsMemUsed.AFormat">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="DbgsTimeUsed">
  <short>
    Generates a formatted message with execution times for the parent, current, or child blocks.
  </short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>
<element name="DbgsTimeUsed.Result">
<short></short>
</element>
<element name="DbgsTimeUsed.AName">
<short></short>
</element>
<element name="DbgsTimeUsed.AFormat">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="DbgStartTimer">
<short>
  Gets or creates timing data for the specified name, and updates its last execution time.
</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>
<element name="DbgStartTimer.AName">
<short>Name for the timing data retrieved or created in the routine.</short>
</element>

<!-- procedure Visibility: default -->
<element name="DbgStopTimer">
<short>
  Updates timing data using the specified name when it is stopped, and calculates its cumulative execution time.
</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>
<element name="DbgStopTimer.AName">
<short>Name for the timing data updated in the routine.</short>
</element>

<!-- procedure Visibility: default -->
<element name="DbgStartMemWatch">
  <short>
    Gets or creates memory allocation data for the specified name, and initializes its data.
  </short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>
<element name="DbgStartMemWatch.AName">
  <short>Name for the memory allocation data updated in the routine.</short>
</element>

<!-- procedure Visibility: default -->
<element name="DbgStopMemWatch">
  <short>
    Updates memory allocation data using the specified name when it is stopped, and calculates its cumulative usage.
  </short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>
<element name="DbgStopMemWatch.AName">
<short>Name for the associated memory allocation data updated in the routine.</short>
</element>

</module> <!-- LazLoggerProfiling -->

</package>
</fpdoc-descriptions>
